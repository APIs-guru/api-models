openapi: 3.0.0
servers:
  - description: Live Server
    url: //api.rebilly.com/v2.1
  - description: Sandbox Server
    url: //api-sandbox.rebilly.com/v2.1
  - url: 'https://api.rebilly.com/v2.1'
info:
  contact:
    email: integrations@rebilly.com
    name: Rebilly API Support
    url: 'https://www.rebilly.com/contact/'
  description: |
    # Introduction
    The Rebilly API is built on HTTP.  Our API is RESTful.  It has predictable
    resource URLs.  It returns HTTP response codes to indicate errors.  It also
    accepts and returns JSON in the HTTP body.  You can use your favorite
    HTTP/REST library for your programming language to use Rebilly's API, or
    you can use one of our SDKs (currently available in [PHP](https://github.com/Rebilly/rebilly-php)
    and [C#](https://github.com/Rebilly/rebilly-dotnet-client)).

    # Authentication
    When you sign up for an account, you are given your first API key.
    You can generate additional API keys, and delete API keys (as you may
    need to rotate your keys in the future). You authenticate to the
    Rebilly API by providing your secret key in the request header.

    Rebilly offers three forms of authentication:  private key, JSON Web Tokens, and
    public key.
    - private key: authenticates each request by searching for the presence
    of an HTTP header: REB-APIKEY.
    - JWT: authenticates each request by the HTTP header: Authorization.
    - public key: authenticates by the HTTP header: REB-AUTH (read more on this below).

    Rebilly also offers JSON Web Tokens (JWT) authentication, where you can control
    the specific granular permissions and expiration for that JWT.  We call our resource
    for generating JWT [Sessions](#tag/Sessions).

    Rebilly also has a client-side authentication scheme that uses an
    apiUser and HMAC-SHA1 signature (only for the Tokens resource), so
    that you may safely create tokens from the client-side without compromising
    your secret keys.

    Never share your secret keys. Keep them guarded and secure.
    The client-side authentication scheme uses one HTTP header named REB-AUTH.

    <!-- ReDoc-Inject: <security-definitions> -->

    # PHP SDK
    For all PHP SDK examples provided in this spec you will need to configure `$client`.
    You may do it like this:

    ```php
    $client = new Rebilly\Client([
        'apiKey' => 'YourApiKeyHere',
        'baseUrl' => 'https://api.rebilly.com',
    ]);
    ```
  license:
    name: Rebilly
    url: 'https://my.rebilly.com/api/license/'
  termsOfService: 'https://www.rebilly.com/terms/'
  title: Rebilly
  version: '2.1'
  x-apisguru-categories:
    - payment
    - ecommerce
  x-logo:
    backgroundColor: '#0033A0'
    url: 'https://rebilly.github.io/RebillyAPI/rb_apiLogo.svg'
  x-origin:
    - format: swagger
      url: 'http://rebilly.github.io/RebillyAPI/swagger.json'
      version: '2.0'
  x-providerName: rebilly.com
security:
  - ApiKey: []
tags:
  - description: |
      3D Secure is a way to authenticate and protect transactions.  Typically,
      it's only possible to protect the initial transaction in a subscription
      with 3D Secure.
    name: 3D Secure
  - description: |
      Always keep your API Keys private.  In addition to your API Keys, you may use
      JSON Web Tokens (JWT) to authenticate to the API.  See
      our [Sessions](#tag/Sessions) resource for more information.
    name: API Keys
  - description: |
      Bank Accounts are a type of payment instrument used to collect
      ACH (echeck) payments, similar to how a payment
      card would be used to for a credit card payment.
    name: Bank Accounts
  - description: |
      Your blacklists contains values of customerIds, email addresses,
      ipAddresses, bank identification numbers, countries or payment cards that
      you do NOT want to do business with. They are a good tool for managing
      risk. A blacklist entry that expires after a period of time we call a
      greylist.
    name: Blacklists
  - description: |
      Hosted checkout pages.
    name: Checkout Pages
  - description: |
      Contacts are Customer's address book.
      All contact information used in Invoices, Subscriptions, Transacions, etc is enlisted here. Hovewer, changing a Contact won't change corresponding contact information in related resources
    name: Contacts
  - description: |
      Coupons allows to apply different types of discounts to Invoices, Subscriptions and Plans. Redeemed Coupons will be applied only to Invoices with the same currency.
    name: Coupons
  - description: |
      Customers are your customers, sometimes known as accounts, clients,
      members, patrons, or players in other systems.
    name: Customers
  - description: |
      Create authentication credentials, login, logout, and verify your customers.
    name: Customer Authentication
  - description: |
      If system events can't solve your problems, you are able to create a custom event
      that can fit your requirements, and use it to solve your own business logic.
    name: Custom Events
  - description: |
      "Don't conform to the rules. Create the rules."
      Rather than adapt your workflow and business, Rebilly can align with your business
      objectives by giving you the power to automate certain behaviors when key events happen.
      You can use this to your advantage to mitigate risk, maximize conversions and minimize costs.
      You have the controls at your fingertips here. If you need more control,
      or help dialing in on a strategy, feel free to contact us.

      When an event happens, it triggers the evaluation of conditions (that you set up),
      in order from top to bottom. If the condition is met, the corresponding actions are executed.
      The conditions continue to be checked until either all of the conditions have been executed,
      or a special "stop" action is executed.
    name: Custom Rules
  - description: |
      Create additional custom fields for particular resources.  You may name,
      describe, and determine the type of the schema.
    name: Custom Fields
  - description: |
      Get and create SMTP and Webhook credential hashes.
    name: Credential Hashes
  - description: |
      Handle disputes (chargebacks and retrievals).
    name: Disputes
  - description: |
      Send automated emails through our system by connecting to your third party
      SMTP server (or your third party email service provider's SMTP server).
    name: Email Credentials
  - description: |
      A File is an entity that can store a phyiscal file and some metadata. It also provides an easy access to
      its size, mime-type, user-defined tags and description thus allowing easy sorting and searching among stored
      files.
      There are several methods of file uploading available: multipart/form-data encoded form, RAW POST (by sending
      file contents as POST body), fetching from URL (by providing the file URL via 'url' param)
      Attachment is an entity that is used to link a File to one or multiple objects like Customer, Dispute, Payment,
      Transaction, Subscription, Plan, Product, Invoice, Note. That allows to quickly find and use files related to
      those specific entities.
    name: Files
  - description: |
      Gateway accounts connect payment request to third party networks and platforms.
    name: Gateway Accounts
  - description: |
      Invoices leave a record for both you and your customer of the products sold.
    name: Invoices
  - description: |
      Layouts are used to hold collections of plans. A layout can be used to
      power a pricing page. You can make multiple layouts, and use rules to
      target them to different audiences.
    name: Layouts
  - description: |
      Lists contain sets of values and may be referenced within Rules criteria.

      You may grant permissions to edit Lists to different people than those who can edit Rules.
      It may be useful if your workflow involves frequent updates to value sets used in criteria.
    name: Lists
  - description: |
      Migrate payment cards from one gateway to another.
    name: Migrate payment cards
  - description: |
      Leave notes on a customer record to have a handy location to share with
      others who may interface with the customer.  It's great for customer service.
    name: Notes
  - description: |
      Organizations include the name and address of the entities related to your
      account. An account may be multi-national, and support multiple
      organizations. Note: Organizations are share between "Live" and "Sandbox"
    name: Organizations
  - description: |
      Collect money from your customers with payments.  You can schedule a payment
      to occur in the future.  You can assign a dunning schedule to a payment to collect
      in the case of a decline.

      Some payments may be, what we term, suspended payments.  These types of payments
      require user interaction.  For example, an initial PayPal purchase, a 3D Secure
      purchase, China Union Pay, and more require the customer's interaction to
      complete the payment.  We call these a "suspended" payment flow.
    name: Payments
  - description: |
      Payment cards are a type of payment instrument used for credit and debit card
      sales.  Rebilly securely vaults the full payment card number, and can pass it
      onward securely to any gateway account to transact business.
    name: Payment Cards
  - description: |
      Payment tokens are used to reduce the scope of PCI DSS compliance.  A payment
      token can be made using a different authentication scheme (refer to the public key
      authentication scheme in the Authentication section), which allows you to
      create a payment tokeng directly from the browser, bypassing the need to send
      sensitive cardholder info to your servers.  We recommend using this with our
      Rebilly.js library, which helps you wire a form into this API resource and create
      payment tokens.
    name: Payment Tokens
  - description: |
      Plans are a template for making a subscription.  For example, you may have a plan
      that has a 30-day free trial followed by a recurring charge of $19.95 per month
      until canceled.  The combination of the plan and a request to make a subscription
      will apply those instructions to create the invoices according to the plan's
      schedule.
    name: Plans
  - description: |
      Proposed:  Your product includes digital goods, services, and physical goods.
    name: Products
  - description: |
      The Rebilly Reporting API is currently experimental.  You may see
      the [Reports API Documentation here](https://rebilly.github.io/RebillyReportsAPI/).
    name: Reports
  - description: |
      "Don't conform to the rules. Create the rules."
      Rather than adapt your workflow and business, Rebilly can align with your business
      objectives by giving you the power to automate certain behaviors when key events happen.
      You can use this to your advantage to mitigate risk, maximize conversions and minimize costs.
      You have the controls at your fingertips here. If you need more control,
      or help dialing in on a strategy, feel free to contact us.

      When an event happens, it triggers the evaluation of conditions (that you set up),
      in order from top to bottom. If the condition is met, the corresponding actions are executed.
      The conditions continue to be checked until either all of the conditions have been executed,
      or a special "stop" action is executed.
    name: Rules
  - description: |
      A session contains a token, which is a JSON Web Token.  The token is created
      with a user's signin credentials.

      This token can be used to authenticate to the API.  In addition, the session can be set to
      expire at a particular time, and has very granular control over permissions.
      Use the token to then authenticate for further requests to the Rebilly API.

      The token should be kept private, but could be stored on the user's browser
      client to simulate a "session."
    name: Sessions
  - description: |
      A shipping zone contains regions and countries that you ship to. Each shipping zone has its own shipping rates.
    name: Shipping Zones
  - description: |
      Check the status of the Rebilly API (no authentication required).
    name: Status
  - description: |
      A subscription applies a plan's template to create invoices for a customer at the
      appropriate scheduled intervals.  A subscription may also determine if the payment
      is collected automatically (with autopay set true).
    name: Subscriptions
  - description: |
      Proposed: You can map a product to a tax category.  The tax category is used by
      tax providers to calculate taxes for invoices.
    name: Taxes
  - description: |
      Tracking is a layer for accessing all the activity (API requests,
      subscriptions, webhooks, events, etc.), thus providing easier
      debugging and issues auditing.
    name: Tracking
  - description: |
      Get and refund transactions.
    name: Transactions
  - description: |
      A User represents a person who can login to Rebilly, and take actions subject to
      their granted permissions.
    name: Users
  - description: |
      A Website represents the website/brand that customers interact with... You
      could think of it like a brand.  For example, Nestle owns Perrier and Purina
      and PowerBar.

      We recognize that some enterprises have more than one website (or brand).  The
      website is related to each invoice and each payment gateway account.  This feature
      would allow you to have gateway accounts that are related to multiple websites, or
      exclusive to particular websites.  And gives you more control over your business.
    name: Websites
  - description: |
      Webhooks are designed to notify your systems when certain/all registered events happen in near real-time.
      They allow you to collect information about those events. Rebilly can send these information via
      POST to an URL of your choice.
    name: Webhooks
paths:
  /3dsecure:
    get:
      parameters:
        - $ref: '#/components/parameters/collectionLimit'
        - $ref: '#/components/parameters/collectionOffset'
      responses:
        '200':
          description: A list was retrieved successfully
          headers:
            Pagination-Limit:
              description: Items per page limit
              schema:
                type: integer
            Pagination-Offset:
              description: Pagination offset
              schema:
                type: integer
            Pagination-Total:
              description: Total items count
              schema:
                type: integer
            Rate-Limit-Limit:
              description: The number of allowed requests in the current period
              schema:
                type: integer
            Rate-Limit-Remaining:
              description: The number of remaining requests in the current period
              schema:
                type: integer
            Rate-Limit-Reset:
              description: |
                The date in format defined by [RFC 822](https://www.w3.org/Protocols/rfc2616/rfc2616-sec3.html#sec3.3.1)
                when the current period will reset
              schema:
                type: string
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/ThreeDSecure'
                type: array
        '401':
          $ref: '#/components/responses/AccessForbidden'
      summary: Retrieve a list of ThreeDSecure entries
      tags:
        - 3D Secure
    post:
      description: |
        Create a ThreeDSecure entry
      responses:
        '201':
          description: ThreeDSecure entry was created
          headers:
            Rate-Limit-Limit:
              description: The number of allowed requests in the current period
              schema:
                type: integer
            Rate-Limit-Remaining:
              description: The number of remaining requests in the current period
              schema:
                type: integer
            Rate-Limit-Reset:
              description: |
                The date in format defined by [RFC 822](https://www.w3.org/Protocols/rfc2616/rfc2616-sec3.html#sec3.3.1)
                when the current period will reset
              schema:
                type: string
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThreeDSecure'
        '401':
          $ref: '#/components/responses/AccessForbidden'
        '422':
          $ref: '#/components/responses/InvalidDataError'
      summary: Create a ThreeDSecure entry
      tags:
        - 3D Secure
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ThreeDSecure'
        description: ThreeDSecure resource
        required: true
  '/3dsecure/{id}':
    get:
      description: |
        Retrieve a ThreeDSecure entry with specified identifier string
      responses:
        '200':
          description: ThreeDSecure entry was retrieved successfully
          headers:
            Rate-Limit-Limit:
              description: The number of allowed requests in the current period
              schema:
                type: integer
            Rate-Limit-Remaining:
              description: The number of remaining requests in the current period
              schema:
                type: integer
            Rate-Limit-Reset:
              description: |
                The date in format defined by [RFC 822](https://www.w3.org/Protocols/rfc2616/rfc2616-sec3.html#sec3.3.1)
                when the current period will reset
              schema:
                type: string
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThreeDSecure'
        '401':
          $ref: '#/components/responses/AccessForbidden'
        '404':
          $ref: '#/components/responses/NotFound'
      summary: Retrieve a ThreeDSecure entry
      tags:
        - 3D Secure
    parameters:
      - $ref: '#/components/parameters/resourceId'
  '/activation/{token}':
    parameters:
      - description: The token string
        in: path
        name: token
        required: true
        schema:
          type: string
    post:
      description: |
        Sends a token to activate user account
      responses:
        '204':
          description: User account was activated
          headers:
            Rate-Limit-Limit:
              description: The number of allowed requests in the current period
              schema:
                type: integer
            Rate-Limit-Remaining:
              description: The number of remaining requests in the current period
              schema:
                type: integer
            Rate-Limit-Reset:
              description: |
                The date in format defined by [RFC 822](https://www.w3.org/Protocols/rfc2616/rfc2616-sec3.html#sec3.3.1)
                when the current period will reset
              schema:
                type: string
        '422':
          description: Invalid token was sent
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidError'
      security:
        - RebAuth: []
      summary: Sends a token to activate user account
      tags:
        - Users
      x-code-samples:
        - lang: PHP
          source: |
            try {
                $client->users()->activate('token');
            } catch (UnprocessableEntityException $e) {
                echo $e->getMessage();
            }
  /api-keys:
    get:
      description: |
        Retrieve a list of api keys
      parameters:
        - $ref: '#/components/parameters/collectionLimit'
        - $ref: '#/components/parameters/collectionOffset'
      responses:
        '200':
          description: A list of api keys was retrieved successfully
          headers:
            Pagination-Limit:
              description: Items per page limit
              schema:
                type: integer
            Pagination-Offset:
              description: Pagination offset
              schema:
                type: integer
            Pagination-Total:
              description: Total items count
              schema:
                type: integer
            Rate-Limit-Limit:
              description: The number of allowed requests in the current period
              schema:
                type: integer
            Rate-Limit-Remaining:
              description: The number of remaining requests in the current period
              schema:
                type: integer
            Rate-Limit-Reset:
              description: |
                The date in format defined by [RFC 822](https://www.w3.org/Protocols/rfc2616/rfc2616-sec3.html#sec3.3.1)
                when the current period will reset
              schema:
                type: string
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/ApiKey'
                type: array
        '401':
          $ref: '#/components/responses/AccessForbidden'
      summary: Retrieve a list of api keys
      tags:
        - API Keys
      x-code-samples:
        - lang: PHP
          source: |
            $apiKeys = $client->apiKeys()->search([
                'filter' => 'description:Test',
            ]);
    post:
      description: |
        Create an api key
      responses:
        '201':
          description: Api Key was created
          headers:
            Rate-Limit-Limit:
              description: The number of allowed requests in the current period
              schema:
                type: integer
            Rate-Limit-Remaining:
              description: The number of remaining requests in the current period
              schema:
                type: integer
            Rate-Limit-Reset:
              description: |
                The date in format defined by [RFC 822](https://www.w3.org/Protocols/rfc2616/rfc2616-sec3.html#sec3.3.1)
                when the current period will reset
              schema:
                type: string
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiKey'
        '401':
          $ref: '#/components/responses/AccessForbidden'
        '422':
          description: Invalid data was sent
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidError'
      summary: Create an api key
      tags:
        - API Keys
      x-code-samples:
        - lang: PHP
          source: |
            $apiKeyForm = new Rebilly\Entities\ApiKey();
            $apiKeyForm->setDescription('Test');
            $apiKeyForm->setDatetimeFormat($apiKeyForm::DATETIME_FORMAT_MYSQL);

            try {
                $apiKey = $client->apiKeys()->create($apiKeyForm);
            } catch (UnprocessableEntityException $e) {
                echo $e->getMessage();
            }
      requestBody:
        $ref: '#/components/requestBodies/ApiKey'
  '/api-keys/{id}':
    delete:
      description: |
        Delete api key with predefined identifier string
      responses:
        '204':
          description: ApiKey was deleted
          headers:
            Rate-Limit-Limit:
              description: The number of allowed requests in the current period
              schema:
                type: integer
            Rate-Limit-Remaining:
              description: The number of remaining requests in the current period
              schema:
                type: integer
            Rate-Limit-Reset:
              description: |
                The date in format defined by [RFC 822](https://www.w3.org/Protocols/rfc2616/rfc2616-sec3.html#sec3.3.1)
                when the current period will reset
              schema:
                type: string
        '401':
          $ref: '#/components/responses/AccessForbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '409':
          $ref: '#/components/responses/Conflict'
      summary: Delete api key
      tags:
        - API Keys
      x-code-samples:
        - lang: PHP
          source: |
            $client->apiKeys()->delete('apiKeyID');
    get:
      description: |
        Retrieve api key with specified identifier string
      responses:
        '200':
          description: Api key was retrieved successfully
          headers:
            Rate-Limit-Limit:
              description: The number of allowed requests in the current period
              schema:
                type: integer
            Rate-Limit-Remaining:
              description: The number of remaining requests in the current period
              schema:
                type: integer
            Rate-Limit-Reset:
              description: |
                The date in format defined by [RFC 822](https://www.w3.org/Protocols/rfc2616/rfc2616-sec3.html#sec3.3.1)
                when the current period will reset
              schema:
                type: string
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiKey'
        '401':
          $ref: '#/components/responses/AccessForbidden'
        '404':
          $ref: '#/components/responses/NotFound'
      summary: Retrieve api key
      tags:
        - API Keys
      x-code-samples:
        - lang: PHP
          source: |
            $apiKeys = $client->apiKeys()->load('apiKeyID');
    parameters:
      - $ref: '#/components/parameters/resourceId'
    put:
      description: |
        Create or update api key with predefined identifier string
      responses:
        '200':
          description: ApiKey was updated
          headers:
            Rate-Limit-Limit:
              description: The number of allowed requests in the current period
              schema:
                type: integer
            Rate-Limit-Remaining:
              description: The number of remaining requests in the current period
              schema:
                type: integer
            Rate-Limit-Reset:
              description: |
                The date in format defined by [RFC 822](https://www.w3.org/Protocols/rfc2616/rfc2616-sec3.html#sec3.3.1)
                when the current period will reset
              schema:
                type: string
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiKey'
        '201':
          description: ApiKey was created
          headers:
            Rate-Limit-Limit:
              description: The number of allowed requests in the current period
              schema:
                type: integer
            Rate-Limit-Remaining:
              description: The number of remaining requests in the current period
              schema:
                type: integer
            Rate-Limit-Reset:
              description: |
                The date in format defined by [RFC 822](https://www.w3.org/Protocols/rfc2616/rfc2616-sec3.html#sec3.3.1)
                when the current period will reset
              schema:
                type: string
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiKey'
        '401':
          $ref: '#/components/responses/AccessForbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '422':
          $ref: '#/components/responses/InvalidDataError'
      summary: Create or update api key with predefined ID
      tags:
        - API Keys
      x-code-samples:
        - lang: PHP
          source: |
            $apiKeyForm = new Rebilly\Entities\ApiKey();
            $apiKeyForm->setDescription('TestPut');
            $apiKeyForm->setDatetimeFormat($apiKeyForm::DATETIME_FORMAT_MYSQL);

            try {
                $apiKey = $client->apiKeys()->update('apiKeyID', $apiKeyForm);
            } catch (UnprocessableEntityException $e) {
                echo $e->getMessage();
            }
      requestBody:
        $ref: '#/components/requestBodies/ApiKey'
  /attachments:
    get:
      description: |
        Retrieve a list of Attachments
      parameters:
        - $ref: '#/components/parameters/collectionLimit'
        - $ref: '#/components/parameters/collectionOffset'
        - $ref: '#/components/parameters/collectionFilter'
        - $ref: '#/components/parameters/collectionQuery'
        - $ref: '#/components/parameters/collectionExpand'
        - $ref: '#/components/parameters/collectionFields'
        - description: The collection items sort field and order (prefix with "-" for descending sort).
          in: query
          name: sort
          style: form
          schema:
            type: array
            items:
              enum:
                - id
                - '-id'
                - name
                - '-name'
                - relatedId
                - '-relatedId'
                - relatedType
                - '-relatedType'
                - fileId
                - '-fileId'
                - createdTime
                - '-createdTime'
                - updatedTime
                - '-updatedTime'
              type: string
      responses:
        '200':
          description: A list of Attachments was retrieved successfully
          headers:
            Pagination-Limit:
              description: Items per page limit
              schema:
                type: integer
            Pagination-Offset:
              description: Pagination offset
              schema:
                type: integer
            Pagination-Total:
              description: Total items count
              schema:
                type: integer
            Rate-Limit-Limit:
              description: The number of allowed requests in the current period
              schema:
                type: integer
            Rate-Limit-Remaining:
              description: The number of remaining requests in the current period
              schema:
                type: integer
            Rate-Limit-Reset:
              description: |
                The date in format defined by [RFC 822](https://www.w3.org/Protocols/rfc2616/rfc2616-sec3.html#sec3.3.1)
                when the current period will reset
              schema:
                type: string
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/Attachment'
                type: array
        '401':
          $ref: '#/components/responses/AccessForbidden'
      summary: Retrieve a list of Attachments
      tags:
        - Files
      x-code-samples:
        - lang: PHP
          source: |
            $attachments = $client->attachments()->search([
                'filter' => 'relatedType:customer',
            ]);
    post:
      description: |
        Create an Attachment
      responses:
        '201':
          description: Attachment was created
          headers:
            Rate-Limit-Limit:
              description: The number of allowed requests in the current period
              schema:
                type: integer
            Rate-Limit-Remaining:
              description: The number of remaining requests in the current period
              schema:
                type: integer
            Rate-Limit-Reset:
              description: |
                The date in format defined by [RFC 822](https://www.w3.org/Protocols/rfc2616/rfc2616-sec3.html#sec3.3.1)
                when the current period will reset
              schema:
                type: string
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Attachment'
        '401':
          $ref: '#/components/responses/AccessForbidden'
        '422':
          $ref: '#/components/responses/InvalidDataError'
      summary: Create an Attachment
      tags:
        - Files
      x-code-samples:
        - lang: PHP
          source: |
            $attachmentForm = new Rebilly\Entities\Attachment();
            $attachmentForm->setFileId('fileId');
            $attachmentForm->setRelatedType($attachmentForm::TYPE_CUSTOMER);
            $attachmentForm->setRelatedId('customerId');

            try {
                $attachment = $client->attachments()->create($attachmentForm);
            } catch (UnprocessableEntityException $e) {
                echo $e->getMessage();
            }
      requestBody:
        $ref: '#/components/requestBodies/Attachment'
  '/attachments/{id}':
    delete:
      description: |
        Delete the Attachment with predefined identifier string
      responses:
        '204':
          description: Attachment was deleted
          headers:
            Rate-Limit-Limit:
              description: The number of allowed requests in the current period
              schema:
                type: integer
            Rate-Limit-Remaining:
              description: The number of remaining requests in the current period
              schema:
                type: integer
            Rate-Limit-Reset:
              description: |
                The date in format defined by [RFC 822](https://www.w3.org/Protocols/rfc2616/rfc2616-sec3.html#sec3.3.1)
                when the current period will reset
              schema:
                type: string
        '401':
          $ref: '#/components/responses/AccessForbidden'
        '404':
          $ref: '#/components/responses/NotFound'
      summary: Delete an Attachment
      tags:
        - Files
      x-code-samples:
        - lang: PHP
          source: |
            $client->attachments()->delete('attachmentId');
    get:
      description: |
        Retrieve a Attachment with specified identifier string
      responses:
        '200':
          description: Attachment was retrieved successfully
          headers:
            Rate-Limit-Limit:
              description: The number of allowed requests in the current period
              schema:
                type: integer
            Rate-Limit-Remaining:
              description: The number of remaining requests in the current period
              schema:
                type: integer
            Rate-Limit-Reset:
              description: |
                The date in format defined by [RFC 822](https://www.w3.org/Protocols/rfc2616/rfc2616-sec3.html#sec3.3.1)
                when the current period will reset
              schema:
                type: string
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Attachment'
        '401':
          $ref: '#/components/responses/AccessForbidden'
        '404':
          $ref: '#/components/responses/NotFound'
      summary: Retrieve an Attachment
      tags:
        - Files
      x-code-samples:
        - lang: PHP
          source: |
            $attachment = $client->attachments()->load('attachmentId');
    parameters:
      - $ref: '#/components/parameters/resourceId'
    put:
      description: |
        Update the Attachment with predefined ID
      responses:
        '200':
          description: Attachment was updated
          headers:
            Rate-Limit-Limit:
              description: The number of allowed requests in the current period
              schema:
                type: integer
            Rate-Limit-Remaining:
              description: The number of remaining requests in the current period
              schema:
                type: integer
            Rate-Limit-Reset:
              description: |
                The date in format defined by [RFC 822](https://www.w3.org/Protocols/rfc2616/rfc2616-sec3.html#sec3.3.1)
                when the current period will reset
              schema:
                type: string
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Attachment'
        '201':
          description: Attachment was created
          headers:
            Rate-Limit-Limit:
              description: The number of allowed requests in the current period
              schema:
                type: integer
            Rate-Limit-Remaining:
              description: The number of remaining requests in the current period
              schema:
                type: integer
            Rate-Limit-Reset:
              description: |
                The date in format defined by [RFC 822](https://www.w3.org/Protocols/rfc2616/rfc2616-sec3.html#sec3.3.1)
                when the current period will reset
              schema:
                type: string
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Attachment'
        '401':
          $ref: '#/components/responses/AccessForbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '422':
          description: Invalid data was sent
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidError'
      summary: Update the Attachment with predefined ID
      tags:
        - Files
      x-code-samples:
        - lang: PHP
          source: |
            $attachmentForm = new Rebilly\Entities\Attachment();
            $attachmentForm->setFileId('fileId');
            $attachmentForm->setRelatedType($attachmentForm::TYPE_CUSTOMER);
            $attachmentForm->setRelatedId('customerId');

            try {
                $attachment = $client->attachments()->update('attachmentId', $attachmentForm);
            } catch (UnprocessableEntityException $e) {
                echo $e->getMessage();
            }
      requestBody:
        $ref: '#/components/requestBodies/Attachment'
  /authentication-options:
    get:
      description: |
        Read current authentication options
      responses:
        '200':
          description: Current authentication options was retrieved successfully
          headers:
            Rate-Limit-Limit:
              description: The number of allowed requests in the current period
              schema:
                type: integer
            Rate-Limit-Remaining:
              description: The number of remaining requests in the current period
              schema:
                type: integer
            Rate-Limit-Reset:
              description: |
                The date in format defined by [RFC 822](https://www.w3.org/Protocols/rfc2616/rfc2616-sec3.html#sec3.3.1)
                when the current period will reset
              schema:
                type: string
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/AuthenticationOptions'
                type: array
        '401':
          $ref: '#/components/responses/AccessForbidden'
      summary: Read current authentication options
      tags:
        - Customer Authentication
      x-code-samples:
        - lang: PHP
          source: |
            $authenticationOptions = $client->authenticationOptions()->load();
    put:
      description: |
        Change options
      responses:
        '200':
          description: Authentication Options were updated
          headers:
            Rate-Limit-Limit:
              description: The number of allowed requests in the current period
              schema:
                type: integer
            Rate-Limit-Remaining:
              description: The number of remaining requests in the current period
              schema:
                type: integer
            Rate-Limit-Reset:
              description: |
                The date in format defined by [RFC 822](https://www.w3.org/Protocols/rfc2616/rfc2616-sec3.html#sec3.3.1)
                when the current period will reset
              schema:
                type: string
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AuthenticationOptions'
        '401':
          $ref: '#/components/responses/AccessForbidden'
        '422':
          description: Invalid data was sent
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidError'
      summary: Change authentication options
      tags:
        - Customer Authentication
      x-code-samples:
        - lang: PHP
          source: |
            $authenticationOptionsForm = new Rebilly\Entities\AuthenticationOptions();
            // Regular expression below matches any password with 6+ length that contains alphabet symbols and/or numbers.
            $authenticationOptionsForm->setPasswordPattern('/^[a-zA-Z0-9]{6,}$/');

            try {
                $authenticationOptions = $client->authenticationOptions()->update($authenticationOptionsForm);
            } catch (UnprocessableEntityException $e) {
                echo $e->getMessage();
            }
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AuthenticationOptions'
        description: Authentication Options resource
        required: true
  /authentication-tokens:
    get:
      description: |
        Retrieve a list of auth tokens
      parameters:
        - $ref: '#/components/parameters/collectionLimit'
        - $ref: '#/components/parameters/collectionOffset'
      responses:
        '200':
          description: A list of auth tokens was retrieved successfully
          headers:
            Pagination-Limit:
              description: Items per page limit
              schema:
                type: integer
            Pagination-Offset:
              description: Pagination offset
              schema:
                type: integer
            Pagination-Total:
              description: Total items count
              schema:
                type: integer
            Rate-Limit-Limit:
              description: The number of allowed requests in the current period
              schema:
                type: integer
            Rate-Limit-Remaining:
              description: The number of remaining requests in the current period
              schema:
                type: integer
            Rate-Limit-Reset:
              description: |
                The date in format defined by [RFC 822](https://www.w3.org/Protocols/rfc2616/rfc2616-sec3.html#sec3.3.1)
                when the current period will reset
              schema:
                type: string
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/AuthenticationToken'
                type: array
        '401':
          $ref: '#/components/responses/AccessForbidden'
      summary: Retrieve a list of auth tokens
      tags:
        - Customer Authentication
      x-code-samples:
        - lang: PHP
          source: |
            $authenticationTokens = $client->authenticationTokens()->search([
                'filter' => 'customerId:testCustomer',
            ]);
    post:
      description: |
        Login a user (customer)
      responses:
        '201':
          description: Login successful
          headers:
            Rate-Limit-Limit:
              description: The number of allowed requests in the current period
              schema:
                type: integer
            Rate-Limit-Remaining:
              description: The number of remaining requests in the current period
              schema:
                type: integer
            Rate-Limit-Reset:
              description: |
                The date in format defined by [RFC 822](https://www.w3.org/Protocols/rfc2616/rfc2616-sec3.html#sec3.3.1)
                when the current period will reset
              schema:
                type: string
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AuthenticationToken'
        '401':
          $ref: '#/components/responses/AccessForbidden'
        '422':
          description: Invalid data was sent
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidError'
      summary: Login
      tags:
        - Customer Authentication
      x-code-samples:
        - lang: PHP
          source: |
            $authenticationForm = new Rebilly\Entities\AuthenticationToken();
            $authenticationForm->setUsername('username');
            $authenticationForm->setPassword('test123');

            try {
                $authenticationToken = $client->authenticationTokens()->login($authenticationForm);
            } catch (UnprocessableEntityException $e) {
                echo $e->getMessage();
            }
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AuthenticationToken'
        description: AuthenticationToken resource
        required: true
  '/authentication-tokens/{token}':
    delete:
      description: |
        Logout a user
      responses:
        '204':
          description: User was logged out
          headers:
            Rate-Limit-Limit:
              description: The number of allowed requests in the current period
              schema:
                type: integer
            Rate-Limit-Remaining:
              description: The number of remaining requests in the current period
              schema:
                type: integer
            Rate-Limit-Reset:
              description: |
                The date in format defined by [RFC 822](https://www.w3.org/Protocols/rfc2616/rfc2616-sec3.html#sec3.3.1)
                when the current period will reset
              schema:
                type: string
        '401':
          $ref: '#/components/responses/AccessForbidden'
        '404':
          $ref: '#/components/responses/NotFound'
      summary: Logout a user
      tags:
        - Customer Authentication
      x-code-samples:
        - lang: PHP
          source: |
            $client->authenticationTokens()->logout('token');
    get:
      description: |
        Verify an authentication token
      responses:
        '200':
          description: Authentication Token was verified
          headers:
            Rate-Limit-Limit:
              description: The number of allowed requests in the current period
              schema:
                type: integer
            Rate-Limit-Remaining:
              description: The number of remaining requests in the current period
              schema:
                type: integer
            Rate-Limit-Reset:
              description: |
                The date in format defined by [RFC 822](https://www.w3.org/Protocols/rfc2616/rfc2616-sec3.html#sec3.3.1)
                when the current period will reset
              schema:
                type: string
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AuthenticationToken'
        '401':
          $ref: '#/components/responses/AccessForbidden'
        '404':
          $ref: '#/components/responses/NotFound'
      summary: Verify
      tags:
        - Customer Authentication
      x-code-samples:
        - lang: PHP
          source: |
            $isVerified = $client->authenticationTokens()->verify('token');
    parameters:
      - description: The token identifier string
        in: path
        name: token
        required: true
        schema:
          type: string
  /bank-accounts:
    get:
      description: |
        Retrieve a list of Bank Accounts
      parameters:
        - $ref: '#/components/parameters/collectionLimit'
        - $ref: '#/components/parameters/collectionOffset'
      responses:
        '200':
          description: A list of Bank Accounts was retrieved successfully
          headers:
            Pagination-Limit:
              description: Items per page limit
              schema:
                type: integer
            Pagination-Offset:
              description: Pagination offset
              schema:
                type: integer
            Pagination-Total:
              description: Total items count
              schema:
                type: integer
            Rate-Limit-Limit:
              description: The number of allowed requests in the current period
              schema:
                type: integer
            Rate-Limit-Remaining:
              description: The number of remaining requests in the current period
              schema:
                type: integer
            Rate-Limit-Reset:
              description: |
                The date in format defined by [RFC 822](https://www.w3.org/Protocols/rfc2616/rfc2616-sec3.html#sec3.3.1)
                when the current period will reset
              schema:
                type: string
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/BankAccount'
                type: array
        '401':
          $ref: '#/components/responses/AccessForbidden'
      summary: Retrieve a list of bank accounts
      tags:
        - Bank Accounts
      x-code-samples:
        - lang: PHP
          source: |
            $bankAccounts = $client->bankAccounts()->search([
                'filter' => 'customerId:testId',
            ]);
    post:
      description: |
        Create a Bank Account
      responses:
        '201':
          description: Bank Account was created
          headers:
            Rate-Limit-Limit:
              description: The number of allowed requests in the current period
              schema:
                type: integer
            Rate-Limit-Remaining:
              description: The number of remaining requests in the current period
              schema:
                type: integer
            Rate-Limit-Reset:
              description: |
                The date in format defined by [RFC 822](https://www.w3.org/Protocols/rfc2616/rfc2616-sec3.html#sec3.3.1)
                when the current period will reset
              schema:
                type: string
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BankAccount'
        '401':
          $ref: '#/components/responses/AccessForbidden'
        '422':
          description: Invalid data was sent
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidError'
      summary: Create a Bank Account
      tags:
        - Bank Accounts
      x-code-samples:
        - lang: PHP
          source: |
            $bankAccountForm = new Rebilly\Entities\BankAccount();
            $bankAccountForm->setCustomerId('customerId');
            $bankAccountForm->setContactId('contactId');
            $bankAccountForm->setRoutingNumber('0123456');
            $bankAccountForm->setAccountNumber('0123456');
            $bankAccountForm->setAccountType('checking');

            try {
                $bankAccount = $client->bankAccounts()->create($bankAccountForm);
            } catch (UnprocessableEntityException $e) {
                echo $e->getMessage();
            }
      requestBody:
        $ref: '#/components/requestBodies/BankAccount'
  '/bank-accounts/{id}':
    get:
      description: |
        Retrieve a Bank Account with specified identifier string
      responses:
        '200':
          description: BankAccount was retrieved successfully
          headers:
            Rate-Limit-Limit:
              description: The number of allowed requests in the current period
              schema:
                type: integer
            Rate-Limit-Remaining:
              description: The number of remaining requests in the current period
              schema:
                type: integer
            Rate-Limit-Reset:
              description: |
                The date in format defined by [RFC 822](https://www.w3.org/Protocols/rfc2616/rfc2616-sec3.html#sec3.3.1)
                when the current period will reset
              schema:
                type: string
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BankAccount'
        '401':
          $ref: '#/components/responses/AccessForbidden'
        '404':
          $ref: '#/components/responses/NotFound'
      summary: Retrieve a Bank Account
      tags:
        - Bank Accounts
      x-code-samples:
        - lang: PHP
          source: |
            $bankAccount = $client->bankAccounts()->load('bankAccountId');
    parameters:
      - $ref: '#/components/parameters/resourceId'
    put:
      description: |
        Create or update a BankAccount with predefined identifier string
      responses:
        '200':
          description: BankAccount was updated
          headers:
            Rate-Limit-Limit:
              description: The number of allowed requests in the current period
              schema:
                type: integer
            Rate-Limit-Remaining:
              description: The number of remaining requests in the current period
              schema:
                type: integer
            Rate-Limit-Reset:
              description: |
                The date in format defined by [RFC 822](https://www.w3.org/Protocols/rfc2616/rfc2616-sec3.html#sec3.3.1)
                when the current period will reset
              schema:
                type: string
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BankAccount'
        '201':
          description: BankAccount was created
          headers:
            Rate-Limit-Limit:
              description: The number of allowed requests in the current period
              schema:
                type: integer
            Rate-Limit-Remaining:
              description: The number of remaining requests in the current period
              schema:
                type: integer
            Rate-Limit-Reset:
              description: |
                The date in format defined by [RFC 822](https://www.w3.org/Protocols/rfc2616/rfc2616-sec3.html#sec3.3.1)
                when the current period will reset
              schema:
                type: string
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BankAccount'
        '401':
          $ref: '#/components/responses/AccessForbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '422':
          description: Invalid data was sent
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidError'
      summary: Create a BankAccount with predefined ID
      tags:
        - Bank Accounts
      x-code-samples:
        - lang: PHP
          source: |
            $bankAccountForm = new Rebilly\Entities\BankAccount();
            $bankAccountForm->setCustomerId('customerId');
            $bankAccountForm->setContactId('contactId');
            $bankAccountForm->setRoutingNumber('0123456');
            $bankAccountForm->setAccountNumber('0123456');
            $bankAccountForm->setAccountType('checking');

            try {
                $bankAccount = $client->customers()->create($bankAccountForm, 'bankAccountId');
            } catch (UnprocessableEntityException $e) {
                echo $e->getMessage();
            }
      requestBody:
        $ref: '#/components/requestBodies/BankAccount'
  '/bank-accounts/{id}/deactivation':
    parameters:
      - $ref: '#/components/parameters/resourceId'
    post:
      description: |
        Deactivate a Bank Account
      responses:
        '201':
          description: Deactivated successful
          headers:
            Rate-Limit-Limit:
              description: The number of allowed requests in the current period
              schema:
                type: integer
            Rate-Limit-Remaining:
              description: The number of remaining requests in the current period
              schema:
                type: integer
            Rate-Limit-Reset:
              description: |
                The date in format defined by [RFC 822](https://www.w3.org/Protocols/rfc2616/rfc2616-sec3.html#sec3.3.1)
                when the current period will reset
              schema:
                type: string
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BankAccount'
        '401':
          $ref: '#/components/responses/AccessForbidden'
        '422':
          description: Invalid data was sent
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidError'
      summary: Deactivate a Bank Account
      tags:
        - Bank Accounts
      x-code-samples:
        - lang: PHP
          source: |
            $bankAccount = $client->bankAccounts()->deactivate('bankAccountId');
  /blacklists:
    get:
      description: |
        Retrieve a list of blacklists
      parameters:
        - $ref: '#/components/parameters/collectionLimit'
        - $ref: '#/components/parameters/collectionOffset'
      responses:
        '200':
          description: A list of Blacklists was retrieved successfully
          headers:
            Pagination-Limit:
              description: Items per page limit
              schema:
                type: integer
            Pagination-Offset:
              description: Pagination offset
              schema:
                type: integer
            Pagination-Total:
              description: Total items count
              schema:
                type: integer
            Rate-Limit-Limit:
              description: The number of allowed requests in the current period
              schema:
                type: integer
            Rate-Limit-Remaining:
              description: The number of remaining requests in the current period
              schema:
                type: integer
            Rate-Limit-Reset:
              description: |
                The date in format defined by [RFC 822](https://www.w3.org/Protocols/rfc2616/rfc2616-sec3.html#sec3.3.1)
                when the current period will reset
              schema:
                type: string
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/Blacklist'
                type: array
        '401':
          $ref: '#/components/responses/AccessForbidden'
      summary: Retrieve a list of blacklists
      tags:
        - Blacklists
      x-code-samples:
        - lang: PHP
          source: |
            $blacklists = $client->blacklists()->search([
                'filter' => 'value:testValue',
            ]);
    post:
      description: |
        Create a blacklist
      responses:
        '201':
          description: Blacklist was created
          headers:
            Rate-Limit-Limit:
              description: The number of allowed requests in the current period
              schema:
                type: integer
            Rate-Limit-Remaining:
              description: The number of remaining requests in the current period
              schema:
                type: integer
            Rate-Limit-Reset:
              description: |
                The date in format defined by [RFC 822](https://www.w3.org/Protocols/rfc2616/rfc2616-sec3.html#sec3.3.1)
                when the current period will reset
              schema:
                type: string
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Blacklist'
        '401':
          $ref: '#/components/responses/AccessForbidden'
        '422':
          $ref: '#/components/responses/InvalidDataError'
      summary: Create a blacklist
      tags:
        - Blacklists
      x-code-samples:
        - lang: PHP
          source: |
            $blacklistForm = new Rebilly\Entities\Blacklist();
            $blacklistForm->setType($blacklistForm::TYPE_EMAIL);
            $blacklistForm->setValue('test@test.com');
            $blacklistForm->setExpiredTime('2025-01-01 05:00:00');

            try {
                $blacklist = $client->blacklists()->create($blacklistForm);
            } catch (UnprocessableEntityException $e) {
                echo $e->getMessage();
            }
      requestBody:
        $ref: '#/components/requestBodies/Blacklist'
  '/blacklists/{id}':
    delete:
      description: |
        Delete a blacklist with predefined identifier string
      responses:
        '204':
          description: Blacklist was deleted
          headers:
            Rate-Limit-Limit:
              description: The number of allowed requests in the current period
              schema:
                type: integer
            Rate-Limit-Remaining:
              description: The number of remaining requests in the current period
              schema:
                type: integer
            Rate-Limit-Reset:
              description: |
                The date in format defined by [RFC 822](https://www.w3.org/Protocols/rfc2616/rfc2616-sec3.html#sec3.3.1)
                when the current period will reset
              schema:
                type: string
        '401':
          $ref: '#/components/responses/AccessForbidden'
        '404':
          $ref: '#/components/responses/NotFound'
      summary: Delete a blacklist
      tags:
        - Blacklists
      x-code-samples:
        - lang: PHP
          source: |
            $client->blacklists()->delete('blacklistId');
    get:
      description: |
        Retrieve a blacklist with specified identifier string
      responses:
        '200':
          description: Blacklist was retrieved successfully
          headers:
            Rate-Limit-Limit:
              description: The number of allowed requests in the current period
              schema:
                type: integer
            Rate-Limit-Remaining:
              description: The number of remaining requests in the current period
              schema:
                type: integer
            Rate-Limit-Reset:
              description: |
                The date in format defined by [RFC 822](https://www.w3.org/Protocols/rfc2616/rfc2616-sec3.html#sec3.3.1)
                when the current period will reset
              schema:
                type: string
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Blacklist'
        '401':
          $ref: '#/components/responses/AccessForbidden'
        '404':
          $ref: '#/components/responses/NotFound'
      summary: Retrieve a blacklist
      tags:
        - Blacklists
      x-code-samples:
        - lang: PHP
          source: |
            $blacklist = $client->blacklists()->load('blacklistId');
    parameters:
      - $ref: '#/components/parameters/resourceId'
    put:
      description: |
        Create a blacklist with predefined identifier string
      responses:
        '201':
          description: Blacklist was created
          headers:
            Rate-Limit-Limit:
              description: The number of allowed requests in the current period
              schema:
                type: integer
            Rate-Limit-Remaining:
              description: The number of remaining requests in the current period
              schema:
                type: integer
            Rate-Limit-Reset:
              description: |
                The date in format defined by [RFC 822](https://www.w3.org/Protocols/rfc2616/rfc2616-sec3.html#sec3.3.1)
                when the current period will reset
              schema:
                type: string
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Blacklist'
        '401':
          $ref: '#/components/responses/AccessForbidden'
        '409':
          description: Blacklist exist and cannot be updated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '422':
          $ref: '#/components/responses/InvalidDataError'
      summary: Create a blacklist with predefined ID
      tags:
        - Blacklists
      x-code-samples:
        - lang: PHP
          source: |
            $blacklistForm = new Rebilly\Entities\Blacklist();
            $blacklistForm->setType($blacklistForm::TYPE_EMAIL);
            $blacklistForm->setValue('test@test.com');
            $blacklistForm->setExpiredTime('2025-01-01 05:00:00');

            try {
                $blacklist = $client->blacklists()->create($blacklistForm, 'blacklistId');
            } catch (UnprocessableEntityException $e) {
                echo $e->getMessage();
            }
      requestBody:
        $ref: '#/components/requestBodies/Blacklist'
  /checkout-pages:
    get:
      description: |
        Retrieve a list of checkout pages
      parameters:
        - $ref: '#/components/parameters/collectionLimit'
        - $ref: '#/components/parameters/collectionOffset'
      responses:
        '200':
          description: A list of checkout pages was retrieved successfully
          headers:
            Pagination-Limit:
              description: Items per page limit
              schema:
                type: integer
            Pagination-Offset:
              description: Pagination offset
              schema:
                type: integer
            Pagination-Total:
              description: Total items count
              schema:
                type: integer
            Rate-Limit-Limit:
              description: The number of allowed requests in the current period
              schema:
                type: integer
            Rate-Limit-Remaining:
              description: The number of remaining requests in the current period
              schema:
                type: integer
            Rate-Limit-Reset:
              description: |
                The date in format defined by [RFC 822](https://www.w3.org/Protocols/rfc2616/rfc2616-sec3.html#sec3.3.1)
                when the current period will reset
              schema:
                type: string
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/CheckoutPage'
                type: array
        '401':
          $ref: '#/components/responses/AccessForbidden'
      summary: Retrieve a list of checkout pages
      tags:
        - Checkout Pages
      x-code-samples:
        - lang: PHP
          source: |
            $checkoutPages = $client->checkoutPages()->search([
                'filter' => 'name:testCheckoutPage',
            ]);
    post:
      description: |
        Create a Checkout Page
      responses:
        '201':
          description: Checkout Page was created
          headers:
            Rate-Limit-Limit:
              description: The number of allowed requests in the current period
              schema:
                type: integer
            Rate-Limit-Remaining:
              description: The number of remaining requests in the current period
              schema:
                type: integer
            Rate-Limit-Reset:
              description: |
                The date in format defined by [RFC 822](https://www.w3.org/Protocols/rfc2616/rfc2616-sec3.html#sec3.3.1)
                when the current period will reset
              schema:
                type: string
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CheckoutPage'
        '401':
          $ref: '#/components/responses/AccessForbidden'
        '422':
          description: Invalid data was sent
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidError'
      summary: Create a Checkout Page
      tags:
        - Checkout Pages
      x-code-samples:
        - lang: PHP
          source: |
            $checkoutPageForm = new Rebilly\Entities\CheckoutPage();
            $checkoutPageForm->setPlanId('planId');
            $checkoutPageForm->setWebsiteId('websiteId');
            $checkoutPageForm->setName('TestCheckoutPage');
            $checkoutPageForm->setUriPath('test-checkout-page');

            try {
                $checkoutPage = $client->checkoutPages()->create($checkoutPageForm);
            } catch (UnprocessableEntityException $e) {
                echo $e->getMessage();
            }
      requestBody:
        $ref: '#/components/requestBodies/CheckoutPage'
  '/checkout-pages/{id}':
    delete:
      description: |
        Delete a Checkout Page with predefined identifier string
      responses:
        '204':
          description: Checkout Page was deleted
          headers:
            Rate-Limit-Limit:
              description: The number of allowed requests in the current period
              schema:
                type: integer
            Rate-Limit-Remaining:
              description: The number of remaining requests in the current period
              schema:
                type: integer
            Rate-Limit-Reset:
              description: |
                The date in format defined by [RFC 822](https://www.w3.org/Protocols/rfc2616/rfc2616-sec3.html#sec3.3.1)
                when the current period will reset
              schema:
                type: string
        '401':
          $ref: '#/components/responses/AccessForbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '409':
          description: Checkout page cannot be deleted
      summary: Delete a Checkout Page
      tags:
        - Checkout Pages
      x-code-samples:
        - lang: PHP
          source: |
            $client->checkoutPages()->delete('checkoutPageId');
    get:
      description: |
        Retrieve a Checkout Page with specified identifier string
      responses:
        '200':
          description: Checkout Page was retrieved successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CheckoutPage'
        '401':
          $ref: '#/components/responses/AccessForbidden'
        '404':
          $ref: '#/components/responses/NotFound'
      summary: Retrieve a Checkout Page
      tags:
        - Checkout Pages
      x-code-samples:
        - lang: PHP
          source: |
            $checkoutPage = $client->checkoutPages()->load('checkoutPageId');
    parameters:
      - $ref: '#/components/parameters/resourceId'
    put:
      description: |
        Create or update a Checkout Page with predefined identifier string
      responses:
        '200':
          description: Checkout Page was updated
          headers:
            Rate-Limit-Limit:
              description: The number of allowed requests in the current period
              schema:
                type: integer
            Rate-Limit-Remaining:
              description: The number of remaining requests in the current period
              schema:
                type: integer
            Rate-Limit-Reset:
              description: |
                The date in format defined by [RFC 822](https://www.w3.org/Protocols/rfc2616/rfc2616-sec3.html#sec3.3.1)
                when the current period will reset
              schema:
                type: string
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CheckoutPage'
        '201':
          description: Checkout Page was created
          headers:
            Rate-Limit-Limit:
              description: The number of allowed requests in the current period
              schema:
                type: integer
            Rate-Limit-Remaining:
              description: The number of remaining requests in the current period
              schema:
                type: integer
            Rate-Limit-Reset:
              description: |
                The date in format defined by [RFC 822](https://www.w3.org/Protocols/rfc2616/rfc2616-sec3.html#sec3.3.1)
                when the current period will reset
              schema:
                type: string
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CheckoutPage'
        '401':
          $ref: '#/components/responses/AccessForbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '422':
          description: Invalid data was sent
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidError'
      summary: Create or update a Checkout Page with predefined ID
      tags:
        - Checkout Pages
      x-code-samples:
        - lang: PHP
          source: |
            $checkoutPageForm = new Rebilly\Entities\CheckoutPage();
            $checkoutPageForm->setPlanId('planId');
            $checkoutPageForm->setWebsiteId('websiteId');
            $checkoutPageForm->setName('TestCheckoutPage');
            $checkoutPageForm->setUriPath('test-checkout-page');

            try {
                $checkoutPage = $client->checkoutPages()->update('checkoutPageId', $checkoutPageForm);
            } catch (UnprocessableEntityException $e) {
                echo $e->getMessage();
            }
      requestBody:
        $ref: '#/components/requestBodies/CheckoutPage'
  /contacts:
    get:
      description: |
        Retrieve a list of contacts
      parameters:
        - $ref: '#/components/parameters/collectionLimit'
        - $ref: '#/components/parameters/collectionOffset'
      responses:
        '200':
          description: A list of Contacts was retrieved successfully
          headers:
            Pagination-Limit:
              description: Items per page limit
              schema:
                type: integer
            Pagination-Offset:
              description: Pagination offset
              schema:
                type: integer
            Pagination-Total:
              description: Total items count
              schema:
                type: integer
            Rate-Limit-Limit:
              description: The number of allowed requests in the current period
              schema:
                type: integer
            Rate-Limit-Remaining:
              description: The number of remaining requests in the current period
              schema:
                type: integer
            Rate-Limit-Reset:
              description: |
                The date in format defined by [RFC 822](https://www.w3.org/Protocols/rfc2616/rfc2616-sec3.html#sec3.3.1)
                when the current period will reset
              schema:
                type: string
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/Contact'
                type: array
        '401':
          $ref: '#/components/responses/AccessForbidden'
      summary: Retrieve a list of contacts
      tags:
        - Contacts
      x-code-samples:
        - lang: PHP
          source: |
            $contacts = $client->contacts()->search([
                'filter' => 'firstName:John',
            ]);
    post:
      description: |
        Create a contact
      responses:
        '201':
          description: Contact was created
          headers:
            Rate-Limit-Limit:
              description: The number of allowed requests in the current period
              schema:
                type: integer
            Rate-Limit-Remaining:
              description: The number of remaining requests in the current period
              schema:
                type: integer
            Rate-Limit-Reset:
              description: |
                The date in format defined by [RFC 822](https://www.w3.org/Protocols/rfc2616/rfc2616-sec3.html#sec3.3.1)
                when the current period will reset
              schema:
                type: string
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Contact'
        '401':
          $ref: '#/components/responses/AccessForbidden'
        '422':
          $ref: '#/components/responses/InvalidDataError'
      summary: Create a contact
      tags:
        - Contacts
      x-code-samples:
        - lang: PHP
          source: |
            $contactForm = new Rebilly\Entities\Contact();
            $contactForm->setFirstName('Sherlock');
            $contactForm->setLastName('Holmes');
            $contactForm->setOrganization('TestOrganization');

            try {
                $contact = $client->contacts()->create($contactForm);
            } catch (UnprocessableEntityException $e) {
                echo $e->getMessage();
            }
      requestBody:
        $ref: '#/components/requestBodies/Contact'
  '/contacts/{id}':
    delete:
      description: |
        Delete a contact with predefined identifier string
      responses:
        '204':
          description: Contact was deleted
          headers:
            Rate-Limit-Limit:
              description: The number of allowed requests in the current period
              schema:
                type: integer
            Rate-Limit-Remaining:
              description: The number of remaining requests in the current period
              schema:
                type: integer
            Rate-Limit-Reset:
              description: |
                The date in format defined by [RFC 822](https://www.w3.org/Protocols/rfc2616/rfc2616-sec3.html#sec3.3.1)
                when the current period will reset
              schema:
                type: string
        '401':
          $ref: '#/components/responses/AccessForbidden'
        '402':
          description: Contact cannot be deleted
        '404':
          $ref: '#/components/responses/NotFound'
      summary: Delete a contact
      tags:
        - Contacts
    get:
      description: |
        Retrieve a contact with specified identifier string
      responses:
        '200':
          description: Contact was retrieved successfully
          headers:
            Rate-Limit-Limit:
              description: The number of allowed requests in the current period
              schema:
                type: integer
            Rate-Limit-Remaining:
              description: The number of remaining requests in the current period
              schema:
                type: integer
            Rate-Limit-Reset:
              description: |
                The date in format defined by [RFC 822](https://www.w3.org/Protocols/rfc2616/rfc2616-sec3.html#sec3.3.1)
                when the current period will reset
              schema:
                type: string
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Contact'
        '401':
          $ref: '#/components/responses/AccessForbidden'
        '404':
          $ref: '#/components/responses/NotFound'
      summary: Retrieve a contact
      tags:
        - Contacts
      x-code-samples:
        - lang: PHP
          source: |
            $contact = $client->contacts()->load('contactId');
    parameters:
      - $ref: '#/components/parameters/resourceId'
    put:
      description: |
        Create or update a contact with predefined identifier string
      responses:
        '201':
          description: Contact was created
          headers:
            Rate-Limit-Limit:
              description: The number of allowed requests in the current period
              schema:
                type: integer
            Rate-Limit-Remaining:
              description: The number of remaining requests in the current period
              schema:
                type: integer
            Rate-Limit-Reset:
              description: |
                The date in format defined by [RFC 822](https://www.w3.org/Protocols/rfc2616/rfc2616-sec3.html#sec3.3.1)
                when the current period will reset
              schema:
                type: string
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Contact'
        '401':
          $ref: '#/components/responses/AccessForbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '409':
          description: Contact exists and cannot be updated
        '422':
          $ref: '#/components/responses/InvalidDataError'
      summary: Create or update a contact with predefined ID
      tags:
        - Contacts
      x-code-samples:
        - lang: PHP
          source: |
            $contactForm = new Rebilly\Entities\Contact();
            $contactForm->setFirstName('Sherlock');
            $contactForm->setLastName('Holmes');
            $contactForm->setOrganization('TestOrganization');

            try {
                $contact = $client->contacts()->update('contactId', $contactForm);
            } catch (UnprocessableEntityException $e) {
                echo $e->getMessage();
            }
      requestBody:
        $ref: '#/components/requestBodies/Contact'
  /coupons:
    get:
      description: |
        Retrieve a list of coupons
      parameters:
        - $ref: '#/components/parameters/collectionLimit'
        - $ref: '#/components/parameters/collectionOffset'
        - $ref: '#/components/parameters/collectionFilter'
        - $ref: '#/components/parameters/collectionQuery'
        - $ref: '#/components/parameters/collectionCriteria'
        - $ref: '#/components/parameters/collectionSort'
      responses:
        '200':
          description: A list of coupons was retrieved successfully
          headers:
            Pagination-Limit:
              description: Items per page limit
              schema:
                type: integer
            Pagination-Offset:
              description: Pagination offset
              schema:
                type: integer
            Pagination-Total:
              description: Total items count
              schema:
                type: integer
            Rate-Limit-Limit:
              description: The number of allowed requests in the current period
              schema:
                type: integer
            Rate-Limit-Remaining:
              description: The number of remaining requests in the current period
              schema:
                type: integer
            Rate-Limit-Reset:
              description: |
                The date in format defined by [RFC 822](https://www.w3.org/Protocols/rfc2616/rfc2616-sec3.html#sec3.3.1)
                when the current period will reset
              schema:
                type: string
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/Coupon'
                type: array
        '401':
          $ref: '#/components/responses/AccessForbidden'
      summary: Retrieve a list of coupons
      tags:
        - Coupons
      x-code-samples:
        - lang: PHP
          source: |
            $coupons = $client->coupons()->search([
                'filter' => 'status:issued',
            ]);
    post:
      description: |
        Create a coupon
      responses:
        '201':
          description: Coupon was created
          headers:
            Rate-Limit-Limit:
              description: The number of allowed requests in the current period
              schema:
                type: integer
            Rate-Limit-Remaining:
              description: The number of remaining requests in the current period
              schema:
                type: integer
            Rate-Limit-Reset:
              description: |
                The date in format defined by [RFC 822](https://www.w3.org/Protocols/rfc2616/rfc2616-sec3.html#sec3.3.1)
                when the current period will reset
              schema:
                type: string
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Coupon'
        '401':
          $ref: '#/components/responses/AccessForbidden'
        '422':
          description: Invalid data was sent
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidError'
      summary: Create a coupon
      tags:
        - Coupons
      x-code-samples:
        - lang: PHP
          source: |
            $couponForm = new Rebilly\Entities\Coupons\Coupon();

            $discountArray = [
                'currency' => 'USD',
                'amount' => 1.99,
            ];

            $discountForm = new \Rebilly\Entities\Coupons\Discounts\Fixed($discountArray);
            $couponForm->setDiscount($discountForm);
            // Coupon can be used right now
            $couponForm->setIssuedTime(date('Y-m-d H:i:s'));

            $restrictionArray = [
                'quantity' => 2,
            ];

            $restrictionForm = new Rebilly\Entities\Coupons\Restrictions\DiscountsPerRedemption($restrictionArray);

            $couponForm->setRestrictions([$restrictionForm]);

            try {
                $coupon = $client->coupons()->create($couponForm);
            } catch (UnprocessableEntityException $e) {
                echo $e->getMessage();
            }
      requestBody:
        $ref: '#/components/requestBodies/Coupon'
  /coupons-redemptions:
    get:
      parameters:
        - $ref: '#/components/parameters/collectionLimit'
        - $ref: '#/components/parameters/collectionOffset'
        - $ref: '#/components/parameters/collectionFilter'
        - $ref: '#/components/parameters/collectionQuery'
        - $ref: '#/components/parameters/collectionCriteria'
        - $ref: '#/components/parameters/collectionSort'
      responses:
        '200':
          description: Coupons redemptions were retrieved successfully
          headers:
            Pagination-Limit:
              description: Items per page limit
              schema:
                type: integer
            Pagination-Offset:
              description: Pagination offset
              schema:
                type: integer
            Pagination-Total:
              description: Total items count
              schema:
                type: integer
            Rate-Limit-Limit:
              description: The number of allowed requests in the current period
              schema:
                type: integer
            Rate-Limit-Remaining:
              description: The number of remaining requests in the current period
              schema:
                type: integer
            Rate-Limit-Reset:
              description: |
                The date in format defined by [RFC 822](https://www.w3.org/Protocols/rfc2616/rfc2616-sec3.html#sec3.3.1)
                when the current period will reset
              schema:
                type: string
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/CouponRedemption'
                type: array
        '401':
          $ref: '#/components/responses/AccessForbidden'
      summary: Retrieve a list of coupon redemptions
      tags:
        - Coupons
      x-code-samples:
        - lang: PHP
          source: |
            $couponRedemptions = $client->couponsRedemptions()->search([
                'filter' => 'customerId:testCustomer',
            ]);
    post:
      description: |
        Redeem a coupon
      responses:
        '201':
          description: Coupon was redeemed
          headers:
            Rate-Limit-Limit:
              description: The number of allowed requests in the current period
              schema:
                type: integer
            Rate-Limit-Remaining:
              description: The number of remaining requests in the current period
              schema:
                type: integer
            Rate-Limit-Reset:
              description: |
                The date in format defined by [RFC 822](https://www.w3.org/Protocols/rfc2616/rfc2616-sec3.html#sec3.3.1)
                when the current period will reset
              schema:
                type: string
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CouponRedemption'
        '401':
          $ref: '#/components/responses/AccessForbidden'
        '422':
          description: Invalid data was sent
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidError'
      summary: Redeem a coupon
      tags:
        - Coupons
      x-code-samples:
        - lang: PHP
          source: |
            $redemptionForm = new Rebilly\Entities\Coupons\Redemption();
            $redemptionForm->setCustomerId('customerId');
            $redemptionForm->setRedemptionCode('redemptionCode');

            $restrictionArray = [
                'type' => Rebilly\Entities\Coupons\Restriction::TYPE_DISCOUNTS_PER_REDEMPTION,
                'quantity' => 2,
            ];

            $restrictionForm = new Rebilly\Entities\Coupons\Restriction([
                $restrictionArray,
            ]);

            $redemptionForm->setAdditionalRestrictions($restrictionForm);

            try {
                $couponRedemption = $client->couponsRedemptions()->redeem($redemptionForm);
            } catch (UnprocessableEntityException $e) {
                echo $e->getMessage();
            }
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CouponRedemption'
        description: Redeem a coupon
        required: true
  '/coupons-redemptions/{id}':
    get:
      responses:
        '200':
          description: Retrieve a coupon redemption with specified identifier string
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CouponRedemption'
        '401':
          $ref: '#/components/responses/AccessForbidden'
        '404':
          $ref: '#/components/responses/NotFound'
      summary: Retrieve a coupon redemption with specified identifier string
      tags:
        - Coupons
      x-code-samples:
        - lang: PHP
          source: |
            $couponRedemption = $client->couponsRedemptions()->load('redemptionCode');
    parameters:
      - $ref: '#/components/parameters/resourceId'
  '/coupons-redemptions/{id}/cancel':
    parameters:
      - $ref: '#/components/parameters/resourceId'
    post:
      responses:
        '201':
          description: Cancel a coupon redemption
        '401':
          $ref: '#/components/responses/AccessForbidden'
        '404':
          $ref: '#/components/responses/NotFound'
      summary: Cancel a coupon redemption
      tags:
        - Coupons
      x-code-samples:
        - lang: PHP
          source: |
            $client->couponsRedemptions()->cancel('id');
  '/coupons/{redemptionCode}':
    get:
      description: |
        Retrieve a coupon with specified redemption code string
      responses:
        '200':
          description: Coupon was retrieved successfully
          headers:
            Rate-Limit-Limit:
              description: The number of allowed requests in the current period
              schema:
                type: integer
            Rate-Limit-Remaining:
              description: The number of remaining requests in the current period
              schema:
                type: integer
            Rate-Limit-Reset:
              description: |
                The date in format defined by [RFC 822](https://www.w3.org/Protocols/rfc2616/rfc2616-sec3.html#sec3.3.1)
                when the current period will reset
              schema:
                type: string
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Coupon'
        '401':
          $ref: '#/components/responses/AccessForbidden'
        '404':
          $ref: '#/components/responses/NotFound'
      summary: Retrieve a coupon
      tags:
        - Coupons
      x-code-samples:
        - lang: PHP
          source: |
            $coupon = $client->coupons()->load('redemptionCode');
    parameters:
      - description: The Coupon's redemption code
        in: path
        name: redemptionCode
        required: true
        schema:
          type: string
    put:
      description: |
        Create or update a coupon with predefined redemption code
      responses:
        '200':
          description: Coupon was updated
          headers:
            Rate-Limit-Limit:
              description: The number of allowed requests in the current period
              schema:
                type: integer
            Rate-Limit-Remaining:
              description: The number of remaining requests in the current period
              schema:
                type: integer
            Rate-Limit-Reset:
              description: |
                The date in format defined by [RFC 822](https://www.w3.org/Protocols/rfc2616/rfc2616-sec3.html#sec3.3.1)
                when the current period will reset
              schema:
                type: string
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Coupon'
        '201':
          description: Coupon was created
          headers:
            Rate-Limit-Limit:
              description: The number of allowed requests in the current period
              schema:
                type: integer
            Rate-Limit-Remaining:
              description: The number of remaining requests in the current period
              schema:
                type: integer
            Rate-Limit-Reset:
              description: |
                The date in format defined by [RFC 822](https://www.w3.org/Protocols/rfc2616/rfc2616-sec3.html#sec3.3.1)
                when the current period will reset
              schema:
                type: string
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Coupon'
        '401':
          $ref: '#/components/responses/AccessForbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '409':
          description: Coupon was redeemed already and cannot be changed
        '422':
          description: Invalid data was sent
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidError'
      summary: Create or update a coupon with predefined redemption code
      tags:
        - Coupons
      x-code-samples:
        - lang: PHP
          source: |
            $couponForm = new Rebilly\Entities\Coupons\Coupon();

            $discountArray = [
                'type' => Rebilly\Entities\Coupons\Discount::TYPE_FIXED,
                'currency' => 'USD',
                'amount' => 1.99,
            ];

            $discountForm = new Rebilly\Entities\Coupons\Discount($discountArray);
            $couponForm->setDiscount($discountForm);

            $restrictionArray = [
                'type' => Rebilly\Entities\Coupons\Restriction::TYPE_DISCOUNTS_PER_REDEMPTION,
                'quantity' => 2,
            ];

            $restrictionForm = new Rebilly\Entities\Coupons\Restriction([
                $restrictionArray,
            ]);

            $couponForm->setRestrictions($restrictionForm);

            try {
                $coupon = $client->coupons()->create($couponForm, 'redemptionCode');
            } catch (UnprocessableEntityException $e) {
                echo $e->getMessage();
            }
      requestBody:
        $ref: '#/components/requestBodies/Coupon'
  /credential-hashes/emails:
    post:
      description: |
        Create an email credential
      responses:
        '201':
          description: Email credential was created
          headers:
            Rate-Limit-Limit:
              description: The number of allowed requests in the current period
              schema:
                type: integer
            Rate-Limit-Remaining:
              description: The number of remaining requests in the current period
              schema:
                type: integer
            Rate-Limit-Reset:
              description: |
                The date in format defined by [RFC 822](https://www.w3.org/Protocols/rfc2616/rfc2616-sec3.html#sec3.3.1)
                when the current period will reset
              schema:
                type: string
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SmtpCredential'
        '401':
          $ref: '#/components/responses/AccessForbidden'
        '422':
          description: Invalid data was sent
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidError'
      summary: Create an email credential
      tags:
        - Credential Hashes
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SmtpCredential'
        description: Email credential resource
        required: true
  '/credential-hashes/emails/{hash}':
    get:
      description: |
        Retrieve an email credential with specified token identifier string
      responses:
        '200':
          description: Email credential was retrieved successfully
          headers:
            Rate-Limit-Limit:
              description: The number of allowed requests in the current period
              schema:
                type: integer
            Rate-Limit-Remaining:
              description: The number of remaining requests in the current period
              schema:
                type: integer
            Rate-Limit-Reset:
              description: |
                The date in format defined by [RFC 822](https://www.w3.org/Protocols/rfc2616/rfc2616-sec3.html#sec3.3.1)
                when the current period will reset
              schema:
                type: string
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SmtpCredential'
        '401':
          $ref: '#/components/responses/AccessForbidden'
        '404':
          $ref: '#/components/responses/NotFound'
      summary: Retrieve an email credential
      tags:
        - Credential Hashes
    parameters:
      - $ref: '#/components/parameters/hash'
  /credential-hashes/webhooks:
    post:
      description: |
        Create a webhook credential
      responses:
        '201':
          description: Webhook credential was created
          headers:
            Rate-Limit-Limit:
              description: The number of allowed requests in the current period
              schema:
                type: integer
            Rate-Limit-Remaining:
              description: The number of remaining requests in the current period
              schema:
                type: integer
            Rate-Limit-Reset:
              description: |
                The date in format defined by [RFC 822](https://www.w3.org/Protocols/rfc2616/rfc2616-sec3.html#sec3.3.1)
                when the current period will reset
              schema:
                type: string
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/WebhookCredential'
        '401':
          $ref: '#/components/responses/AccessForbidden'
        '422':
          description: Invalid data was sent
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidError'
      summary: Create a webhook credential
      tags:
        - Credential Hashes
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/WebhookCredential'
        description: Credential resource
        required: true
  '/credential-hashes/webhooks/{hash}':
    get:
      description: |
        Retrieve a webhook credential with specified token identifier string
      responses:
        '200':
          description: Webhook credential was retrieved successfully
          headers:
            Rate-Limit-Limit:
              description: The number of allowed requests in the current period
              schema:
                type: integer
            Rate-Limit-Remaining:
              description: The number of remaining requests in the current period
              schema:
                type: integer
            Rate-Limit-Reset:
              description: |
                The date in format defined by [RFC 822](https://www.w3.org/Protocols/rfc2616/rfc2616-sec3.html#sec3.3.1)
                when the current period will reset
              schema:
                type: string
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/WebhookCredential'
        '401':
          $ref: '#/components/responses/AccessForbidden'
        '404':
          $ref: '#/components/responses/NotFound'
      summary: Retrieve a webhook credential
      tags:
        - Credential Hashes
    parameters:
      - $ref: '#/components/parameters/hash'
  /credentials:
    get:
      description: |
        Retrieve a list of credentials
      parameters:
        - $ref: '#/components/parameters/collectionLimit'
        - $ref: '#/components/parameters/collectionOffset'
      responses:
        '200':
          description: A list of Credentials was retrieved successfully
          headers:
            Pagination-Limit:
              description: Items per page limit
              schema:
                type: integer
            Pagination-Offset:
              description: Pagination offset
              schema:
                type: integer
            Pagination-Total:
              description: Total items count
              schema:
                type: integer
            Rate-Limit-Limit:
              description: The number of allowed requests in the current period
              schema:
                type: integer
            Rate-Limit-Remaining:
              description: The number of remaining requests in the current period
              schema:
                type: integer
            Rate-Limit-Reset:
              description: |
                The date in format defined by [RFC 822](https://www.w3.org/Protocols/rfc2616/rfc2616-sec3.html#sec3.3.1)
                when the current period will reset
              schema:
                type: string
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/Credential'
                type: array
        '401':
          $ref: '#/components/responses/AccessForbidden'
      summary: Retrieve a list of credentials
      tags:
        - Customer Authentication
      x-code-samples:
        - lang: PHP
          source: |
            $customerCredentials = $client->customerCredentials()->search([
                'filter' => 'customerId:testCustomer',
            ]);
    post:
      description: |
        Create a credential
      responses:
        '201':
          description: Credential was created
          headers:
            Rate-Limit-Limit:
              description: The number of allowed requests in the current period
              schema:
                type: integer
            Rate-Limit-Remaining:
              description: The number of remaining requests in the current period
              schema:
                type: integer
            Rate-Limit-Reset:
              description: |
                The date in format defined by [RFC 822](https://www.w3.org/Protocols/rfc2616/rfc2616-sec3.html#sec3.3.1)
                when the current period will reset
              schema:
                type: string
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Credential'
        '401':
          $ref: '#/components/responses/AccessForbidden'
        '422':
          description: Invalid data was sent
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidError'
      summary: Create a credential
      tags:
        - Customer Authentication
      x-code-samples:
        - lang: PHP
          source: |
            $customerCredentialForm = new Rebilly\Entities\CustomerCredential();
            $customerCredentialForm->setCustomerId('customerId');
            $customerCredentialForm->setUsername('test');
            $customerCredentialForm->setPassword('1234');

            try {
                $customerCredential = $client->customerCredentials()->create($customerCredentialForm);
            } catch (UnprocessableEntityException $e) {
                echo $e->getMessage();
            }
      requestBody:
        $ref: '#/components/requestBodies/Credential'
  '/credentials/{id}':
    delete:
      description: |
        Delete a credential with predefined identifier string
      responses:
        '204':
          description: Credential was deleted
          headers:
            Rate-Limit-Limit:
              description: The number of allowed requests in the current period
              schema:
                type: integer
            Rate-Limit-Remaining:
              description: The number of remaining requests in the current period
              schema:
                type: integer
            Rate-Limit-Reset:
              description: |
                The date in format defined by [RFC 822](https://www.w3.org/Protocols/rfc2616/rfc2616-sec3.html#sec3.3.1)
                when the current period will reset
              schema:
                type: string
        '401':
          $ref: '#/components/responses/AccessForbidden'
        '404':
          $ref: '#/components/responses/NotFound'
      summary: Delete a credential
      tags:
        - Customer Authentication
      x-code-samples:
        - lang: PHP
          source: |
            $client->customerCredentials()->delete('credentialId');
    get:
      description: |
        Retrieve a credential with specified identifier string
      responses:
        '200':
          description: Credential was retrieved successfully
          headers:
            Rate-Limit-Limit:
              description: The number of allowed requests in the current period
              schema:
                type: integer
            Rate-Limit-Remaining:
              description: The number of remaining requests in the current period
              schema:
                type: integer
            Rate-Limit-Reset:
              description: |
                The date in format defined by [RFC 822](https://www.w3.org/Protocols/rfc2616/rfc2616-sec3.html#sec3.3.1)
                when the current period will reset
              schema:
                type: string
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Credential'
        '401':
          $ref: '#/components/responses/AccessForbidden'
        '404':
          $ref: '#/components/responses/NotFound'
      summary: Retrieve a credential
      tags:
        - Customer Authentication
      x-code-samples:
        - lang: PHP
          source: |
            $customerCredential = $client->customerCredentials()->load('credentialId');
    parameters:
      - $ref: '#/components/parameters/resourceId'
    put:
      description: |
        Create or update a credential with predefined identifier string
      responses:
        '200':
          description: Credential was updated
          headers:
            Rate-Limit-Limit:
              description: The number of allowed requests in the current period
              schema:
                type: integer
            Rate-Limit-Remaining:
              description: The number of remaining requests in the current period
              schema:
                type: integer
            Rate-Limit-Reset:
              description: |
                The date in format defined by [RFC 822](https://www.w3.org/Protocols/rfc2616/rfc2616-sec3.html#sec3.3.1)
                when the current period will reset
              schema:
                type: string
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Credential'
        '201':
          description: Credential was created
          headers:
            Rate-Limit-Limit:
              description: The number of allowed requests in the current period
              schema:
                type: integer
            Rate-Limit-Remaining:
              description: The number of remaining requests in the current period
              schema:
                type: integer
            Rate-Limit-Reset:
              description: |
                The date in format defined by [RFC 822](https://www.w3.org/Protocols/rfc2616/rfc2616-sec3.html#sec3.3.1)
                when the current period will reset
              schema:
                type: string
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Credential'
        '401':
          $ref: '#/components/responses/AccessForbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '422':
          description: Invalid data was sent
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidError'
      summary: Create or update a credential with predefined ID
      tags:
        - Customer Authentication
      x-code-samples:
        - lang: PHP
          source: |
            $customerCredentialForm = new Rebilly\Entities\CustomerCredential();
            $customerCredentialForm->setCustomerId('customerId');
            $customerCredentialForm->setUsername('test');
            $customerCredentialForm->setPassword('1234');

            try {
                $customerCredential = $client->customerCredentials()->update('credentialId', $customerCredentialForm);
            } catch (UnprocessableEntityException $e) {
                echo $e->getMessage();
            }
      requestBody:
        $ref: '#/components/requestBodies/Credential'
  /custom-events:
    get:
      description: |
        Retrieve a list of custom events
      parameters:
        - $ref: '#/components/parameters/collectionLimit'
        - $ref: '#/components/parameters/collectionOffset'
        - description: The collection items sort field and order (prefix with "-" for descending sort).
          in: query
          name: sort
          style: form
          schema:
            type: array
            items:
              enum:
                - createdTime
                - '-createdTime'
                - handledTime
                - '-handledTime'
                - scheduledTime
                - '-scheduledTime'
              type: string
      responses:
        '200':
          description: A list of custom events was retrieved successfully
          headers:
            Pagination-Limit:
              description: Items per page limit
              schema:
                type: integer
            Pagination-Offset:
              description: Pagination offset
              schema:
                type: integer
            Pagination-Total:
              description: Total items count
              schema:
                type: integer
            Rate-Limit-Limit:
              description: The number of allowed requests in the current period
              schema:
                type: integer
            Rate-Limit-Remaining:
              description: The number of remaining requests in the current period
              schema:
                type: integer
            Rate-Limit-Reset:
              description: |
                The date in format defined by [RFC 822](https://www.w3.org/Protocols/rfc2616/rfc2616-sec3.html#sec3.3.1)
                when the current period will reset
              schema:
                type: string
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/CustomEvent'
                type: array
        '401':
          $ref: '#/components/responses/AccessForbidden'
      summary: Retrieve a list of custom events
      tags:
        - Custom Events
    post:
      description: |
        Create a custom event
      responses:
        '202':
          description: Custom event was accepted
          headers:
            Rate-Limit-Limit:
              description: The number of allowed requests in the current period
              schema:
                type: integer
            Rate-Limit-Remaining:
              description: The number of remaining requests in the current period
              schema:
                type: integer
            Rate-Limit-Reset:
              description: |
                The date in format defined by [RFC 822](https://www.w3.org/Protocols/rfc2616/rfc2616-sec3.html#sec3.3.1)
                when the current period will reset
              schema:
                type: string
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CustomEvent'
        '401':
          $ref: '#/components/responses/AccessForbidden'
        '422':
          $ref: '#/components/responses/InvalidDataError'
      summary: Create a custom event
      tags:
        - Custom Events
      requestBody:
        $ref: '#/components/requestBodies/CustomEvent'
  '/custom-events/{id}':
    delete:
      description: |
        Delete a custom event with predefined identifier string
      responses:
        '204':
          description: Custom event was deleted
          headers:
            Rate-Limit-Limit:
              description: The number of allowed requests in the current period
              schema:
                type: integer
            Rate-Limit-Remaining:
              description: The number of remaining requests in the current period
              schema:
                type: integer
            Rate-Limit-Reset:
              description: |
                The date in format defined by [RFC 822](https://www.w3.org/Protocols/rfc2616/rfc2616-sec3.html#sec3.3.1)
                when the current period will reset
              schema:
                type: string
        '401':
          $ref: '#/components/responses/AccessForbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '409':
          $ref: '#/components/responses/Conflict'
      summary: Delete a custom event
      tags:
        - Custom Events
    get:
      description: |
        Retrieve a custom event with predefined identifier string
      responses:
        '200':
          description: Custom event was retrieved successfully
          headers:
            Rate-Limit-Limit:
              description: The number of allowed requests in the current period
              schema:
                type: integer
            Rate-Limit-Remaining:
              description: The number of remaining requests in the current period
              schema:
                type: integer
            Rate-Limit-Reset:
              description: |
                The date in format defined by [RFC 822](https://www.w3.org/Protocols/rfc2616/rfc2616-sec3.html#sec3.3.1)
                when the current period will reset
              schema:
                type: string
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CustomEvent'
        '401':
          $ref: '#/components/responses/AccessForbidden'
        '404':
          $ref: '#/components/responses/NotFound'
      summary: Retrieve a custom event
      tags:
        - Custom Events
    parameters:
      - $ref: '#/components/parameters/resourceId'
    put:
      description: |
        Create a custom event with predefined identifier string
      responses:
        '202':
          description: Custom event was accepted
          headers:
            Rate-Limit-Limit:
              description: The number of allowed requests in the current period
              schema:
                type: integer
            Rate-Limit-Remaining:
              description: The number of remaining requests in the current period
              schema:
                type: integer
            Rate-Limit-Reset:
              description: |
                The date in format defined by [RFC 822](https://www.w3.org/Protocols/rfc2616/rfc2616-sec3.html#sec3.3.1)
                when the current period will reset
              schema:
                type: string
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CustomEvent'
        '401':
          $ref: '#/components/responses/AccessForbidden'
        '409':
          $ref: '#/components/responses/Conflict'
        '422':
          $ref: '#/components/responses/InvalidDataError'
      summary: Create a custom event with predefined ID
      tags:
        - Custom Events
      requestBody:
        $ref: '#/components/requestBodies/CustomEvent'
  '/custom-events/{id}/rules':
    get:
      responses:
        '200':
          description: Rules were retrieved successfully
          headers:
            Rate-Limit-Limit:
              description: The number of allowed requests in the current period
              schema:
                type: integer
            Rate-Limit-Remaining:
              description: The number of remaining requests in the current period
              schema:
                type: integer
            Rate-Limit-Reset:
              description: |
                The date in format defined by [RFC 822](https://www.w3.org/Protocols/rfc2616/rfc2616-sec3.html#sec3.3.1)
                when the current period will reset
              schema:
                type: string
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RuleSet'
        '401':
          $ref: '#/components/responses/AccessForbidden'
        '404':
          $ref: '#/components/responses/NotFound'
      summary: Retrieve a list of rules for custom event
      tags:
        - Custom Events
        - Rules
    parameters:
      - $ref: '#/components/parameters/resourceId'
    put:
      responses:
        '200':
          description: Rules were updated
          headers:
            Rate-Limit-Limit:
              description: The number of allowed requests in the current period
              schema:
                type: integer
            Rate-Limit-Remaining:
              description: The number of remaining requests in the current period
              schema:
                type: integer
            Rate-Limit-Reset:
              description: |
                The date in format defined by [RFC 822](https://www.w3.org/Protocols/rfc2616/rfc2616-sec3.html#sec3.3.1)
                when the current period will reset
              schema:
                type: string
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RuleSet'
        '401':
          $ref: '#/components/responses/AccessForbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '422':
          description: Invalid data was sent
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidError'
      summary: Update the rules for custom event
      tags:
        - Custom Events
        - Rules
      requestBody:
        $ref: '#/components/requestBodies/RuleSet'
  '/custom-events/{id}/rules/history':
    get:
      description: |
        Retrieve the change history of the set of rules for the selected custom event.
        The history is updated each time you change the rules.
      parameters:
        - $ref: '#/components/parameters/collectionLimit'
        - $ref: '#/components/parameters/collectionOffset'
        - $ref: '#/components/parameters/collectionFilter'
        - $ref: '#/components/parameters/collectionQuery'
        - $ref: '#/components/parameters/collectionSort'
        - $ref: '#/components/parameters/collectionFields'
        - $ref: '#/components/parameters/collectionExpand'
      responses:
        '200':
          description: History was retrieved successfully
          headers:
            Pagination-Limit:
              description: Items per page limit
              schema:
                type: integer
            Pagination-Offset:
              description: Pagination offset
              schema:
                type: integer
            Pagination-Total:
              description: Total items count
              schema:
                type: integer
            Rate-Limit-Limit:
              description: The number of allowed requests in the current period
              schema:
                type: integer
            Rate-Limit-Remaining:
              description: The number of remaining requests in the current period
              schema:
                type: integer
            Rate-Limit-Reset:
              description: |
                The date in format defined by [RFC 822](https://www.w3.org/Protocols/rfc2616/rfc2616-sec3.html#sec3.3.1)
                when the current period will reset
              schema:
                type: string
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/RuleSetHistoryItem'
                type: array
        '401':
          $ref: '#/components/responses/AccessForbidden'
        '404':
          $ref: '#/components/responses/NotFound'
      summary: Retrieve the change history of the set of rules for a custom event
      tags:
        - Custom Events
        - Rules
    parameters:
      - $ref: '#/components/parameters/resourceId'
  '/custom-events/{id}/rules/history/{version}':
    get:
      description: |
        Retrieve the record from the change history of the set of rules for the selected custom event.
        A history record is created each time you change the rules.
      parameters:
        - $ref: '#/components/parameters/collectionFields'
        - $ref: '#/components/parameters/collectionExpand'
      responses:
        '200':
          description: Rules version was retrieved successfully
          headers:
            Rate-Limit-Limit:
              description: The number of allowed requests in the current period
              schema:
                type: integer
            Rate-Limit-Remaining:
              description: The number of remaining requests in the current period
              schema:
                type: integer
            Rate-Limit-Reset:
              description: |
                The date in format defined by [RFC 822](https://www.w3.org/Protocols/rfc2616/rfc2616-sec3.html#sec3.3.1)
                when the current period will reset
              schema:
                type: string
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RuleSetHistoryItem'
        '401':
          $ref: '#/components/responses/AccessForbidden'
        '404':
          $ref: '#/components/responses/NotFound'
      summary: Retrieve the record from the change history of the set of rules for a custom event
      tags:
        - Custom Events
        - Rules
    parameters:
      - $ref: '#/components/parameters/resourceId'
      - $ref: '#/components/parameters/rulesVersion'
  '/custom-events/{id}/rules/versions/{version}':
    get:
      description: |
        Retrieve the version of the selected set of rules for the selected custom event.
        The versions are created each time you change the rules.
      parameters:
        - $ref: '#/components/parameters/collectionFields'
        - $ref: '#/components/parameters/collectionExpand'
      responses:
        '200':
          description: Rules version was retrieved successfully
          headers:
            Rate-Limit-Limit:
              description: The number of allowed requests in the current period
              schema:
                type: integer
            Rate-Limit-Remaining:
              description: The number of remaining requests in the current period
              schema:
                type: integer
            Rate-Limit-Reset:
              description: |
                The date in format defined by [RFC 822](https://www.w3.org/Protocols/rfc2616/rfc2616-sec3.html#sec3.3.1)
                when the current period will reset
              schema:
                type: string
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RuleSetVersion'
        '401':
          $ref: '#/components/responses/AccessForbidden'
        '404':
          $ref: '#/components/responses/NotFound'
      summary: Retrieve the version of the set of rules for a custom event
      tags:
        - Custom Events
        - Rules
    parameters:
      - $ref: '#/components/parameters/resourceId'
      - $ref: '#/components/parameters/rulesVersion'
  '/custom-fields/{resource}':
    get:
      description: |
        Retrieve a schema of Custom Fields for the given resource type
      responses:
        '200':
          description: A schema of Custom Fields was retrieved successfully
          headers:
            Rate-Limit-Limit:
              description: The number of allowed requests in the current period
              schema:
                type: integer
            Rate-Limit-Remaining:
              description: The number of remaining requests in the current period
              schema:
                type: integer
            Rate-Limit-Reset:
              description: |
                The date in format defined by [RFC 822](https://www.w3.org/Protocols/rfc2616/rfc2616-sec3.html#sec3.3.1)
                when the current period will reset
              schema:
                type: string
          content:
            application/json:
              schema:
                description: The list of custom fields
                items:
                  $ref: '#/components/schemas/CustomField'
                type: array
        '401':
          $ref: '#/components/responses/AccessForbidden'
      summary: Retrieve Custom Fields
      tags:
        - Custom Fields
      x-code-samples:
        - lang: PHP
          source: |
            $customFields = $client->customFields()->search([
                'filter' => 'type:boolean',
            ]);
    parameters:
      - description: The resource type string
        in: path
        name: resource
        required: true
        schema:
          type: string
          enum:
            - customers
            - payment-cards
            - subscriptions
            - payments
            - websites
            - contacts
            - products
  '/custom-fields/{resource}/{name}':
    delete:
      description: |
        Delete a custom field by its name
      responses:
        '204':
          description: Custom field has been deleted
          headers:
            Rate-Limit-Limit:
              description: The number of allowed requests in the current period
              schema:
                type: integer
            Rate-Limit-Remaining:
              description: The number of remaining requests in the current period
              schema:
                type: integer
            Rate-Limit-Reset:
              description: |
                The date in format defined by [RFC 822](https://www.w3.org/Protocols/rfc2616/rfc2616-sec3.html#sec3.3.1)
                when the current period will reset
              schema:
                type: string
        '401':
          $ref: '#/components/responses/AccessForbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '409':
          description: 'The field is in use: remove all the associated data first'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
      summary: Delete a custom field
      tags:
        - Custom Fields
      x-code-samples:
        - lang: PHP
          source: |
            $client->customFields()->delete('customers', 'testFieldName');
    get:
      description: |
        Retrieve a schema of the given Custom Field for the given resource type
      responses:
        '200':
          description: A schema of the Custom Field was retrieved successfully
          headers:
            Rate-Limit-Limit:
              description: The number of allowed requests in the current period
              schema:
                type: integer
            Rate-Limit-Remaining:
              description: The number of remaining requests in the current period
              schema:
                type: integer
            Rate-Limit-Reset:
              description: |
                The date in format defined by [RFC 822](https://www.w3.org/Protocols/rfc2616/rfc2616-sec3.html#sec3.3.1)
                when the current period will reset
              schema:
                type: string
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CustomField'
        '401':
          $ref: '#/components/responses/AccessForbidden'
        '404':
          $ref: '#/components/responses/NotFound'
      summary: Retrieve a Custom Field
      tags:
        - Custom Fields
      x-code-samples:
        - lang: PHP
          source: |
            $customField = $client->customFields()->load('customers', 'customerId');
    parameters:
      - description: The resource type string
        in: path
        name: resource
        required: true
        schema:
          type: string
          enum:
            - customers
            - payment-cards
            - subscriptions
            - payments
            - websites
            - contacts
            - products
      - description: The custom field's identifier string
        in: path
        name: name
        required: true
        schema:
          type: string
    put:
      description: |
        Create or alter a schema of the given Custom Field for the given resource type.
      responses:
        '200':
          description: The Custom Field was updated
          headers:
            Rate-Limit-Limit:
              description: The number of allowed requests in the current period
              schema:
                type: integer
            Rate-Limit-Remaining:
              description: The number of remaining requests in the current period
              schema:
                type: integer
            Rate-Limit-Reset:
              description: |
                The date in format defined by [RFC 822](https://www.w3.org/Protocols/rfc2616/rfc2616-sec3.html#sec3.3.1)
                when the current period will reset
              schema:
                type: string
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CustomField'
        '201':
          description: The Custom Fields was created
          headers:
            Rate-Limit-Limit:
              description: The number of allowed requests in the current period
              schema:
                type: integer
            Rate-Limit-Remaining:
              description: The number of remaining requests in the current period
              schema:
                type: integer
            Rate-Limit-Reset:
              description: |
                The date in format defined by [RFC 822](https://www.w3.org/Protocols/rfc2616/rfc2616-sec3.html#sec3.3.1)
                when the current period will reset
              schema:
                type: string
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CustomField'
        '401':
          $ref: '#/components/responses/AccessForbidden'
        '409':
          description: 'The schema is in use: remove all the associated data in order to remove or alter the schema'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '422':
          description: Invalid data was sent
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidError'
      summary: Create or alter a Custom Field
      tags:
        - Custom Fields
      x-code-samples:
        - lang: PHP
          source: |
            $customFieldForm = new Rebilly\Entities\CustomField();
            $customFieldForm->setType($customFieldForm::TYPE_BOOLEAN);

            try {
                $customField = $client->customFields()->update('customers', 'testFieldName', $customFieldForm);
            } catch (UnprocessableEntityException $e) {
                echo $e->getMessage();
            }
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CustomField'
        description: Custom Fields schema of the given resource type
        required: true
  /customers:
    get:
      description: |
        Retrieve a list of customers
      parameters:
        - $ref: '#/components/parameters/collectionLimit'
        - $ref: '#/components/parameters/collectionOffset'
        - $ref: '#/components/parameters/collectionFilter'
        - $ref: '#/components/parameters/collectionQuery'
        - $ref: '#/components/parameters/collectionExpand'
        - $ref: '#/components/parameters/collectionFields'
        - description: The collection items sort field and order (prefix with "-" for descending sort).
          in: query
          name: sort
          style: form
          schema:
            type: array
            items:
              enum:
                - id
                - '-id'
                - email
                - '-email'
                - createdTime
                - '-createdTime'
                - updatedTime
                - '-updatedTime'
              type: string
        - description: The response media type
          in: header
          name: Accept
          schema:
            type: string
            enum:
              - application/json
              - text/csv
            default: application/json
      responses:
        '200':
          description: A list of Customers was retrieved successfully
          headers:
            Pagination-Limit:
              description: Items per page limit
              schema:
                type: integer
            Pagination-Offset:
              description: Pagination offset
              schema:
                type: integer
            Pagination-Total:
              description: Total items count
              schema:
                type: integer
            Rate-Limit-Limit:
              description: The number of allowed requests in the current period
              schema:
                type: integer
            Rate-Limit-Remaining:
              description: The number of remaining requests in the current period
              schema:
                type: integer
            Rate-Limit-Reset:
              description: |
                The date in format defined by [RFC 822](https://www.w3.org/Protocols/rfc2616/rfc2616-sec3.html#sec3.3.1)
                when the current period will reset
              schema:
                type: string
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/Customer'
                type: array
            text/csv:
              schema:
                items:
                  $ref: '#/components/schemas/Customer'
                type: array
        '401':
          $ref: '#/components/responses/AccessForbidden'
      summary: Retrieve a list of customers
      tags:
        - Customers
      x-code-samples:
        - lang: PHP
          source: |
            $customers = $client->customers()->search([
                'filter' => 'firstName:John',
            ]);
    post:
      description: |
        Create a customer
      responses:
        '201':
          description: Customer was created
          headers:
            Rate-Limit-Limit:
              description: The number of allowed requests in the current period
              schema:
                type: integer
            Rate-Limit-Remaining:
              description: The number of remaining requests in the current period
              schema:
                type: integer
            Rate-Limit-Reset:
              description: |
                The date in format defined by [RFC 822](https://www.w3.org/Protocols/rfc2616/rfc2616-sec3.html#sec3.3.1)
                when the current period will reset
              schema:
                type: string
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Customer'
        '401':
          $ref: '#/components/responses/AccessForbidden'
        '422':
          $ref: '#/components/responses/InvalidDataError'
      summary: Create a customer
      tags:
        - Customers
      x-code-samples:
        - lang: PHP
          source: |
            $customerForm = new Rebilly\Entities\Customer();
            $customerForm->setFirstName('Sherlock');
            $customerForm->setLastName('Holmes');
            $customerForm->setEmail('sherlock.holmes@gmail.com');

            try {
                $customer = $client->customers()->create($customerForm);
            } catch (UnprocessableEntityException $e) {
                echo $e->getMessage();
            }
      requestBody:
        $ref: '#/components/requestBodies/Customer'
  '/customers/{id}':
    get:
      description: |
        Retrieve a customer with specified identifier string
      responses:
        '200':
          description: Customer was retrieved successfully
          headers:
            Rate-Limit-Limit:
              description: The number of allowed requests in the current period
              schema:
                type: integer
            Rate-Limit-Remaining:
              description: The number of remaining requests in the current period
              schema:
                type: integer
            Rate-Limit-Reset:
              description: |
                The date in format defined by [RFC 822](https://www.w3.org/Protocols/rfc2616/rfc2616-sec3.html#sec3.3.1)
                when the current period will reset
              schema:
                type: string
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Customer'
        '401':
          $ref: '#/components/responses/AccessForbidden'
        '404':
          $ref: '#/components/responses/NotFound'
      summary: Retrieve a customer
      tags:
        - Customers
      x-code-samples:
        - lang: PHP
          source: |
            $customers = $client->customers()->load('myCustomerId');
    parameters:
      - $ref: '#/components/parameters/resourceId'
    put:
      description: |
        Create a customer with predefined identifier string
      responses:
        '200':
          description: Customer was updated
          headers:
            Rate-Limit-Limit:
              description: The number of allowed requests in the current period
              schema:
                type: integer
            Rate-Limit-Remaining:
              description: The number of remaining requests in the current period
              schema:
                type: integer
            Rate-Limit-Reset:
              description: |
                The date in format defined by [RFC 822](https://www.w3.org/Protocols/rfc2616/rfc2616-sec3.html#sec3.3.1)
                when the current period will reset
              schema:
                type: string
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Customer'
        '201':
          description: Customer was created
          headers:
            Rate-Limit-Limit:
              description: The number of allowed requests in the current period
              schema:
                type: integer
            Rate-Limit-Remaining:
              description: The number of remaining requests in the current period
              schema:
                type: integer
            Rate-Limit-Reset:
              description: |
                The date in format defined by [RFC 822](https://www.w3.org/Protocols/rfc2616/rfc2616-sec3.html#sec3.3.1)
                when the current period will reset
              schema:
                type: string
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Customer'
        '401':
          $ref: '#/components/responses/AccessForbidden'
        '422':
          $ref: '#/components/responses/InvalidDataError'
      summary: Create a customer with predefined ID
      tags:
        - Customers
      x-code-samples:
        - lang: PHP
          source: |
            $customerForm = new Rebilly\Entities\Customer();
            $customerForm->setFirstName('Sherlock');
            $customerForm->setLastName('Holmes');
            $customerForm->setEmail('sherlock.holmes@gmail.com');

            try {
                $customer = $client->customers()->update('myCustomerId', $customerForm);
            } catch (UnprocessableEntityException $e) {
                echo $e->getMessage();
            }
      requestBody:
        $ref: '#/components/requestBodies/Customer'
  '/customers/{id}/lead-source':
    delete:
      description: |
        Delete a Lead Source that belongs to a certain customer
      responses:
        '204':
          description: Lead Source was deleted
          headers:
            Rate-Limit-Limit:
              description: The number of allowed requests in the current period
              schema:
                type: integer
            Rate-Limit-Remaining:
              description: The number of remaining requests in the current period
              schema:
                type: integer
            Rate-Limit-Reset:
              description: |
                The date in format defined by [RFC 822](https://www.w3.org/Protocols/rfc2616/rfc2616-sec3.html#sec3.3.1)
                when the current period will reset
              schema:
                type: string
        '401':
          $ref: '#/components/responses/AccessForbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '409':
          description: Lead Source cannot be deleted
      summary: Delete a Lead Source for a customer
      tags:
        - Customers
      x-code-samples:
        - lang: PHP
          source: |
            $customer = $client->customers()->deleteLeadSource('myCustomerId');
    get:
      description: |
        Retrieve a Lead Source of given customer
      responses:
        '200':
          description: Lead Source was retrieved successfully
          headers:
            Rate-Limit-Limit:
              description: The number of allowed requests in the current period
              schema:
                type: integer
            Rate-Limit-Remaining:
              description: The number of remaining requests in the current period
              schema:
                type: integer
            Rate-Limit-Reset:
              description: |
                The date in format defined by [RFC 822](https://www.w3.org/Protocols/rfc2616/rfc2616-sec3.html#sec3.3.1)
                when the current period will reset
              schema:
                type: string
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LeadSource'
        '401':
          $ref: '#/components/responses/AccessForbidden'
        '404':
          $ref: '#/components/responses/NotFound'
      summary: Retrieve a customer's Lead Source
      tags:
        - Customers
      x-code-samples:
        - lang: PHP
          source: |
            $customer = $client->customers()->load('myCustomerId');
            $leadSource = $customer->getLeadSource();
    parameters:
      - $ref: '#/components/parameters/resourceId'
    put:
      description: |
        Create a Lead Source for a customer
      responses:
        '200':
          description: Lead Source was updated
          headers:
            Rate-Limit-Limit:
              description: The number of allowed requests in the current period
              schema:
                type: integer
            Rate-Limit-Remaining:
              description: The number of remaining requests in the current period
              schema:
                type: integer
            Rate-Limit-Reset:
              description: |
                The date in format defined by [RFC 822](https://www.w3.org/Protocols/rfc2616/rfc2616-sec3.html#sec3.3.1)
                when the current period will reset
              schema:
                type: string
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LeadSource'
        '201':
          description: Lead Source was created
          headers:
            Rate-Limit-Limit:
              description: The number of allowed requests in the current period
              schema:
                type: integer
            Rate-Limit-Remaining:
              description: The number of remaining requests in the current period
              schema:
                type: integer
            Rate-Limit-Reset:
              description: |
                The date in format defined by [RFC 822](https://www.w3.org/Protocols/rfc2616/rfc2616-sec3.html#sec3.3.1)
                when the current period will reset
              schema:
                type: string
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LeadSource'
        '401':
          $ref: '#/components/responses/AccessForbidden'
        '422':
          description: Invalid data was sent
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidError'
      summary: Create a Lead Source for a customer
      tags:
        - Customers
      x-code-samples:
        - lang: PHP
          source: |
            $leadSourceForm = new Rebilly\Entities\LeadSource();
            $leadSourceForm->setSource('TestSource');
            $leadSourceForm->setCampaign('TestCampaign');

            try {
                $customer = $client->customers()->updateLeadSource('myCustomerId', $leadSourceForm);
            } catch (UnprocessableEntityException $e) {
                echo $e->getMessage();
            }
      requestBody:
        $ref: '#/components/requestBodies/LeadSource'
  /disputes:
    get:
      description: |
        Retrieve a list of disputes
      parameters:
        - $ref: '#/components/parameters/collectionLimit'
        - $ref: '#/components/parameters/collectionOffset'
      responses:
        '200':
          description: A list of disputes was retrieved successfully
          headers:
            Pagination-Limit:
              description: Items per page limit
              schema:
                type: integer
            Pagination-Offset:
              description: Pagination offset
              schema:
                type: integer
            Pagination-Total:
              description: Total items count
              schema:
                type: integer
            Rate-Limit-Limit:
              description: The number of allowed requests in the current period
              schema:
                type: integer
            Rate-Limit-Remaining:
              description: The number of remaining requests in the current period
              schema:
                type: integer
            Rate-Limit-Reset:
              description: |
                The date in format defined by [RFC 822](https://www.w3.org/Protocols/rfc2616/rfc2616-sec3.html#sec3.3.1)
                when the current period will reset
              schema:
                type: string
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/Dispute'
                type: array
        '401':
          $ref: '#/components/responses/AccessForbidden'
      summary: Retrieve a list of disputes
      tags:
        - Disputes
      x-code-samples:
        - lang: PHP
          source: |
            $disputes = $client->disputes()->search([
                'filter' => 'transactionId:testId',
            ]);
    post:
      description: |
        Create a dispute
      responses:
        '201':
          description: Dispute was created
          headers:
            Rate-Limit-Limit:
              description: The number of allowed requests in the current period
              schema:
                type: integer
            Rate-Limit-Remaining:
              description: The number of remaining requests in the current period
              schema:
                type: integer
            Rate-Limit-Reset:
              description: |
                The date in format defined by [RFC 822](https://www.w3.org/Protocols/rfc2616/rfc2616-sec3.html#sec3.3.1)
                when the current period will reset
              schema:
                type: string
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Dispute'
        '401':
          $ref: '#/components/responses/AccessForbidden'
        '422':
          description: Invalid data was sent
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidError'
      summary: Create a dispute
      tags:
        - Disputes
      x-code-samples:
        - lang: PHP
          source: |
            $disputeForm = new Rebilly\Entities\Dispute();
            $disputeForm->setTransactionId('transactionId');
            $disputeForm->setCurrency('USD');
            $disputeForm->setAmount(10);
            $disputeForm->setReasonCode(1000);
            $disputeForm->setType($disputeForm::TYPE_1CB);
            $disputeForm->setStatus($disputeForm::STATUS_RESPONSE_NEEDED);
            $disputeForm->setPostedTime('2025-01-01 05:00:00');

            try {
                $dispute = $client->disputes()->create($disputeForm);
            } catch (UnprocessableEntityException $e) {
                echo $e->getMessage();
            }
      requestBody:
        $ref: '#/components/requestBodies/Dispute'
  '/disputes/{id}':
    get:
      description: |
        Retrieve a dispute with specified identifier string
      responses:
        '200':
          description: Dispute was retrieved successfully
          headers:
            Rate-Limit-Limit:
              description: The number of allowed requests in the current period
              schema:
                type: integer
            Rate-Limit-Remaining:
              description: The number of remaining requests in the current period
              schema:
                type: integer
            Rate-Limit-Reset:
              description: |
                The date in format defined by [RFC 822](https://www.w3.org/Protocols/rfc2616/rfc2616-sec3.html#sec3.3.1)
                when the current period will reset
              schema:
                type: string
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Dispute'
        '401':
          $ref: '#/components/responses/AccessForbidden'
        '404':
          $ref: '#/components/responses/NotFound'
      summary: Retrieve a dispute
      tags:
        - Disputes
      x-code-samples:
        - lang: PHP
          source: |
            $dispute = $client->disputes()->load('disputeId');
    parameters:
      - $ref: '#/components/parameters/resourceId'
    put:
      description: |
        Create or update a Dispute with predefined identifier string
      responses:
        '200':
          description: Dispute was updated
          headers:
            Rate-Limit-Limit:
              description: The number of allowed requests in the current period
              schema:
                type: integer
            Rate-Limit-Remaining:
              description: The number of remaining requests in the current period
              schema:
                type: integer
            Rate-Limit-Reset:
              description: |
                The date in format defined by [RFC 822](https://www.w3.org/Protocols/rfc2616/rfc2616-sec3.html#sec3.3.1)
                when the current period will reset
              schema:
                type: string
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Dispute'
        '201':
          description: Dispute was created
          headers:
            Rate-Limit-Limit:
              description: The number of allowed requests in the current period
              schema:
                type: integer
            Rate-Limit-Remaining:
              description: The number of remaining requests in the current period
              schema:
                type: integer
            Rate-Limit-Reset:
              description: |
                The date in format defined by [RFC 822](https://www.w3.org/Protocols/rfc2616/rfc2616-sec3.html#sec3.3.1)
                when the current period will reset
              schema:
                type: string
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Dispute'
        '401':
          $ref: '#/components/responses/AccessForbidden'
        '422':
          description: Invalid data was sent
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidError'
      summary: Create or update a Dispute with predefined ID
      tags:
        - Disputes
      x-code-samples:
        - lang: PHP
          source: |
            $disputeForm = new Rebilly\Entities\Dispute();
            $disputeForm->setTransactionId('transactionId');
            $disputeForm->setCurrency('USD');
            $disputeForm->setAmount(10);
            $disputeForm->setReasonCode(1000);
            $disputeForm->setType($disputeForm::TYPE_1CB);
            $disputeForm->setStatus($disputeForm::STATUS_RESPONSE_NEEDED);
            $disputeForm->setPostedTime('2025-01-01 05:00:00');

            try {
                $dispute = $client->disputes()->update('disputeId', $dispute);
            } catch (UnprocessableEntityException $e) {
                echo $e->getMessage();
            }
      requestBody:
        $ref: '#/components/requestBodies/Dispute'
  /events:
    get:
      responses:
        '200':
          description: A list of System Events was retrieved successfully
          headers:
            Pagination-Limit:
              description: Items per page limit
              schema:
                type: integer
            Pagination-Offset:
              description: Pagination offset
              schema:
                type: integer
            Pagination-Total:
              description: Total items count
              schema:
                type: integer
            Rate-Limit-Limit:
              description: The number of allowed requests in the current period
              schema:
                type: integer
            Rate-Limit-Remaining:
              description: The number of remaining requests in the current period
              schema:
                type: integer
            Rate-Limit-Reset:
              description: |
                The date in format defined by [RFC 822](https://www.w3.org/Protocols/rfc2616/rfc2616-sec3.html#sec3.3.1)
                when the current period will reset
              schema:
                type: string
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/SystemEvent'
                type: array
        '401':
          $ref: '#/components/responses/AccessForbidden'
      summary: Retrieve a list of existing events
      tags:
        - Events
        - Rules
  '/events/{eventType}':
    get:
      responses:
        '200':
          description: Rules were retrieved successfully
          headers:
            Rate-Limit-Limit:
              description: The number of allowed requests in the current period
              schema:
                type: integer
            Rate-Limit-Remaining:
              description: The number of remaining requests in the current period
              schema:
                type: integer
            Rate-Limit-Reset:
              description: |
                The date in format defined by [RFC 822](https://www.w3.org/Protocols/rfc2616/rfc2616-sec3.html#sec3.3.1)
                when the current period will reset
              schema:
                type: string
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SystemEvent'
        '401':
          $ref: '#/components/responses/AccessForbidden'
        '404':
          $ref: '#/components/responses/NotFound'
      summary: Retrieve the event information
      tags:
        - Events
        - Rules
    parameters:
      - $ref: '#/components/parameters/systemEventType'
  '/events/{eventType}/rules':
    get:
      responses:
        '200':
          description: Rules were retrieved successfully
          headers:
            Rate-Limit-Limit:
              description: The number of allowed requests in the current period
              schema:
                type: integer
            Rate-Limit-Remaining:
              description: The number of remaining requests in the current period
              schema:
                type: integer
            Rate-Limit-Reset:
              description: |
                The date in format defined by [RFC 822](https://www.w3.org/Protocols/rfc2616/rfc2616-sec3.html#sec3.3.1)
                when the current period will reset
              schema:
                type: string
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RuleSet'
        '401':
          $ref: '#/components/responses/AccessForbidden'
        '404':
          $ref: '#/components/responses/NotFound'
      summary: Retrieve a list of rules for event
      tags:
        - Events
        - Rules
    parameters:
      - $ref: '#/components/parameters/systemEventType'
    put:
      responses:
        '200':
          description: Rules were updated
          headers:
            Rate-Limit-Limit:
              description: The number of allowed requests in the current period
              schema:
                type: integer
            Rate-Limit-Remaining:
              description: The number of remaining requests in the current period
              schema:
                type: integer
            Rate-Limit-Reset:
              description: |
                The date in format defined by [RFC 822](https://www.w3.org/Protocols/rfc2616/rfc2616-sec3.html#sec3.3.1)
                when the current period will reset
              schema:
                type: string
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RuleSet'
        '401':
          $ref: '#/components/responses/AccessForbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '422':
          description: Invalid data was sent
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidError'
      summary: Update the rules for event
      tags:
        - Events
        - Rules
      requestBody:
        $ref: '#/components/requestBodies/RuleSet'
  '/events/{eventType}/rules/history':
    get:
      description: |
        Retrieve the change history of the selected set of rules.
        The history is updated each time you change the rules.
      parameters:
        - $ref: '#/components/parameters/collectionLimit'
        - $ref: '#/components/parameters/collectionOffset'
        - $ref: '#/components/parameters/collectionFilter'
        - $ref: '#/components/parameters/collectionQuery'
        - $ref: '#/components/parameters/collectionSort'
        - $ref: '#/components/parameters/collectionFields'
        - $ref: '#/components/parameters/collectionExpand'
      responses:
        '200':
          description: History was retrieved successfully
          headers:
            Pagination-Limit:
              description: Items per page limit
              schema:
                type: integer
            Pagination-Offset:
              description: Pagination offset
              schema:
                type: integer
            Pagination-Total:
              description: Total items count
              schema:
                type: integer
            Rate-Limit-Limit:
              description: The number of allowed requests in the current period
              schema:
                type: integer
            Rate-Limit-Remaining:
              description: The number of remaining requests in the current period
              schema:
                type: integer
            Rate-Limit-Reset:
              description: |
                The date in format defined by [RFC 822](https://www.w3.org/Protocols/rfc2616/rfc2616-sec3.html#sec3.3.1)
                when the current period will reset
              schema:
                type: string
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/RuleSetHistoryItem'
                type: array
        '401':
          $ref: '#/components/responses/AccessForbidden'
        '404':
          $ref: '#/components/responses/NotFound'
      summary: Retrieve the change history of the set of rules
      tags:
        - Events
        - Rules
    parameters:
      - $ref: '#/components/parameters/systemEventType'
  '/events/{eventType}/rules/history/{version}':
    get:
      description: |
        Retrieve the record from the change history of the selected set of rules.
        A history record is created each time you change the rules.
      parameters:
        - $ref: '#/components/parameters/collectionFields'
        - $ref: '#/components/parameters/collectionExpand'
      responses:
        '200':
          description: History record was retrieved successfully
          headers:
            Rate-Limit-Limit:
              description: The number of allowed requests in the current period
              schema:
                type: integer
            Rate-Limit-Remaining:
              description: The number of remaining requests in the current period
              schema:
                type: integer
            Rate-Limit-Reset:
              description: |
                The date in format defined by [RFC 822](https://www.w3.org/Protocols/rfc2616/rfc2616-sec3.html#sec3.3.1)
                when the current period will reset
              schema:
                type: string
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RuleSetHistoryItem'
        '401':
          $ref: '#/components/responses/AccessForbidden'
        '404':
          $ref: '#/components/responses/NotFound'
      summary: Retrieve the record from the change history of the set of rules
      tags:
        - Events
        - Rules
    parameters:
      - $ref: '#/components/parameters/systemEventType'
      - $ref: '#/components/parameters/rulesVersion'
  '/events/{eventType}/rules/versions/{version}':
    get:
      description: |
        Retrieve the version of the selected set of rules.
        The versions are created each time you change the rules.
      parameters:
        - $ref: '#/components/parameters/collectionFields'
        - $ref: '#/components/parameters/collectionExpand'
      responses:
        '200':
          description: Rules version was retrieved successfully
          headers:
            Rate-Limit-Limit:
              description: The number of allowed requests in the current period
              schema:
                type: integer
            Rate-Limit-Remaining:
              description: The number of remaining requests in the current period
              schema:
                type: integer
            Rate-Limit-Reset:
              description: |
                The date in format defined by [RFC 822](https://www.w3.org/Protocols/rfc2616/rfc2616-sec3.html#sec3.3.1)
                when the current period will reset
              schema:
                type: string
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RuleSetVersion'
        '401':
          $ref: '#/components/responses/AccessForbidden'
        '404':
          $ref: '#/components/responses/NotFound'
      summary: Retrieve the version of the set of rules
      tags:
        - Events
        - Rules
    parameters:
      - $ref: '#/components/parameters/systemEventType'
      - $ref: '#/components/parameters/rulesVersion'
  /files:
    get:
      description: |
        Retrieve a list of files
      parameters:
        - $ref: '#/components/parameters/collectionLimit'
        - $ref: '#/components/parameters/collectionOffset'
        - $ref: '#/components/parameters/collectionFilter'
        - $ref: '#/components/parameters/collectionQuery'
        - $ref: '#/components/parameters/collectionExpand'
        - $ref: '#/components/parameters/collectionFields'
        - description: The collection items sort field and order (prefix with "-" for descending sort).
          in: query
          name: sort
          style: form
          schema:
            type: array
            items:
              enum:
                - id
                - '-id'
                - name
                - '-name'
                - extension
                - '-extension'
                - size
                - '-size'
                - width
                - '-width'
                - height
                - '-height'
                - createdTime
                - '-createdTime'
                - updatedTime
                - '-updatedTime'
              type: string
      responses:
        '200':
          description: A list of Files was retrieved successfully
          headers:
            Pagination-Limit:
              description: Items per page limit
              schema:
                type: integer
            Pagination-Offset:
              description: Pagination offset
              schema:
                type: integer
            Pagination-Total:
              description: Total items count
              schema:
                type: integer
            Rate-Limit-Limit:
              description: The number of allowed requests in the current period
              schema:
                type: integer
            Rate-Limit-Remaining:
              description: The number of remaining requests in the current period
              schema:
                type: integer
            Rate-Limit-Reset:
              description: |
                The date in format defined by [RFC 822](https://www.w3.org/Protocols/rfc2616/rfc2616-sec3.html#sec3.3.1)
                when the current period will reset
              schema:
                type: string
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/File'
                type: array
        '401':
          $ref: '#/components/responses/AccessForbidden'
      summary: Retrieve a list of files
      tags:
        - Files
      x-code-samples:
        - lang: PHP
          source: |
            $files = $client->files()->search([
                'filter' => 'name:TestFile',
            ]);
    post:
      description: |
        Create a file
      responses:
        '201':
          description: File was created
          headers:
            Rate-Limit-Limit:
              description: The number of allowed requests in the current period
              schema:
                type: integer
            Rate-Limit-Remaining:
              description: The number of remaining requests in the current period
              schema:
                type: integer
            Rate-Limit-Reset:
              description: |
                The date in format defined by [RFC 822](https://www.w3.org/Protocols/rfc2616/rfc2616-sec3.html#sec3.3.1)
                when the current period will reset
              schema:
                type: string
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/File'
        '401':
          $ref: '#/components/responses/AccessForbidden'
        '422':
          $ref: '#/components/responses/InvalidDataError'
      summary: Create a file
      tags:
        - Files
      x-code-samples:
        - lang: PHP
          source: |
            $fileForm = new Rebilly\Entities\File();
            $fileForm->setUrl('http://test.com/somefile.jpg');

            try {
                $file = $client->files()->create($fileForm);
            } catch (UnprocessableEntityException $e) {
                echo $e->getMessage();
            }
      requestBody:
        content:
          application/json:
            schema:
              properties:
                url:
                  description: The file URL
                  type: string
              type: object
        description: 'Additionally, a file can be sent with a multipart/form-data POST request or the file''s raw body can be sent as a request body'
        required: true
  '/files/{id}':
    delete:
      description: |
        Delete the File with predefined identifier string
      responses:
        '204':
          description: File was deleted
          headers:
            Rate-Limit-Limit:
              description: The number of allowed requests in the current period
              schema:
                type: integer
            Rate-Limit-Remaining:
              description: The number of remaining requests in the current period
              schema:
                type: integer
            Rate-Limit-Reset:
              description: |
                The date in format defined by [RFC 822](https://www.w3.org/Protocols/rfc2616/rfc2616-sec3.html#sec3.3.1)
                when the current period will reset
              schema:
                type: string
        '401':
          $ref: '#/components/responses/AccessForbidden'
        '404':
          $ref: '#/components/responses/NotFound'
      summary: Delete a File
      tags:
        - Files
      x-code-samples:
        - lang: PHP
          source: |
            $client->files()->delete('fileId');
    get:
      description: |
        Retrieve a File with specified identifier string
      responses:
        '200':
          description: File was retrieved successfully
          headers:
            Rate-Limit-Limit:
              description: The number of allowed requests in the current period
              schema:
                type: integer
            Rate-Limit-Remaining:
              description: The number of remaining requests in the current period
              schema:
                type: integer
            Rate-Limit-Reset:
              description: |
                The date in format defined by [RFC 822](https://www.w3.org/Protocols/rfc2616/rfc2616-sec3.html#sec3.3.1)
                when the current period will reset
              schema:
                type: string
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/File'
        '401':
          $ref: '#/components/responses/AccessForbidden'
        '404':
          $ref: '#/components/responses/NotFound'
      summary: Retrieve a File
      tags:
        - Files
      x-code-samples:
        - lang: PHP
          source: |
            $file = $client->files()->load('fileId');
    parameters:
      - $ref: '#/components/parameters/resourceId'
    put:
      description: |
        Update the File with predefined ID
      responses:
        '200':
          description: File was updated
          headers:
            Rate-Limit-Limit:
              description: The number of allowed requests in the current period
              schema:
                type: integer
            Rate-Limit-Remaining:
              description: The number of remaining requests in the current period
              schema:
                type: integer
            Rate-Limit-Reset:
              description: |
                The date in format defined by [RFC 822](https://www.w3.org/Protocols/rfc2616/rfc2616-sec3.html#sec3.3.1)
                when the current period will reset
              schema:
                type: string
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/File'
        '401':
          $ref: '#/components/responses/AccessForbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '422':
          description: Invalid data was sent
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidError'
      summary: Update the File with predefined ID. Note that file can be uploaded with POST only.
      tags:
        - Files
      x-code-samples:
        - lang: PHP
          source: |
            $fileForm = new Rebilly\Entities\File();
            $fileForm->setDescription('This is a test file');

            try {
                $file = $client->files()->update('fileId', $fileForm);
            } catch (UnprocessableEntityException $e) {
                echo $e->getMessage();
            }
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/File'
        description: File resource
        required: true
  '/files/{id}/download':
    get:
      description: |
        Retrieve a file
      responses:
        '200':
          description: The file was retrieved successfully
          headers:
            Content-Length:
              description: The number of bytes in the file
              schema:
                type: integer
            Content-Type:
              description: The MIME type of the file
              schema:
                type: string
          content:
            application/json:
              schema:
                readOnly: true
                type: string
        '401':
          $ref: '#/components/responses/AccessForbidden'
        '404':
          $ref: '#/components/responses/NotFound'
      summary: Retrieve a file
      tags:
        - Files
    parameters:
      - $ref: '#/components/parameters/resourceId'
  '/files/{id}/download{extension}':
    get:
      description: |
        Used for converting images server-side
      responses:
        '200':
          description: The file was retrieved successfully
          headers:
            Content-Length:
              description: The number of bytes in the file
              schema:
                type: integer
            Content-Type:
              description: The MIME type of the file
              schema:
                type: string
          content:
            application/json:
              schema:
                readOnly: true
                type: string
        '401':
          $ref: '#/components/responses/AccessForbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '422':
          $ref: '#/components/responses/InvalidDataError'
      summary: Used for converting images server-side
      tags:
        - Files
    parameters:
      - $ref: '#/components/parameters/resourceId'
      - description: File extension which also indicates the desired file format
        in: path
        name: extension
        required: true
        schema:
          type: string
          enum:
            - .png
            - .jpg
  /forgot-password:
    post:
      description: |
        Sends an email with a link containing a token to reset user password
      responses:
        '204':
          description: Email sent successfully
          headers:
            Rate-Limit-Limit:
              description: The number of allowed requests in the current period
              schema:
                type: integer
            Rate-Limit-Remaining:
              description: The number of remaining requests in the current period
              schema:
                type: integer
            Rate-Limit-Reset:
              description: |
                The date in format defined by [RFC 822](https://www.w3.org/Protocols/rfc2616/rfc2616-sec3.html#sec3.3.1)
                when the current period will reset
              schema:
                type: string
        '422':
          description: Invalid data was sent
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidError'
      summary: Sends an email with a link containing a token to reset user password
      tags:
        - Users
      x-code-samples:
        - lang: PHP
          source: |
            $forgotPasswordForm = new Rebilly\Entities\Email();
            $forgotPasswordForm->setEmail('johndoe@test.com');

            try {
                $client->users()->forgotPassword($forgotPasswordForm);
            } catch (UnprocessableEntityException $e) {
                echo $e->getMessage();
            }
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Email'
        description: Email resource
        required: true
  /gateway-accounts:
    get:
      description: |
        Retrieve a list of gateway accounts
      parameters:
        - $ref: '#/components/parameters/collectionLimit'
        - $ref: '#/components/parameters/collectionOffset'
      responses:
        '200':
          description: A list of Gateway Accounts was retrieved successfully
          headers:
            Pagination-Limit:
              description: Items per page limit
              schema:
                type: integer
            Pagination-Offset:
              description: Pagination offset
              schema:
                type: integer
            Pagination-Total:
              description: Total items count
              schema:
                type: integer
            Rate-Limit-Limit:
              description: The number of allowed requests in the current period
              schema:
                type: integer
            Rate-Limit-Remaining:
              description: The number of remaining requests in the current period
              schema:
                type: integer
            Rate-Limit-Reset:
              description: |
                The date in format defined by [RFC 822](https://www.w3.org/Protocols/rfc2616/rfc2616-sec3.html#sec3.3.1)
                when the current period will reset
              schema:
                type: string
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/GatewayAccount'
                type: array
        '401':
          $ref: '#/components/responses/AccessForbidden'
      summary: Retrieve a list of gateway accounts
      tags:
        - Gateway Accounts
      x-code-samples:
        - lang: PHP
          source: |
            $gatewayAccounts = $client->$gatewayAccounts()->search([
                'filter' => 'currency:USD',
            ]);
    post:
      description: |
        Create a Gateway Account
      responses:
        '201':
          description: Gateway Account was created
          headers:
            Rate-Limit-Limit:
              description: The number of allowed requests in the current period
              schema:
                type: integer
            Rate-Limit-Remaining:
              description: The number of remaining requests in the current period
              schema:
                type: integer
            Rate-Limit-Reset:
              description: |
                The date in format defined by [RFC 822](https://www.w3.org/Protocols/rfc2616/rfc2616-sec3.html#sec3.3.1)
                when the current period will reset
              schema:
                type: string
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GatewayAccount'
        '401':
          $ref: '#/components/responses/AccessForbidden'
        '422':
          description: Invalid data was sent
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidError'
      summary: Create a Gateway Account
      tags:
        - Gateway Accounts
      x-code-samples:
        - lang: PHP
          source: |
            $gatewayAccountForm = new Rebilly\Entities\GatewayAccount();

            $gatewayAccountForm->setGatewayName('A1Gateway');
            $gatewayAccountForm->setAcquirerName('Bank of Rebilly');
            $gatewayAccountForm->setOrganizationId('organizationId');
            $gatewayAccountForm->setMerchantCategoryCode(5734);
            $gatewayAccountForm->setWebsites([
                'websiteId1',
                'websiteId2',
            ]);
            $gatewayAccountForm->setPaymentCardSchemes([
                Rebilly\Entities\PaymentCardScheme::SCHEME_VISA,
                Rebilly\Entities\PaymentCardScheme::SCHEME_MASTERCARD,
            ]);
            $gatewayAccountForm->setMethod(Rebilly\Entities\PaymentMethod::METHOD_CASH);

            $gatewayConfig = [
                'accountId' => 'test',
                'password' => '123',
            ];

            $gatewayAccountForm->setGatewayConfig($gatewayConfig);

            try {
                $gatewayAccount = $client->gatewayAccounts()->create($gatewayAccountForm);
            } catch (UnprocessableEntityException $e) {
                echo $e->getMessage();
            }
      requestBody:
        $ref: '#/components/requestBodies/GatewayAccount'
  '/gateway-accounts/{id}':
    delete:
      description: |
        Delete a Gateway Account with predefined identifier string
      responses:
        '204':
          description: Gateway Account was deleted
          headers:
            Rate-Limit-Limit:
              description: The number of allowed requests in the current period
              schema:
                type: integer
            Rate-Limit-Remaining:
              description: The number of remaining requests in the current period
              schema:
                type: integer
            Rate-Limit-Reset:
              description: |
                The date in format defined by [RFC 822](https://www.w3.org/Protocols/rfc2616/rfc2616-sec3.html#sec3.3.1)
                when the current period will reset
              schema:
                type: string
        '401':
          $ref: '#/components/responses/AccessForbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '409':
          $ref: '#/components/responses/Conflict'
      summary: Delete a Gateway Account
      tags:
        - Gateway Accounts
      x-code-samples:
        - lang: PHP
          source: |
            try {
                $client->gatewayAccounts()->delete('gatewayAccountId');
            } catch (ServerException $e) {
                echo $e->getMessage();
            }
    get:
      description: |
        Retrieve a Gateway Account with specified identifier string
      responses:
        '200':
          description: Gateway Account was retrieved successfully
          headers:
            Rate-Limit-Limit:
              description: The number of allowed requests in the current period
              schema:
                type: integer
            Rate-Limit-Remaining:
              description: The number of remaining requests in the current period
              schema:
                type: integer
            Rate-Limit-Reset:
              description: |
                The date in format defined by [RFC 822](https://www.w3.org/Protocols/rfc2616/rfc2616-sec3.html#sec3.3.1)
                when the current period will reset
              schema:
                type: string
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GatewayAccount'
        '401':
          $ref: '#/components/responses/AccessForbidden'
        '404':
          $ref: '#/components/responses/NotFound'
      summary: Retrieve a Gateway Account
      tags:
        - Gateway Accounts
      x-code-samples:
        - lang: PHP
          source: |
            $gatewayAccount = $client->gatewayAccounts()->load('gatewayAccountId');
    parameters:
      - $ref: '#/components/parameters/resourceId'
    patch:
      description: |
        Update a GatewayAccount with predefined identifier string
      responses:
        '200':
          description: Gateway Account was updated
          headers:
            Rate-Limit-Limit:
              description: The number of allowed requests in the current period
              schema:
                type: integer
            Rate-Limit-Remaining:
              description: The number of remaining requests in the current period
              schema:
                type: integer
            Rate-Limit-Reset:
              description: |
                The date in format defined by [RFC 822](https://www.w3.org/Protocols/rfc2616/rfc2616-sec3.html#sec3.3.1)
                when the current period will reset
              schema:
                type: string
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GatewayAccount'
        '401':
          $ref: '#/components/responses/AccessForbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '422':
          description: Invalid data was sent
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidError'
      summary: Update a Gateway Account with predefined ID
      tags:
        - Gateway Accounts
      requestBody:
        $ref: '#/components/requestBodies/GatewayAccount'
    put:
      description: |
        Create or update a GatewayAccount with predefined identifier string
      responses:
        '200':
          description: Gateway Account was updated
          headers:
            Rate-Limit-Limit:
              description: The number of allowed requests in the current period
              schema:
                type: integer
            Rate-Limit-Remaining:
              description: The number of remaining requests in the current period
              schema:
                type: integer
            Rate-Limit-Reset:
              description: |
                The date in format defined by [RFC 822](https://www.w3.org/Protocols/rfc2616/rfc2616-sec3.html#sec3.3.1)
                when the current period will reset
              schema:
                type: string
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GatewayAccount'
        '201':
          description: Gateway Account was created
          headers:
            Rate-Limit-Limit:
              description: The number of allowed requests in the current period
              schema:
                type: integer
            Rate-Limit-Remaining:
              description: The number of remaining requests in the current period
              schema:
                type: integer
            Rate-Limit-Reset:
              description: |
                The date in format defined by [RFC 822](https://www.w3.org/Protocols/rfc2616/rfc2616-sec3.html#sec3.3.1)
                when the current period will reset
              schema:
                type: string
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GatewayAccount'
        '401':
          $ref: '#/components/responses/AccessForbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '422':
          description: Invalid data was sent
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidError'
      summary: Create or update a Gateway Account with predefined ID
      tags:
        - Gateway Accounts
      x-code-samples:
        - lang: PHP
          source: |
            $gatewayAccountForm = new Rebilly\Entities\GatewayAccount();

            $gatewayAccountForm->setGatewayName('A1Gateway');
            $gatewayAccountForm->setAcquirerName('Bank of Rebilly');
            $gatewayAccountForm->setOrganizationId('organizationId');
            $gatewayAccountForm->setMerchantCategoryCode(5734);
            $gatewayAccountForm->setWebsites([
                'websiteId1',
                'websiteId2',
            ]);
            $gatewayAccountForm->setPaymentCardSchemes([
                Rebilly\Entities\PaymentCardScheme::SCHEME_VISA,
                Rebilly\Entities\PaymentCardScheme::SCHEME_MASTERCARD,
            ]);
            $gatewayAccountForm->setMethod(Rebilly\Entities\PaymentMethod::METHOD_CASH);

            $gatewayConfig = [
                'accountId' => 'test',
                'password' => '123',
            ];

            $gatewayAccountForm->setGatewayConfig($gatewayConfig);

            try {
                $gatewayAccount = $client->gatewayAccounts()->update('gatewayAccountId', $gatewayAccountForm);
            } catch (UnprocessableEntityException $e) {
                echo $e->getMessage();
            }
      requestBody:
        $ref: '#/components/requestBodies/GatewayAccount'
  /invoices:
    get:
      description: |
        Retrieve a list of invoices
      parameters:
        - $ref: '#/components/parameters/collectionLimit'
        - $ref: '#/components/parameters/collectionOffset'
        - description: The response media type
          in: header
          name: Accept
          schema:
            type: string
            enum:
              - application/json
              - text/csv
            default: application/json
      responses:
        '200':
          description: A list of invoices was retrieved successfully
          headers:
            Pagination-Limit:
              description: Items per page limit
              schema:
                type: integer
            Pagination-Offset:
              description: Pagination offset
              schema:
                type: integer
            Pagination-Total:
              description: Total items count
              schema:
                type: integer
            Rate-Limit-Limit:
              description: The number of allowed requests in the current period
              schema:
                type: integer
            Rate-Limit-Remaining:
              description: The number of remaining requests in the current period
              schema:
                type: integer
            Rate-Limit-Reset:
              description: |
                The date in format defined by [RFC 822](https://www.w3.org/Protocols/rfc2616/rfc2616-sec3.html#sec3.3.1)
                when the current period will reset
              schema:
                type: string
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/Invoice'
                type: array
            text/csv:
              schema:
                items:
                  $ref: '#/components/schemas/Invoice'
                type: array
        '401':
          $ref: '#/components/responses/AccessForbidden'
      summary: Retrieve a list of invoices
      tags:
        - Invoices
      x-code-samples:
        - lang: PHP
          source: |
            $invoices = $client->invoices()->search([
                'filter' => 'customerId:testCustomerId',
            ]);
    post:
      description: |
        Create an invoice
      responses:
        '201':
          description: Invoice was created
          headers:
            Rate-Limit-Limit:
              description: The number of allowed requests in the current period
              schema:
                type: integer
            Rate-Limit-Remaining:
              description: The number of remaining requests in the current period
              schema:
                type: integer
            Rate-Limit-Reset:
              description: |
                The date in format defined by [RFC 822](https://www.w3.org/Protocols/rfc2616/rfc2616-sec3.html#sec3.3.1)
                when the current period will reset
              schema:
                type: string
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Invoice'
        '401':
          $ref: '#/components/responses/AccessForbidden'
        '422':
          description: Invalid data was sent
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidError'
      summary: Create an invoice
      tags:
        - Invoices
      x-code-samples:
        - lang: PHP
          source: |
            $invoiceForm = new Rebilly\Entities\Invoice();
            $invoiceForm->setCustomerId('customerId');
            $invoiceForm->setWebsiteId('websiteId');
            $invoiceForm->setCurrency('USD');

            try {
                $invoice = $client->invoices()->create($invoiceForm);
            } catch (UnprocessableEntityException $e) {
                echo $e->getMessage();
            }
      requestBody:
        $ref: '#/components/requestBodies/Invoice'
  '/invoices/{id}':
    get:
      description: |
        Retrieve an invoice with specified identifier string
      parameters:
        - description: The response media type
          in: header
          name: Accept
          schema:
            type: string
            enum:
              - application/json
              - application/pdf
            default: application/json
      responses:
        '200':
          description: Invoice was retrieved successfully
          headers:
            Rate-Limit-Limit:
              description: The number of allowed requests in the current period
              schema:
                type: integer
            Rate-Limit-Remaining:
              description: The number of remaining requests in the current period
              schema:
                type: integer
            Rate-Limit-Reset:
              description: |
                The date in format defined by [RFC 822](https://www.w3.org/Protocols/rfc2616/rfc2616-sec3.html#sec3.3.1)
                when the current period will reset
              schema:
                type: string
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Invoice'
            application/pdf:
              schema:
                $ref: '#/components/schemas/Invoice'
        '401':
          $ref: '#/components/responses/AccessForbidden'
        '404':
          $ref: '#/components/responses/NotFound'
      summary: Retrieve an invoice
      tags:
        - Invoices
      x-code-samples:
        - lang: PHP
          source: |
            $invoice = $client->invoices()->load('invoiceId');
    parameters:
      - $ref: '#/components/parameters/resourceId'
    put:
      description: |
        Create or update an invoice with predefined identifier string
      responses:
        '200':
          description: Invoice was updated
          headers:
            Rate-Limit-Limit:
              description: The number of allowed requests in the current period
              schema:
                type: integer
            Rate-Limit-Remaining:
              description: The number of remaining requests in the current period
              schema:
                type: integer
            Rate-Limit-Reset:
              description: |
                The date in format defined by [RFC 822](https://www.w3.org/Protocols/rfc2616/rfc2616-sec3.html#sec3.3.1)
                when the current period will reset
              schema:
                type: string
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Invoice'
        '201':
          description: Invoice was created
          headers:
            Rate-Limit-Limit:
              description: The number of allowed requests in the current period
              schema:
                type: integer
            Rate-Limit-Remaining:
              description: The number of remaining requests in the current period
              schema:
                type: integer
            Rate-Limit-Reset:
              description: |
                The date in format defined by [RFC 822](https://www.w3.org/Protocols/rfc2616/rfc2616-sec3.html#sec3.3.1)
                when the current period will reset
              schema:
                type: string
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Invoice'
        '401':
          $ref: '#/components/responses/AccessForbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '422':
          description: Invalid data was sent
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidError'
      summary: Create or update an invoice with predefined ID
      tags:
        - Invoices
      x-code-samples:
        - lang: PHP
          source: |
            $invoiceForm = new Rebilly\Entities\Invoice();
            $invoiceForm->setCustomerId('customerId');
            $invoiceForm->setWebsiteId('websiteId');
            $invoiceForm->setCurrency('USD');

            try {
                $invoice = $client->invoices()->update('invoiceId', $invoiceForm);
            } catch (UnprocessableEntityException $e) {
                echo $e->getMessage();
            }
      requestBody:
        $ref: '#/components/requestBodies/Invoice'
  '/invoices/{id}/abandon':
    parameters:
      - $ref: '#/components/parameters/resourceId'
    post:
      description: |
        Abandon an invoice with specified identifier string
      responses:
        '201':
          description: Invoice was abandoned successfully
          headers:
            Rate-Limit-Limit:
              description: The number of allowed requests in the current period
              schema:
                type: integer
            Rate-Limit-Remaining:
              description: The number of remaining requests in the current period
              schema:
                type: integer
            Rate-Limit-Reset:
              description: |
                The date in format defined by [RFC 822](https://www.w3.org/Protocols/rfc2616/rfc2616-sec3.html#sec3.3.1)
                when the current period will reset
              schema:
                type: string
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Invoice'
        '401':
          $ref: '#/components/responses/AccessForbidden'
        '404':
          $ref: '#/components/responses/NotFound'
      summary: Abandon an invoice
      tags:
        - Invoices
      x-code-samples:
        - lang: PHP
          source: |
            $invoice = $client->invoices()->abandon('invoiceId');
  '/invoices/{id}/issue':
    parameters:
      - $ref: '#/components/parameters/resourceId'
    post:
      description: |
        Issue an invoice with specified identifier string
      responses:
        '201':
          description: Invoice was issued successfully
          headers:
            Rate-Limit-Limit:
              description: The number of allowed requests in the current period
              schema:
                type: integer
            Rate-Limit-Remaining:
              description: The number of remaining requests in the current period
              schema:
                type: integer
            Rate-Limit-Reset:
              description: |
                The date in format defined by [RFC 822](https://www.w3.org/Protocols/rfc2616/rfc2616-sec3.html#sec3.3.1)
                when the current period will reset
              schema:
                type: string
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Invoice'
        '401':
          $ref: '#/components/responses/AccessForbidden'
        '404':
          $ref: '#/components/responses/NotFound'
      summary: Issue an invoice
      tags:
        - Invoices
      x-code-samples:
        - lang: PHP
          source: |
            $invoice = $client->invoices()->issue('invoiceId', '2025-01-01 05:00:00');
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/InvoiceIssue'
        description: InvoiceIssue resource
        required: true
  '/invoices/{id}/items':
    get:
      description: |
        Retrieve an invoice items with specified invoice identifier string
      parameters:
        - $ref: '#/components/parameters/collectionLimit'
        - $ref: '#/components/parameters/collectionOffset'
      responses:
        '200':
          description: Invoice items were retrieved successfully
          headers:
            Rate-Limit-Limit:
              description: The number of allowed requests in the current period
              schema:
                type: integer
            Rate-Limit-Remaining:
              description: The number of remaining requests in the current period
              schema:
                type: integer
            Rate-Limit-Reset:
              description: |
                The date in format defined by [RFC 822](https://www.w3.org/Protocols/rfc2616/rfc2616-sec3.html#sec3.3.1)
                when the current period will reset
              schema:
                type: string
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/InvoiceItem'
                type: array
        '401':
          $ref: '#/components/responses/AccessForbidden'
        '404':
          $ref: '#/components/responses/NotFound'
      summary: Retrieve invoice items
      tags:
        - Invoices
      x-code-samples:
        - lang: PHP
          source: |
            $invoiceItems = $client->invoiceItems()->search('invoiceId', [
                'filter' => 'quantity:5',
            ]);
    parameters:
      - $ref: '#/components/parameters/resourceId'
    post:
      description: |
        Create an invoice item
      responses:
        '201':
          description: InvoiceItem was created
          headers:
            Rate-Limit-Limit:
              description: The number of allowed requests in the current period
              schema:
                type: integer
            Rate-Limit-Remaining:
              description: The number of remaining requests in the current period
              schema:
                type: integer
            Rate-Limit-Reset:
              description: |
                The date in format defined by [RFC 822](https://www.w3.org/Protocols/rfc2616/rfc2616-sec3.html#sec3.3.1)
                when the current period will reset
              schema:
                type: string
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvoiceItem'
        '401':
          $ref: '#/components/responses/AccessForbidden'
        '422':
          description: Invalid data was sent
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidError'
      summary: Create an invoice item
      tags:
        - Invoices
      x-code-samples:
        - lang: PHP
          source: |
            $invoiceItemForm = new Rebilly\Entities\InvoiceItem();
            $invoiceItemForm->setType($invoiceItemForm::TYPE_DEBIT);
            $invoiceItemForm->setUnitPrice(0.99);
            $invoiceItemForm->setQuantity(5);

            try {
                $invoiceItem = $client->invoiceItems()->create($invoiceItemForm, 'invoiceId');
            } catch (UnprocessableEntityException $e) {
                echo $e->getMessage();
            }
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/InvoiceItem'
        description: InvoiceItem resource
        required: true
  '/invoices/{id}/lead-source':
    delete:
      description: |
        Delete a Lead Source that belongs to a certain invoice
      responses:
        '204':
          description: Lead Source was deleted
          headers:
            Rate-Limit-Limit:
              description: The number of allowed requests in the current period
              schema:
                type: integer
            Rate-Limit-Remaining:
              description: The number of remaining requests in the current period
              schema:
                type: integer
            Rate-Limit-Reset:
              description: |
                The date in format defined by [RFC 822](https://www.w3.org/Protocols/rfc2616/rfc2616-sec3.html#sec3.3.1)
                when the current period will reset
              schema:
                type: string
        '401':
          $ref: '#/components/responses/AccessForbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '409':
          description: Lead Source cannot be deleted
      summary: Delete a Lead Source for an invoice
      tags:
        - Invoices
      x-code-samples:
        - lang: PHP
          source: |
            $invoice = $client->invoices()->deleteLeadSource('invoiceId');
    get:
      description: |
        Retrieve a Lead Source of given invoice
      responses:
        '200':
          description: Lead Source was retrieved successfully
          headers:
            Rate-Limit-Limit:
              description: The number of allowed requests in the current period
              schema:
                type: integer
            Rate-Limit-Remaining:
              description: The number of remaining requests in the current period
              schema:
                type: integer
            Rate-Limit-Reset:
              description: |
                The date in format defined by [RFC 822](https://www.w3.org/Protocols/rfc2616/rfc2616-sec3.html#sec3.3.1)
                when the current period will reset
              schema:
                type: string
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LeadSource'
        '401':
          $ref: '#/components/responses/AccessForbidden'
        '404':
          $ref: '#/components/responses/NotFound'
      summary: Retrieve an invoice's Lead Source
      tags:
        - Invoices
      x-code-samples:
        - lang: PHP
          source: |
            $invoice = $client->invoices()->load('invoiceId');
            $leadSource = $invoice->getLeadSource();
    parameters:
      - $ref: '#/components/parameters/resourceId'
    put:
      description: |
        Create a Lead Source for an invoice
      responses:
        '200':
          description: Lead Source was updated
          headers:
            Rate-Limit-Limit:
              description: The number of allowed requests in the current period
              schema:
                type: integer
            Rate-Limit-Remaining:
              description: The number of remaining requests in the current period
              schema:
                type: integer
            Rate-Limit-Reset:
              description: |
                The date in format defined by [RFC 822](https://www.w3.org/Protocols/rfc2616/rfc2616-sec3.html#sec3.3.1)
                when the current period will reset
              schema:
                type: string
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LeadSource'
        '201':
          description: Lead Source was created
          headers:
            Rate-Limit-Limit:
              description: The number of allowed requests in the current period
              schema:
                type: integer
            Rate-Limit-Remaining:
              description: The number of remaining requests in the current period
              schema:
                type: integer
            Rate-Limit-Reset:
              description: |
                The date in format defined by [RFC 822](https://www.w3.org/Protocols/rfc2616/rfc2616-sec3.html#sec3.3.1)
                when the current period will reset
              schema:
                type: string
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LeadSource'
        '401':
          $ref: '#/components/responses/AccessForbidden'
        '422':
          description: Invalid data was sent
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidError'
      summary: Create a Lead Source for an invoice
      tags:
        - Invoices
      x-code-samples:
        - lang: PHP
          source: |
            $leadSourceForm = new Rebilly\Entities\LeadSource();
            $leadSourceForm->setSource('TestSource');
            $leadSourceForm->setCampaign('TestCampaign');

            try {
                $invoice = $client->invoices()->updateLeadSource('invoiceId', $leadSourceForm);
            } catch (UnprocessableEntityException $e) {
                echo $e->getMessage();
            }
      requestBody:
        $ref: '#/components/requestBodies/LeadSource'
  '/invoices/{id}/void':
    parameters:
      - $ref: '#/components/parameters/resourceId'
    post:
      description: |
        Void an invoice with specified identifier string
      responses:
        '201':
          description: Invoice was voided successfully
          headers:
            Rate-Limit-Limit:
              description: The number of allowed requests in the current period
              schema:
                type: integer
            Rate-Limit-Remaining:
              description: The number of remaining requests in the current period
              schema:
                type: integer
            Rate-Limit-Reset:
              description: |
                The date in format defined by [RFC 822](https://www.w3.org/Protocols/rfc2616/rfc2616-sec3.html#sec3.3.1)
                when the current period will reset
              schema:
                type: string
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Invoice'
        '401':
          $ref: '#/components/responses/AccessForbidden'
        '404':
          $ref: '#/components/responses/NotFound'
      summary: Void an invoice
      tags:
        - Invoices
      x-code-samples:
        - lang: PHP
          source: |
            $invoice = $client->invoices()->void('invoiceId');
  /layouts:
    get:
      description: |
        Retrieve a layout list
      parameters:
        - $ref: '#/components/parameters/collectionLimit'
        - $ref: '#/components/parameters/collectionOffset'
      responses:
        '200':
          description: Layout list was retrieved successfully
          headers:
            Pagination-Limit:
              description: Items per page limit
              schema:
                type: integer
            Pagination-Offset:
              description: Pagination offset
              schema:
                type: integer
            Pagination-Total:
              description: Total items count
              schema:
                type: integer
            Rate-Limit-Limit:
              description: The number of allowed requests in the current period
              schema:
                type: integer
            Rate-Limit-Remaining:
              description: The number of remaining requests in the current period
              schema:
                type: integer
            Rate-Limit-Reset:
              description: |
                The date in format defined by [RFC 822](https://www.w3.org/Protocols/rfc2616/rfc2616-sec3.html#sec3.3.1)
                when the current period will reset
              schema:
                type: string
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/Layout'
                type: array
        '401':
          $ref: '#/components/responses/AccessForbidden'
      summary: Retrieve a layout list
      tags:
        - Layouts
      x-code-samples:
        - lang: PHP
          source: |
            $layouts = $client->layouts()->search([
                'filter' => 'name:TestLayout',
            ]);
    post:
      description: |
        Create a layout
      responses:
        '201':
          description: Layout was created
          headers:
            Rate-Limit-Limit:
              description: The number of allowed requests in the current period
              schema:
                type: integer
            Rate-Limit-Remaining:
              description: The number of remaining requests in the current period
              schema:
                type: integer
            Rate-Limit-Reset:
              description: |
                The date in format defined by [RFC 822](https://www.w3.org/Protocols/rfc2616/rfc2616-sec3.html#sec3.3.1)
                when the current period will reset
              schema:
                type: string
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Layout'
        '401':
          $ref: '#/components/responses/AccessForbidden'
        '422':
          $ref: '#/components/responses/InvalidDataError'
      summary: Create a layout
      tags:
        - Layouts
      x-code-samples:
        - lang: PHP
          source: |
            $layoutForm = new Rebilly\Entities\Layout();
            $layoutItemForm = new Rebilly\Entities\LayoutItem();

            $layoutItemForm->setPlanId('planId');
            $layoutItemForm->setStarred(false);

            $layoutForm->setName('TestLayout');
            $layoutForm->setLayoutItems([
                $layoutItemForm,
            ]);

            try {
                $layout = $client->layouts()->create($layoutForm);
            } catch (UnprocessableEntityException $e) {
                echo $e->getMessage();
            }
      requestBody:
        $ref: '#/components/requestBodies/Layout'
  '/layouts/{id}':
    delete:
      description: |
        Delete a layout with predefined identifier string
      responses:
        '204':
          description: Layout was deleted
          headers:
            Rate-Limit-Limit:
              description: The number of allowed requests in the current period
              schema:
                type: integer
            Rate-Limit-Remaining:
              description: The number of remaining requests in the current period
              schema:
                type: integer
            Rate-Limit-Reset:
              description: |
                The date in format defined by [RFC 822](https://www.w3.org/Protocols/rfc2616/rfc2616-sec3.html#sec3.3.1)
                when the current period will reset
              schema:
                type: string
        '401':
          $ref: '#/components/responses/AccessForbidden'
        '404':
          $ref: '#/components/responses/NotFound'
      summary: Delete a layout
      tags:
        - Layouts
      x-code-samples:
        - lang: PHP
          source: |
            $client->layouts()->delete('layoutId');
    get:
      description: |
        Retrieve a layout with specified identifier string
      responses:
        '200':
          description: Layout was retrieved successfully
          headers:
            Rate-Limit-Limit:
              description: The number of allowed requests in the current period
              schema:
                type: integer
            Rate-Limit-Remaining:
              description: The number of remaining requests in the current period
              schema:
                type: integer
            Rate-Limit-Reset:
              description: |
                The date in format defined by [RFC 822](https://www.w3.org/Protocols/rfc2616/rfc2616-sec3.html#sec3.3.1)
                when the current period will reset
              schema:
                type: string
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Layout'
        '401':
          $ref: '#/components/responses/AccessForbidden'
        '404':
          $ref: '#/components/responses/NotFound'
      summary: Retrieve a layout
      tags:
        - Layouts
      x-code-samples:
        - lang: PHP
          source: |
            $layout = $client->layouts()->load('layoutId');
    parameters:
      - $ref: '#/components/parameters/resourceId'
    put:
      description: |
        Create or update a layout with predefined identifier string
      responses:
        '200':
          description: Layout was updated
          headers:
            Rate-Limit-Limit:
              description: The number of allowed requests in the current period
              schema:
                type: integer
            Rate-Limit-Remaining:
              description: The number of remaining requests in the current period
              schema:
                type: integer
            Rate-Limit-Reset:
              description: |
                The date in format defined by [RFC 822](https://www.w3.org/Protocols/rfc2616/rfc2616-sec3.html#sec3.3.1)
                when the current period will reset
              schema:
                type: string
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Layout'
        '201':
          description: Layout was created
          headers:
            Rate-Limit-Limit:
              description: The number of allowed requests in the current period
              schema:
                type: integer
            Rate-Limit-Remaining:
              description: The number of remaining requests in the current period
              schema:
                type: integer
            Rate-Limit-Reset:
              description: |
                The date in format defined by [RFC 822](https://www.w3.org/Protocols/rfc2616/rfc2616-sec3.html#sec3.3.1)
                when the current period will reset
              schema:
                type: string
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Layout'
        '401':
          $ref: '#/components/responses/AccessForbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '422':
          $ref: '#/components/responses/InvalidDataError'
      summary: Create or update a layout with predefined ID
      tags:
        - Layouts
      x-code-samples:
        - lang: PHP
          source: |
            $layoutForm = new Rebilly\Entities\Layout();
            $layoutItemForm = new Rebilly\Entities\LayoutItem();

            $layoutItemForm->setPlanId('planId');
            $layoutItemForm->setStarred(false);

            $layoutForm->setName('TestLayout');
            $layoutForm->setLayoutItems([
                $layoutItemForm,
            ]);

            try {
                $layout = $client->layouts()->update('layoutId', $layoutForm);
            } catch (UnprocessableEntityException $e) {
                echo $e->getMessage();
            }
      requestBody:
        $ref: '#/components/requestBodies/Layout'
  /lists:
    get:
      description: |
        Retrieve a collection of Lists
      parameters:
        - $ref: '#/components/parameters/collectionLimit'
        - $ref: '#/components/parameters/collectionOffset'
        - $ref: '#/components/parameters/collectionFilter'
        - $ref: '#/components/parameters/collectionCriteria'
        - $ref: '#/components/parameters/collectionSort'
      responses:
        '200':
          description: A collection of Lists was retrieved successfully
          headers:
            Pagination-Limit:
              description: Items per page limit
              schema:
                type: integer
            Pagination-Offset:
              description: Pagination offset
              schema:
                type: integer
            Pagination-Total:
              description: Total items count
              schema:
                type: integer
            Rate-Limit-Limit:
              description: The number of allowed requests in the current period
              schema:
                type: integer
            Rate-Limit-Remaining:
              description: The number of remaining requests in the current period
              schema:
                type: integer
            Rate-Limit-Reset:
              description: |
                The date in format defined by [RFC 822](https://www.w3.org/Protocols/rfc2616/rfc2616-sec3.html#sec3.3.1)
                when the current period will reset
              schema:
                type: string
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/List'
                type: array
        '401':
          $ref: '#/components/responses/AccessForbidden'
      summary: Retrieve a collection of Lists (latest version of each List)
      tags:
        - Lists
    post:
      description: |
        Create a List
      responses:
        '201':
          description: List was created
          headers:
            Rate-Limit-Limit:
              description: The number of allowed requests in the current period
              schema:
                type: integer
            Rate-Limit-Remaining:
              description: The number of remaining requests in the current period
              schema:
                type: integer
            Rate-Limit-Reset:
              description: |
                The date in format defined by [RFC 822](https://www.w3.org/Protocols/rfc2616/rfc2616-sec3.html#sec3.3.1)
                when the current period will reset
              schema:
                type: string
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/List'
        '401':
          $ref: '#/components/responses/AccessForbidden'
        '422':
          description: Invalid data was sent
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidError'
      summary: Create a List
      tags:
        - Lists
      requestBody:
        $ref: '#/components/requestBodies/List'
  '/lists/{id}':
    delete:
      description: |
        Delete a list with predefined identifier string
      responses:
        '204':
          description: List was deleted
          headers:
            Rate-Limit-Limit:
              description: The number of allowed requests in the current period
              schema:
                type: integer
            Rate-Limit-Remaining:
              description: The number of remaining requests in the current period
              schema:
                type: integer
            Rate-Limit-Reset:
              description: |
                The date in format defined by [RFC 822](https://www.w3.org/Protocols/rfc2616/rfc2616-sec3.html#sec3.3.1)
                when the current period will reset
              schema:
                type: string
        '401':
          $ref: '#/components/responses/AccessForbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '409':
          description: List is used in Rules and cannot be deleted
      summary: Delete a list
      tags:
        - Lists
    get:
      description: |
        Retrieve latest version of List with specified identifier string
      responses:
        '200':
          description: List was retrieved successfully
          headers:
            Rate-Limit-Limit:
              description: The number of allowed requests in the current period
              schema:
                type: integer
            Rate-Limit-Remaining:
              description: The number of remaining requests in the current period
              schema:
                type: integer
            Rate-Limit-Reset:
              description: |
                The date in format defined by [RFC 822](https://www.w3.org/Protocols/rfc2616/rfc2616-sec3.html#sec3.3.1)
                when the current period will reset
              schema:
                type: string
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/List'
        '401':
          $ref: '#/components/responses/AccessForbidden'
        '404':
          $ref: '#/components/responses/NotFound'
      summary: Retrieve list's latest version
      tags:
        - Lists
    parameters:
      - $ref: '#/components/parameters/resourceId'
    put:
      description: |
        Create or update a list with predefined identifier string
      responses:
        '200':
          description: List was updated
          headers:
            Rate-Limit-Limit:
              description: The number of allowed requests in the current period
              schema:
                type: integer
            Rate-Limit-Remaining:
              description: The number of remaining requests in the current period
              schema:
                type: integer
            Rate-Limit-Reset:
              description: |
                The date in format defined by [RFC 822](https://www.w3.org/Protocols/rfc2616/rfc2616-sec3.html#sec3.3.1)
                when the current period will reset
              schema:
                type: string
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/List'
        '201':
          description: List was created
          headers:
            Rate-Limit-Limit:
              description: The number of allowed requests in the current period
              schema:
                type: integer
            Rate-Limit-Remaining:
              description: The number of remaining requests in the current period
              schema:
                type: integer
            Rate-Limit-Reset:
              description: |
                The date in format defined by [RFC 822](https://www.w3.org/Protocols/rfc2616/rfc2616-sec3.html#sec3.3.1)
                when the current period will reset
              schema:
                type: string
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/List'
        '401':
          $ref: '#/components/responses/AccessForbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '422':
          $ref: '#/components/responses/InvalidDataError'
      summary: Create or update a list with predefined ID
      tags:
        - Lists
      requestBody:
        $ref: '#/components/requestBodies/List'
  '/lists/{id}/{version}':
    get:
      responses:
        '200':
          description: List's exact version was retrieved successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/List'
        '401':
          $ref: '#/components/responses/AccessForbidden'
        '404':
          $ref: '#/components/responses/NotFound'
      summary: Retrieve List's exact version
      tags:
        - Lists
    parameters:
      - $ref: '#/components/parameters/resourceId'
      - description: List version
        in: path
        name: version
        required: true
        schema:
          type: integer
          minimum: 1
  /notes:
    get:
      description: |
        Retrieve a list of notes
      parameters:
        - $ref: '#/components/parameters/collectionLimit'
        - $ref: '#/components/parameters/collectionOffset'
      responses:
        '200':
          description: A list of Notes was retrieved successfully
          headers:
            Pagination-Limit:
              description: Items per page limit
              schema:
                type: integer
            Pagination-Offset:
              description: Pagination offset
              schema:
                type: integer
            Pagination-Total:
              description: Total items count
              schema:
                type: integer
            Rate-Limit-Limit:
              description: The number of allowed requests in the current period
              schema:
                type: integer
            Rate-Limit-Remaining:
              description: The number of remaining requests in the current period
              schema:
                type: integer
            Rate-Limit-Reset:
              description: |
                The date in format defined by [RFC 822](https://www.w3.org/Protocols/rfc2616/rfc2616-sec3.html#sec3.3.1)
                when the current period will reset
              schema:
                type: string
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/Note'
                type: array
        '401':
          $ref: '#/components/responses/AccessForbidden'
      summary: Retrieve a list of notes
      tags:
        - Notes
      x-code-samples:
        - lang: PHP
          source: |
            $notes = $client->notes()->search([
                'filter' => 'relatedType:customer',
            ]);
    post:
      description: |
        Create a note
      responses:
        '201':
          description: Note was created
          headers:
            Rate-Limit-Limit:
              description: The number of allowed requests in the current period
              schema:
                type: integer
            Rate-Limit-Remaining:
              description: The number of remaining requests in the current period
              schema:
                type: integer
            Rate-Limit-Reset:
              description: |
                The date in format defined by [RFC 822](https://www.w3.org/Protocols/rfc2616/rfc2616-sec3.html#sec3.3.1)
                when the current period will reset
              schema:
                type: string
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Note'
        '401':
          $ref: '#/components/responses/AccessForbidden'
        '422':
          description: Invalid data was sent
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidError'
      summary: Create a note
      tags:
        - Notes
      x-code-samples:
        - lang: PHP
          source: |
            $noteForm = new Rebilly\Entities\Note();
            $noteForm->setRelatedId('customerId');
            $noteForm->setRelatedType(Rebilly\Entities\ResourceType::TYPE_CUSTOMER);
            $noteForm->setContent('Test Note');

            try {
                $note = $client->notes()->create($noteForm);
            } catch (UnprocessableEntityException $e) {
                echo $e->getMessage();
            }
      requestBody:
        $ref: '#/components/requestBodies/Note'
  '/notes/{id}':
    get:
      description: |
        Retrieve a note with specified identifier string
      responses:
        '200':
          description: Note was retrieved successfully
          headers:
            Rate-Limit-Limit:
              description: The number of allowed requests in the current period
              schema:
                type: integer
            Rate-Limit-Remaining:
              description: The number of remaining requests in the current period
              schema:
                type: integer
            Rate-Limit-Reset:
              description: |
                The date in format defined by [RFC 822](https://www.w3.org/Protocols/rfc2616/rfc2616-sec3.html#sec3.3.1)
                when the current period will reset
              schema:
                type: string
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Note'
        '401':
          $ref: '#/components/responses/AccessForbidden'
        '404':
          $ref: '#/components/responses/NotFound'
      summary: Retrieve a note
      tags:
        - Notes
      x-code-samples:
        - lang: PHP
          source: |
            $note = $client->notes()->load('noteId');
    parameters:
      - $ref: '#/components/parameters/resourceId'
    put:
      description: |
        Create or update a note with predefined identifier string
      responses:
        '200':
          description: Note was updated
          headers:
            Rate-Limit-Limit:
              description: The number of allowed requests in the current period
              schema:
                type: integer
            Rate-Limit-Remaining:
              description: The number of remaining requests in the current period
              schema:
                type: integer
            Rate-Limit-Reset:
              description: |
                The date in format defined by [RFC 822](https://www.w3.org/Protocols/rfc2616/rfc2616-sec3.html#sec3.3.1)
                when the current period will reset
              schema:
                type: string
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Note'
        '201':
          description: Note was created
          headers:
            Rate-Limit-Limit:
              description: The number of allowed requests in the current period
              schema:
                type: integer
            Rate-Limit-Remaining:
              description: The number of remaining requests in the current period
              schema:
                type: integer
            Rate-Limit-Reset:
              description: |
                The date in format defined by [RFC 822](https://www.w3.org/Protocols/rfc2616/rfc2616-sec3.html#sec3.3.1)
                when the current period will reset
              schema:
                type: string
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Note'
        '401':
          $ref: '#/components/responses/AccessForbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '422':
          description: Invalid data was sent
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidError'
      summary: Create or update a note with predefined ID
      tags:
        - Notes
      x-code-samples:
        - lang: PHP
          source: |
            $noteForm = new Rebilly\Entities\Note();
            $noteForm->setRelatedId('customerId');
            $noteForm->setRelatedType(Rebilly\Entities\ResourceType::TYPE_CUSTOMER);
            $noteForm->setContent('Test Note');

            try {
                $note = $client->notes()->update('noteId', $noteForm);
            } catch (UnprocessableEntityException $e) {
                echo $e->getMessage();
            }
      requestBody:
        $ref: '#/components/requestBodies/Note'
  /organizations:
    get:
      description: |
        Retrieve a list of organizations
      parameters:
        - $ref: '#/components/parameters/collectionLimit'
        - $ref: '#/components/parameters/collectionOffset'
      responses:
        '200':
          description: A list of organizations was retrieved successfully
          headers:
            Pagination-Limit:
              description: Items per page limit
              schema:
                type: integer
            Pagination-Offset:
              description: Pagination offset
              schema:
                type: integer
            Pagination-Total:
              description: Total items count
              schema:
                type: integer
            Rate-Limit-Limit:
              description: The number of allowed requests in the current period
              schema:
                type: integer
            Rate-Limit-Remaining:
              description: The number of remaining requests in the current period
              schema:
                type: integer
            Rate-Limit-Reset:
              description: |
                The date in format defined by [RFC 822](https://www.w3.org/Protocols/rfc2616/rfc2616-sec3.html#sec3.3.1)
                when the current period will reset
              schema:
                type: string
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/Organization'
                type: array
        '401':
          $ref: '#/components/responses/AccessForbidden'
      summary: Retrieve a list of organizations
      tags:
        - Organizations
      x-code-samples:
        - lang: PHP
          source: |
            $organizations = $client->organizations()->search([
                'filter' => 'city:Test',
            ]);
    post:
      description: |
        Create a organization
      responses:
        '201':
          description: Organization was created
          headers:
            Rate-Limit-Limit:
              description: The number of allowed requests in the current period
              schema:
                type: integer
            Rate-Limit-Remaining:
              description: The number of remaining requests in the current period
              schema:
                type: integer
            Rate-Limit-Reset:
              description: |
                The date in format defined by [RFC 822](https://www.w3.org/Protocols/rfc2616/rfc2616-sec3.html#sec3.3.1)
                when the current period will reset
              schema:
                type: string
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Organization'
        '401':
          $ref: '#/components/responses/AccessForbidden'
        '422':
          $ref: '#/components/responses/InvalidDataError'
      summary: Create a organization
      tags:
        - Organizations
      x-code-samples:
        - lang: PHP
          source: |
            $organizationForm = new Rebilly\Entities\Organization();
            $organizationForm->setName('Test Organization');
            $organizationForm->setCountry('US');

            try {
                $organization = $client->organizations()->create($organizationForm);
            } catch (UnprocessableEntityException $e) {
                echo $e->getMessage();
            }
      requestBody:
        $ref: '#/components/requestBodies/Organization'
  '/organizations/{id}':
    delete:
      description: |
        Delete a organization with predefined identifier string
      responses:
        '204':
          description: Organization was deleted
          headers:
            Rate-Limit-Limit:
              description: The number of allowed requests in the current period
              schema:
                type: integer
            Rate-Limit-Remaining:
              description: The number of remaining requests in the current period
              schema:
                type: integer
            Rate-Limit-Reset:
              description: |
                The date in format defined by [RFC 822](https://www.w3.org/Protocols/rfc2616/rfc2616-sec3.html#sec3.3.1)
                when the current period will reset
              schema:
                type: string
        '401':
          $ref: '#/components/responses/AccessForbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '409':
          description: Organization has related resources and cannot be deleted
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
      summary: Delete a organization
      tags:
        - Organizations
    get:
      description: |
        Retrieve a organization with specified identifier string
      responses:
        '200':
          description: Organization was retrieved successfully
          headers:
            Rate-Limit-Limit:
              description: The number of allowed requests in the current period
              schema:
                type: integer
            Rate-Limit-Remaining:
              description: The number of remaining requests in the current period
              schema:
                type: integer
            Rate-Limit-Reset:
              description: |
                The date in format defined by [RFC 822](https://www.w3.org/Protocols/rfc2616/rfc2616-sec3.html#sec3.3.1)
                when the current period will reset
              schema:
                type: string
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Organization'
        '401':
          $ref: '#/components/responses/AccessForbidden'
        '404':
          $ref: '#/components/responses/NotFound'
      summary: Retrieve a organization
      tags:
        - Organizations
      x-code-samples:
        - lang: PHP
          source: |
            $organization = $client->organizations()->load('organizationId');
    parameters:
      - $ref: '#/components/parameters/resourceId'
    put:
      description: |
        Create or update a organization with predefined identifier string
      responses:
        '200':
          description: Organization was updated
          headers:
            Rate-Limit-Limit:
              description: The number of allowed requests in the current period
              schema:
                type: integer
            Rate-Limit-Remaining:
              description: The number of remaining requests in the current period
              schema:
                type: integer
            Rate-Limit-Reset:
              description: |
                The date in format defined by [RFC 822](https://www.w3.org/Protocols/rfc2616/rfc2616-sec3.html#sec3.3.1)
                when the current period will reset
              schema:
                type: string
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Organization'
        '201':
          description: Organization was created
          headers:
            Rate-Limit-Limit:
              description: The number of allowed requests in the current period
              schema:
                type: integer
            Rate-Limit-Remaining:
              description: The number of remaining requests in the current period
              schema:
                type: integer
            Rate-Limit-Reset:
              description: |
                The date in format defined by [RFC 822](https://www.w3.org/Protocols/rfc2616/rfc2616-sec3.html#sec3.3.1)
                when the current period will reset
              schema:
                type: string
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Organization'
        '401':
          $ref: '#/components/responses/AccessForbidden'
        '422':
          $ref: '#/components/responses/InvalidDataError'
      summary: Create or update a organization with predefined ID
      tags:
        - Organizations
      x-code-samples:
        - lang: PHP
          source: |
            $organizationForm = new Rebilly\Entities\Organization();
            $organizationForm->setName('Test Organization');
            $organizationForm->setCountry('US');

            try {
                $organization = $client->organizations()->update('organizationId', $organizationForm);
            } catch (UnprocessableEntityException $e) {
                echo $e->getMessage();
            }
      requestBody:
        $ref: '#/components/requestBodies/Organization'
  /password-tokens:
    get:
      description: |
        Retrieve a list of tokens
      parameters:
        - $ref: '#/components/parameters/collectionLimit'
        - $ref: '#/components/parameters/collectionOffset'
      responses:
        '200':
          description: A list of Reset Password Tokens was retrieved successfully
          headers:
            Pagination-Limit:
              description: Items per page limit
              schema:
                type: integer
            Pagination-Offset:
              description: Pagination offset
              schema:
                type: integer
            Pagination-Total:
              description: Total items count
              schema:
                type: integer
            Rate-Limit-Limit:
              description: The number of allowed requests in the current period
              schema:
                type: integer
            Rate-Limit-Remaining:
              description: The number of remaining requests in the current period
              schema:
                type: integer
            Rate-Limit-Reset:
              description: |
                The date in format defined by [RFC 822](https://www.w3.org/Protocols/rfc2616/rfc2616-sec3.html#sec3.3.1)
                when the current period will reset
              schema:
                type: string
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/ResetPasswordToken'
                type: array
        '401':
          $ref: '#/components/responses/AccessForbidden'
      summary: Retrieve a list of tokens
      tags:
        - Customer Authentication
      x-code-samples:
        - lang: PHP
          source: |
            $resetPasswordTokens = $client->resetPasswordTokens()->search([
                'filter' => 'token:string',
            ]);
    post:
      description: |
        Create a Reset Password Token
      responses:
        '201':
          description: Reset Password Token was created
          headers:
            Rate-Limit-Limit:
              description: The number of allowed requests in the current period
              schema:
                type: integer
            Rate-Limit-Remaining:
              description: The number of remaining requests in the current period
              schema:
                type: integer
            Rate-Limit-Reset:
              description: |
                The date in format defined by [RFC 822](https://www.w3.org/Protocols/rfc2616/rfc2616-sec3.html#sec3.3.1)
                when the current period will reset
              schema:
                type: string
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResetPasswordToken'
        '401':
          $ref: '#/components/responses/AccessForbidden'
        '422':
          description: Invalid data was sent
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidError'
      summary: Create a Reset Password Token
      tags:
        - Customer Authentication
      x-code-samples:
        - lang: PHP
          source: |
            $resetPasswordTokenForm = new Rebilly\Entities\ResetPasswordToken();
            $resetPasswordTokenForm->setUserName('test');
            $resetPasswordTokenForm->setPassword('1234');

            try {
                $$resetPasswordToken = $client->resetPasswordTokens()->create($resetPasswordTokenForm);
            } catch (UnprocessableEntityException $e) {
                echo $e->getMessage();
            }
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ResetPasswordToken'
        description: ResetPasswordToken resource
        required: true
  '/password-tokens/{id}':
    delete:
      description: |
        Delete a Reset Password Token with predefined identifier string
      responses:
        '204':
          description: ResetPasswordToken was deleted
          headers:
            Rate-Limit-Limit:
              description: The number of allowed requests in the current period
              schema:
                type: integer
            Rate-Limit-Remaining:
              description: The number of remaining requests in the current period
              schema:
                type: integer
            Rate-Limit-Reset:
              description: |
                The date in format defined by [RFC 822](https://www.w3.org/Protocols/rfc2616/rfc2616-sec3.html#sec3.3.1)
                when the current period will reset
              schema:
                type: string
        '401':
          $ref: '#/components/responses/AccessForbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '409':
          description: ResetPasswordToken has related resources and cannot be deleted
      summary: Delete a Reset Password Token
      tags:
        - Customer Authentication
      x-code-samples:
        - lang: PHP
          source: |
            try {
                $client->websites()->delete('websiteId');
            } catch (ServerException $e) {
                echo $e->getMessage();
            }
    get:
      description: |
        Retrieve a Reset Password Token with specified identifier string
      responses:
        '200':
          description: ResetPasswordToken was retrieved successfully
          headers:
            Rate-Limit-Limit:
              description: The number of allowed requests in the current period
              schema:
                type: integer
            Rate-Limit-Remaining:
              description: The number of remaining requests in the current period
              schema:
                type: integer
            Rate-Limit-Reset:
              description: |
                The date in format defined by [RFC 822](https://www.w3.org/Protocols/rfc2616/rfc2616-sec3.html#sec3.3.1)
                when the current period will reset
              schema:
                type: string
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResetPasswordToken'
        '401':
          $ref: '#/components/responses/AccessForbidden'
        '404':
          $ref: '#/components/responses/NotFound'
      summary: Retrieve a Reset Password Token
      tags:
        - Customer Authentication
      x-code-samples:
        - lang: PHP
          source: |
            $resetPasswordToken = $client->resetPasswordTokens()->load('tokenId');
    parameters:
      - $ref: '#/components/parameters/resourceId'
  /payment-cards:
    get:
      description: |
        Retrieve a list of Payments Cards
      parameters:
        - $ref: '#/components/parameters/collectionLimit'
        - $ref: '#/components/parameters/collectionOffset'
      responses:
        '200':
          description: A list of Payment Card was retrieved successfully
          headers:
            Pagination-Limit:
              description: Items per page limit
              schema:
                type: integer
            Pagination-Offset:
              description: Pagination offset
              schema:
                type: integer
            Pagination-Total:
              description: Total items count
              schema:
                type: integer
            Rate-Limit-Limit:
              description: The number of allowed requests in the current period
              schema:
                type: integer
            Rate-Limit-Remaining:
              description: The number of remaining requests in the current period
              schema:
                type: integer
            Rate-Limit-Reset:
              description: |
                The date in format defined by [RFC 822](https://www.w3.org/Protocols/rfc2616/rfc2616-sec3.html#sec3.3.1)
                when the current period will reset
              schema:
                type: string
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/PaymentCard'
                type: array
        '401':
          $ref: '#/components/responses/AccessForbidden'
      summary: Retrieve a list of Payment Cards
      tags:
        - Payment Cards
      x-code-samples:
        - lang: PHP
          source: |
            $paymentCards = $client->paymentCards()->search([
                'filter' => 'status:active',
            ]);
    post:
      description: |
        Create a Payment Card
      responses:
        '201':
          description: Payment Card was created
          headers:
            Rate-Limit-Limit:
              description: The number of allowed requests in the current period
              schema:
                type: integer
            Rate-Limit-Remaining:
              description: The number of remaining requests in the current period
              schema:
                type: integer
            Rate-Limit-Reset:
              description: |
                The date in format defined by [RFC 822](https://www.w3.org/Protocols/rfc2616/rfc2616-sec3.html#sec3.3.1)
                when the current period will reset
              schema:
                type: string
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaymentCard'
        '401':
          $ref: '#/components/responses/AccessForbidden'
        '422':
          description: Invalid data was sent
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidError'
      summary: Create a Payment Card
      tags:
        - Payment Cards
      x-code-samples:
        - lang: PHP
          source: |
            $paymentCardForm = new Rebilly\Entities\PaymentCard();
            $paymentCardForm->setCustomerId('customerId');
            $paymentCardForm->setPan('4111111111111111');
            $paymentCardForm->setExpYear(2025);
            $paymentCardForm->setExpMonth(8);
            $paymentCardForm->setBillingContactId('contactId');

            try {
                $paymentCard = $client->paymentCards()->create($paymentCardForm);
            } catch (UnprocessableEntityException $e) {
                echo $e->getMessage();
            }
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PaymentCard'
        description: PaymentCard resource
        required: true
  /payment-cards-migrations:
    get:
      description: |
        Retrieve a list of payment cards ready for migration
      parameters:
        - $ref: '#/components/parameters/collectionLimit'
        - $ref: '#/components/parameters/collectionOffset'
      responses:
        '200':
          description: A list of payment cards was retrieved successfully
          headers:
            Pagination-Limit:
              description: Items per page limit
              schema:
                type: integer
            Pagination-Offset:
              description: Pagination offset
              schema:
                type: integer
            Pagination-Total:
              description: Total items count
              schema:
                type: integer
            Rate-Limit-Limit:
              description: The number of allowed requests in the current period
              schema:
                type: integer
            Rate-Limit-Remaining:
              description: The number of remaining requests in the current period
              schema:
                type: integer
            Rate-Limit-Reset:
              description: |
                The date in format defined by [RFC 822](https://www.w3.org/Protocols/rfc2616/rfc2616-sec3.html#sec3.3.1)
                when the current period will reset
              schema:
                type: string
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/PaymentCard'
                type: array
        '401':
          $ref: '#/components/responses/AccessForbidden'
      summary: Retrieve a list of payment cards ready for migration
      tags:
        - Migrate payment cards
      x-code-samples:
        - lang: PHP
          source: |
            $paymentCardMigrations = $client->paymentCardMigrations()->search([
                'filter' => 'status:active',
            ]);
  /payment-cards-migrations/migrate:
    post:
      description: |
        Migrate payment cards to another gateway account
      responses:
        '201':
          description: Migration command was accepted
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaymentCardMigrationResponse'
        '401':
          $ref: '#/components/responses/AccessForbidden'
        '422':
          description: Invalid data was sent
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidError'
      summary: Migrate payment cards to another gateway account
      tags:
        - Migrate payment cards
      x-code-samples:
        - lang: PHP
          source: |
            $paymentCardMigrationForm = new Rebilly\Entities\PaymentCardMigrationsRequest();
            $paymentCardMigrationForm->setFromGatewayAccountId('gatewayAccountId');
            $paymentCardMigrationForm->setToGatewayAccountId('newGatewayAccountId');

            $paymentCardIds = [
                'testPaymentCardId',
                'testPaymentCardId2',
            ];

            $paymentCardMigrationForm->setPaymentCardIds($paymentCardIds)

            try {
                $paymentCardMigrationResponse = $client->paymentCardMigrations()->migrate($paymentCardMigrationForm);
            } catch (UnprocessableEntityException $e) {
                echo $e->getMessage();
            }
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PaymentCardMigrationRequest'
        description: Payment card migration attributes
        required: true
  '/payment-cards/{id}':
    get:
      description: |
        Retrieve a Payment Card with specified identifier string
      responses:
        '200':
          description: PaymentCard was retrieved successfully
          headers:
            Rate-Limit-Limit:
              description: The number of allowed requests in the current period
              schema:
                type: integer
            Rate-Limit-Remaining:
              description: The number of remaining requests in the current period
              schema:
                type: integer
            Rate-Limit-Reset:
              description: |
                The date in format defined by [RFC 822](https://www.w3.org/Protocols/rfc2616/rfc2616-sec3.html#sec3.3.1)
                when the current period will reset
              schema:
                type: string
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaymentCard'
        '401':
          $ref: '#/components/responses/AccessForbidden'
        '404':
          $ref: '#/components/responses/NotFound'
      summary: Retrieve a Payment Card
      tags:
        - Payment Cards
      x-code-samples:
        - lang: PHP
          source: |
            $paymentCard = $client->paymentCards()->load('paymentCardId');
    parameters:
      - $ref: '#/components/parameters/resourceId'
    patch:
      description: |
        Update a payment card's cvv value with predefined identifier string
      responses:
        '200':
          description: Gateway Account was updated
          headers:
            Rate-Limit-Limit:
              description: The number of allowed requests in the current period
              schema:
                type: integer
            Rate-Limit-Remaining:
              description: The number of remaining requests in the current period
              schema:
                type: integer
            Rate-Limit-Reset:
              description: |
                The date in format defined by [RFC 822](https://www.w3.org/Protocols/rfc2616/rfc2616-sec3.html#sec3.3.1)
                when the current period will reset
              schema:
                type: string
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaymentCard'
        '401':
          $ref: '#/components/responses/AccessForbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '422':
          description: Invalid data was sent
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidError'
      summary: Update a payment card's cvv value with predefined ID
      tags:
        - Payment Cards
      requestBody:
        content:
          application/json:
            schema:
              properties:
                cvv:
                  description: Card's cvv (card verification value).
                  type: string
              type: object
        description: Payment card
        required: true
    put:
      responses:
        '201':
          description: Payment card was created
          headers:
            Rate-Limit-Limit:
              description: The number of allowed requests in the current period
              schema:
                type: integer
            Rate-Limit-Remaining:
              description: The number of remaining requests in the current period
              schema:
                type: integer
            Rate-Limit-Reset:
              description: |
                The date in format defined by [RFC 822](https://www.w3.org/Protocols/rfc2616/rfc2616-sec3.html#sec3.3.1)
                when the current period will reset
              schema:
                type: string
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaymentCard'
        '401':
          $ref: '#/components/responses/AccessForbidden'
        '409':
          description: Payment card already exists and cannot be updated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '422':
          $ref: '#/components/responses/InvalidDataError'
      summary: Create a payment card with predefined ID
      tags:
        - Payment Cards
      x-code-samples:
        - lang: PHP
          source: |
            $paymentCardForm = new Rebilly\Entities\PaymentCard();
            $paymentCardForm->setCustomerId('customerId');
            $paymentCardForm->setPan('4111111111111111');
            $paymentCardForm->setExpYear(2025);
            $paymentCardForm->setExpMonth(8);
            $paymentCardForm->setBillingContactId('contactId');

            try {
                $paymentCard = $client->paymentCards()->create($paymentCardForm, 'paymentCardId');
            } catch (UnprocessableEntityException $e) {
                echo $e->getMessage();
            }
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PaymentCard'
        description: Payment card
        required: true
  '/payment-cards/{id}/authorization':
    parameters:
      - $ref: '#/components/parameters/resourceId'
    post:
      description: |
        Authorize a Payment Card
      responses:
        '201':
          description: Authorization successful
          headers:
            Rate-Limit-Limit:
              description: The number of allowed requests in the current period
              schema:
                type: integer
            Rate-Limit-Remaining:
              description: The number of remaining requests in the current period
              schema:
                type: integer
            Rate-Limit-Reset:
              description: |
                The date in format defined by [RFC 822](https://www.w3.org/Protocols/rfc2616/rfc2616-sec3.html#sec3.3.1)
                when the current period will reset
              schema:
                type: string
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaymentCard'
        '401':
          $ref: '#/components/responses/AccessForbidden'
        '422':
          description: Invalid data was sent
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidError'
      summary: Authorize a Payment Card
      tags:
        - Payment Cards
      x-code-samples:
        - lang: PHP
          source: |
            $paymentCardAuthorizationForm = new Rebilly\Entities\PaymentCardAuthorization();
            $paymentCardAuthorizationForm->setWebsiteId('websiteId');
            $paymentCardAuthorizationForm->setCurrency('USD');
            $paymentCardAuthorizationForm->setGatewayAccountId('gatewayAccountId');

            try {
                $paymentCard = $client->paymentCards()->authorize('paymentCardId', $paymentCardAuthorizationForm);
            } catch (UnprocessableEntityException $e) {
                echo $e->getMessage();
            }
      requestBody:
        content:
          application/json:
            schema:
              properties:
                amount:
                  description: Amount
                  format: double
                  type: number
                currency:
                  description: Currency (three letter code)
                  type: string
                gatewayAccountId:
                  description: The Gateway account ID
                  type: string
                websiteId:
                  description: The Website ID
                  type: string
              required:
                - websiteId
                - currency
              type: object
        description: Payment Card resource
        required: true
  '/payment-cards/{id}/deactivation':
    parameters:
      - $ref: '#/components/parameters/resourceId'
    post:
      description: |
        Deactivate a Payment Card
      responses:
        '201':
          description: Authorization successful
          headers:
            Rate-Limit-Limit:
              description: The number of allowed requests in the current period
              schema:
                type: integer
            Rate-Limit-Remaining:
              description: The number of remaining requests in the current period
              schema:
                type: integer
            Rate-Limit-Reset:
              description: |
                The date in format defined by [RFC 822](https://www.w3.org/Protocols/rfc2616/rfc2616-sec3.html#sec3.3.1)
                when the current period will reset
              schema:
                type: string
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaymentCard'
        '401':
          $ref: '#/components/responses/AccessForbidden'
        '422':
          description: Invalid data was sent
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidError'
      summary: Deactivate a Payment Card
      tags:
        - Payment Cards
      x-code-samples:
        - lang: PHP
          source: |
            $client->paymentCards()->deactivate('paymentCardId');
  /payments:
    get:
      description: |
        Retrieve a payment list
      parameters:
        - $ref: '#/components/parameters/collectionLimit'
        - $ref: '#/components/parameters/collectionOffset'
        - description: The response media type
          in: header
          name: Accept
          schema:
            type: string
            enum:
              - application/json
              - text/csv
            default: application/json
      responses:
        '200':
          description: Payment list was retrieved successfully
          headers:
            Pagination-Limit:
              description: Items per page limit
              schema:
                type: integer
            Pagination-Offset:
              description: Pagination offset
              schema:
                type: integer
            Pagination-Total:
              description: Total items count
              schema:
                type: integer
            Rate-Limit-Limit:
              description: The number of allowed requests in the current period
              schema:
                type: integer
            Rate-Limit-Remaining:
              description: The number of remaining requests in the current period
              schema:
                type: integer
            Rate-Limit-Reset:
              description: |
                The date in format defined by [RFC 822](https://www.w3.org/Protocols/rfc2616/rfc2616-sec3.html#sec3.3.1)
                when the current period will reset
              schema:
                type: string
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/Payment'
                type: array
            text/csv:
              schema:
                items:
                  $ref: '#/components/schemas/Payment'
                type: array
        '401':
          $ref: '#/components/responses/AccessForbidden'
        '404':
          $ref: '#/components/responses/NotFound'
      summary: Retrieve a payment list
      tags:
        - Payments
      x-code-samples:
        - lang: PHP
          source: |
            $payments = $client->payments()->search([
                'filter' => 'currency:USD',
            ]);
    post:
      description: |
        Create a payment
      responses:
        '201':
          description: Payment was processed
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/Payment'
                type: array
        '202':
          description: Payment was accepted
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Payment'
        '401':
          $ref: '#/components/responses/AccessForbidden'
        '409':
          $ref: '#/components/responses/Conflict'
        '422':
          description: Invalid data was sent
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidError'
      summary: Create a payment
      tags:
        - Payments
      x-code-samples:
        - lang: PHP
          source: |
            $paymentForm = new Rebilly\Entities\Payment();

            $paymentForm->setWebsiteId('websiteId');
            $paymentForm->setCustomerId('customerId');
            $paymentForm->setCurrency('USD');
            $paymentForm->setAmount(1.99);

            $data = [
                'method' => Rebilly\Entities\PaymentMethod::METHOD_CASH,
            ];

            $paymentInstrumentForm = new Rebilly\Entities\PaymentMethodInstrument($data);

            $paymentForm->setPaymentInstrument($paymentInstrumentForm);

            try {
                $payment = $client->payments()->create($paymentForm);
            } catch (UnprocessableEntityException $e) {
                echo $e->getMessage();
            }
      requestBody:
        $ref: '#/components/requestBodies/Payment'
  '/payments/{id}':
    get:
      description: |
        Retrieve a payment with specified identifier string
      responses:
        '200':
          description: Payment was retrieved successfully
          headers:
            Rate-Limit-Limit:
              description: The number of allowed requests in the current period
              schema:
                type: integer
            Rate-Limit-Remaining:
              description: The number of remaining requests in the current period
              schema:
                type: integer
            Rate-Limit-Reset:
              description: |
                The date in format defined by [RFC 822](https://www.w3.org/Protocols/rfc2616/rfc2616-sec3.html#sec3.3.1)
                when the current period will reset
              schema:
                type: string
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Payment'
        '401':
          $ref: '#/components/responses/AccessForbidden'
        '404':
          $ref: '#/components/responses/NotFound'
      summary: Retrieve a payment
      tags:
        - Payments
      x-code-samples:
        - lang: PHP
          source: |
            $payment = $client->payments()->load('paymentId');
    parameters:
      - $ref: '#/components/parameters/resourceId'
    put:
      description: |
        Make a payment with predefined identifier string
      responses:
        '201':
          description: Payment was processed
          headers:
            Rate-Limit-Limit:
              description: The number of allowed requests in the current period
              schema:
                type: integer
            Rate-Limit-Remaining:
              description: The number of remaining requests in the current period
              schema:
                type: integer
            Rate-Limit-Reset:
              description: |
                The date in format defined by [RFC 822](https://www.w3.org/Protocols/rfc2616/rfc2616-sec3.html#sec3.3.1)
                when the current period will reset
              schema:
                type: string
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/Payment'
                type: array
        '202':
          description: Payment was accepted
          headers:
            Rate-Limit-Limit:
              description: The number of allowed requests in the current period
              schema:
                type: integer
            Rate-Limit-Remaining:
              description: The number of remaining requests in the current period
              schema:
                type: integer
            Rate-Limit-Reset:
              description: |
                The date in format defined by [RFC 822](https://www.w3.org/Protocols/rfc2616/rfc2616-sec3.html#sec3.3.1)
                when the current period will reset
              schema:
                type: string
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Payment'
        '401':
          $ref: '#/components/responses/AccessForbidden'
        '422':
          description: Invalid data was sent
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidError'
      summary: Create a payment with predefined ID
      tags:
        - Payments
      x-code-samples:
        - lang: PHP
          source: |
            $paymentForm = new Rebilly\Entities\Payment();

            $paymentForm->setWebsiteId('websiteId');
            $paymentForm->setCustomerId('customerId');
            $paymentForm->setCurrency('USD');
            $paymentForm->setAmount(1.99);

            $data = [
                'method' => Rebilly\Entities\PaymentMethod::METHOD_CASH,
            ];

            $paymentInstrumentForm = new Rebilly\Entities\PaymentMethodInstrument($data);

            $paymentForm->setPaymentInstrument($paymentInstrumentForm);

            try {
                $payment = $client->payments()->update('paymentId', $paymentForm);
            } catch (UnprocessableEntityException $e) {
                echo $e->getMessage();
            }
      requestBody:
        $ref: '#/components/requestBodies/Payment'
  /paypal-accounts:
    get:
      description: |
        Retrieve a list of PayPal Accounts
      parameters:
        - $ref: '#/components/parameters/collectionLimit'
        - $ref: '#/components/parameters/collectionOffset'
      responses:
        '200':
          description: A list of PayPal Accounts was retrieved successfully
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/PayPalAccount'
                type: array
        '401':
          $ref: '#/components/responses/AccessForbidden'
      summary: Retrieve a list of PayPal accounts
      tags:
        - PayPal Accounts
    post:
      description: |
        Create a PayPal Account
      responses:
        '201':
          description: PayPal Account was created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PayPalAccount'
        '401':
          $ref: '#/components/responses/AccessForbidden'
        '422':
          description: Invalid data was sent
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidError'
      summary: Create a PayPal Account
      tags:
        - PayPal Accounts
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PayPalAccount'
        description: PayPalAccount resource
        required: true
  '/paypal-accounts/{id}':
    get:
      description: |
        Retrieve a PayPal Account with specified identifier string
      responses:
        '200':
          description: PayPal Account was retrieved successfully
          headers:
            Rate-Limit-Limit:
              description: The number of allowed requests in the current period
              schema:
                type: integer
            Rate-Limit-Remaining:
              description: The number of remaining requests in the current period
              schema:
                type: integer
            Rate-Limit-Reset:
              description: |
                The date in format defined by [RFC 822](https://www.w3.org/Protocols/rfc2616/rfc2616-sec3.html#sec3.3.1)
                when the current period will reset
              schema:
                type: string
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PayPalAccount'
        '401':
          $ref: '#/components/responses/AccessForbidden'
        '404':
          $ref: '#/components/responses/NotFound'
      summary: Retrieve a PayPal Account
      tags:
        - PayPal Accounts
    parameters:
      - $ref: '#/components/parameters/resourceId'
    put:
      responses:
        '201':
          description: PayPal Account was created
          headers:
            Rate-Limit-Limit:
              description: The number of allowed requests in the current period
              schema:
                type: integer
            Rate-Limit-Remaining:
              description: The number of remaining requests in the current period
              schema:
                type: integer
            Rate-Limit-Reset:
              description: |
                The date in format defined by [RFC 822](https://www.w3.org/Protocols/rfc2616/rfc2616-sec3.html#sec3.3.1)
                when the current period will reset
              schema:
                type: string
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PayPalAccount'
        '401':
          $ref: '#/components/responses/AccessForbidden'
        '409':
          description: PayPal Account exist and cannot be updated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '422':
          $ref: '#/components/responses/InvalidDataError'
      summary: Create a PayPal account with predefined ID
      tags:
        - PayPal Accounts
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PayPalAccount'
        description: PayPal Account
        required: true
  '/paypal-accounts/{id}/activation':
    parameters:
      - $ref: '#/components/parameters/resourceId'
    post:
      description: |
        Activate a PayPal Account
      responses:
        '201':
          description: Activate successful
          headers:
            Rate-Limit-Limit:
              description: The number of allowed requests in the current period
              schema:
                type: integer
            Rate-Limit-Remaining:
              description: The number of remaining requests in the current period
              schema:
                type: integer
            Rate-Limit-Reset:
              description: |
                The date in format defined by [RFC 822](https://www.w3.org/Protocols/rfc2616/rfc2616-sec3.html#sec3.3.1)
                when the current period will reset
              schema:
                type: string
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PayPalAccount'
        '401':
          $ref: '#/components/responses/AccessForbidden'
        '422':
          description: Invalid data was sent
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidError'
      summary: Activate a PayPal Account
      tags:
        - PayPal Accounts
      requestBody:
        content:
          application/json:
            schema:
              properties:
                currency:
                  description: Currency (three letter code)
                  type: string
                redirectURLs:
                  description: Redirect URLs
                  type: object
                websiteId:
                  description: The Website ID
                  type: string
              required:
                - websiteId
                - currency
              type: object
        description: PayPal Account resource
        required: true
  '/paypal-accounts/{id}/deactivation':
    parameters:
      - $ref: '#/components/parameters/resourceId'
    post:
      description: |
        Deactivate a PayPal Account
      responses:
        '201':
          description: Deactivate successful
          headers:
            Rate-Limit-Limit:
              description: The number of allowed requests in the current period
              schema:
                type: integer
            Rate-Limit-Remaining:
              description: The number of remaining requests in the current period
              schema:
                type: integer
            Rate-Limit-Reset:
              description: |
                The date in format defined by [RFC 822](https://www.w3.org/Protocols/rfc2616/rfc2616-sec3.html#sec3.3.1)
                when the current period will reset
              schema:
                type: string
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PayPalAccount'
        '401':
          $ref: '#/components/responses/AccessForbidden'
        '422':
          description: Invalid data was sent
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidError'
      summary: Deactivate a PayPal Account
      tags:
        - PayPal Accounts
  /plans:
    get:
      description: |
        Retrieve a list of plans
      parameters:
        - $ref: '#/components/parameters/collectionLimit'
        - $ref: '#/components/parameters/collectionOffset'
      responses:
        '200':
          description: A list of Plans was retrieved successfully
          headers:
            Pagination-Limit:
              description: Items per page limit
              schema:
                type: integer
            Pagination-Offset:
              description: Pagination offset
              schema:
                type: integer
            Pagination-Total:
              description: Total items count
              schema:
                type: integer
            Rate-Limit-Limit:
              description: The number of allowed requests in the current period
              schema:
                type: integer
            Rate-Limit-Remaining:
              description: The number of remaining requests in the current period
              schema:
                type: integer
            Rate-Limit-Reset:
              description: |
                The date in format defined by [RFC 822](https://www.w3.org/Protocols/rfc2616/rfc2616-sec3.html#sec3.3.1)
                when the current period will reset
              schema:
                type: string
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/Plan'
                type: array
        '401':
          $ref: '#/components/responses/AccessForbidden'
      summary: Retrieve a list of plans
      tags:
        - Plans
      x-code-samples:
        - lang: PHP
          source: |
            $plans = $client->plans()->search([
                'filter' => 'name:TestPlan',
            ]);
    post:
      description: |
        Create a plan
      responses:
        '201':
          description: Plan was created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Plan'
        '401':
          $ref: '#/components/responses/AccessForbidden'
        '422':
          description: Invalid data was sent
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidError'
      summary: Create a plan
      tags:
        - Plans
      x-code-samples:
        - lang: PHP
          source: |
            $planForm = new Rebilly\Entities\Plan();
            $planForm->setName('TestPlan');
            $planForm->setCurrency('USD');
            $planForm->setTrialAmount(1);
            $planForm->setTrialPeriodUnit('day');
            $planForm->setTrialPeriodLength(1);

            try {
                $plan = $client->plans()->create($planForm);
            } catch (UnprocessableEntityException $e) {
                echo $e->getMessage();
            }
      requestBody:
        $ref: '#/components/requestBodies/Plan'
  '/plans/{id}':
    delete:
      description: |
        Delete a Plan with predefined identifier string
      responses:
        '204':
          description: Plan was deleted
          headers:
            Rate-Limit-Limit:
              description: The number of allowed requests in the current period
              schema:
                type: integer
            Rate-Limit-Remaining:
              description: The number of remaining requests in the current period
              schema:
                type: integer
            Rate-Limit-Reset:
              description: |
                The date in format defined by [RFC 822](https://www.w3.org/Protocols/rfc2616/rfc2616-sec3.html#sec3.3.1)
                when the current period will reset
              schema:
                type: string
        '401':
          $ref: '#/components/responses/AccessForbidden'
        '404':
          $ref: '#/components/responses/NotFound'
      summary: Delete a Plan
      tags:
        - Plans
      x-code-samples:
        - lang: PHP
          source: |
            $client->plans()->delete('planId');
    get:
      description: |
        Retrieve a plan with specified identifier string
      responses:
        '200':
          description: Plan was retrieved successfully
          headers:
            Rate-Limit-Limit:
              description: The number of allowed requests in the current period
              schema:
                type: integer
            Rate-Limit-Remaining:
              description: The number of remaining requests in the current period
              schema:
                type: integer
            Rate-Limit-Reset:
              description: |
                The date in format defined by [RFC 822](https://www.w3.org/Protocols/rfc2616/rfc2616-sec3.html#sec3.3.1)
                when the current period will reset
              schema:
                type: string
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Plan'
        '401':
          $ref: '#/components/responses/AccessForbidden'
        '404':
          $ref: '#/components/responses/NotFound'
      summary: Retrieve a plan
      tags:
        - Plans
      x-code-samples:
        - lang: PHP
          source: |
            $plan = $client->plans()->load('planId');
    parameters:
      - $ref: '#/components/parameters/resourceId'
    put:
      description: |
        Create or update a Plan with predefined identifier string
      responses:
        '200':
          description: Plan was updated
          headers:
            Rate-Limit-Limit:
              description: The number of allowed requests in the current period
              schema:
                type: integer
            Rate-Limit-Remaining:
              description: The number of remaining requests in the current period
              schema:
                type: integer
            Rate-Limit-Reset:
              description: |
                The date in format defined by [RFC 822](https://www.w3.org/Protocols/rfc2616/rfc2616-sec3.html#sec3.3.1)
                when the current period will reset
              schema:
                type: string
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Plan'
        '201':
          description: Plan was created
          headers:
            Rate-Limit-Limit:
              description: The number of allowed requests in the current period
              schema:
                type: integer
            Rate-Limit-Remaining:
              description: The number of remaining requests in the current period
              schema:
                type: integer
            Rate-Limit-Reset:
              description: |
                The date in format defined by [RFC 822](https://www.w3.org/Protocols/rfc2616/rfc2616-sec3.html#sec3.3.1)
                when the current period will reset
              schema:
                type: string
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Plan'
        '401':
          $ref: '#/components/responses/AccessForbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '422':
          description: Invalid data was sent
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidError'
      summary: Create or update a Plan with predefined ID
      tags:
        - Plans
      x-code-samples:
        - lang: PHP
          source: |
            $planForm = new Rebilly\Entities\Plan();
            $planForm->setName('TestPlan');
            $planForm->setCurrency('USD');
            $planForm->setTrialAmount(1);
            $planForm->setTrialPeriodUnit('day');
            $planForm->setTrialPeriodLength(1);

            try {
                $plan = $client->plans()->update('planId', $planForm);
            } catch (UnprocessableEntityException $e) {
                echo $e->getMessage();
            }
      requestBody:
        $ref: '#/components/requestBodies/Plan'
  /previews/rule-actions/send-email:
    post:
      description: |
        Send a test email
      responses:
        '200':
          description: Test email was sent
          headers:
            Rate-Limit-Limit:
              description: The number of allowed requests in the current period
              schema:
                type: integer
            Rate-Limit-Remaining:
              description: The number of remaining requests in the current period
              schema:
                type: integer
            Rate-Limit-Reset:
              description: |
                The date in format defined by [RFC 822](https://www.w3.org/Protocols/rfc2616/rfc2616-sec3.html#sec3.3.1)
                when the current period will reset
              schema:
                type: string
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SendTestEmail'
        '401':
          $ref: '#/components/responses/AccessForbidden'
        '422':
          description: Invalid data was sent
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidError'
      security:
        - RebAuth: []
      summary: Send a test email
      tags:
        - Rules
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SendTestEmail'
        description: Test email resource
        required: true
  /previews/rule-actions/trigger-webhook:
    post:
      description: |
        Trigger a test webhook
      responses:
        '200':
          description: Test webhook was triggered
          headers:
            Rate-Limit-Limit:
              description: The number of allowed requests in the current period
              schema:
                type: integer
            Rate-Limit-Remaining:
              description: The number of remaining requests in the current period
              schema:
                type: integer
            Rate-Limit-Reset:
              description: |
                The date in format defined by [RFC 822](https://www.w3.org/Protocols/rfc2616/rfc2616-sec3.html#sec3.3.1)
                when the current period will reset
              schema:
                type: string
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SendPreviewWebhook'
        '401':
          $ref: '#/components/responses/AccessForbidden'
        '422':
          description: Invalid data was sent
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidError'
      security:
        - RebAuth: []
      summary: Trigger a test webhook
      tags:
        - Rules
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SendPreviewWebhook'
        description: Test webhook resource
        required: true
  /previews/webhooks:
    post:
      description: |
        Trigger a test webhook
      responses:
        '204':
          description: Test webhook was triggered
          headers:
            Rate-Limit-Limit:
              description: The number of allowed requests in the current period
              schema:
                type: integer
            Rate-Limit-Remaining:
              description: The number of remaining requests in the current period
              schema:
                type: integer
            Rate-Limit-Reset:
              description: |
                The date in format defined by [RFC 822](https://www.w3.org/Protocols/rfc2616/rfc2616-sec3.html#sec3.3.1)
                when the current period will reset
              schema:
                type: string
        '401':
          $ref: '#/components/responses/AccessForbidden'
        '422':
          description: Invalid data was sent
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidError'
      summary: Trigger a test webhook
      tags:
        - Webhooks
      requestBody:
        $ref: '#/components/requestBodies/GlobalWebhook'
  /products:
    get:
      description: |
        Retrieve a list of products
      parameters:
        - $ref: '#/components/parameters/collectionLimit'
        - $ref: '#/components/parameters/collectionOffset'
      responses:
        '200':
          description: A list of products was retrieved successfully
          headers:
            Pagination-Limit:
              description: Items per page limit
              schema:
                type: integer
            Pagination-Offset:
              description: Pagination offset
              schema:
                type: integer
            Pagination-Total:
              description: Total items count
              schema:
                type: integer
            Rate-Limit-Limit:
              description: The number of allowed requests in the current period
              schema:
                type: integer
            Rate-Limit-Remaining:
              description: The number of remaining requests in the current period
              schema:
                type: integer
            Rate-Limit-Reset:
              description: |
                The date in format defined by [RFC 822](https://www.w3.org/Protocols/rfc2616/rfc2616-sec3.html#sec3.3.1)
                when the current period will reset
              schema:
                type: string
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/Product'
                type: array
        '401':
          $ref: '#/components/responses/AccessForbidden'
      summary: Retrieve a list of products
      tags:
        - Products
    post:
      description: |
        Create a Product
      responses:
        '201':
          description: Product was created
          headers:
            Rate-Limit-Limit:
              description: The number of allowed requests in the current period
              schema:
                type: integer
            Rate-Limit-Remaining:
              description: The number of remaining requests in the current period
              schema:
                type: integer
            Rate-Limit-Reset:
              description: |
                The date in format defined by [RFC 822](https://www.w3.org/Protocols/rfc2616/rfc2616-sec3.html#sec3.3.1)
                when the current period will reset
              schema:
                type: string
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Product'
        '401':
          $ref: '#/components/responses/AccessForbidden'
        '422':
          $ref: '#/components/responses/InvalidDataError'
      summary: Create a Product
      tags:
        - Products
      requestBody:
        $ref: '#/components/requestBodies/Product'
  '/products/{id}':
    delete:
      description: |
        Delete a product with predefined identifier string
      responses:
        '204':
          description: Product was deleted
          headers:
            Rate-Limit-Limit:
              description: The number of allowed requests in the current period
              schema:
                type: integer
            Rate-Limit-Remaining:
              description: The number of remaining requests in the current period
              schema:
                type: integer
            Rate-Limit-Reset:
              description: |
                The date in format defined by [RFC 822](https://www.w3.org/Protocols/rfc2616/rfc2616-sec3.html#sec3.3.1)
                when the current period will reset
              schema:
                type: string
        '401':
          $ref: '#/components/responses/AccessForbidden'
        '404':
          $ref: '#/components/responses/NotFound'
      summary: Delete a product
      tags:
        - Products
    get:
      description: |
        Retrieve a product with specified identifier string
      responses:
        '200':
          description: Product was retrieved successfully
          headers:
            Rate-Limit-Limit:
              description: The number of allowed requests in the current period
              schema:
                type: integer
            Rate-Limit-Remaining:
              description: The number of remaining requests in the current period
              schema:
                type: integer
            Rate-Limit-Reset:
              description: |
                The date in format defined by [RFC 822](https://www.w3.org/Protocols/rfc2616/rfc2616-sec3.html#sec3.3.1)
                when the current period will reset
              schema:
                type: string
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Product'
        '401':
          $ref: '#/components/responses/AccessForbidden'
        '404':
          $ref: '#/components/responses/NotFound'
      summary: Retrieve a product
      tags:
        - Products
    parameters:
      - $ref: '#/components/parameters/resourceId'
    put:
      description: |
        Create a product with predefined identifier string
      responses:
        '200':
          description: Product was updated
          headers:
            Rate-Limit-Limit:
              description: The number of allowed requests in the current period
              schema:
                type: integer
            Rate-Limit-Remaining:
              description: The number of remaining requests in the current period
              schema:
                type: integer
            Rate-Limit-Reset:
              description: |
                The date in format defined by [RFC 822](https://www.w3.org/Protocols/rfc2616/rfc2616-sec3.html#sec3.3.1)
                when the current period will reset
              schema:
                type: string
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Product'
        '201':
          description: Product was created
          headers:
            Rate-Limit-Limit:
              description: The number of allowed requests in the current period
              schema:
                type: integer
            Rate-Limit-Remaining:
              description: The number of remaining requests in the current period
              schema:
                type: integer
            Rate-Limit-Reset:
              description: |
                The date in format defined by [RFC 822](https://www.w3.org/Protocols/rfc2616/rfc2616-sec3.html#sec3.3.1)
                when the current period will reset
              schema:
                type: string
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Product'
        '401':
          $ref: '#/components/responses/AccessForbidden'
        '422':
          $ref: '#/components/responses/InvalidDataError'
      summary: Create a product with predefined ID
      tags:
        - Products
      requestBody:
        $ref: '#/components/requestBodies/Product'
  /profile:
    get:
      description: |
        Retrieve user's profile
      responses:
        '200':
          description: Profile was retrieved successfully
          headers:
            Rate-Limit-Limit:
              description: The number of allowed requests in the current period
              schema:
                type: integer
            Rate-Limit-Remaining:
              description: The number of remaining requests in the current period
              schema:
                type: integer
            Rate-Limit-Reset:
              description: |
                The date in format defined by [RFC 822](https://www.w3.org/Protocols/rfc2616/rfc2616-sec3.html#sec3.3.1)
                when the current period will reset
              schema:
                type: string
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Profile'
        '401':
          $ref: '#/components/responses/AccessForbidden'
        '404':
          $ref: '#/components/responses/NotFound'
      summary: Retrieve user's profile
      tags:
        - Profile
    put:
      description: |
        Update user's profile
      responses:
        '200':
          description: Profile was updated
          headers:
            Rate-Limit-Limit:
              description: The number of allowed requests in the current period
              schema:
                type: integer
            Rate-Limit-Remaining:
              description: The number of remaining requests in the current period
              schema:
                type: integer
            Rate-Limit-Reset:
              description: |
                The date in format defined by [RFC 822](https://www.w3.org/Protocols/rfc2616/rfc2616-sec3.html#sec3.3.1)
                when the current period will reset
              schema:
                type: string
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Profile'
        '401':
          $ref: '#/components/responses/AccessForbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '422':
          $ref: '#/components/responses/InvalidDataError'
      summary: Update user's profile
      tags:
        - Profile
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Profile'
        description: Profile resource
        required: true
  /profile/totp-reset:
    post:
      description: |
        Reset (renew) totpSecret
      responses:
        '201':
          description: totpSecret reset (renewed) successfully
          headers:
            Rate-Limit-Limit:
              description: The number of allowed requests in the current period
              schema:
                type: integer
            Rate-Limit-Remaining:
              description: The number of remaining requests in the current period
              schema:
                type: integer
            Rate-Limit-Reset:
              description: |
                The date in format defined by [RFC 822](https://www.w3.org/Protocols/rfc2616/rfc2616-sec3.html#sec3.3.1)
                when the current period will reset
              schema:
                type: string
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Profile'
        '404':
          $ref: '#/components/responses/NotFound'
      summary: Reset (renew) totpSecret
      tags:
        - Profile
  /queue/custom-events:
    get:
      description: |
        Retrieve a list of scheduled custom events
      parameters:
        - $ref: '#/components/parameters/collectionLimit'
        - $ref: '#/components/parameters/collectionOffset'
      responses:
        '200':
          description: A list of scheduled custom events was retrieved successfully
          headers:
            Pagination-Limit:
              description: Items per page limit
              schema:
                type: integer
            Pagination-Offset:
              description: Pagination offset
              schema:
                type: integer
            Pagination-Total:
              description: Total items count
              schema:
                type: integer
            Rate-Limit-Limit:
              description: The number of allowed requests in the current period
              schema:
                type: integer
            Rate-Limit-Remaining:
              description: The number of remaining requests in the current period
              schema:
                type: integer
            Rate-Limit-Reset:
              description: |
                The date in format defined by [RFC 822](https://www.w3.org/Protocols/rfc2616/rfc2616-sec3.html#sec3.3.1)
                when the current period will reset
              schema:
                type: string
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/CustomEvent'
                type: array
        '401':
          $ref: '#/components/responses/AccessForbidden'
      summary: Retrieve a list of scheduled custom events
      tags:
        - Custom Events
  '/queue/custom-events/{id}':
    delete:
      description: |
        Delete a scheduled custom event with predefined identifier string
      responses:
        '204':
          description: Scheduled custom event was deleted
          headers:
            Rate-Limit-Limit:
              description: The number of allowed requests in the current period
              schema:
                type: integer
            Rate-Limit-Remaining:
              description: The number of remaining requests in the current period
              schema:
                type: integer
            Rate-Limit-Reset:
              description: |
                The date in format defined by [RFC 822](https://www.w3.org/Protocols/rfc2616/rfc2616-sec3.html#sec3.3.1)
                when the current period will reset
              schema:
                type: string
        '401':
          $ref: '#/components/responses/AccessForbidden'
        '404':
          $ref: '#/components/responses/NotFound'
      summary: Delete a scheduled custom event
      tags:
        - Custom Events
    get:
      description: |
        Retrieve a scheduled custom event with predefined identifier string
      responses:
        '200':
          description: Scheduled custom event was retrieved successfully
          headers:
            Rate-Limit-Limit:
              description: The number of allowed requests in the current period
              schema:
                type: integer
            Rate-Limit-Remaining:
              description: The number of remaining requests in the current period
              schema:
                type: integer
            Rate-Limit-Reset:
              description: |
                The date in format defined by [RFC 822](https://www.w3.org/Protocols/rfc2616/rfc2616-sec3.html#sec3.3.1)
                when the current period will reset
              schema:
                type: string
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CustomEvent'
        '303':
          description: Custom event was successfully processed and moved out from queue
          headers:
            Rate-Limit-Limit:
              description: The number of allowed requests in the current period
              schema:
                type: integer
            Rate-Limit-Remaining:
              description: The number of remaining requests in the current period
              schema:
                type: integer
            Rate-Limit-Reset:
              description: |
                The date in format defined by [RFC 822](https://www.w3.org/Protocols/rfc2616/rfc2616-sec3.html#sec3.3.1)
                when the current period will reset
              schema:
                type: string
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CustomEvent'
        '401':
          $ref: '#/components/responses/AccessForbidden'
        '404':
          $ref: '#/components/responses/NotFound'
      summary: Retrieve a scheduled custom event
      tags:
        - Custom Events
    parameters:
      - $ref: '#/components/parameters/resourceId'
  /queue/payments:
    get:
      description: |
        Retrieve a scheduled payment list
      parameters:
        - $ref: '#/components/parameters/collectionLimit'
        - $ref: '#/components/parameters/collectionOffset'
      responses:
        '200':
          description: Successful retrieve the payments list that still waiting to be processed
          headers:
            Pagination-Limit:
              description: Items per page limit
              schema:
                type: integer
            Pagination-Offset:
              description: Pagination offset
              schema:
                type: integer
            Pagination-Total:
              description: Total items count
              schema:
                type: integer
            Rate-Limit-Limit:
              description: The number of allowed requests in the current period
              schema:
                type: integer
            Rate-Limit-Remaining:
              description: The number of remaining requests in the current period
              schema:
                type: integer
            Rate-Limit-Reset:
              description: |
                The date in format defined by [RFC 822](https://www.w3.org/Protocols/rfc2616/rfc2616-sec3.html#sec3.3.1)
                when the current period will reset
              schema:
                type: string
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/Payment'
                type: array
        '401':
          $ref: '#/components/responses/AccessForbidden'
      summary: Retrieve a scheduled payment list
      tags:
        - Payments
      x-code-samples:
        - lang: PHP
          source: |
            $payments = $client->payments()->searchInQueue([
                'filter' => 'currency:USD',
            ]);
  '/queue/payments/{id}':
    get:
      description: |
        Retrieve a payment with specified identifier string
      responses:
        '200':
          description: Successful retrieve the payment that still waiting to be processed
          headers:
            Rate-Limit-Limit:
              description: The number of allowed requests in the current period
              schema:
                type: integer
            Rate-Limit-Remaining:
              description: The number of remaining requests in the current period
              schema:
                type: integer
            Rate-Limit-Reset:
              description: |
                The date in format defined by [RFC 822](https://www.w3.org/Protocols/rfc2616/rfc2616-sec3.html#sec3.3.1)
                when the current period will reset
              schema:
                type: string
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Payment'
        '303':
          description: Payment was successfully processed and moved out from queue
          headers:
            Rate-Limit-Limit:
              description: The number of allowed requests in the current period
              schema:
                type: integer
            Rate-Limit-Remaining:
              description: The number of remaining requests in the current period
              schema:
                type: integer
            Rate-Limit-Reset:
              description: |
                The date in format defined by [RFC 822](https://www.w3.org/Protocols/rfc2616/rfc2616-sec3.html#sec3.3.1)
                when the current period will reset
              schema:
                type: string
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Payment'
        '401':
          $ref: '#/components/responses/AccessForbidden'
        '404':
          $ref: '#/components/responses/NotFound'
      summary: Retrieve a scheduled payment
      tags:
        - Payments
      x-code-samples:
        - lang: PHP
          source: |
            $payment = $client->payments()->loadFromQueue('paymentId');
    parameters:
      - $ref: '#/components/parameters/resourceId'
    put:
      responses:
        '200':
          description: Payment was updated
          headers:
            Rate-Limit-Limit:
              description: The number of allowed requests in the current period
              schema:
                type: integer
            Rate-Limit-Remaining:
              description: The number of remaining requests in the current period
              schema:
                type: integer
            Rate-Limit-Reset:
              description: |
                The date in format defined by [RFC 822](https://www.w3.org/Protocols/rfc2616/rfc2616-sec3.html#sec3.3.1)
                when the current period will reset
              schema:
                type: string
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Payment'
        '401':
          $ref: '#/components/responses/AccessForbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '409':
          description: Payment is already handled and cannot be updated
        '422':
          $ref: '#/components/responses/InvalidDataError'
      summary: Update pending payment
      tags:
        - Payments
      requestBody:
        $ref: '#/components/requestBodies/Payment'
  /sessions:
    get:
      description: |
        Retrieve a list of sessions
      parameters:
        - $ref: '#/components/parameters/collectionLimit'
        - $ref: '#/components/parameters/collectionOffset'
      responses:
        '200':
          description: A list of Sessions was retrieved successfully
          headers:
            Pagination-Limit:
              description: Items per page limit
              schema:
                type: integer
            Pagination-Offset:
              description: Pagination offset
              schema:
                type: integer
            Pagination-Total:
              description: Total items count
              schema:
                type: integer
            Rate-Limit-Limit:
              description: The number of allowed requests in the current period
              schema:
                type: integer
            Rate-Limit-Remaining:
              description: The number of remaining requests in the current period
              schema:
                type: integer
            Rate-Limit-Reset:
              description: |
                The date in format defined by [RFC 822](https://www.w3.org/Protocols/rfc2616/rfc2616-sec3.html#sec3.3.1)
                when the current period will reset
              schema:
                type: string
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/Session'
                type: array
        '401':
          $ref: '#/components/responses/AccessForbidden'
      summary: Retrieve a list of sessions
      tags:
        - Sessions
      x-code-samples:
        - lang: PHP
          source: |
            $sessions = $client->sessions()->search([
                'filter' => 'userId:testUserId',
            ]);
    post:
      description: |
        Create a session
      responses:
        '201':
          description: Session was created
          headers:
            Rate-Limit-Limit:
              description: The number of allowed requests in the current period
              schema:
                type: integer
            Rate-Limit-Remaining:
              description: The number of remaining requests in the current period
              schema:
                type: integer
            Rate-Limit-Reset:
              description: |
                The date in format defined by [RFC 822](https://www.w3.org/Protocols/rfc2616/rfc2616-sec3.html#sec3.3.1)
                when the current period will reset
              schema:
                type: string
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Session'
        '401':
          $ref: '#/components/responses/AccessForbidden'
        '422':
          description: Invalid data was sent
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidError'
      summary: Create a session
      tags:
        - Sessions
      x-code-samples:
        - lang: PHP
          source: |
            $sessionForm = new Rebilly\Entities\Session();

            $permissions = [
                // Example permission to use GET and POST methods only for certain Customers
                [
                    'resourceName' => Rebilly\Entities\ResourceType::TYPE_CUSTOMERS,
                    'methods' => [
                        $sessionForm::METHOD_GET,
                        $sessionForm::METHOD_POST,
                    ],
                    'resourceIds' => [
                        'testCustomerId',
                        'testCustomerId2',
                    ],
                ],
                // Example permission to use all methods for Websites resource
                [
                    'resourceName' => Rebilly\Entities\ResourceType::TYPE_WEBSITES,
                    'methods' => [
                        $sessionForm::METHOD_GET,
                        $sessionForm::METHOD_POST,
                        $sessionForm::METHOD_PUT,
                        $sessionForm::METHOD_HEAD,
                        $sessionForm::METHOD_DELETE,
                    ],
                ],
                // Example permission to use all methods for all resources
                [],
            ];

            $sessionForm->setPermissions($permissions);

            try {
                $session = $client->sessions()->create($sessionForm);
            } catch (UnprocessableEntityException $e) {
                echo $e->getMessage();
            }
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Session'
        description: Sessions resource
        required: true
  '/sessions/{id}':
    delete:
      description: |
        Delete a Session with predefined identifier string
      responses:
        '204':
          description: Session was deleted
          headers:
            Rate-Limit-Limit:
              description: The number of allowed requests in the current period
              schema:
                type: integer
            Rate-Limit-Remaining:
              description: The number of remaining requests in the current period
              schema:
                type: integer
            Rate-Limit-Reset:
              description: |
                The date in format defined by [RFC 822](https://www.w3.org/Protocols/rfc2616/rfc2616-sec3.html#sec3.3.1)
                when the current period will reset
              schema:
                type: string
        '401':
          $ref: '#/components/responses/AccessForbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '409':
          description: Session has related resources and cannot be deleted
      summary: Delete a Session
      tags:
        - Sessions
      x-code-samples:
        - lang: PHP
          source: |
            try {
                $client->sessions()->delete('sessionId');
            } catch (ServerException $e) {
                echo $e->getMessage();
            }
    get:
      description: |
        Retrieve a Session with specified identifier string
      responses:
        '200':
          description: Session was retrieved successfully
          headers:
            Rate-Limit-Limit:
              description: The number of allowed requests in the current period
              schema:
                type: integer
            Rate-Limit-Remaining:
              description: The number of remaining requests in the current period
              schema:
                type: integer
            Rate-Limit-Reset:
              description: |
                The date in format defined by [RFC 822](https://www.w3.org/Protocols/rfc2616/rfc2616-sec3.html#sec3.3.1)
                when the current period will reset
              schema:
                type: string
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Session'
        '401':
          $ref: '#/components/responses/AccessForbidden'
        '404':
          $ref: '#/components/responses/NotFound'
      summary: Retrieve a Session
      tags:
        - Sessions
      x-code-samples:
        - lang: PHP
          source: |
            $session = $client->sessions()->load('sessionId');
    parameters:
      - $ref: '#/components/parameters/resourceId'
    put:
      description: |
        Create or update a Session with predefined identifier string
      responses:
        '200':
          description: Session was updated
          headers:
            Rate-Limit-Limit:
              description: The number of allowed requests in the current period
              schema:
                type: integer
            Rate-Limit-Remaining:
              description: The number of remaining requests in the current period
              schema:
                type: integer
            Rate-Limit-Reset:
              description: |
                The date in format defined by [RFC 822](https://www.w3.org/Protocols/rfc2616/rfc2616-sec3.html#sec3.3.1)
                when the current period will reset
              schema:
                type: string
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Session'
        '201':
          description: Session was created
          headers:
            Rate-Limit-Limit:
              description: The number of allowed requests in the current period
              schema:
                type: integer
            Rate-Limit-Remaining:
              description: The number of remaining requests in the current period
              schema:
                type: integer
            Rate-Limit-Reset:
              description: |
                The date in format defined by [RFC 822](https://www.w3.org/Protocols/rfc2616/rfc2616-sec3.html#sec3.3.1)
                when the current period will reset
              schema:
                type: string
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Session'
        '401':
          $ref: '#/components/responses/AccessForbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '422':
          description: Invalid data was sent
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidError'
      summary: Create or update a Session with predefined ID
      tags:
        - Sessions
      x-code-samples:
        - lang: PHP
          source: |
            $sessionForm = new Rebilly\Entities\Session();

            $permissions = [
                [
                    'resourceName' => Rebilly\Entities\ResourceType::TYPE_CUSTOMERS,
                    'methods' => [
                        $sessionForm::METHOD_GET,
                        $sessionForm::METHOD_POST,
                    ],
                    'resourceIds' => [
                        'testCustomerId',
                        'testCustomerId2',
                    ],
                ],
                [
                    'resourceName' => Rebilly\Entities\ResourceType::TYPE_WEBSITES,
                    'methods' => [
                        $sessionForm::METHOD_GET,
                        $sessionForm::METHOD_POST,
                    ],
                    'resourceIds' => [
                        'testWebsiteId',
                        'testWebsiteId2',
                    ],
                ],
            ];

            $sessionForm->setPermissions($permissions);

            try {
                $session = $client->sessions()->update('sessionId', $sessionForm);
            } catch (UnprocessableEntityException $e) {
                echo $e->getMessage();
            }
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Session'
        description: Session resource
        required: true
  /shipping-zones:
    get:
      description: |
        Retrieve a list of shipping zones
      parameters:
        - $ref: '#/components/parameters/collectionLimit'
        - $ref: '#/components/parameters/collectionOffset'
      responses:
        '200':
          description: A list of shipping zones was retrieved successfully
          headers:
            Pagination-Limit:
              description: Items per page limit
              schema:
                type: integer
            Pagination-Offset:
              description: Pagination offset
              schema:
                type: integer
            Pagination-Total:
              description: Total items count
              schema:
                type: integer
            Rate-Limit-Limit:
              description: The number of allowed requests in the current period
              schema:
                type: integer
            Rate-Limit-Remaining:
              description: The number of remaining requests in the current period
              schema:
                type: integer
            Rate-Limit-Reset:
              description: |
                The date in format defined by [RFC 822](https://www.w3.org/Protocols/rfc2616/rfc2616-sec3.html#sec3.3.1)
                when the current period will reset
              schema:
                type: string
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/ShippingZone'
                type: array
        '401':
          $ref: '#/components/responses/AccessForbidden'
      summary: Retrieve a list of shipping zones
      tags:
        - Shipping Zones
    post:
      description: |
        Create a Shipping Zone
      responses:
        '201':
          description: Shipping Zone was created
          headers:
            Rate-Limit-Limit:
              description: The number of allowed requests in the current period
              schema:
                type: integer
            Rate-Limit-Remaining:
              description: The number of remaining requests in the current period
              schema:
                type: integer
            Rate-Limit-Reset:
              description: |
                The date in format defined by [RFC 822](https://www.w3.org/Protocols/rfc2616/rfc2616-sec3.html#sec3.3.1)
                when the current period will reset
              schema:
                type: string
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ShippingZone'
        '401':
          $ref: '#/components/responses/AccessForbidden'
        '422':
          $ref: '#/components/responses/InvalidDataError'
      summary: Create a Shipping Zone
      tags:
        - Shipping Zones
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ShippingZone'
        description: Shipping Zone resource
        required: true
  '/shipping-zones/{id}':
    delete:
      description: |
        Delete a shipping zone with predefined identifier string
      responses:
        '204':
          description: Shipping zone was deleted
          headers:
            Rate-Limit-Limit:
              description: The number of allowed requests in the current period
              schema:
                type: integer
            Rate-Limit-Remaining:
              description: The number of remaining requests in the current period
              schema:
                type: integer
            Rate-Limit-Reset:
              description: |
                The date in format defined by [RFC 822](https://www.w3.org/Protocols/rfc2616/rfc2616-sec3.html#sec3.3.1)
                when the current period will reset
              schema:
                type: string
        '401':
          $ref: '#/components/responses/AccessForbidden'
        '404':
          $ref: '#/components/responses/NotFound'
      summary: Delete a shipping zone
      tags:
        - Shipping Zones
    get:
      description: |
        Retrieve a shipping zone with specified identifier string
      responses:
        '200':
          description: Shipping zone was retrieved successfully
          headers:
            Rate-Limit-Limit:
              description: The number of allowed requests in the current period
              schema:
                type: integer
            Rate-Limit-Remaining:
              description: The number of remaining requests in the current period
              schema:
                type: integer
            Rate-Limit-Reset:
              description: |
                The date in format defined by [RFC 822](https://www.w3.org/Protocols/rfc2616/rfc2616-sec3.html#sec3.3.1)
                when the current period will reset
              schema:
                type: string
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ShippingZone'
        '401':
          $ref: '#/components/responses/AccessForbidden'
        '404':
          $ref: '#/components/responses/NotFound'
      summary: Retrieve a shipping zone
      tags:
        - Shipping Zones
    parameters:
      - $ref: '#/components/parameters/resourceId'
    put:
      description: |
        Create a shipping zone with predefined identifier string
      responses:
        '200':
          description: Shipping zone was updated
          headers:
            Rate-Limit-Limit:
              description: The number of allowed requests in the current period
              schema:
                type: integer
            Rate-Limit-Remaining:
              description: The number of remaining requests in the current period
              schema:
                type: integer
            Rate-Limit-Reset:
              description: |
                The date in format defined by [RFC 822](https://www.w3.org/Protocols/rfc2616/rfc2616-sec3.html#sec3.3.1)
                when the current period will reset
              schema:
                type: string
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ShippingZone'
        '201':
          description: Shipping zone was created
          headers:
            Rate-Limit-Limit:
              description: The number of allowed requests in the current period
              schema:
                type: integer
            Rate-Limit-Remaining:
              description: The number of remaining requests in the current period
              schema:
                type: integer
            Rate-Limit-Reset:
              description: |
                The date in format defined by [RFC 822](https://www.w3.org/Protocols/rfc2616/rfc2616-sec3.html#sec3.3.1)
                when the current period will reset
              schema:
                type: string
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ShippingZone'
        '401':
          $ref: '#/components/responses/AccessForbidden'
        '422':
          $ref: '#/components/responses/InvalidDataError'
      summary: Create a shipping zone with predefined ID
      tags:
        - Shipping Zones
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ShippingZone'
        description: Shipping zone resource
        required: true
  /signin:
    post:
      description: |
        Create a session with email and password
      responses:
        '201':
          description: Session was created
          headers:
            Rate-Limit-Limit:
              description: The number of allowed requests in the current period
              schema:
                type: integer
            Rate-Limit-Remaining:
              description: The number of remaining requests in the current period
              schema:
                type: integer
            Rate-Limit-Reset:
              description: |
                The date in format defined by [RFC 822](https://www.w3.org/Protocols/rfc2616/rfc2616-sec3.html#sec3.3.1)
                when the current period will reset
              schema:
                type: string
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Session'
        '401':
          $ref: '#/components/responses/AccessForbidden'
        '422':
          description: Invalid data was sent
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidError'
      security: []
      summary: Create a session with email and password
      tags:
        - Users
        - Sessions
      x-code-samples:
        - lang: PHP
          source: |
            $loginForm = new Rebilly\Entities\Login();
            $loginForm->setEmail('test@test.com');
            $loginForm->setPassword('1234');

            try {
                $user = $client->users()->signin($loginForm);
            } catch (UnprocessableEntityException $e) {
                echo $e->getMessage();
            }
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Signin'
        description: Signin resource
        required: true
  /signup:
    post:
      description: |
        Creates a new user and sends an email confirmation
      responses:
        '201':
          description: User was created
          headers:
            Rate-Limit-Limit:
              description: The number of allowed requests in the current period
              schema:
                type: integer
            Rate-Limit-Remaining:
              description: The number of remaining requests in the current period
              schema:
                type: integer
            Rate-Limit-Reset:
              description: |
                The date in format defined by [RFC 822](https://www.w3.org/Protocols/rfc2616/rfc2616-sec3.html#sec3.3.1)
                when the current period will reset
              schema:
                type: string
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '422':
          description: Invalid data was sent
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidError'
      summary: Creates a new user and sends an email confirmation
      tags:
        - Users
      x-code-samples:
        - lang: PHP
          source: |
            $signupForm = new Rebilly\Entities\Signup();
            $signupForm->setFirstName('John');
            $signupForm->setLastName('Doe');
            $signupForm->setEmail('johndoe@test.com');
            $signupForm->setBusinessPhone('+123456789');
            $signupForm->setPassword('1234');

            try {
                $client->users()->signup($signupForm);
            } catch (UnprocessableEntityException $e) {
                echo $e->getMessage();
            }
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Signup'
        description: Signup resource
        required: true
  /status:
    get:
      description: |
        Retrieve API current status
      responses:
        '200':
          description: Status was received
          headers:
            Rate-Limit-Limit:
              description: The number of allowed requests in the current period
              schema:
                type: integer
            Rate-Limit-Remaining:
              description: The number of remaining requests in the current period
              schema:
                type: integer
            Rate-Limit-Reset:
              description: |
                The date in format defined by [RFC 822](https://www.w3.org/Protocols/rfc2616/rfc2616-sec3.html#sec3.3.1)
                when the current period will reset
              schema:
                type: string
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Status'
      security: []
      summary: Retrieve API current status
      tags:
        - Status
  /subscriptions:
    get:
      description: |
        Retrieve a list of subscriptions
      parameters:
        - $ref: '#/components/parameters/collectionLimit'
        - $ref: '#/components/parameters/collectionOffset'
        - description: The response media type
          in: header
          name: Accept
          schema:
            type: string
            enum:
              - application/json
              - text/csv
            default: application/json
      responses:
        '200':
          description: A list of subscriptions was retrieved successfully
          headers:
            Pagination-Limit:
              description: Items per page limit
              schema:
                type: integer
            Pagination-Offset:
              description: Pagination offset
              schema:
                type: integer
            Pagination-Total:
              description: Total items count
              schema:
                type: integer
            Rate-Limit-Limit:
              description: The number of allowed requests in the current period
              schema:
                type: integer
            Rate-Limit-Remaining:
              description: The number of remaining requests in the current period
              schema:
                type: integer
            Rate-Limit-Reset:
              description: |
                The date in format defined by [RFC 822](https://www.w3.org/Protocols/rfc2616/rfc2616-sec3.html#sec3.3.1)
                when the current period will reset
              schema:
                type: string
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/Subscription'
                type: array
            text/csv:
              schema:
                items:
                  $ref: '#/components/schemas/Subscription'
                type: array
        '401':
          $ref: '#/components/responses/AccessForbidden'
      summary: Retrieve a list of subscriptions
      tags:
        - Subscriptions
      x-code-samples:
        - lang: PHP
          source: |
            $subscriptions = $client->subscriptions()->search([
                'filter' => 'customerId:testCustomerId',
            ]);
    post:
      description: |
        Create a subscription
      responses:
        '201':
          description: Subscription was created
          headers:
            Rate-Limit-Limit:
              description: The number of allowed requests in the current period
              schema:
                type: integer
            Rate-Limit-Remaining:
              description: The number of remaining requests in the current period
              schema:
                type: integer
            Rate-Limit-Reset:
              description: |
                The date in format defined by [RFC 822](https://www.w3.org/Protocols/rfc2616/rfc2616-sec3.html#sec3.3.1)
                when the current period will reset
              schema:
                type: string
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Subscription'
        '401':
          $ref: '#/components/responses/AccessForbidden'
        '422':
          description: Invalid data was sent
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidError'
      summary: Create a subscription
      tags:
        - Subscriptions
      x-code-samples:
        - lang: PHP
          source: |
            $subscriptionForm = new Rebilly\Entities\Subscription();
            $subscriptionForm->setCustomerId('customerId');
            $subscriptionForm->setWebsiteId('websiteId');
            $subscriptionForm->setPlanId('planId');

            try {
                $subscription = $client->subscriptions()->create($subscriptionForm);
            } catch (UnprocessableEntityException $e) {
                echo $e->getMessage();
            }
      requestBody:
        $ref: '#/components/requestBodies/Subscription'
  '/subscriptions/{id}':
    get:
      description: |
        Retrieve a subscription with specified identifier string
      responses:
        '200':
          description: Subscription was retrieved successfully
          headers:
            Rate-Limit-Limit:
              description: The number of allowed requests in the current period
              schema:
                type: integer
            Rate-Limit-Remaining:
              description: The number of remaining requests in the current period
              schema:
                type: integer
            Rate-Limit-Reset:
              description: |
                The date in format defined by [RFC 822](https://www.w3.org/Protocols/rfc2616/rfc2616-sec3.html#sec3.3.1)
                when the current period will reset
              schema:
                type: string
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Subscription'
        '401':
          $ref: '#/components/responses/AccessForbidden'
        '404':
          $ref: '#/components/responses/NotFound'
      summary: Retrieve a subscription
      tags:
        - Subscriptions
      x-code-samples:
        - lang: PHP
          source: |
            $subscription = $client->subscriptions()->load('subscriptionId');
    parameters:
      - $ref: '#/components/parameters/resourceId'
    put:
      description: |
        Create or update a subscription with predefined identifier string
      responses:
        '200':
          description: Subscription was updated
          headers:
            Rate-Limit-Limit:
              description: The number of allowed requests in the current period
              schema:
                type: integer
            Rate-Limit-Remaining:
              description: The number of remaining requests in the current period
              schema:
                type: integer
            Rate-Limit-Reset:
              description: |
                The date in format defined by [RFC 822](https://www.w3.org/Protocols/rfc2616/rfc2616-sec3.html#sec3.3.1)
                when the current period will reset
              schema:
                type: string
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Subscription'
        '201':
          description: Subscription was created
          headers:
            Rate-Limit-Limit:
              description: The number of allowed requests in the current period
              schema:
                type: integer
            Rate-Limit-Remaining:
              description: The number of remaining requests in the current period
              schema:
                type: integer
            Rate-Limit-Reset:
              description: |
                The date in format defined by [RFC 822](https://www.w3.org/Protocols/rfc2616/rfc2616-sec3.html#sec3.3.1)
                when the current period will reset
              schema:
                type: string
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Subscription'
        '401':
          $ref: '#/components/responses/AccessForbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '422':
          description: Invalid data was sent
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidError'
      summary: Create or update a subscription with predefined ID
      tags:
        - Subscriptions
      x-code-samples:
        - lang: PHP
          source: |
            $subscriptionForm = new Rebilly\Entities\Subscription();
            $subscriptionForm->setCustomerId('customerId');
            $subscriptionForm->setWebsiteId('websiteId');
            $subscriptionForm->setPlanId('planId');

            try {
                $subscription = $client->subscriptions()->update('subscriptionId', $subscriptionForm);
            } catch (UnprocessableEntityException $e) {
                echo $e->getMessage();
            }
      requestBody:
        $ref: '#/components/requestBodies/Subscription'
  '/subscriptions/{id}/cancel':
    parameters:
      - $ref: '#/components/parameters/resourceId'
    post:
      description: |
        Cancel a subscription
      responses:
        '201':
          description: Subscription was switched
          headers:
            Rate-Limit-Limit:
              description: The number of allowed requests in the current period
              schema:
                type: integer
            Rate-Limit-Remaining:
              description: The number of remaining requests in the current period
              schema:
                type: integer
            Rate-Limit-Reset:
              description: |
                The date in format defined by [RFC 822](https://www.w3.org/Protocols/rfc2616/rfc2616-sec3.html#sec3.3.1)
                when the current period will reset
              schema:
                type: string
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Subscription'
        '401':
          $ref: '#/components/responses/AccessForbidden'
        '422':
          description: Invalid data was sent
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidError'
      summary: Cancel a subscription
      tags:
        - Subscriptions
      x-code-samples:
        - lang: PHP
          source: |
            $subscriptionCancelForm = new Rebilly\Entities\SubscriptionCancel();
            $subscriptionCancelForm->setPolicy($subscriptionCancelForm::NOW);

            try {
                $subscription = $client->subscriptions()->cancel('subscriptionId', $subscriptionCancelForm);
            } catch (UnprocessableEntityException $e) {
                echo $e->getMessage();
            }
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SubscriptionCancel'
        description: Only policy
        required: true
  '/subscriptions/{id}/lead-source':
    delete:
      description: |
        Delete a Lead Source that belongs to a certain Subscription
      responses:
        '204':
          description: Lead Source was deleted
          headers:
            Rate-Limit-Limit:
              description: The number of allowed requests in the current period
              schema:
                type: integer
            Rate-Limit-Remaining:
              description: The number of remaining requests in the current period
              schema:
                type: integer
            Rate-Limit-Reset:
              description: |
                The date in format defined by [RFC 822](https://www.w3.org/Protocols/rfc2616/rfc2616-sec3.html#sec3.3.1)
                when the current period will reset
              schema:
                type: string
        '401':
          $ref: '#/components/responses/AccessForbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '409':
          description: Lead Source cannot be deleted
      summary: Delete a Lead Source for a Subscription
      tags:
        - Subscriptions
      x-code-samples:
        - lang: PHP
          source: |
            $subscription = $client->subscriptions()->deleteLeadSource('subscriptionId');
    get:
      description: |
        Retrieve a Lead Source of given subscription
      responses:
        '200':
          description: Lead Source was retrieved successfully
          headers:
            Rate-Limit-Limit:
              description: The number of allowed requests in the current period
              schema:
                type: integer
            Rate-Limit-Remaining:
              description: The number of remaining requests in the current period
              schema:
                type: integer
            Rate-Limit-Reset:
              description: |
                The date in format defined by [RFC 822](https://www.w3.org/Protocols/rfc2616/rfc2616-sec3.html#sec3.3.1)
                when the current period will reset
              schema:
                type: string
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LeadSource'
        '401':
          $ref: '#/components/responses/AccessForbidden'
        '404':
          $ref: '#/components/responses/NotFound'
      summary: Retrieve a subscription's Lead Source
      tags:
        - Subscriptions
      x-code-samples:
        - lang: PHP
          source: |
            $subscription = $client->subscriptions()->load('subscriptionId');
            $leadSource = $subscription->getLeadSource();
    parameters:
      - $ref: '#/components/parameters/resourceId'
    put:
      description: |
        Create a Lead Source for a Subscription
      responses:
        '200':
          description: Lead Source was updated
          headers:
            Rate-Limit-Limit:
              description: The number of allowed requests in the current period
              schema:
                type: integer
            Rate-Limit-Remaining:
              description: The number of remaining requests in the current period
              schema:
                type: integer
            Rate-Limit-Reset:
              description: |
                The date in format defined by [RFC 822](https://www.w3.org/Protocols/rfc2616/rfc2616-sec3.html#sec3.3.1)
                when the current period will reset
              schema:
                type: string
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LeadSource'
        '201':
          description: Lead Source was created
          headers:
            Rate-Limit-Limit:
              description: The number of allowed requests in the current period
              schema:
                type: integer
            Rate-Limit-Remaining:
              description: The number of remaining requests in the current period
              schema:
                type: integer
            Rate-Limit-Reset:
              description: |
                The date in format defined by [RFC 822](https://www.w3.org/Protocols/rfc2616/rfc2616-sec3.html#sec3.3.1)
                when the current period will reset
              schema:
                type: string
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LeadSource'
        '401':
          $ref: '#/components/responses/AccessForbidden'
        '422':
          description: Invalid data was sent
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidError'
      summary: Create a Lead Source for a Subscription
      tags:
        - Subscriptions
      x-code-samples:
        - lang: PHP
          source: |
            $leadSourceForm = new Rebilly\Entities\LeadSource();
            $leadSourceForm->setSource('TestSource');
            $leadSourceForm->setCampaign('TestCampaign');

            try {
                $subscription = $client->subscriptions()->updateLeadSource('subscriptionId', $leadSourceForm);
            } catch (UnprocessableEntityException $e) {
                echo $e->getMessage();
            }
      requestBody:
        $ref: '#/components/requestBodies/LeadSource'
  '/subscriptions/{id}/switch':
    parameters:
      - $ref: '#/components/parameters/resourceId'
    post:
      description: |
        Switch a subscription
      responses:
        '201':
          description: Subscription was switched
          headers:
            Rate-Limit-Limit:
              description: The number of allowed requests in the current period
              schema:
                type: integer
            Rate-Limit-Remaining:
              description: The number of remaining requests in the current period
              schema:
                type: integer
            Rate-Limit-Reset:
              description: |
                The date in format defined by [RFC 822](https://www.w3.org/Protocols/rfc2616/rfc2616-sec3.html#sec3.3.1)
                when the current period will reset
              schema:
                type: string
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Subscription'
        '401':
          $ref: '#/components/responses/AccessForbidden'
        '422':
          description: Invalid data was sent
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidError'
      summary: Switch a subscription
      tags:
        - Subscriptions
      x-code-samples:
        - lang: PHP
          source: |
            $subscriptionSwitchForm = new Rebilly\Entities\SubscriptionSwitch();
            $subscriptionSwitchForm->setPlanId('newPlanId');
            $subscriptionSwitchForm->setPolicy($subscriptionSwitchForm::NOW);

            try {
                $subscription = $client->subscriptions()->switchTo('subscriptionId', $subscriptionSwitchForm);
            } catch (UnprocessableEntityException $e) {
                echo $e->getMessage();
            }
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SubscriptionSwitch'
        description: SubscriptionSwitch resource
        required: true
  /tax-categories:
    get:
      description: |
        Retrieve a list of tax categories
      responses:
        '200':
          description: A list of tax categories was retrieved successfully
          headers:
            Pagination-Limit:
              description: Items per page limit
              schema:
                type: integer
            Pagination-Offset:
              description: Pagination offset
              schema:
                type: integer
            Pagination-Total:
              description: Total items count
              schema:
                type: integer
            Rate-Limit-Limit:
              description: The number of allowed requests in the current period
              schema:
                type: integer
            Rate-Limit-Remaining:
              description: The number of remaining requests in the current period
              schema:
                type: integer
            Rate-Limit-Reset:
              description: |
                The date in format defined by [RFC 822](https://www.w3.org/Protocols/rfc2616/rfc2616-sec3.html#sec3.3.1)
                when the current period will reset
              schema:
                type: string
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/TaxCategory'
                type: array
        '401':
          $ref: '#/components/responses/AccessForbidden'
      summary: Retrieve a list of tax categories
      tags:
        - Taxes
  /tokens:
    get:
      description: |
        Retrieve a list of tokens
      parameters:
        - $ref: '#/components/parameters/collectionLimit'
        - $ref: '#/components/parameters/collectionOffset'
      responses:
        '200':
          description: A list of tokens was retrieved successfully
          headers:
            Pagination-Limit:
              description: Items per page limit
              schema:
                type: integer
            Pagination-Offset:
              description: Pagination offset
              schema:
                type: integer
            Pagination-Total:
              description: Total items count
              schema:
                type: integer
            Rate-Limit-Limit:
              description: The number of allowed requests in the current period
              schema:
                type: integer
            Rate-Limit-Remaining:
              description: The number of remaining requests in the current period
              schema:
                type: integer
            Rate-Limit-Reset:
              description: |
                The date in format defined by [RFC 822](https://www.w3.org/Protocols/rfc2616/rfc2616-sec3.html#sec3.3.1)
                when the current period will reset
              schema:
                type: string
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/PaymentToken'
                type: array
        '401':
          $ref: '#/components/responses/AccessForbidden'
      summary: Retrieve a list of tokens
      tags:
        - Payment Tokens
      x-code-samples:
        - lang: PHP
          source: |
            $paymentCardTokens = $client->paymentCardTokens()->search([
                'filter' => 'token:string',
            ]);
    post:
      description: |
        Create a token
      responses:
        '201':
          description: Token was created
          headers:
            Rate-Limit-Limit:
              description: The number of allowed requests in the current period
              schema:
                type: integer
            Rate-Limit-Remaining:
              description: The number of remaining requests in the current period
              schema:
                type: integer
            Rate-Limit-Reset:
              description: |
                The date in format defined by [RFC 822](https://www.w3.org/Protocols/rfc2616/rfc2616-sec3.html#sec3.3.1)
                when the current period will reset
              schema:
                type: string
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaymentToken'
        '401':
          $ref: '#/components/responses/AccessForbidden'
        '422':
          description: Invalid data was sent
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidError'
      security:
        - RebAuth: []
      summary: Create a payment token
      tags:
        - Payment Tokens
      x-code-samples:
        - lang: PHP
          source: |
            $paymentCardTokenForm = new Rebilly\Entities\PaymentCardToken();
            $paymentCardTokenForm->setFirstName('John');
            $paymentCardTokenForm->setLastName('Doe');
            $paymentCardTokenForm->setAddress('1313 Main Street');
            $paymentCardTokenForm->setCity('Gotham');
            $paymentCardTokenForm->setPostalCode('12345');
            $paymentCardTokenForm->setRegion('NY');
            $paymentCardTokenForm->setCountry('US');

            $paymentInstrumentForm = new Entities\PaymentInstruments\PaymentCardPaymentInstrument();
            $paymentInstrumentForm->setPan('4111111111111111');
            $paymentInstrumentForm->setExpYear(2025);
            $paymentInstrumentForm->setExpMonth(8);
            $paymentInstrumentForm->setCvv(123);

            $paymentCardTokenForm->setPaymentInstrument($paymentInstrumentForm);

            try {
                $paymentCardToken = $client->paymentCardTokens()->create($paymentCardTokenForm);
            } catch (UnprocessableEntityException $e) {
                echo $e->getMessage();
            }
      requestBody:
        $ref: '#/components/requestBodies/PaymentToken'
  '/tokens/{token}':
    get:
      description: |
        Retrieve a token with specified identifier string
      responses:
        '200':
          description: Token was retrieved successfully
          headers:
            Rate-Limit-Limit:
              description: The number of allowed requests in the current period
              schema:
                type: integer
            Rate-Limit-Remaining:
              description: The number of remaining requests in the current period
              schema:
                type: integer
            Rate-Limit-Reset:
              description: |
                The date in format defined by [RFC 822](https://www.w3.org/Protocols/rfc2616/rfc2616-sec3.html#sec3.3.1)
                when the current period will reset
              schema:
                type: string
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaymentToken'
        '401':
          $ref: '#/components/responses/AccessForbidden'
        '404':
          $ref: '#/components/responses/NotFound'
      security:
        - RebAuth: []
      summary: Retrieve a token
      tags:
        - Payment Tokens
      x-code-samples:
        - lang: PHP
          source: |
            $paymentCardToken = $client->paymentCardTokens()->load('tokenId');
    parameters:
      - description: The token identifier string
        in: path
        name: token
        required: true
        schema:
          type: string
  '/tokens/{token}/expiration':
    parameters:
      - description: The token identifier string
        in: path
        name: token
        required: true
        schema:
          type: string
    post:
      description: |
        Expire a token
      responses:
        '201':
          description: Token expiration successful
          headers:
            Rate-Limit-Limit:
              description: The number of allowed requests in the current period
              schema:
                type: integer
            Rate-Limit-Remaining:
              description: The number of remaining requests in the current period
              schema:
                type: integer
            Rate-Limit-Reset:
              description: |
                The date in format defined by [RFC 822](https://www.w3.org/Protocols/rfc2616/rfc2616-sec3.html#sec3.3.1)
                when the current period will reset
              schema:
                type: string
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaymentToken'
        '401':
          $ref: '#/components/responses/AccessForbidden'
        '422':
          description: Invalid data was sent
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidError'
      summary: Expire a token
      tags:
        - Payment Tokens
      x-code-samples:
        - lang: PHP
          source: |
            try {
                $paymentCardToken = $client->paymentCardTokens()->expire('tokenId');
            } catch (UnprocessableEntityException $e) {
                echo $e->getMessage();
            }
      requestBody:
        $ref: '#/components/requestBodies/PaymentToken'
  /tracking/api:
    get:
      parameters:
        - $ref: '#/components/parameters/collectionLimit'
        - $ref: '#/components/parameters/collectionOffset'
        - description: The response media type
          in: header
          name: Accept
          schema:
            type: string
            enum:
              - application/json
              - text/csv
            default: application/json
      responses:
        '200':
          description: Tracking API logs was retrieved successfully
          headers:
            Pagination-Limit:
              description: Items per page limit
              schema:
                type: integer
            Pagination-Offset:
              description: Pagination offset
              schema:
                type: integer
            Pagination-Total:
              description: Total items count
              schema:
                type: integer
            Rate-Limit-Limit:
              description: The number of allowed requests in the current period
              schema:
                type: integer
            Rate-Limit-Remaining:
              description: The number of remaining requests in the current period
              schema:
                type: integer
            Rate-Limit-Reset:
              description: |
                The date in format defined by [RFC 822](https://www.w3.org/Protocols/rfc2616/rfc2616-sec3.html#sec3.3.1)
                when the current period will reset
              schema:
                type: string
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/ApiTracking'
                type: array
        '401':
          $ref: '#/components/responses/AccessForbidden'
      summary: Retrieve a list of tracking API logs
      tags:
        - Tracking
      x-code-samples:
        - lang: PHP
          source: |
            $apiTrackingLog = $client->apiTracking()->search([
                'filter' => 'status:200',
            ]);
  '/tracking/api/{id}':
    get:
      responses:
        '200':
          description: Tracking API log was retrieved successfully
          headers:
            Rate-Limit-Limit:
              description: The number of allowed requests in the current period
              schema:
                type: integer
            Rate-Limit-Remaining:
              description: The number of remaining requests in the current period
              schema:
                type: integer
            Rate-Limit-Reset:
              description: |
                The date in format defined by [RFC 822](https://www.w3.org/Protocols/rfc2616/rfc2616-sec3.html#sec3.3.1)
                when the current period will reset
              schema:
                type: string
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiTracking'
        '401':
          $ref: '#/components/responses/AccessForbidden'
        '404':
          $ref: '#/components/responses/NotFound'
      summary: Retrieve a tracking API log with specified identifier string
      tags:
        - Tracking
      x-code-samples:
        - lang: PHP
          source: |
            $apiTrackingLog = $client->apiTracking()->load('apiLogId');
    parameters:
      - $ref: '#/components/parameters/resourceId'
  /tracking/lists:
    get:
      parameters:
        - $ref: '#/components/parameters/collectionLimit'
        - $ref: '#/components/parameters/collectionOffset'
      responses:
        '200':
          description: Lists changes history was retrieved successfully
          headers:
            Pagination-Limit:
              description: Items per page limit
              schema:
                type: integer
            Pagination-Offset:
              description: Pagination offset
              schema:
                type: integer
            Pagination-Total:
              description: Total items count
              schema:
                type: integer
            Rate-Limit-Limit:
              description: The number of allowed requests in the current period
              schema:
                type: integer
            Rate-Limit-Remaining:
              description: The number of remaining requests in the current period
              schema:
                type: integer
            Rate-Limit-Reset:
              description: |
                The date in format defined by [RFC 822](https://www.w3.org/Protocols/rfc2616/rfc2616-sec3.html#sec3.3.1)
                when the current period will reset
              schema:
                type: string
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/List'
                type: array
        '401':
          $ref: '#/components/responses/AccessForbidden'
      summary: Retrieve Lists changes history
      tags:
        - Tracking
  /tracking/subscriptions:
    get:
      parameters:
        - $ref: '#/components/parameters/collectionLimit'
        - $ref: '#/components/parameters/collectionOffset'
      responses:
        '200':
          description: Tracking subscription logs was retrieved successfully
          headers:
            Pagination-Limit:
              description: Items per page limit
              schema:
                type: integer
            Pagination-Offset:
              description: Pagination offset
              schema:
                type: integer
            Pagination-Total:
              description: Total items count
              schema:
                type: integer
            Rate-Limit-Limit:
              description: The number of allowed requests in the current period
              schema:
                type: integer
            Rate-Limit-Remaining:
              description: The number of remaining requests in the current period
              schema:
                type: integer
            Rate-Limit-Reset:
              description: |
                The date in format defined by [RFC 822](https://www.w3.org/Protocols/rfc2616/rfc2616-sec3.html#sec3.3.1)
                when the current period will reset
              schema:
                type: string
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/SubscriptionTracking'
                type: array
        '401':
          $ref: '#/components/responses/AccessForbidden'
      summary: Retrieve a list of tracking subscription logs
      tags:
        - Tracking
  '/tracking/subscriptions/{id}':
    get:
      responses:
        '200':
          description: Tracking subscription log was retrieved successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SubscriptionTracking'
        '401':
          $ref: '#/components/responses/AccessForbidden'
        '404':
          $ref: '#/components/responses/NotFound'
      summary: Retrieve a tracking subscription log with specified identifier string
      tags:
        - Tracking
    parameters:
      - $ref: '#/components/parameters/resourceId'
  /tracking/website-webhooks:
    get:
      parameters:
        - $ref: '#/components/parameters/collectionLimit'
        - $ref: '#/components/parameters/collectionOffset'
      responses:
        '200':
          description: Tracking webhook notifications was retrieved successfully
          headers:
            Pagination-Limit:
              description: Items per page limit
              schema:
                type: integer
            Pagination-Offset:
              description: Pagination offset
              schema:
                type: integer
            Pagination-Total:
              description: Total items count
              schema:
                type: integer
            Rate-Limit-Limit:
              description: The number of allowed requests in the current period
              schema:
                type: integer
            Rate-Limit-Remaining:
              description: The number of remaining requests in the current period
              schema:
                type: integer
            Rate-Limit-Reset:
              description: |
                The date in format defined by [RFC 822](https://www.w3.org/Protocols/rfc2616/rfc2616-sec3.html#sec3.3.1)
                when the current period will reset
              schema:
                type: string
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/WebsiteWebhookTracking'
                type: array
        '401':
          $ref: '#/components/responses/AccessForbidden'
      summary: Retrieve a list of tracking webhook notifications
      tags:
        - Tracking
  '/tracking/website-webhooks/{id}':
    get:
      responses:
        '200':
          description: Tracking webhook notification was retrieved successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/WebsiteWebhookTracking'
        '401':
          $ref: '#/components/responses/AccessForbidden'
        '404':
          $ref: '#/components/responses/NotFound'
      summary: Retrieve a tracking webhook notification with specified identifier string
      tags:
        - Tracking
    parameters:
      - $ref: '#/components/parameters/resourceId'
  /transactions:
    get:
      description: |
        Retrieve a list of transactions
      parameters:
        - $ref: '#/components/parameters/collectionLimit'
        - $ref: '#/components/parameters/collectionOffset'
        - $ref: '#/components/parameters/collectionFilter'
        - $ref: '#/components/parameters/collectionQuery'
        - $ref: '#/components/parameters/collectionCriteria'
        - $ref: '#/components/parameters/collectionSort'
        - description: The response media type
          in: header
          name: Accept
          schema:
            type: string
            enum:
              - application/json
              - text/csv
            default: application/json
      responses:
        '200':
          description: A list of transactions was retrieved successfully
          headers:
            Pagination-Limit:
              description: Items per page limit
              schema:
                type: integer
            Pagination-Offset:
              description: Pagination offset
              schema:
                type: integer
            Pagination-Total:
              description: Total items count
              schema:
                type: integer
            Rate-Limit-Limit:
              description: The number of allowed requests in the current period
              schema:
                type: integer
            Rate-Limit-Remaining:
              description: The number of remaining requests in the current period
              schema:
                type: integer
            Rate-Limit-Reset:
              description: |
                The date in format defined by [RFC 822](https://www.w3.org/Protocols/rfc2616/rfc2616-sec3.html#sec3.3.1)
                when the current period will reset
              schema:
                type: string
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/Transaction'
                type: array
            text/csv:
              schema:
                items:
                  $ref: '#/components/schemas/Transaction'
                type: array
        '401':
          $ref: '#/components/responses/AccessForbidden'
        '422':
          $ref: '#/components/responses/InvalidDataError'
      summary: Retrieve a list of transactions
      tags:
        - Transactions
      x-code-samples:
        - lang: PHP
          source: |
            $transactions = $client->transactions()->search([
                'filter' => 'result:approved',
            ]);
  '/transactions/{id}':
    get:
      description: |
        Retrieve a Transaction with specified identifier string
      responses:
        '200':
          description: Transaction was retrieved successfully
          headers:
            Rate-Limit-Limit:
              description: The number of allowed requests in the current period
              schema:
                type: integer
            Rate-Limit-Remaining:
              description: The number of remaining requests in the current period
              schema:
                type: integer
            Rate-Limit-Reset:
              description: |
                The date in format defined by [RFC 822](https://www.w3.org/Protocols/rfc2616/rfc2616-sec3.html#sec3.3.1)
                when the current period will reset
              schema:
                type: string
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Transaction'
        '401':
          $ref: '#/components/responses/AccessForbidden'
        '404':
          $ref: '#/components/responses/NotFound'
      summary: Retrieve a Transaction
      tags:
        - Transactions
      x-code-samples:
        - lang: PHP
          source: |
            $transaction = $client->transactions()->load('transactionId');
    parameters:
      - $ref: '#/components/parameters/resourceId'
  '/transactions/{id}/cancel':
    parameters:
      - $ref: '#/components/parameters/resourceId'
    post:
      description: Cancel a scheduled transaction. Once handled a transaction cannot be canceled
      responses:
        '201':
          description: Successful cancel the payment
          headers:
            Rate-Limit-Limit:
              description: The number of allowed requests in the current period
              schema:
                type: integer
            Rate-Limit-Remaining:
              description: The number of remaining requests in the current period
              schema:
                type: integer
            Rate-Limit-Reset:
              description: |
                The date in format defined by [RFC 822](https://www.w3.org/Protocols/rfc2616/rfc2616-sec3.html#sec3.3.1)
                when the current period will reset
              schema:
                type: string
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Transaction'
        '401':
          $ref: '#/components/responses/AccessForbidden'
        '404':
          $ref: '#/components/responses/NotFound'
      summary: Cancel a pending or suspended transaction
      tags:
        - Transactions
      x-code-samples:
        - lang: PHP
          source: |
            try {
                $payment = $client->transactions()->cancel('transactionId');
            } catch (UnprocessableEntityException $e) {
                echo $e->getMessage();
            }
  '/transactions/{id}/gateway-logs':
    get:
      description: Retrieve Gateway communication Logs for Transaction with specified identifier string
      responses:
        '200':
          description: Logs were retrieved successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TransactionGatewayLog'
        '401':
          $ref: '#/components/responses/AccessForbidden'
        '404':
          $ref: '#/components/responses/NotFound'
      summary: Retrieve a Transaction Gateway Logs
      tags:
        - Transactions
    parameters:
      - $ref: '#/components/parameters/resourceId'
  '/transactions/{id}/lead-source':
    delete:
      description: |
        Delete a Lead Source that belongs to a certain transaction
      responses:
        '204':
          description: Lead Source was deleted
          headers:
            Rate-Limit-Limit:
              description: The number of allowed requests in the current period
              schema:
                type: integer
            Rate-Limit-Remaining:
              description: The number of remaining requests in the current period
              schema:
                type: integer
            Rate-Limit-Reset:
              description: |
                The date in format defined by [RFC 822](https://www.w3.org/Protocols/rfc2616/rfc2616-sec3.html#sec3.3.1)
                when the current period will reset
              schema:
                type: string
        '401':
          $ref: '#/components/responses/AccessForbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '409':
          description: Lead Source cannot be deleted
      summary: Delete a Lead Source for a transaction
      tags:
        - Transactions
      x-code-samples:
        - lang: PHP
          source: |
            $payment = $client->transactions()->deleteLeadSource('transactionId');
    get:
      description: |
        Retrieve a Lead Source of given transaction
      responses:
        '200':
          description: Lead Source was retrieved successfully
          headers:
            Rate-Limit-Limit:
              description: The number of allowed requests in the current period
              schema:
                type: integer
            Rate-Limit-Remaining:
              description: The number of remaining requests in the current period
              schema:
                type: integer
            Rate-Limit-Reset:
              description: |
                The date in format defined by [RFC 822](https://www.w3.org/Protocols/rfc2616/rfc2616-sec3.html#sec3.3.1)
                when the current period will reset
              schema:
                type: string
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LeadSource'
        '401':
          $ref: '#/components/responses/AccessForbidden'
        '404':
          $ref: '#/components/responses/NotFound'
      summary: Retrieve a transaction's Lead Source
      tags:
        - Transactions
      x-code-samples:
        - lang: PHP
          source: |
            $transaction = $client->transactions()->load('transactionId');
            $leadSource = $transaction->getLeadSource();
    parameters:
      - $ref: '#/components/parameters/resourceId'
    put:
      description: |
        Create a Lead Source for a transaction
      responses:
        '200':
          description: Lead Source was updated
          headers:
            Rate-Limit-Limit:
              description: The number of allowed requests in the current period
              schema:
                type: integer
            Rate-Limit-Remaining:
              description: The number of remaining requests in the current period
              schema:
                type: integer
            Rate-Limit-Reset:
              description: |
                The date in format defined by [RFC 822](https://www.w3.org/Protocols/rfc2616/rfc2616-sec3.html#sec3.3.1)
                when the current period will reset
              schema:
                type: string
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LeadSource'
        '201':
          description: Lead Source was created
          headers:
            Rate-Limit-Limit:
              description: The number of allowed requests in the current period
              schema:
                type: integer
            Rate-Limit-Remaining:
              description: The number of remaining requests in the current period
              schema:
                type: integer
            Rate-Limit-Reset:
              description: |
                The date in format defined by [RFC 822](https://www.w3.org/Protocols/rfc2616/rfc2616-sec3.html#sec3.3.1)
                when the current period will reset
              schema:
                type: string
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LeadSource'
        '401':
          $ref: '#/components/responses/AccessForbidden'
        '422':
          description: Invalid data was sent
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidError'
      summary: Create a Lead Source for a transaction
      tags:
        - Transactions
      x-code-samples:
        - lang: PHP
          source: |
            $leadSourceForm = new Rebilly\Entities\LeadSource();
            $leadSourceForm->setSource('TestSource');
            $leadSourceForm->setCampaign('TestCampaign');

            try {
                $transaction = $client->transactions()->updateLeadSource('transactionId', $leadSourceForm);
            } catch (UnprocessableEntityException $e) {
                echo $e->getMessage();
            }
      requestBody:
        $ref: '#/components/requestBodies/LeadSource'
  '/transactions/{id}/refund':
    parameters:
      - $ref: '#/components/parameters/resourceId'
    post:
      description: |
        Refund a Transaction with specified identifier string.
        Note that the refund will be in the same currency as the original transaction.
      responses:
        '201':
          description: Transaction was refunded successfully
          headers:
            Rate-Limit-Limit:
              description: The number of allowed requests in the current period
              schema:
                type: integer
            Rate-Limit-Remaining:
              description: The number of remaining requests in the current period
              schema:
                type: integer
            Rate-Limit-Reset:
              description: |
                The date in format defined by [RFC 822](https://www.w3.org/Protocols/rfc2616/rfc2616-sec3.html#sec3.3.1)
                when the current period will reset
              schema:
                type: string
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Transaction'
        '401':
          $ref: '#/components/responses/AccessForbidden'
        '404':
          $ref: '#/components/responses/NotFound'
      summary: Refund a Transaction
      tags:
        - Transactions
      x-code-samples:
        - lang: PHP
          source: |
            $transaction = $client->transactions()->refund('transactionId', 1.99);
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TransactionRefund'
        description: Transaction resource
        required: true
  /users:
    get:
      description: |
        Retrieve a list of users
      parameters:
        - $ref: '#/components/parameters/collectionLimit'
        - $ref: '#/components/parameters/collectionOffset'
      responses:
        '200':
          description: A list of users was retrieved successfully
          headers:
            Pagination-Limit:
              description: Items per page limit
              schema:
                type: integer
            Pagination-Offset:
              description: Pagination offset
              schema:
                type: integer
            Pagination-Total:
              description: Total items count
              schema:
                type: integer
            Rate-Limit-Limit:
              description: The number of allowed requests in the current period
              schema:
                type: integer
            Rate-Limit-Remaining:
              description: The number of remaining requests in the current period
              schema:
                type: integer
            Rate-Limit-Reset:
              description: |
                The date in format defined by [RFC 822](https://www.w3.org/Protocols/rfc2616/rfc2616-sec3.html#sec3.3.1)
                when the current period will reset
              schema:
                type: string
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/User'
                type: array
        '401':
          $ref: '#/components/responses/AccessForbidden'
      summary: Retrieve a list of users
      tags:
        - Users
      x-code-samples:
        - lang: PHP
          source: |
            $users = $client->users()->search([
                'filter' => 'firstName:John',
            ]);
    post:
      description: |
        Create an user
      responses:
        '201':
          description: User was created
          headers:
            Rate-Limit-Limit:
              description: The number of allowed requests in the current period
              schema:
                type: integer
            Rate-Limit-Remaining:
              description: The number of remaining requests in the current period
              schema:
                type: integer
            Rate-Limit-Reset:
              description: |
                The date in format defined by [RFC 822](https://www.w3.org/Protocols/rfc2616/rfc2616-sec3.html#sec3.3.1)
                when the current period will reset
              schema:
                type: string
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '401':
          $ref: '#/components/responses/AccessForbidden'
        '422':
          description: Invalid data was sent
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidError'
      summary: Create an user
      tags:
        - Users
      x-code-samples:
        - lang: PHP
          source: |
            $userForm = new Rebilly\Entities\User();
            $userForm->setFirstName('John');
            $userForm->setLastName('Doe');
            $userForm->setEmail('johndoe@test.com');

            try {
                $user = $client->users()->create($userForm);
            } catch (UnprocessableEntityException $e) {
                echo $e->getMessage();
            }
      requestBody:
        $ref: '#/components/requestBodies/User'
  '/users/reset-password/{token}':
    parameters:
      - description: The token string
        in: path
        name: token
        required: true
        schema:
          type: string
    post:
      description: |
        Reset user password
      responses:
        '201':
          description: Password was reseted successfully
          headers:
            Rate-Limit-Limit:
              description: The number of allowed requests in the current period
              schema:
                type: integer
            Rate-Limit-Remaining:
              description: The number of remaining requests in the current period
              schema:
                type: integer
            Rate-Limit-Reset:
              description: |
                The date in format defined by [RFC 822](https://www.w3.org/Protocols/rfc2616/rfc2616-sec3.html#sec3.3.1)
                when the current period will reset
              schema:
                type: string
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '422':
          description: Invalid data was sent
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidError'
      summary: Reset user password
      tags:
        - Users
      x-code-samples:
        - lang: PHP
          source: |
            $resetPasswordForm = new Rebilly\Entities\ResetPassword();
            $resetPasswordForm->setNewPassword('1234');

            try {
                $user = $client->users()->resetPassword('userId', 'token', $resetPasswordForm);
            } catch (UnprocessableEntityException $e) {
                echo $e->getMessage();
            }
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ResetPassword'
        description: ResetPassword resource
        required: true
  '/users/{id}':
    delete:
      description: |
        Delete user with predefined identifier string
      responses:
        '204':
          description: User was deleted
          headers:
            Rate-Limit-Limit:
              description: The number of allowed requests in the current period
              schema:
                type: integer
            Rate-Limit-Remaining:
              description: The number of remaining requests in the current period
              schema:
                type: integer
            Rate-Limit-Reset:
              description: |
                The date in format defined by [RFC 822](https://www.w3.org/Protocols/rfc2616/rfc2616-sec3.html#sec3.3.1)
                when the current period will reset
              schema:
                type: string
        '401':
          $ref: '#/components/responses/AccessForbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '409':
          $ref: '#/components/responses/Conflict'
      summary: Delete user
      tags:
        - Users
      x-code-samples:
        - lang: PHP
          source: |
            try {
                $client->users()->delete('userId');
            } catch (ServerException $e) {
                echo $e->getMessage();
            }
    get:
      description: |
        Retrieve user with specified identifier string
      responses:
        '200':
          description: User was retrieved successfully
          headers:
            Rate-Limit-Limit:
              description: The number of allowed requests in the current period
              schema:
                type: integer
            Rate-Limit-Remaining:
              description: The number of remaining requests in the current period
              schema:
                type: integer
            Rate-Limit-Reset:
              description: |
                The date in format defined by [RFC 822](https://www.w3.org/Protocols/rfc2616/rfc2616-sec3.html#sec3.3.1)
                when the current period will reset
              schema:
                type: string
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '401':
          $ref: '#/components/responses/AccessForbidden'
        '404':
          $ref: '#/components/responses/NotFound'
      summary: Retrieve user
      tags:
        - Users
      x-code-samples:
        - lang: PHP
          source: |
            $user = $client->users()->load('userId');
    parameters:
      - $ref: '#/components/parameters/resourceId'
    put:
      description: |
        Create or update user with predefined identifier string
      responses:
        '200':
          description: User was updated
          headers:
            Rate-Limit-Limit:
              description: The number of allowed requests in the current period
              schema:
                type: integer
            Rate-Limit-Remaining:
              description: The number of remaining requests in the current period
              schema:
                type: integer
            Rate-Limit-Reset:
              description: |
                The date in format defined by [RFC 822](https://www.w3.org/Protocols/rfc2616/rfc2616-sec3.html#sec3.3.1)
                when the current period will reset
              schema:
                type: string
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '201':
          description: User was created
          headers:
            Rate-Limit-Limit:
              description: The number of allowed requests in the current period
              schema:
                type: integer
            Rate-Limit-Remaining:
              description: The number of remaining requests in the current period
              schema:
                type: integer
            Rate-Limit-Reset:
              description: |
                The date in format defined by [RFC 822](https://www.w3.org/Protocols/rfc2616/rfc2616-sec3.html#sec3.3.1)
                when the current period will reset
              schema:
                type: string
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '401':
          $ref: '#/components/responses/AccessForbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '422':
          $ref: '#/components/responses/InvalidDataError'
      summary: Create or update user with predefined ID
      tags:
        - Users
      x-code-samples:
        - lang: PHP
          source: |
            $userForm = new Rebilly\Entities\User();
            $userForm->setFirstName('John');
            $userForm->setLastName('Doe');
            $userForm->setEmail('johndoe@test.com');

            try {
                $user = $client->users()->update('userId', $userForm);
            } catch (UnprocessableEntityException $e) {
                echo $e->getMessage();
            }
      requestBody:
        $ref: '#/components/requestBodies/User'
  '/users/{id}/password':
    parameters:
      - $ref: '#/components/parameters/resourceId'
    post:
      description: |
        Updates user's password with the specified newPassword. And checks if currentPassword matches the actual one.
      responses:
        '201':
          description: Password updated successfully
          headers:
            Rate-Limit-Limit:
              description: The number of allowed requests in the current period
              schema:
                type: integer
            Rate-Limit-Remaining:
              description: The number of remaining requests in the current period
              schema:
                type: integer
            Rate-Limit-Reset:
              description: |
                The date in format defined by [RFC 822](https://www.w3.org/Protocols/rfc2616/rfc2616-sec3.html#sec3.3.1)
                when the current period will reset
              schema:
                type: string
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '401':
          $ref: '#/components/responses/AccessForbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '422':
          $ref: '#/components/responses/InvalidDataError'
      summary: Updates user's password with the specified newPassword
      tags:
        - Users
      x-code-samples:
        - lang: PHP
          source: |
            $updatePasswordForm = new Rebilly\Entities\UpdatePassword();
            $updatePasswordForm->setCurrentPassword('1234');
            $updatePasswordForm->setNewPassword('5678');

            try {
                $user = $client->users()->updatePassword('userId', $updatePasswordForm);
            } catch (UnprocessableEntityException $e) {
                echo $e->getMessage();
            }
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdatePassword'
        description: currentPassword and newPassword
        required: true
  '/users/{id}/totp-reset':
    parameters:
      - $ref: '#/components/parameters/resourceId'
    post:
      description: |
        Reset (renew) totpSecret
      responses:
        '201':
          description: totpSecret reset (renewed) successfully
          headers:
            Rate-Limit-Limit:
              description: The number of allowed requests in the current period
              schema:
                type: integer
            Rate-Limit-Remaining:
              description: The number of remaining requests in the current period
              schema:
                type: integer
            Rate-Limit-Reset:
              description: |
                The date in format defined by [RFC 822](https://www.w3.org/Protocols/rfc2616/rfc2616-sec3.html#sec3.3.1)
                when the current period will reset
              schema:
                type: string
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '404':
          $ref: '#/components/responses/NotFound'
      summary: Reset (renew) totpSecret
      tags:
        - Users
      x-code-samples:
        - lang: PHP
          source: |
            $user = $client->users()->resetTotp('userId');
  /webhooks:
    get:
      description: |
        Retrieve a list of webhooks
      parameters:
        - $ref: '#/components/parameters/collectionLimit'
        - $ref: '#/components/parameters/collectionOffset'
      responses:
        '200':
          description: A list of Webhooks was retrieved successfully
          headers:
            Pagination-Limit:
              description: Items per page limit
              schema:
                type: integer
            Pagination-Offset:
              description: Pagination offset
              schema:
                type: integer
            Pagination-Total:
              description: Total items count
              schema:
                type: integer
            Rate-Limit-Limit:
              description: The number of allowed requests in the current period
              schema:
                type: integer
            Rate-Limit-Remaining:
              description: The number of remaining requests in the current period
              schema:
                type: integer
            Rate-Limit-Reset:
              description: |
                The date in format defined by [RFC 822](https://www.w3.org/Protocols/rfc2616/rfc2616-sec3.html#sec3.3.1)
                when the current period will reset
              schema:
                type: string
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/GlobalWebhook'
                type: array
        '401':
          $ref: '#/components/responses/AccessForbidden'
      summary: Retrieve a list of webhooks
      tags:
        - Webhooks
    post:
      description: |
        Create a webhook
      responses:
        '201':
          description: Webhook was created
          headers:
            Rate-Limit-Limit:
              description: The number of allowed requests in the current period
              schema:
                type: integer
            Rate-Limit-Remaining:
              description: The number of remaining requests in the current period
              schema:
                type: integer
            Rate-Limit-Reset:
              description: |
                The date in format defined by [RFC 822](https://www.w3.org/Protocols/rfc2616/rfc2616-sec3.html#sec3.3.1)
                when the current period will reset
              schema:
                type: string
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GlobalWebhook'
        '401':
          $ref: '#/components/responses/AccessForbidden'
        '422':
          description: Invalid data was sent
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidError'
      summary: Create a webhook
      tags:
        - Webhooks
      requestBody:
        $ref: '#/components/requestBodies/GlobalWebhook'
  '/webhooks/{id}':
    get:
      description: |
        Retrieve a webhook with specified identifier string
      responses:
        '200':
          description: Webhook was retrieved successfully
          headers:
            Rate-Limit-Limit:
              description: The number of allowed requests in the current period
              schema:
                type: integer
            Rate-Limit-Remaining:
              description: The number of remaining requests in the current period
              schema:
                type: integer
            Rate-Limit-Reset:
              description: |
                The date in format defined by [RFC 822](https://www.w3.org/Protocols/rfc2616/rfc2616-sec3.html#sec3.3.1)
                when the current period will reset
              schema:
                type: string
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GlobalWebhook'
        '401':
          $ref: '#/components/responses/AccessForbidden'
        '404':
          $ref: '#/components/responses/NotFound'
      summary: Retrieve a webhook
      tags:
        - Webhooks
    parameters:
      - $ref: '#/components/parameters/resourceId'
    put:
      description: |
        Create or update a webhook with predefined identifier string
      responses:
        '200':
          description: Webhook was updated
          headers:
            Rate-Limit-Limit:
              description: The number of allowed requests in the current period
              schema:
                type: integer
            Rate-Limit-Remaining:
              description: The number of remaining requests in the current period
              schema:
                type: integer
            Rate-Limit-Reset:
              description: |
                The date in format defined by [RFC 822](https://www.w3.org/Protocols/rfc2616/rfc2616-sec3.html#sec3.3.1)
                when the current period will reset
              schema:
                type: string
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GlobalWebhook'
        '201':
          description: Webhook was created
          headers:
            Rate-Limit-Limit:
              description: The number of allowed requests in the current period
              schema:
                type: integer
            Rate-Limit-Remaining:
              description: The number of remaining requests in the current period
              schema:
                type: integer
            Rate-Limit-Reset:
              description: |
                The date in format defined by [RFC 822](https://www.w3.org/Protocols/rfc2616/rfc2616-sec3.html#sec3.3.1)
                when the current period will reset
              schema:
                type: string
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GlobalWebhook'
        '401':
          $ref: '#/components/responses/AccessForbidden'
        '422':
          description: Invalid data was sent
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidError'
      summary: Create or update a webhook with predefined ID
      tags:
        - Webhooks
      requestBody:
        $ref: '#/components/requestBodies/GlobalWebhook'
  /websites:
    get:
      description: |
        Retrieve a list of websites
      parameters:
        - $ref: '#/components/parameters/collectionLimit'
        - $ref: '#/components/parameters/collectionOffset'
        - description: The response media type
          in: header
          name: Accept
          schema:
            type: string
            enum:
              - application/json
              - text/csv
            default: application/json
      responses:
        '200':
          description: A list of Websites was retrieved successfully
          headers:
            Pagination-Limit:
              description: Items per page limit
              schema:
                type: integer
            Pagination-Offset:
              description: Pagination offset
              schema:
                type: integer
            Pagination-Total:
              description: Total items count
              schema:
                type: integer
            Rate-Limit-Limit:
              description: The number of allowed requests in the current period
              schema:
                type: integer
            Rate-Limit-Remaining:
              description: The number of remaining requests in the current period
              schema:
                type: integer
            Rate-Limit-Reset:
              description: |
                The date in format defined by [RFC 822](https://www.w3.org/Protocols/rfc2616/rfc2616-sec3.html#sec3.3.1)
                when the current period will reset
              schema:
                type: string
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/Website'
                type: array
            text/csv:
              schema:
                items:
                  $ref: '#/components/schemas/Website'
                type: array
        '401':
          $ref: '#/components/responses/AccessForbidden'
      summary: Retrieve a list of websites
      tags:
        - Websites
      x-code-samples:
        - lang: PHP
          source: |
            $websites = $client->websites()->search([
                'filter' => 'name:TestWebsite',
            ]);
    post:
      description: |
        Create a website
      responses:
        '201':
          description: Website was created
          headers:
            Rate-Limit-Limit:
              description: The number of allowed requests in the current period
              schema:
                type: integer
            Rate-Limit-Remaining:
              description: The number of remaining requests in the current period
              schema:
                type: integer
            Rate-Limit-Reset:
              description: |
                The date in format defined by [RFC 822](https://www.w3.org/Protocols/rfc2616/rfc2616-sec3.html#sec3.3.1)
                when the current period will reset
              schema:
                type: string
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Website'
        '401':
          $ref: '#/components/responses/AccessForbidden'
        '422':
          description: Invalid data was sent
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidError'
      summary: Create a website
      tags:
        - Websites
      x-code-samples:
        - lang: PHP
          source: |
            $websiteForm = new Rebilly\Entities\Website();
            $websiteForm->setName('TestWebsite');
            $websiteForm->setUrl('http://testwebsite.com');
            $websiteForm->setServicePhone('+0123456789');
            $websiteForm->setServiceEmail('test@testwebsite.com');

            try {
                $website = $client->websites()->create($websiteForm);
            } catch (UnprocessableEntityException $e) {
                echo $e->getMessage();
            }
      requestBody:
        $ref: '#/components/requestBodies/Website'
  '/websites/{id}':
    delete:
      description: |
        Delete a website with predefined identifier string
      responses:
        '204':
          description: Website was deleted
          headers:
            Rate-Limit-Limit:
              description: The number of allowed requests in the current period
              schema:
                type: integer
            Rate-Limit-Remaining:
              description: The number of remaining requests in the current period
              schema:
                type: integer
            Rate-Limit-Reset:
              description: |
                The date in format defined by [RFC 822](https://www.w3.org/Protocols/rfc2616/rfc2616-sec3.html#sec3.3.1)
                when the current period will reset
              schema:
                type: string
        '401':
          $ref: '#/components/responses/AccessForbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '409':
          description: Website has related resources and cannot be deleted
      summary: Delete a website
      tags:
        - Websites
      x-code-samples:
        - lang: PHP
          source: |
            try {
                $client->websites()->delete('websiteId');
            } catch (ServerException $e) {
                echo $e->getMessage();
            }
    get:
      description: |
        Retrieve a website with specified identifier string
      responses:
        '200':
          description: Website was retrieved successfully
          headers:
            Rate-Limit-Limit:
              description: The number of allowed requests in the current period
              schema:
                type: integer
            Rate-Limit-Remaining:
              description: The number of remaining requests in the current period
              schema:
                type: integer
            Rate-Limit-Reset:
              description: |
                The date in format defined by [RFC 822](https://www.w3.org/Protocols/rfc2616/rfc2616-sec3.html#sec3.3.1)
                when the current period will reset
              schema:
                type: string
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Website'
        '401':
          $ref: '#/components/responses/AccessForbidden'
        '404':
          $ref: '#/components/responses/NotFound'
      summary: Retrieve a website
      tags:
        - Websites
      x-code-samples:
        - lang: PHP
          source: |
            $website = $client->websites()->load('websiteId');
    parameters:
      - $ref: '#/components/parameters/resourceId'
    put:
      description: |
        Create or update a website with predefined identifier string
      responses:
        '200':
          description: Website was updated
          headers:
            Rate-Limit-Limit:
              description: The number of allowed requests in the current period
              schema:
                type: integer
            Rate-Limit-Remaining:
              description: The number of remaining requests in the current period
              schema:
                type: integer
            Rate-Limit-Reset:
              description: |
                The date in format defined by [RFC 822](https://www.w3.org/Protocols/rfc2616/rfc2616-sec3.html#sec3.3.1)
                when the current period will reset
              schema:
                type: string
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Website'
        '201':
          description: Website was created
          headers:
            Rate-Limit-Limit:
              description: The number of allowed requests in the current period
              schema:
                type: integer
            Rate-Limit-Remaining:
              description: The number of remaining requests in the current period
              schema:
                type: integer
            Rate-Limit-Reset:
              description: |
                The date in format defined by [RFC 822](https://www.w3.org/Protocols/rfc2616/rfc2616-sec3.html#sec3.3.1)
                when the current period will reset
              schema:
                type: string
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Website'
        '401':
          $ref: '#/components/responses/AccessForbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '422':
          description: Invalid data was sent
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidError'
      summary: Create or update a website with predefined ID
      tags:
        - Websites
      x-code-samples:
        - lang: PHP
          source: |
            $websiteForm = new Rebilly\Entities\Website();
            $websiteForm->setName('TestWebsite');
            $websiteForm->setUrl('http://testwebsite.com');
            $websiteForm->setServicePhone('+0123456789');
            $websiteForm->setServiceEmail('test@testwebsite.com');

            try {
                $website = $client->websites()->update('websiteId', $websiteForm);
            } catch (UnprocessableEntityException $e) {
                echo $e->getMessage();
            }
      requestBody:
        $ref: '#/components/requestBodies/Website'
  '/websites/{id}/webhook':
    delete:
      description: |
        Delete a webhook that belongs to a website with predefined ID
      responses:
        '204':
          description: Webhook was deleted
          headers:
            Rate-Limit-Limit:
              description: The number of allowed requests in the current period
              schema:
                type: integer
            Rate-Limit-Remaining:
              description: The number of remaining requests in the current period
              schema:
                type: integer
            Rate-Limit-Reset:
              description: |
                The date in format defined by [RFC 822](https://www.w3.org/Protocols/rfc2616/rfc2616-sec3.html#sec3.3.1)
                when the current period will reset
              schema:
                type: string
        '401':
          $ref: '#/components/responses/AccessForbidden'
        '404':
          $ref: '#/components/responses/NotFound'
      summary: Delete a webhook
      tags:
        - Websites
      x-code-samples:
        - lang: PHP
          source: |
            $client->websiteWebhook()->delete('websiteId');
    get:
      description: |
        Retrieve a webhook for website with specified identifier string
      responses:
        '200':
          description: Webhook was retrieved successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/WebsiteWebhook'
        '401':
          $ref: '#/components/responses/AccessForbidden'
        '404':
          $ref: '#/components/responses/NotFound'
      summary: Retrieve a webhook for website
      tags:
        - Websites
      x-code-samples:
        - lang: PHP
          source: |
            $websiteWebhook = $client->websiteWebhook()->load('websiteId');
    parameters:
      - $ref: '#/components/parameters/resourceId'
    put:
      description: |
        Create or update a webhook for website with predefined identifier string
      responses:
        '200':
          description: Webhook was updated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/WebsiteWebhook'
        '401':
          $ref: '#/components/responses/AccessForbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '422':
          description: Invalid data was sent
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidError'
      summary: Create or update a webhook for website with predefined ID
      tags:
        - Websites
      x-code-samples:
        - lang: PHP
          source: |
            $websiteWebhookForm = new Rebilly\Entities\WebsiteWebhook();
            $websiteWebhookForm->setWebHookUrl('http://testwebsite.com/webhook');
            $websiteWebhookForm->setWebHookUsername('test');
            $websiteWebhookForm->setWebHookPassword('1234');

            try {
                $website = $client->websiteWebhook()->update('websiteId', $websiteWebhookForm);
            } catch (UnprocessableEntityException $e) {
                echo $e->getMessage();
            }
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/WebsiteWebhook'
        description: Webhook resource
        required: true
components:
  schemas:
    A1Gateway:
      allOf:
        - $ref: '#/components/schemas/GatewayAccount'
        - properties:
            gatewayConfig:
              description: A1Gateway credentials object
              properties:
                accountId:
                  description: A1Gateway account ID
                  type: string
                password:
                  description: A1Gateway password
                  format: password
                  type: string
              required:
                - accountId
                - password
              type: object
          required:
            - gatewayConfig
          type: object
      description: A1Gateway config
    AcquirerName:
      description: Acquirer name
      enum:
        - Alipay
        - AIB
        - B+S
        - Bank of America
        - Bank of Moscow
        - Bank of Rebilly
        - Bank One
        - Beanstream
        - BMO Harris Bank
        - Borgun
        - BraintreePayments
        - Catalunya Caixa
        - Chase
        - ChinaUnionPay
        - CIM
        - Credorax
        - Elavon
        - EMS
        - Fifth Third Bank
        - First Data Buypass
        - First Data Nashville
        - First Data North
        - First Data Omaha
        - Flexepin
        - Forte
        - FundSend
        - GlobalCollect
        - Global East
        - Heartland
        - HSBC
        - iCheque
        - Ilixium
        - Masapay
        - Merrick
        - Mission Valley Bank
        - Moneris
        - NATWEST
        - NMI
        - OchaPay
        - Other
        - Panda Bank
        - PayPal
        - Payr
        - Payvision
        - Peoples Trust Company
        - Privatbank
        - RBC
        - RBS WorldPay
        - RealTime
        - RebillyProcessor
        - SMSVoucher
        - State Bank of Mauritius
        - Stripe
        - TBI
        - TrustPay
        - TSYS
        - UPayCard
        - Vantiv
        - VoicePay
        - WeChat Pay
        - Wells Fargo
        - Wing Hang Bank
        - Wirecard
        - WorldPay
      type: string
    AmexVPC:
      allOf:
        - $ref: '#/components/schemas/GatewayAccount'
        - properties:
            gatewayConfig:
              description: AmexVPC credentials object
              properties:
                accessCode:
                  description: Access Code
                  format: password
                  type: string
                merchantId:
                  description: Merchant ID
                  type: string
                password:
                  description: 'Password (used for refund, void and capture)'
                  format: password
                  type: string
                url:
                  description: Virtual Payment Client URL
                  type: string
                user:
                  description: 'User (used for refund, void and capture)'
                  type: string
              required:
                - url
                - merchantId
                - accessCode
                - user
                - password
              type: object
          required:
            - gatewayConfig
          type: object
      description: AmexVPC config
    AmountAdjustment:
      discriminator:
        propertyName: method
      properties:
        method:
          enum:
            - none
            - partial
            - discount
          type: string
      required:
        - method
      type: object
    ApiKey:
      description: API secret Key.
      properties:
        _links:
          description: The links related to resource
          items:
            $ref: '#/components/schemas/SelfLink'
          maxItems: 1
          minItems: 1
          readOnly: true
          type: array
        apiUser:
          description: API user name
          readOnly: true
          type: string
        createdTime:
          allOf:
            - $ref: '#/components/schemas/ServerTimestamp'
          description: The API key created time
        datetimeFormat:
          default: iso8601
          description: Date time format
          enum:
            - mysql
            - iso8601
          type: string
        description:
          description: API key description
          type: string
        id:
          allOf:
            - $ref: '#/components/schemas/ResourceId'
          readOnly: true
        secretKey:
          description: API secret key's value
          readOnly: true
          type: string
      type: object
    ApiTracking:
      description: Tracking API Requests.
      properties:
        _links:
          description: The links related to resource
          items:
            $ref: '#/components/schemas/SelfLink'
          maxItems: 1
          minItems: 1
          readOnly: true
          type: array
        createdTime:
          allOf:
            - $ref: '#/components/schemas/ServerTimestamp'
          description: The log created time
        duration:
          description: Request duration in milliseconds
          type: integer
        id:
          allOf:
            - $ref: '#/components/schemas/ResourceId'
        method:
          description: HTTP method
          enum:
            - HEAD
            - GET
            - POST
            - PUT
            - DELETE
            - PATCH
          type: string
        request:
          description: Request JSON-string
          type: string
        requestHeaders:
          description: Request headers array
          items:
            type: string
          type: array
        response:
          description: Response JSON-string
          type: string
        responseHeaders:
          description: Response headers array
          items:
            type: string
          type: array
        status:
          description: HTTP response code
          type: integer
        url:
          description: API request address
          type: string
        user:
          description: The user who has made a request
          properties:
            apiKeyId:
              allOf:
                - $ref: '#/components/schemas/ResourceId'
            email:
              description: The user email
              format: email
              type: string
            fingerprint:
              description: The user device fingerprint hash
              type: string
            firstName:
              description: The user first name
              type: string
            ipAddress:
              description: Client IP address
              format: ipv4
              type: string
            isSupport:
              description: If user from support
              type: boolean
            lastName:
              description: The user last name
              type: string
            userAgent:
              description: The software that is acting on behalf of a user
              type: string
            userId:
              allOf:
                - $ref: '#/components/schemas/ResourceId'
          readOnly: true
          type: object
      readOnly: true
      type: object
    ApprovalUrlLink:
      allOf:
        - $ref: '#/components/schemas/NewLink'
      properties:
        rel:
          description: The link type
          enum:
            - approvalUrl
          type: string
      required:
        - rel
      type: object
    Attachment:
      properties:
        _links:
          description: The links related to resource
          items:
            anyOf:
              - $ref: '#/components/schemas/SelfLink'
              - $ref: '#/components/schemas/FileLink'
              - $ref: '#/components/schemas/AttachmentResourceLink'
          maxItems: 3
          minItems: 3
          readOnly: true
          type: array
        createdTime:
          allOf:
            - $ref: '#/components/schemas/ServerTimestamp'
          description: Creation date/time
        description:
          description: The Attachment description
          type: string
        fileId:
          description: Linked File object id
          type: string
        id:
          allOf:
            - $ref: '#/components/schemas/ResourceId'
          readOnly: true
        name:
          description: The Original Attachment name
          type: string
        relatedId:
          description: Linked object Id
          type: string
        relatedType:
          description: Linked object type
          enum:
            - customer
            - dispute
            - invoice
            - note
            - payment
            - plan
            - product
            - subscription
            - transaction
          type: string
        updatedTime:
          allOf:
            - $ref: '#/components/schemas/ServerTimestamp'
          description: Latest update date/time
      required:
        - fileId
        - relatedId
        - relatedType
      type: object
    AttachmentResourceLink:
      allOf:
        - $ref: '#/components/schemas/NewLink'
      properties:
        rel:
          description: The link type
          enum:
            - customer
            - dispute
            - invoice
            - note
            - payment
            - plan
            - product
            - subscription
            - transaction
          type: string
      required:
        - rel
      type: object
    AuthenticationOptions:
      properties:
        authTokenTtl:
          description: The default lifetime of the auth-token in seconds
          type: integer
        credentialTtl:
          description: The default lifetime of the credential in seconds
          type: integer
        passwordPattern:
          description: Allowed password pattern
          type: string
        resetTokenTtl:
          description: The default lifetime of the reset-token in seconds
          type: integer
      type: object
    AuthenticationToken:
      properties:
        _links:
          description: The links related to resource
          items:
            $ref: '#/components/schemas/SelfLink'
          maxItems: 1
          minItems: 1
          readOnly: true
          type: array
        credentialId:
          allOf:
            - $ref: '#/components/schemas/ResourceId'
          description: The credential's ID
          readOnly: true
        customerId:
          allOf:
            - $ref: '#/components/schemas/ResourceId'
          description: The token's customer ID
          readOnly: true
        expiredTime:
          description: Token's expired time
          format: date-time
          type: string
        password:
          description: The token's password (write-only)
          format: password
          type: string
        token:
          description: The token identifier string
          readOnly: true
          type: string
        username:
          description: The token's username
          type: string
      required:
        - username
        - password
      type: object
    AuthorizeNet:
      allOf:
        - $ref: '#/components/schemas/GatewayAccount'
        - properties:
            gatewayConfig:
              properties:
                apiLoginId:
                  description: AuthorizeNet Gateway api login ID
                  type: string
                transactionKey:
                  description: AuthorizeNet Gateway Transaction Key
                  format: password
                  type: string
              required:
                - apiLoginId
                - transactionKey
              type: object
          required:
            - gatewayConfig
          type: object
      description: AuthorizeNet Gateway config
    BankAccount:
      properties:
        _links:
          description: The links related to resource
          items:
            anyOf:
              - $ref: '#/components/schemas/SelfLink'
              - $ref: '#/components/schemas/CustomerLink'
              - $ref: '#/components/schemas/ContactLink'
          maxItems: 3
          minItems: 1
          readOnly: true
          type: array
        accountNumber:
          description: Bank's Account Number. Required if bank account is not created from Token. This field is write-only
          type: string
        accountType:
          description: Banks's Account type. Required if bank account is not created from Token
          type: string
        address:
          allOf:
            - $ref: '#/components/schemas/ContactObject'
          description: The Address. Required if bank account is not created from Token
        bankName:
          description: Bank's name.
          type: string
        createdTime:
          allOf:
            - $ref: '#/components/schemas/ServerTimestamp'
          description: Bank Account created time
        customFields:
          $ref: '#/components/schemas/ResourceCustomFields'
        customerId:
          allOf:
            - $ref: '#/components/schemas/ResourceId'
          description: The Customer's ID.
        id:
          allOf:
            - $ref: '#/components/schemas/ResourceId'
          description: The bank account identifier string
          readOnly: true
        routingNumber:
          description: Bank's Routing Number. Required if bank account is not created from Token. This field is write-only
          type: string
        status:
          description: Bank Account status
          enum:
            - active
            - deactivated
          type: string
        token:
          description: Bank Account Token. Use without any other fields
          type: string
        updatedTime:
          allOf:
            - $ref: '#/components/schemas/ServerTimestamp'
          description: Bank Account updated time
      type: object
    BankAccountLink:
      allOf:
        - $ref: '#/components/schemas/NewLink'
      properties:
        rel:
          description: The link type
          enum:
            - bankAccount
          type: string
      required:
        - rel
      type: object
    Beanstream:
      allOf:
        - $ref: '#/components/schemas/GatewayAccount'
        - properties:
            gatewayConfig:
              properties:
                apiPasscode:
                  description: Beanstream Gateway API Passcode
                  format: password
                  type: string
                merchantId:
                  description: Beanstream Gateway merchant ID
                  type: string
              required:
                - merchantId
                - apiPasscode
              type: object
          required:
            - gatewayConfig
          type: object
      description: Beanstream Gateway config
    BillingContactLink:
      allOf:
        - $ref: '#/components/schemas/NewLink'
      properties:
        rel:
          description: The link type
          enum:
            - billingContact
          type: string
      required:
        - rel
      type: object
    Blacklist:
      properties:
        _links:
          description: The links related to resource
          items:
            $ref: '#/components/schemas/SelfLink'
          maxItems: 1
          minItems: 1
          readOnly: true
          type: array
        createdTime:
          allOf:
            - $ref: '#/components/schemas/ServerTimestamp'
          description: The blacklist created time
        expiredTime:
          description: The blacklist expired time
          format: date-time
          type: string
        id:
          allOf:
            - $ref: '#/components/schemas/ResourceId'
          description: The blacklist identifier string
          readOnly: true
        type:
          description: The blacklist type
          enum:
            - payment-card-id
            - customer-id
            - email
            - ip-address
            - country
            - fingerprint
            - bin
          type: string
        updatedTime:
          allOf:
            - $ref: '#/components/schemas/ServerTimestamp'
          description: The blacklist updated time
        value:
          description: The blacklist value
          type: string
      required:
        - type
        - value
      type: object
    BraintreePayments:
      allOf:
        - $ref: '#/components/schemas/GatewayAccount'
        - properties:
            gatewayConfig:
              properties:
                merchantAccountId:
                  description: BraintreePayments merchant account ID
                  format: password
                  type: string
                merchantId:
                  description: BraintreePayments merchant ID
                  format: password
                  type: string
                privateKey:
                  description: BraintreePayments Private Key
                  format: password
                  type: string
                publicKey:
                  description: BraintreePayments Public Key
                  type: string
              required:
                - publicKey
                - privateKey
                - merchantId
                - merchantAccountId
              type: object
          required:
            - gatewayConfig
          type: object
      description: BraintreePayments Gateway config
    CancelUrlLink:
      allOf:
        - $ref: '#/components/schemas/NewLink'
      properties:
        rel:
          description: The link type
          enum:
            - cancelUrl
          type: string
      required:
        - rel
      type: object
    CardinalCommerce:
      allOf:
        - $ref: '#/components/schemas/PayvisionMpis'
        - properties:
            merchantId:
              description: Cardinal MerchantId
              type: string
            processorId:
              description: Cardinal ProcessorId
              type: string
            transactionPwd:
              description: Cardinal TransactionPwd
              format: password
              type: string
          required:
            - merchantId
            - processorId
            - transactionPwd
          type: object
      description: CardinalCommerce Mpi Credentials
    Cashflows:
      allOf:
        - $ref: '#/components/schemas/GatewayAccount'
        - properties:
            gatewayConfig:
              properties:
                authId:
                  description: Cashflows Gateway auth ID
                  type: string
                authPassword:
                  description: Cashflows Gateway auth password
                  format: password
                  type: string
              required:
                - authPassword
                - authId
              type: object
          required:
            - gatewayConfig
          type: object
      description: Cashflows Gateway config
    Cayan:
      allOf:
        - $ref: '#/components/schemas/GatewayAccount'
        - properties:
            gatewayConfig:
              properties:
                merchantKey:
                  description: Cayan Gateway merchant key
                  format: password
                  type: string
                merchantName:
                  description: Cayan Gateway merchant name
                  type: string
                merchantSiteId:
                  description: Cayan Gateway merchant site ID
                  type: string
              required:
                - merchantSiteId
                - merchantName
                - merchantKey
              type: object
          required:
            - gatewayConfig
          type: object
      description: Cayan Gateway config
    Chase:
      allOf:
        - $ref: '#/components/schemas/GatewayAccount'
        - properties:
            gatewayConfig:
              properties:
                coNumber:
                  description: Chase Gateway CO Number used for delimited file reports
                  type: string
                divisionId:
                  description: Chase Gateway division ID
                  type: string
                partialAuth:
                  default: false
                  description: Support for Partial Auths
                  type: boolean
                password:
                  description: Chase Gateway Net Connect password
                  format: password
                  type: string
                username:
                  description: Chase Gateway Net Connect username
                  type: string
              required:
                - username
                - password
                - coNumber
                - divisionId
                - partialAuth
              type: object
          required:
            - gatewayConfig
          type: object
      description: Chase Gateway config
    CheckoutPage:
      properties:
        _links:
          description: The links related to resource
          items:
            $ref: '#/components/schemas/SelfLink'
          maxItems: 1
          minItems: 1
          readOnly: true
          type: array
        allowCustomCustomerId:
          description: If to enable your own customer ID in requests
          type: boolean
        id:
          allOf:
            - $ref: '#/components/schemas/ResourceId'
          description: Checkout page identifier string
          readOnly: true
        isActive:
          description: If checkout page active
          type: boolean
        name:
          description: Checkout page name
          type: string
        planId:
          allOf:
            - $ref: '#/components/schemas/ResourceId'
          description: Checkout page plan ID
          type: string
        redirectTimeout:
          description: Checkout page redirect timeout
          type: integer
        redirectUrl:
          description: Checkout page url
          type: string
        uriPath:
          description: 'Your own custom uri path for this Checkout Page. It will be appended to checkout url https://checkout.rebilly.com/website/<uriPath>'
          type: string
        websiteId:
          allOf:
            - $ref: '#/components/schemas/ResourceId'
          description: Checkout page website ID
          type: string
      required:
        - name
        - planId
        - websiteId
        - uriPath
      type: object
    ChinaUnionPay:
      allOf:
        - $ref: '#/components/schemas/GatewayAccount'
        - properties:
            gatewayConfig:
              properties:
                accountId:
                  description: China Union Pay Gateway account ID
                  type: string
                goods:
                  description: China Union Pay Gateway goods
                  type: string
                md5key:
                  description: China Union Pay Gateway md5key
                  format: password
                  type: string
                mobilePay:
                  description: China Union Pay Gateway mobile pay param
                  type: string
                partyId:
                  description: China Union Pay Gateway party ID
                  type: string
              required:
                - accountId
                - partyId
                - goods
                - md5key
                - mobilePay
              type: object
          required:
            - gatewayConfig
          type: object
      description: China Union Pay Gateway config
    CommonScheduleInstruction:
      description: The calculation instruction of scheduled time
      discriminator:
        propertyName: method
      properties:
        method:
          enum:
            - auto
            - immediately
            - date-interval
            - day-of-month
            - day-of-week
          type: string
      required:
        - method
      type: object
    Condition:
      discriminator:
        propertyName: op
      properties:
        op:
          description: The condition operation
          enum:
            - and
            - or
            - not
            - between
            - equals
            - in
            - gt
            - gte
            - lt
            - lte
          type: string
      required:
        - op
      type: object
    Contact:
      properties:
        _links:
          description: The links related to resource
          items:
            anyOf:
              - $ref: '#/components/schemas/SelfLink'
              - $ref: '#/components/schemas/CustomerLink'
          maxItems: 2
          minItems: 1
          readOnly: true
          type: array
        address:
          description: The contact street address
          maxLength: 60
          type: string
        address2:
          description: The contact street address (second line)
          maxLength: 60
          type: string
        city:
          description: The contact city
          maxLength: 45
          type: string
        country:
          description: The contact country ISO Alpha-2 code
          pattern: '^[A-Z]{2}$'
          type: string
        createdTime:
          allOf:
            - $ref: '#/components/schemas/ServerTimestamp'
          description: The contact created time
        customFields:
          $ref: '#/components/schemas/ResourceCustomFields'
        customerId:
          allOf:
            - $ref: '#/components/schemas/ResourceId'
          description: The contact customer ID
        emails:
          $ref: '#/components/schemas/ContactEmails'
        firstName:
          description: The contact first name
          type: string
        id:
          allOf:
            - $ref: '#/components/schemas/ResourceId'
          description: The contact identifier string
          readOnly: true
        isOutdated:
          description: Is contact outdated
          readOnly: true
          type: boolean
        lastName:
          description: The contact last name
          type: string
        organization:
          description: The contact organization
          type: string
        phoneNumbers:
          $ref: '#/components/schemas/ContactPhoneNumbers'
        postalCode:
          description: The contact postal code
          maxLength: 10
          type: string
        region:
          description: The contact region (state)
          maxLength: 45
          type: string
        updatedTime:
          allOf:
            - $ref: '#/components/schemas/ServerTimestamp'
          description: The contact updated time
      type: object
    ContactEmails:
      description: The contact emails
      items:
        properties:
          label:
            description: The email label
            type: string
          primary:
            description: True if email is primary
            type: boolean
          value:
            description: The email value
            type: string
        required:
          - label
          - value
        type: object
      type: array
    ContactLink:
      allOf:
        - $ref: '#/components/schemas/NewLink'
      properties:
        rel:
          description: The link type
          enum:
            - contact
          type: string
      required:
        - rel
      type: object
    ContactObject:
      properties:
        address:
          description: The contact street address
          maxLength: 60
          type: string
        address2:
          description: The contact street address (second line)
          maxLength: 60
          type: string
        city:
          description: The contact city
          maxLength: 45
          type: string
        country:
          description: The contact country ISO Alpha-2 code
          pattern: '^[A-Z]{2}$'
          type: string
        emails:
          $ref: '#/components/schemas/ContactEmails'
        firstName:
          description: The contact first name
          type: string
        lastName:
          description: The contact last name
          type: string
        organization:
          description: The contact organization
          type: string
        phoneNumbers:
          $ref: '#/components/schemas/ContactPhoneNumbers'
        postalCode:
          description: The contact postal code
          maxLength: 10
          type: string
        region:
          description: The contact region (state)
          maxLength: 45
          type: string
      type: object
    ContactPhoneNumbers:
      description: The contact phone numbers
      items:
        properties:
          label:
            description: The phone label
            type: string
          primary:
            description: True if phone is primary
            type: boolean
          value:
            description: The phone value
            type: string
        required:
          - label
          - value
        type: object
      type: array
    Coupon:
      description: Coupons and Discounts
      properties:
        _links:
          description: The links related to resource
          items:
            $ref: '#/components/schemas/SelfLink'
          maxItems: 1
          minItems: 1
          readOnly: true
          type: array
        createdTime:
          allOf:
            - $ref: '#/components/schemas/ServerTimestamp'
          description: Coupon created time
        description:
          description: |
            Your coupon description. When it is not empty this is used for invoice discount item description,
            otherwise the item's description uses coupon's redemptionCode like 'Coupon "redemptionCode"'
          type: string
        discount:
          $ref: '#/components/schemas/Discount'
        expiredTime:
          description: Coupon's expire time (end time)
          format: date-time
          type: string
        issuedTime:
          description: Coupon's issued time (start time)
          format: date-time
          type: string
        redemptionCode:
          allOf:
            - $ref: '#/components/schemas/ResourceId'
          description: Coupon's redemption code
          readOnly: true
        redemptionsCount:
          description: Coupon's redemptions count
          minimum: 0
          readOnly: true
          type: integer
        restrictions:
          description: Coupon restrictions
          items:
            $ref: '#/components/schemas/CouponRestriction'
          type: array
        status:
          description: If coupon enabled
          enum:
            - issued
            - expired
          readOnly: true
          type: string
        updatedTime:
          allOf:
            - $ref: '#/components/schemas/ServerTimestamp'
          description: Coupon updated time.
      required:
        - discount
        - issuedTime
      type: object
    CouponRedemption:
      description: Coupons redemption log
      properties:
        _links:
          description: The links related to resource
          items:
            $ref: '#/components/schemas/SelfLink'
          maxItems: 1
          minItems: 1
          readOnly: true
          type: array
        additionalRestrictions:
          description: Additional restrictions for coupon's redemptions
          items:
            $ref: '#/components/schemas/RedemptionRestriction'
          type: array
        canceledTime:
          allOf:
            - $ref: '#/components/schemas/ServerTimestamp'
          description: Coupon redemption canceled time
          readOnly: true
        customerId:
          allOf:
            - $ref: '#/components/schemas/ResourceId'
          description: Customer's ID
        id:
          allOf:
            - $ref: '#/components/schemas/ResourceId'
          readOnly: true
        redeemedTime:
          allOf:
            - $ref: '#/components/schemas/ServerTimestamp'
          description: Coupon redeem time
          readOnly: true
        redemptionCode:
          allOf:
            - $ref: '#/components/schemas/ResourceId'
          description: Coupon's redemption code
      type: object
    CouponRestriction:
      allOf:
        - $ref: '#/components/schemas/GenericRestriction'
        - properties:
            type:
              description: Coupon's restriction type
              enum:
                - discounts-per-redemption
                - redemptions-per-customer
                - restrict-to-invoices
                - restrict-to-plans
                - restrict-to-subscriptions
                - minimum-order-amount
                - total-redemptions
              type: string
          type: object
      description: Coupon restrictions
      type: object
    Credential:
      properties:
        _links:
          description: The links related to resource
          items:
            anyOf:
              - $ref: '#/components/schemas/SelfLink'
              - $ref: '#/components/schemas/CustomerLink'
          maxItems: 2
          minItems: 1
          readOnly: true
          type: array
        customerId:
          description: The credential's customer ID
          type: string
        expiredTime:
          description: The credential's expired time
          format: date-time
          type: string
        id:
          allOf:
            - $ref: '#/components/schemas/ResourceId'
          description: The credential identifier string
          readOnly: true
        password:
          description: The credential's password
          format: password
          type: string
        username:
          description: Credential's username
          type: string
      required:
        - username
        - password
        - customerId
      type: object
    Credorax:
      allOf:
        - $ref: '#/components/schemas/GatewayAccount'
        - properties:
            gatewayConfig:
              properties:
                merchantId:
                  description: Credorax Gateway merchant ID
                  type: string
                merchantMd5Signature:
                  description: Credorax Gateway md5 signature
                  format: password
                  type: string
              required:
                - merchantId
                - merchantMd5Signature
              type: object
          required:
            - gatewayConfig
          type: object
      description: Credorax Gateway config
    CustomEvent:
      properties:
        chronology:
          description: The emitting time of the custom event relatively to the system event
          enum:
            - before
            - after
          type: string
        createdTime:
          $ref: '#/components/schemas/ServerTimestamp'
        description:
          description: The custom event description
          type: string
        eventType:
          description: The system event type
          enum:
            - subscription-ended
            - subscription-trial-ended
            - subscription-renewed
            - payment-card-expired
            - invoice-past-due
            - invoice-issued
            - invoice-voided
            - invoice-paid
            - invoice-abandoned
          type: string
        id:
          allOf:
            - $ref: '#/components/schemas/ResourceId'
          description: The custom event identifier string
          readOnly: true
        rulesCount:
          readOnly: true
          type: integer
        scheduleInstruction:
          $ref: '#/components/schemas/CustomEventScheduleInstruction'
        title:
          description: The custom event title
          type: string
      required:
        - eventType
        - title
        - chronology
        - scheduleInstruction
      type: object
    CustomEventScheduleInstruction:
      description: The calculation instruction of scheduled time
      discriminator:
        propertyName: method
      properties:
        method:
          enum:
            - date-interval
            - day-of-month
            - day-of-week
          type: string
      required:
        - method
      type: object
    CustomField:
      description: A separate Custom Field schema
      properties:
        _links:
          description: The links related to resource
          items:
            $ref: '#/components/schemas/SelfLink'
          maxItems: 1
          minItems: 1
          readOnly: true
          type: array
        additionalSchema:
          description: |
            Additional parameters which can be added according to type:
            Parameter Name | Types         | Description
            -------------- | ------------- | -------------
            allowedValues  | string, array | List of allowed values
        description:
          description: The custom field description
          type: string
        name:
          description: The name of the custom field
          type: string
        type:
          description: |
            Type value    | Description
            ------------- | -------------
            array         | An array of strings up to 255 characters, maximum size is 1000 elements
            boolean       | true or false
            date          | String of format "full-date" (YYYY-MM-DD) from RFC-3339 (full-date)
            datetime      | String of format "date-time" (YYYY-MM-DDTHH:MM:SSZ) from RFC-3339 (date-time)
            integer       | Cardinal value of -2^31..2^31-1
            number        | Float value. It can take cardinal values also which are interpreted as float
            string        | Regular string up to 255 characters
            monetary      | A map of 3-letters currency code and amount, e.g. {"currency": "EUR", "amount": 25.30}
          enum:
            - array
            - boolean
            - datetime
            - integer
            - number
            - string
            - monetary
          type: string
      required:
        - name
        - type
      type: object
    Customer:
      properties:
        _links:
          description: The links related to resource
          items:
            anyOf:
              - $ref: '#/components/schemas/SelfLink'
              - $ref: '#/components/schemas/NotesLink'
              - $ref: '#/components/schemas/DefaultPaymentInstrumentLink'
              - $ref: '#/components/schemas/LeadSourceLink'
          minItems: 3
          readOnly: true
          type: array
        createdTime:
          allOf:
            - $ref: '#/components/schemas/ServerTimestamp'
          description: The customer created time
        customFields:
          $ref: '#/components/schemas/ResourceCustomFields'
        defaultPaymentInstrument:
          $ref: '#/components/schemas/PaymentInstrument'
        id:
          allOf:
            - $ref: '#/components/schemas/ResourceId'
          description: The customer identifier string
          readOnly: true
        primaryAddress:
          $ref: '#/components/schemas/ContactObject'
        updatedTime:
          allOf:
            - $ref: '#/components/schemas/ServerTimestamp'
          description: The customer updated time
      type: object
    CustomerLink:
      allOf:
        - $ref: '#/components/schemas/NewLink'
      properties:
        rel:
          description: The link type
          enum:
            - customer
          type: string
      required:
        - rel
      type: object
    DataCash:
      allOf:
        - $ref: '#/components/schemas/GatewayAccount'
        - properties:
            gatewayConfig:
              properties:
                client:
                  description: DataCash Gateway client
                  type: string
                delay:
                  default: 0
                  description: Auto Capture delay (in hours)
                  minimum: 0
                  type: integer
                password:
                  description: DataCash Gateway password
                  format: password
                  type: string
                policy:
                  default: 2
                  description: Policy
                  maximum: 7
                  minimum: 0
                  type: integer
              required:
                - client
                - password
                - policy
                - delay
              type: object
            mpi:
              $ref: '#/components/schemas/DataCashMpis'
          required:
            - gatewayConfig
          type: object
      description: DataCash Gateway config
    DataCashMpi:
      allOf:
        - $ref: '#/components/schemas/DataCashMpis'
      description: DataCash Integrated
    DataCashMpis:
      description: DataCash Mpis
      discriminator:
        propertyName: name
      properties:
        name:
          allOf:
            - $ref: '#/components/schemas/MpiName'
          enum:
            - DataCashMpi
      required:
        - name
    DayOfWeek:
      enum:
        - Sunday
        - Monday
        - Tuesday
        - Wednesday
        - Thursday
        - Friday
        - Saturday
      type: string
    DefaultPaymentInstrumentLink:
      allOf:
        - $ref: '#/components/schemas/NewLink'
      properties:
        rel:
          description: The link type
          enum:
            - defaultPaymentInstrument
          type: string
      required:
        - rel
      type: object
    DeliveryContactLink:
      allOf:
        - $ref: '#/components/schemas/NewLink'
      properties:
        rel:
          description: The link type
          enum:
            - deliveryContact
          type: string
      required:
        - rel
      type: object
    Dengi:
      allOf:
        - $ref: '#/components/schemas/GatewayAccount'
        - properties:
            gatewayConfig:
              properties:
                projectId:
                  description: Dengi Gateway project ID
                  type: string
                publicKey:
                  description: Dengi Gateway public key
                  format: password
                  type: string
                refundKey:
                  description: Dengi Gateway refund key
                  format: password
                  type: string
              required:
                - projectId
                - publicKey
                - refundKey
              type: object
          required:
            - gatewayConfig
          type: object
      description: Dengi Gateway config
    Discount:
      discriminator:
        propertyName: type
      properties:
        type:
          description: Discount type
          enum:
            - fixed
            - percent
          type: string
      type: object
    Dispute:
      properties:
        _links:
          description: The links related to resource
          items:
            $ref: '#/components/schemas/SelfLink'
          maxItems: 1
          minItems: 1
          readOnly: true
          type: array
        acquirerReferenceNumber:
          description: The dispute's acquirer reference number
          type: string
        amount:
          description: The dispute amount
          format: double
          type: number
        category:
          description: The dispute's category
          enum:
            - fraud
            - unrecognized
            - product-not-received
            - product-unacceptable
            - product-not-refunded
            - duplicate
            - subscription-canceled
            - uncategorized
          readOnly: true
          type: string
        createdTime:
          allOf:
            - $ref: '#/components/schemas/ServerTimestamp'
          description: Dispute created time
        currency:
          description: The dispute currency ISO Alpha code
          type: string
        customerId:
          description: The dispute's customer ID
          readOnly: true
          type: string
        deadlineTime:
          description: Dispute deadline time
          format: date-time
          type: string
        id:
          allOf:
            - $ref: '#/components/schemas/ResourceId'
          description: The dispute identifier string
          readOnly: true
        postedTime:
          description: Dispute posted time
          format: date-time
          type: string
        rawResponse:
          description: Dispute raw response from gateway
          readOnly: true
          type: string
        reasonCode:
          description: The dispute's reason code
          enum:
            - '1000'
            - '12'
            - '2'
            - '30'
            - '31'
            - '35'
            - '37'
            - '40'
            - '41'
            - '42'
            - '46'
            - '47'
            - '49'
            - '50'
            - '53'
            - '54'
            - '55'
            - '57'
            - '59'
            - '60'
            - '62'
            - '7'
            - '70'
            - '71'
            - '72'
            - '73'
            - '74'
            - '75'
            - '76'
            - '77'
            - '79'
            - '8'
            - '80'
            - '81'
            - '82'
            - '83'
            - '85'
            - '86'
            - '93'
            - '00'
            - '63'
            - A01
            - A02
            - A08
            - F10
            - F14
            - F22
            - F24
            - F29
            - C02
            - C04
            - C05
            - C08
            - C14
            - C18
            - C28
            - C31
            - C32
            - M10
            - M49
            - P01
            - P03
            - P04
            - P05
            - P07
            - P08
            - P22
            - P23
            - R03
            - R13
            - M01
            - FR1
            - FR4
            - FR6
            - AL
            - AP
            - AW
            - CA
            - CD
            - CR
            - DA
            - DP
            - DP1
            - EX
            - IC
            - IN
            - IS
            - LP
            - 'N'
            - NA
            - NC
            - P
            - RG
            - RM
            - RN1
            - RN2
            - SV
            - TF
            - TNM
            - UA01
            - UA02
            - UA32
            - UA99
            - UA03
            - UA10
            - UA11
            - UA12
            - UA18
            - UA20
            - UA21
            - UA22
            - UA23
            - UA28
            - UA30
            - UA31
            - UA38
            - duplicate
            - fraudulent
            - subscription_canceled
            - product_unacceptable
            - product_not_received
            - unrecognized
            - credit_not_processed
            - customer_initiated
            - incorrect_account_details
            - insufficient_funds
            - bank_cannot_process
            - debit_not_authorized
            - general
          type: string
        resolvedTime:
          allOf:
            - $ref: '#/components/schemas/ServerTimestamp'
          description: Dispute resolved time
        status:
          description: The dispute's status
          enum:
            - response-needed
            - under-review
            - forfeited
            - won
            - lost
            - unknown
          type: string
        transactionId:
          description: The dispute's transaction ID
          type: string
        type:
          description: The dispute's type
          enum:
            - information-request
            - first-chargeback
            - second-chargeback
            - arbitration
          type: string
        updatedTime:
          allOf:
            - $ref: '#/components/schemas/ServerTimestamp'
          description: Dispute updated time
      required:
        - currency
        - transactionId
        - postedTime
        - type
        - status
        - reasonCode
      type: object
    DisputeEvidence:
      properties:
        accessLogs:
          description: The id of a file upload with the access logs showing the customer activity.
          type: string
        additionalFile:
          description: Any additional evidence as a file upload id.
          type: string
        customerCommunication:
          description: The id of a file upload showing communication with the customer (for example emails).
          type: string
        customerSignature:
          description: The id of a file upload showing the signed contract or signed delivery receipt.
          type: string
        deliveryProof:
          description: The id of a file upload showing the proof of delivery.
          type: string
        explanation:
          description: An explanation relevant to the category of dispute.
          type: string
        policy:
          description: 'The id of a file upload with the policy materials (may include the cancellation policy, refund policy, and terms of use).'
          type: string
      type: object
    Email:
      properties:
        email:
          description: Email
          format: email
          type: string
      required:
        - email
      type: object
    EmailNotification:
      properties:
        bcc:
          description: The hidden recipients addresses. The template palceholders are allowed.
          items:
            type: string
          type: array
        bodyHtml:
          description: |
            Leave empty to recieve "text/plain" email.
            The template palceholders are allowed.
          type: string
        bodyText:
          description: |
            Leave empty to use text from "bodyHtml" without tags.
            The template palceholders are allowed.
          type: string
        cc:
          description: The recipients addresses. The template palceholders are allowed.
          items:
            type: string
          type: array
        credentialHash:
          description: SMTP Credential identifier string.
          type: string
        recipients:
          description: The recipients addresses. The template palceholders are allowed.
          items:
            type: string
          minItems: 1
          type: array
        sender:
          description: The sender address. The template palceholders are allowed.
          type: string
        subject:
          description: The message subject. The template palceholders are allowed.
          type: string
      required:
        - credentialHash
        - sender
        - recipients
        - subject
        - bodyText
        - bodyHtml
      type: object
    Error:
      properties:
        error:
          type: string
        status:
          maximum: 600
          minimum: 100
          type: integer
      type: object
    EventType:
      description: Rebilly event type
      enum:
        - dispute-created
        - gateway-account-requested
        - transaction-processed
        - subscription-canceled
        - subscription-renewed
        - payment-card-expired
        - payment-declined
        - transaction-process-requested
        - risk-score-changed
      readOnly: true
      type: string
    File:
      properties:
        _links:
          description: The links related to resource
          items:
            $ref: '#/components/schemas/SelfLink'
          maxItems: 1
          minItems: 1
          readOnly: true
          type: array
        createdTime:
          allOf:
            - $ref: '#/components/schemas/ServerTimestamp'
          description: The upload date/time
        description:
          description: The File description
          type: string
        extension:
          description: The File extension
          type: string
        height:
          description: 'Image height, applicable to images only'
          readOnly: true
          type: integer
        id:
          allOf:
            - $ref: '#/components/schemas/ResourceId'
          readOnly: true
        mime:
          description: The mime type
          enum:
            - image/png
            - image/jpeg
            - image/gif
            - application/pdf
            - audio/mpeg
          readOnly: true
          type: string
        name:
          description: Original File name
          type: string
        sha1:
          description: Hash sum of the file
          readOnly: true
          type: string
        size:
          description: The File size in bytes
          readOnly: true
          type: integer
        tags:
          description: The tags list
          items:
            type: string
          type: array
        updatedTime:
          allOf:
            - $ref: '#/components/schemas/ServerTimestamp'
          description: The latest update date/time
        url:
          description: 'Write-only. If defined on POST, this would be used as a file source.'
          type: string
        width:
          description: 'Image width, applicable to images only'
          readOnly: true
          type: integer
      type: object
    FileLink:
      allOf:
        - $ref: '#/components/schemas/NewLink'
      properties:
        rel:
          description: The link type
          enum:
            - file
          type: string
      required:
        - rel
      type: object
    Flexepin:
      allOf:
        - $ref: '#/components/schemas/GatewayAccount'
        - properties:
            gatewayConfig:
              properties:
                apiKey:
                  description: Flexepin API Key
                  type: string
                apiSecret:
                  description: Flexepin API Secret
                  format: password
                  type: string
              required:
                - apiKey
                - apiSecret
              type: object
          required:
            - gatewayConfig
          type: object
      description: Flexepin Gateway config
    Forte:
      allOf:
        - $ref: '#/components/schemas/GatewayAccount'
        - properties:
            gatewayConfig:
              properties:
                accountId:
                  description: Forte Gateway account ID
                  type: string
                apiAccessId:
                  description: Forte Gateway api access ID
                  format: password
                  type: string
                apiSecretKey:
                  description: Forte Gateway api secret key
                  format: password
                  type: string
                locationId:
                  description: Forte Gateway location ID
                  type: string
              required:
                - accountId
                - locationId
                - apiAccessId
                - apiSecretKey
              type: object
          required:
            - gatewayConfig
          type: object
      description: Forte Gateway config
    FundSend:
      allOf:
        - $ref: '#/components/schemas/GatewayAccount'
        - properties:
            gatewayConfig:
              properties:
                clientId:
                  description: FundSend Gateway client ID
                  type: string
                secretWord:
                  description: FundSend Gateway secret word
                  format: password
                  type: string
              required:
                - clientId
                - secretWord
              type: object
          required:
            - gatewayConfig
          type: object
      description: FundSend Gateway config
    GET:
      allOf:
        - $ref: '#/components/schemas/GatewayAccount'
        - properties:
            gatewayConfig:
              properties:
                accountId:
                  description: GET Gateway account ID
                  type: string
              required:
                - accountId
              type: object
          required:
            - gatewayConfig
          type: object
      description: GET Gateway config
    GatewayAccount:
      discriminator:
        propertyName: gatewayName
      properties:
        _links:
          description: The links related to resource
          items:
            anyOf:
              - $ref: '#/components/schemas/SelfLink'
              - $ref: '#/components/schemas/OnBoardingUrlLink'
          maxItems: 2
          minItems: 1
          readOnly: true
          type: array
        acceptedCurrencies:
          description: Accepted currencies (array of the currency three letter code)
          items:
            type: string
          type: array
        acquirerName:
          $ref: '#/components/schemas/AcquirerName'
        cityField:
          description: The gateway account's city field (also known as line 2 descriptor)
          type: string
        createdTime:
          allOf:
            - $ref: '#/components/schemas/ServerTimestamp'
          description: Gateway Account created time
        dccMarkup:
          description: Dynamic currency conversion markup in basis points
          maximum: 10000
          minimum: 1
          type: integer
        descriptor:
          description: The gateway account's descriptor
          type: string
        downtimeEnd:
          description: Gateway account downtime end
          format: date-time
          type: string
        downtimeStart:
          description: Gateway account downtime start
          format: date-time
          type: string
        dynamicDescriptor:
          description: 'True, if Gateway Account allows dynamic descriptor'
          type: boolean
        excludedDccQuoteCurrencies:
          description: Excluded Dynamic Currency Conversion Quote Currencies
          items:
            type: string
          type: array
        gatewayName:
          $ref: '#/components/schemas/GatewayName'
        id:
          allOf:
            - $ref: '#/components/schemas/ResourceId'
          description: The gateway identifier string
          readOnly: true
        merchantCategoryCode:
          description: The gateway account's merchant category code
          maximum: 9950
          minimum: 742
          type: integer
        method:
          $ref: '#/components/schemas/Method'
        monthlyLimit:
          description: Monthly Limit
          format: double
          minimum: 0
          type: integer
        organizationId:
          allOf:
            - $ref: '#/components/schemas/ResourceId'
          description: Organization ID
        paymentCardSchemes:
          description: Accepted payment card brands
          items:
            enum:
              - Visa
              - MasterCard
              - American Express
              - Discover
              - Maestro
              - Solo
              - Electron
              - JCB
              - Voyager
              - Diners Club
              - Switch
              - Laser
              - China Unionpay
            type: string
          type: array
        status:
          description: The gateway account's status
          enum:
            - active
            - inactive
            - pending
          readOnly: true
          type: string
        threeDSecure:
          description: 'True, if Gateway Account allows 3DSecure'
          type: boolean
        updatedTime:
          allOf:
            - $ref: '#/components/schemas/ServerTimestamp'
          description: Gateway Account updated time
        websites:
          description: Websites IDs
          items:
            allOf:
              - $ref: '#/components/schemas/ResourceId'
            description: Website ID
          type: array
      required:
        - gatewayName
        - acquirerName
        - merchantCategoryCode
        - websites
        - acceptedCurrencies
        - organizationId
      type: object
    GatewayAccountLink:
      allOf:
        - $ref: '#/components/schemas/NewLink'
      properties:
        rel:
          description: The link type
          enum:
            - gatewayAccount
          type: string
      required:
        - rel
      type: object
    GatewayAccountPickInstruction:
      discriminator:
        propertyName: method
      properties:
        method:
          enum:
            - gateway-account-weights
            - gateway-acquirer-weights
          type: string
      required:
        - method
      type: object
    GatewayName:
      description: The gateway name
      enum:
        - A1Gateway
        - AmexVPC
        - AuthorizeNet
        - Beanstream
        - BraintreePayments
        - Cashflows
        - Cayan
        - Chase
        - ChinaUnionPay
        - Credorax
        - DataCash
        - Dengi
        - eMerchantPay
        - Flexepin
        - FundSend
        - Forte
        - GET
        - GlobalCollect
        - GlobalOne
        - iCheque
        - Ilixium
        - JetPay
        - Moneris
        - NMI
        - OchaPay
        - Optimal
        - PandaGateway
        - Payeezy
        - Payflow
        - PayPal
        - Payr
        - Payvision
        - Plugnpay
        - Realex
        - RealTime
        - RebillyProcessor
        - Redsys
        - RPN
        - Sagepay
        - SMSVoucher
        - Stripe
        - UPayCard
        - USAePay
        - VantivLitle
        - vegaaH
        - Walpay
        - Wirecard
        - Worldpay
      type: string
    GenericRestriction:
      description: All restriction
      discriminator:
        propertyName: type
      properties:
        type:
          description: Restriction type
          type: string
      type: object
    GlobalCollect:
      allOf:
        - $ref: '#/components/schemas/GatewayAccount'
        - properties:
            gatewayConfig:
              properties:
                apiKeyId:
                  description: GlobalCollect Gateway api key ID
                  type: string
                apiSecretKey:
                  description: GlobalCollect Gateway api secret key
                  format: password
                  type: string
                merchantId:
                  description: GlobalCollect Gateway merchant ID
                  type: string
                skipFraudService:
                  description: GlobalCollect skip fraud service
                  type: boolean
              required:
                - merchantId
                - apiKeyId
                - apiSecretKey
              type: object
            mpi:
              $ref: '#/components/schemas/GlobalCollectMpis'
          required:
            - gatewayConfig
          type: object
      description: GlobalCollect Gateway config
    GlobalCollectMpi:
      allOf:
        - $ref: '#/components/schemas/GlobalCollectMpis'
      description: GlobalCollect Integrated
    GlobalCollectMpis:
      description: GlobalCollect Mpis
      discriminator:
        propertyName: name
      properties:
        name:
          allOf:
            - $ref: '#/components/schemas/MpiName'
          enum:
            - GlobalCollectMpi
      required:
        - name
    GlobalOne:
      allOf:
        - $ref: '#/components/schemas/GatewayAccount'
        - properties:
            gatewayConfig:
              properties:
                sharedSecret:
                  description: GlobalOne Gateway shared secret
                  format: password
                  type: string
                terminalId:
                  description: GlobalOne Gateway terminal ID
                  type: string
              required:
                - terminalId
                - sharedSecret
              type: object
          required:
            - gatewayConfig
          type: object
      description: GlobalOne Gateway config
    GlobalWebhook:
      properties:
        _links:
          description: Links related to resource
          items:
            $ref: '#/components/schemas/SelfLink'
          maxItems: 1
          minItems: 1
          readOnly: true
          type: array
        createdTime:
          allOf:
            - $ref: '#/components/schemas/ServerTimestamp'
          description: List created time
        credentialHash:
          description: Hash from Credentials which is used for authentication by the given URL
          type: string
        eventsFilter:
          default: []
          description: An array of System event type
          items:
            $ref: '#/components/schemas/GlobalWebhookEventType'
          type: array
        headers:
          description: Map of elements with header name - header value association
          type: object
        id:
          allOf:
            - $ref: '#/components/schemas/ResourceId'
          description: The webhook identifier string
          readOnly: true
        method:
          enum:
            - GET
            - POST
            - PUT
            - PATCH
            - DELETE
          type: string
        status:
          $ref: '#/components/schemas/OnOff'
        updatedTime:
          allOf:
            - $ref: '#/components/schemas/ServerTimestamp'
          description: List updated time
        url:
          description: URL that will be triggered when the given event occurs.
          format: uri
          type: string
      required:
        - method
        - url
        - credentialHash
      type: object
    GlobalWebhookEventType:
      description: Rebilly webhooks event type
      enum:
        - gateway-account-requested
        - subscription-trial-ended
        - subscription-activated
        - subscription-canceled
        - subscription-renewed
        - transaction-processed
        - payment-card-expired
        - payment-declined
        - invoice-modified
        - invoice-created
        - dispute-created
        - suspended-payment-completed
      type: string
    Ilixium:
      allOf:
        - $ref: '#/components/schemas/GatewayAccount'
        - properties:
            gatewayConfig:
              properties:
                accountId:
                  description: Ilixium Gateway account ID
                  type: string
                digestPassword:
                  description: Ilixium Gateway digest password
                  format: password
                  type: string
                merchantId:
                  description: Ilixium Gateway merchant ID
                  type: string
              required:
                - merchantId
                - accountId
                - digestPassword
              type: object
            mpi:
              $ref: '#/components/schemas/IlixiumMpis'
          required:
            - gatewayConfig
          type: object
      description: Ilixium Gateway config
    IlixiumMpi:
      allOf:
        - $ref: '#/components/schemas/IlixiumMpis'
      description: Ilixium Integrated
    IlixiumMpis:
      description: IlixiumMpis Mpis
      discriminator:
        propertyName: name
      properties:
        name:
          allOf:
            - $ref: '#/components/schemas/MpiName'
          enum:
            - IlixiumMpi
      required:
        - name
    InvalidError:
      allOf:
        - $ref: '#/components/schemas/Error'
        - properties:
            details:
              items:
                type: string
              type: array
          type: object
    Invoice:
      properties:
        _links:
          description: The links related to resource
          items:
            anyOf:
              - $ref: '#/components/schemas/SelfLink'
              - $ref: '#/components/schemas/CustomerLink'
              - $ref: '#/components/schemas/WebsiteLink'
              - $ref: '#/components/schemas/BillingContactLink'
              - $ref: '#/components/schemas/DeliveryContactLink'
              - $ref: '#/components/schemas/OrganizationLink'
              - $ref: '#/components/schemas/LeadSourceLink'
          maxItems: 6
          minItems: 1
          readOnly: true
          type: array
        abandonedTime:
          allOf:
            - $ref: '#/components/schemas/ServerTimestamp'
          description: Invoice abandoned time
        amount:
          description: The Invoice's amount
          format: double
          readOnly: true
          type: number
        billingAddress:
          allOf:
            - $ref: '#/components/schemas/ContactObject'
          description: Invoice's billing address
        collectionPeriod:
          description: Collection Period - difference between paidTime and issuedTime in days.
          readOnly: true
          type: integer
        createdTime:
          allOf:
            - $ref: '#/components/schemas/ServerTimestamp'
          description: Invoice created time
        currency:
          description: The currency three letter code
          type: string
        customerId:
          allOf:
            - $ref: '#/components/schemas/ResourceId'
          description: The customer's ID
        delinquentCollectionPeriod:
          description: Delinquent Collection Period - difference between paidTime and dueTime in days.
          readOnly: true
          type: integer
        deliveryAddress:
          allOf:
            - $ref: '#/components/schemas/ContactObject'
          description: Invoice's delivery address
        discounts:
          description: Discounts applied
          items:
            allOf:
              - $ref: '#/components/schemas/InvoiceDiscount'
          readOnly: true
          type: array
        dueTime:
          allOf:
            - $ref: '#/components/schemas/ServerTimestamp'
          description: Invoice due time
        id:
          allOf:
            - $ref: '#/components/schemas/ResourceId'
          description: The invoice identifier string
          readOnly: true
        issuedTime:
          allOf:
            - $ref: '#/components/schemas/ServerTimestamp'
          description: Invoice issued time
        items:
          description: Invoice items array
          items:
            type: string
          readOnly: true
          type: array
        notes:
          description: Notes for the customer which will display on the invoice
          type: string
        organizationId:
          allOf:
            - $ref: '#/components/schemas/ResourceId'
          description: The organization's ID
          readOnly: true
        paidTime:
          allOf:
            - $ref: '#/components/schemas/ServerTimestamp'
          description: Invoice paid time
        shippingAmount:
          description: The Invoice's shipping amount
          format: double
          readOnly: true
          type: number
        status:
          description: Invoice status.
          enum:
            - draft
            - issued
            - past-due
            - paid
            - abandoned
            - voided
          readOnly: true
          type: string
        taxes:
          description: Taxes applied to this invoice
          items:
            allOf:
              - $ref: '#/components/schemas/InvoiceTax'
          readOnly: true
          type: array
        voidedTime:
          allOf:
            - $ref: '#/components/schemas/ServerTimestamp'
          description: Invoice voided time
        websiteId:
          allOf:
            - $ref: '#/components/schemas/ResourceId'
          description: The website's ID
      required:
        - customerId
        - websiteId
        - currency
      type: object
    InvoiceDiscount:
      properties:
        amount:
          description: Total amount that was discounted by this Coupon
          format: double
          type: number
        description:
          description: Discount description
          type: string
        redemptionCode:
          allOf:
            - $ref: '#/components/schemas/ResourceId'
          description: Coupon's redemption code
        redemptionId:
          allOf:
            - $ref: '#/components/schemas/ResourceId'
          description: Redemption ID
      readOnly: true
      type: object
    InvoiceIssue:
      properties:
        issuedTime:
          format: date-time
          type: string
      type: object
    InvoiceItem:
      properties:
        _links:
          description: The links related to resource
          items:
            anyOf:
              - $ref: '#/components/schemas/SelfLink'
              - $ref: '#/components/schemas/SubscriptionLink'
          maxItems: 2
          minItems: 1
          readOnly: true
          type: array
        description:
          description: Invoice item's description
          type: string
        discountAmount:
          description: Invoice item discount amount
          format: double
          readOnly: true
          type: number
        id:
          allOf:
            - $ref: '#/components/schemas/ResourceId'
          description: The website identifier string
          readOnly: true
        periodEndTime:
          description: End time
          format: date-time
          type: string
        periodStartTime:
          description: Start time
          format: date-time
          type: string
        productId:
          allOf:
            - $ref: '#/components/schemas/ResourceId'
          description: The product's ID
        quantity:
          description: Invoice item's quantity
          type: integer
        type:
          description: Invoice item's type
          enum:
            - debit
            - credit
          type: string
        unitPrice:
          description: Invoice item's price
          format: double
          type: number
      required:
        - type
        - unitPrice
      type: object
    InvoiceTax:
      properties:
        amount:
          description: Tax amount
          format: double
          type: number
        description:
          description: Tax description
          type: string
      readOnly: true
      type: object
    ItemsLink:
      allOf:
        - $ref: '#/components/schemas/NewLink'
      properties:
        rel:
          description: The link type
          enum:
            - items
          type: string
      required:
        - rel
      type: object
    JetPay:
      allOf:
        - $ref: '#/components/schemas/GatewayAccount'
        - properties:
            gatewayConfig:
              properties:
                TerminalID:
                  description: JetPay Gateway terminal ID
                  type: string
              required:
                - TerminalID
              type: object
          required:
            - gatewayConfig
          type: object
      description: JetPay Gateway config
    Layout:
      properties:
        _links:
          description: The links related to resource
          items:
            anyOf:
              - $ref: '#/components/schemas/SelfLink'
              - $ref: '#/components/schemas/ItemsLink'
          maxItems: 2
          minItems: 2
          readOnly: true
          type: array
        createdTime:
          allOf:
            - $ref: '#/components/schemas/ServerTimestamp'
          description: Layout created time
        customFields:
          $ref: '#/components/schemas/ResourceCustomFields'
        id:
          allOf:
            - $ref: '#/components/schemas/ResourceId'
          description: The layout identifier string
          readOnly: true
        items:
          description: The array of layout items (planId and starred)
          items:
            $ref: '#/components/schemas/LayoutItem'
          type: array
        name:
          description: The name of the layout string
          type: string
      required:
        - name
      type: object
    LayoutItem:
      properties:
        _links:
          description: The links related to resource
          items:
            $ref: '#/components/schemas/SelfLink'
          maxItems: 1
          minItems: 1
          readOnly: true
          type: array
        order:
          description: Item's order in Layout
          readOnly: true
          type: integer
        planId:
          allOf:
            - $ref: '#/components/schemas/ResourceId'
          description: The plan identifier string
        starred:
          description: Boolean if the plan should be starred (special callout presentation)
          type: boolean
      required:
        - planId
      type: object
    LeadSource:
      properties:
        _links:
          description: The links related to resource
          items:
            anyOf:
              - $ref: '#/components/schemas/SelfLink'
              - $ref: '#/components/schemas/CustomerLink'
          maxItems: 2
          minItems: 1
          readOnly: true
          type: array
        affiliate:
          description: 'Lead Source''s affiliate (eg 123, Bob Smith)'
          type: string
        amount:
          description: The amount that the lead cost
          format: double
          type: number
        campaign:
          description: Lead Source's campaign (eg go-big-123)
          type: string
        clickId:
          description: Lead Source's click id (may come from an ad server)
          type: string
        content:
          description: Lead Source's content (eg smiley faces)
          type: string
        createdTime:
          allOf:
            - $ref: '#/components/schemas/ServerTimestamp'
          description: LeadSource created time
        currency:
          description: 'Currency (three letter ISO 4217 alpha code) (eg USD, EUR)'
          type: string
        id:
          allOf:
            - $ref: '#/components/schemas/ResourceId'
          description: The lead source identifier string
          readOnly: true
        ipAddress:
          description: Customer's IP Address
          type: string
        medium:
          description: 'Lead Source''s medium (eg search, display)'
          type: string
        path:
          description: Lead Source's path uri (eg www.example.com/some/landing/path)
          type: string
        salesAgent:
          description: Lead Source's sales agent (eg James Bond)
          type: string
        source:
          description: 'Lead Source''s source (eg google, yahoo)'
          type: string
        subAffiliate:
          description: Lead Source's sub-affiliate also called a sub-id or click id in some circles (eg 123456)
          type: string
        term:
          description: Lead Source's term (eg salt shakers)
          type: string
        updatedTime:
          allOf:
            - $ref: '#/components/schemas/ServerTimestamp'
          description: LeadSource updated time
      type: object
    LeadSourceLink:
      allOf:
        - $ref: '#/components/schemas/NewLink'
      properties:
        rel:
          description: The link type
          enum:
            - leadSource
          type: string
      required:
        - rel
      type: object
    List:
      properties:
        _links:
          description: Links related to resource
          items:
            $ref: '#/components/schemas/SelfLink'
          maxItems: 1
          minItems: 1
          readOnly: true
          type: array
        createdTime:
          allOf:
            - $ref: '#/components/schemas/ServerTimestamp'
          description: List created time
        id:
          allOf:
            - $ref: '#/components/schemas/ResourceId'
          description: List ID
          readOnly: true
        name:
          description: List name
          type: string
        updatedTime:
          allOf:
            - $ref: '#/components/schemas/ServerTimestamp'
          description: List updated time
        values:
          description: List values
          items:
            type: string
          type: array
        version:
          description: List version
          minimum: 1
          readOnly: true
          type: integer
      required:
        - name
        - values
      type: object
    Method:
      description: The payment method
      enum:
        - ach
        - Alipay
        - cash
        - china-unionpay
        - Flexepin
        - payment-card
        - paypal
        - OchaPay
        - SMSVoucher
        - UPayCard
        - WeChat Pay
      type: string
    Moneris:
      allOf:
        - $ref: '#/components/schemas/GatewayAccount'
        - properties:
            gatewayConfig:
              properties:
                apiToken:
                  description: Moneris Gateway api token
                  format: password
                  type: string
                storeId:
                  description: Moneris Gateway store ID
                  type: string
              required:
                - storeId
                - apiToken
              type: object
          required:
            - gatewayConfig
          type: object
      description: Moneris Gateway config
    MpiName:
      description: The Merchant plug-in Name
      enum:
        - PayvisionMpi
        - WirecardMpi
        - IlixiumMpi
        - DataCashMpi
        - OptimalMpi
        - GlobalCollectMpi
        - CardinalCommerce
        - Other
      type: string
    NMI:
      allOf:
        - $ref: '#/components/schemas/GatewayAccount'
        - properties:
            gatewayConfig:
              properties:
                password:
                  description: NMI Gateway store ID
                  format: password
                  type: string
                username:
                  description: NMI Gateway api token
                  type: string
              required:
                - username
                - password
              type: object
          required:
            - gatewayConfig
          type: object
      description: NMI Gateway config
    NewLink:
      properties:
        href:
          description: The link URL
          type: string
      required:
        - href
      type: object
    Note:
      properties:
        _links:
          description: The links related to resource
          items:
            $ref: '#/components/schemas/SelfLink'
          maxItems: 1
          minItems: 1
          readOnly: true
          type: array
        archived:
          description: Is the note archived (excluded from List method)
          type: boolean
        archivedTime:
          allOf:
            - $ref: '#/components/schemas/ServerTimestamp'
          description: Note archived time
        content:
          description: The note's name
          type: string
        createdBy:
          description: The note's creator
          readOnly: true
          type: string
        createdTime:
          allOf:
            - $ref: '#/components/schemas/ServerTimestamp'
          description: Note created time
        id:
          allOf:
            - $ref: '#/components/schemas/ResourceId'
          description: The note identifier string
          readOnly: true
        relatedId:
          allOf:
            - $ref: '#/components/schemas/ResourceId'
          description: The note's related resource ID
        relatedType:
          description: The note's related resource type
          enum:
            - customer
            - payment-card
            - payment-gateway
            - subscription
            - transaction
          type: string
        updatedTime:
          allOf:
            - $ref: '#/components/schemas/ServerTimestamp'
          description: Note updated time
      required:
        - content
        - relatedType
        - relatedId
      type: object
    NotesLink:
      allOf:
        - $ref: '#/components/schemas/NewLink'
      properties:
        rel:
          description: The link type
          enum:
            - notes
          type: string
      required:
        - rel
      type: object
    OchaPay:
      allOf:
        - $ref: '#/components/schemas/GatewayAccount'
        - properties:
            gatewayConfig:
              properties:
                apiPassword:
                  description: OchaPay Gateway api password
                  format: password
                  type: string
                apiUsername:
                  description: OchaPay Gateway username
                  type: string
                secretWord:
                  description: OchaPay Gateway secret word
                  format: password
                  type: string
              required:
                - apiUsername
                - apiPassword
                - secretWord
              type: object
          required:
            - gatewayConfig
          type: object
      description: OchaPay Gateway config
    OnBoardingUrlLink:
      allOf:
        - $ref: '#/components/schemas/NewLink'
      properties:
        rel:
          description: The link type
          enum:
            - onBoardingUrl
          type: string
      required:
        - rel
      type: object
    OnOff:
      default: active
      enum:
        - active
        - inactive
      type: string
    Optimal:
      allOf:
        - $ref: '#/components/schemas/GatewayAccount'
        - properties:
            gatewayConfig:
              properties:
                accountNum:
                  description: Optimal Gateway account number
                  type: string
                storeId:
                  description: Optimal Gateway store ID
                  type: string
                storePwd:
                  description: Optimal Gateway store password
                  format: password
                  type: string
              required:
                - storeId
                - storePwd
                - accountNum
              type: object
            mpi:
              $ref: '#/components/schemas/OptimalMpis'
          required:
            - gatewayConfig
          type: object
      description: Optimal Gateway config
    OptimalMpi:
      allOf:
        - $ref: '#/components/schemas/OptimalMpis'
      description: Optimal Integrated
    OptimalMpis:
      description: Optimal Mpis
      discriminator:
        propertyName: name
      properties:
        name:
          allOf:
            - $ref: '#/components/schemas/MpiName'
          enum:
            - OptimalMpi
      required:
        - name
    Organization:
      properties:
        _links:
          description: The links related to resource
          items:
            $ref: '#/components/schemas/SelfLink'
          maxItems: 1
          minItems: 1
          readOnly: true
          type: array
        address:
          description: The organization street address
          maxLength: 60
          type: string
        address2:
          description: The organization street address
          maxLength: 60
          type: string
        city:
          description: The organization city
          maxLength: 45
          type: string
        country:
          description: The organization country ISO Alpha-2 code
          pattern: '^[A-Z]{2}$'
          type: string
        createdTime:
          $ref: '#/components/schemas/ServerTimestamp'
        id:
          allOf:
            - $ref: '#/components/schemas/ResourceId'
          description: The organization identifier string
          readOnly: true
        name:
          description: The organization name
          maxLength: 60
          type: string
        postalCode:
          description: The organization postal code
          maxLength: 10
          type: string
        region:
          description: The organization region (state)
          maxLength: 45
          type: string
        updatedTime:
          allOf:
            - $ref: '#/components/schemas/ServerTimestamp'
          description: The organization updated time
      required:
        - name
        - country
      type: object
    OrganizationLink:
      allOf:
        - $ref: '#/components/schemas/NewLink'
      properties:
        rel:
          description: The link type
          enum:
            - organization
          type: string
      required:
        - rel
      type: object
    Other:
      allOf:
        - $ref: '#/components/schemas/eMerchantPayMpis'
        - $ref: '#/components/schemas/PayvisionMpis'
        - $ref: '#/components/schemas/VantivLitleMpis'
        - $ref: '#/components/schemas/WalpayMpis'
        - $ref: '#/components/schemas/WorldpayMpis'
      description: Other
    PandaGateway:
      allOf:
        - $ref: '#/components/schemas/GatewayAccount'
        - properties:
            gatewayConfig:
              properties:
                apiCode:
                  description: Panda Gateway api code
                  type: string
                merchantCode:
                  description: Panda Gateway merchant code
                  type: string
                signKey:
                  description: Panda Gateway sign key
                  format: password
                  type: string
              required:
                - merchantCode
                - apiCode
                - signKey
              type: object
          required:
            - gatewayConfig
          type: object
      description: Panda Gateway config
    ParentTransactionLink:
      allOf:
        - $ref: '#/components/schemas/NewLink'
      properties:
        rel:
          description: The link type
          enum:
            - parentTransaction
          type: string
      required:
        - rel
      type: object
    PayPal:
      allOf:
        - $ref: '#/components/schemas/GatewayAccount'
        - properties:
            gatewayConfig:
              properties:
                merchantIdInPayPal:
                  description: PayPal Gateway merchant id
                  type: string
                redirectUrl:
                  description: PayPal Gateway redirect url
                  format: url
                  type: string
              required:
                - merchantIdInPayPal
                - redirectUrl
              type: object
          required:
            - gatewayConfig
          type: object
      description: PayPal Gateway config
    PayPalAccount:
      properties:
        _links:
          description: The links related to resource
          items:
            $ref: '#/components/schemas/SelfLink'
          maxItems: 1
          minItems: 1
          readOnly: true
          type: array
        billingAddress:
          allOf:
            - $ref: '#/components/schemas/ContactObject'
          description: Billing Address. Required if PayPal account is not created from Token
        createdTime:
          allOf:
            - $ref: '#/components/schemas/ServerTimestamp'
          description: PayPal Account created time
        customFields:
          $ref: '#/components/schemas/ResourceCustomFields'
        customerId:
          allOf:
            - $ref: '#/components/schemas/ResourceId'
          description: The Customer's ID.
        id:
          allOf:
            - $ref: '#/components/schemas/ResourceId'
          description: The PayPal identifier string
          readOnly: true
        status:
          description: PayPal Account status
          enum:
            - inactive
            - active
            - deactivated
          type: string
        updatedTime:
          allOf:
            - $ref: '#/components/schemas/ServerTimestamp'
          description: PayPal Account updated time
        username:
          description: PayPal username.
          type: string
      type: object
    Payeezy:
      allOf:
        - $ref: '#/components/schemas/GatewayAccount'
        - properties:
            gatewayConfig:
              properties:
                apiKey:
                  description: API Key
                  type: string
                apiSecret:
                  description: API Secret
                  format: password
                  type: string
                merchantId:
                  description: Payeezy Merchant ID
                  type: string
                merchantToken:
                  description: Merchant Token
                  format: password
                  type: string
              required:
                - merchantId
                - merchantToken
                - apiKey
                - apiSecret
              type: object
          required:
            - gatewayConfig
          type: object
      description: Payeezy Gateway config
    Payflow:
      allOf:
        - $ref: '#/components/schemas/GatewayAccount'
        - properties:
            gatewayConfig:
              description: Payflow credentials object
              properties:
                password:
                  description: The password you defined while registering for the account.
                  format: password
                  type: string
                user:
                  description: 'If you set up one or more additional users on the account, this value is the ID of the user authorized to process transactions. If, however, you have not set up additional users, USER has the same value as VENDOR'
                  type: string
                vendor:
                  description: Your merchant login ID created when you registered for the account.
                  type: string
              required:
                - user
                - vendor
                - password
              type: object
          required:
            - gatewayConfig
          type: object
      description: Payflow config
    Payment:
      properties:
        _links:
          description: The links related to resource
          items:
            anyOf:
              - $ref: '#/components/schemas/SelfLink'
              - $ref: '#/components/schemas/WebsiteLink'
              - $ref: '#/components/schemas/TransactionLink'
              - $ref: '#/components/schemas/ApprovalUrlLink'
              - $ref: '#/components/schemas/LeadSourceLink'
          maxItems: 4
          minItems: 1
          readOnly: true
          type: array
        amount:
          description: The payment amount
          format: double
          type: integer
        billingAddress:
          allOf:
            - $ref: '#/components/schemas/ContactObject'
          description: Billing Address
        createdBy:
          description: The process that created this payment
          type: string
        createdTime:
          allOf:
            - $ref: '#/components/schemas/ServerTimestamp'
          description: Payment created time
        currency:
          description: The payment currency ISO Alpha code
          type: string
        customFields:
          $ref: '#/components/schemas/ResourceCustomFields'
        customerId:
          allOf:
            - $ref: '#/components/schemas/ResourceId'
          description: The customer identifier string
        description:
          description: The payment description
          maxLength: 255
          type: string
        id:
          allOf:
            - $ref: '#/components/schemas/ResourceId'
          description: The payment identifier string
          readOnly: true
        invoiceIds:
          description: The array of invoice identifiers
          items:
            $ref: '#/components/schemas/ResourceId'
          type: array
        paymentInstrument:
          $ref: '#/components/schemas/PaymentInstrument'
        result:
          description: Payment result
          enum:
            - approved
            - declined
            - canceled
            - unknown
          readOnly: true
          type: string
        retriedPaymentId:
          allOf:
            - $ref: '#/components/schemas/ResourceId'
          description: The retried payment ID
          readOnly: true
        retryInstruction:
          $ref: '#/components/schemas/PaymentRetry'
        retryNumber:
          description: The position in the sequence of retries
          readOnly: true
          type: integer
        scheduledTime:
          description: The time the payment is scheduled for collection
          format: date-time
          type: string
        status:
          description: Payment status
          enum:
            - scheduled
            - queued
            - in-progress
            - incomplete
            - waiting-gateway
            - suspended
            - completed
          readOnly: true
          type: string
        updatedBy:
          description: The process that updated this payment
          type: string
        updatedTime:
          allOf:
            - $ref: '#/components/schemas/ServerTimestamp'
          description: Payment updated time
        websiteId:
          allOf:
            - $ref: '#/components/schemas/ResourceId'
          description: The website identifier string
      required:
        - websiteId
        - customerId
        - currency
        - amount
      type: object
    PaymentCard:
      properties:
        _links:
          description: The links related to resource
          items:
            anyOf:
              - $ref: '#/components/schemas/SelfLink'
              - $ref: '#/components/schemas/CustomerLink'
              - $ref: '#/components/schemas/BillingContactLink'
          maxItems: 3
          minItems: 1
          readOnly: true
          type: array
        bankCountry:
          description: Payment Card bank country
          readOnly: true
          type: string
        bankName:
          description: Payment Card bank name
          readOnly: true
          type: string
        billingAddress:
          allOf:
            - $ref: '#/components/schemas/ContactObject'
          description: The Billing Address. Required if card is creating not from Token
        bin:
          description: The card's bin (the PAN's first 6 digits)
          format: bin
          readOnly: true
          type: string
        brand:
          description: Payment Card brand
          enum:
            - Visa
            - MasterCard
            - American Express
            - Discover
            - Maestro
            - Solo
            - Electron
            - JCB
            - Voyager
            - Diners Club
            - Switch
            - Laser
            - China UnionPay
          readOnly: true
          type: string
        createdTime:
          allOf:
            - $ref: '#/components/schemas/ServerTimestamp'
          description: Card created time
        customFields:
          $ref: '#/components/schemas/ResourceCustomFields'
        customerId:
          allOf:
            - $ref: '#/components/schemas/ResourceId'
          description: The Customer's ID. Required if card is creating not from Token
        cvv:
          description: Card's cvv (card verification value). Required if card is creating not from Token
          type: string
        expMonth:
          description: Card's expiry month. Required if card is creating not from Token
          type: integer
        expYear:
          description: Card's expiry year. Required if card is creating not from Token
          type: integer
        id:
          allOf:
            - $ref: '#/components/schemas/ResourceId'
          description: The card identifier string
          readOnly: true
        last4:
          description: The PAN's last 4 digits
          readOnly: true
          type: string
        pan:
          description: The card PAN (Primary Account Number). Required if card is creating not from Token
          type: string
        safeHash:
          description: The card's hash. Based on bin and last 4 digits of the PAN
          readOnly: true
          type: string
        status:
          description: Payment Card status
          enum:
            - active
            - expired
            - inactive
            - deactivated
            - pending
          readOnly: true
          type: string
        token:
          description: PaymentCardToken. Use without any other fields
          type: string
        updatedTime:
          allOf:
            - $ref: '#/components/schemas/ServerTimestamp'
          description: Card updated time
      type: object
    PaymentCardLink:
      allOf:
        - $ref: '#/components/schemas/NewLink'
      properties:
        rel:
          description: The link type
          enum:
            - paymentCard
          type: string
      required:
        - rel
      type: object
    PaymentCardMigrationRequest:
      properties:
        fromGatewayAccountId:
          allOf:
            - $ref: '#/components/schemas/ResourceId'
          description: An ID of Gateway Account cards should be migrated from
        paymentCardIds:
          items:
            allOf:
              - $ref: '#/components/schemas/ResourceId'
            description: An array of payment card IDs
          minItems: 1
          type: array
        toGatewayAccountId:
          allOf:
            - $ref: '#/components/schemas/ResourceId'
          description: An ID of Gateway Account cards should be migrated to
      required:
        - fromGatewayAccountId
        - toGatewayAccountId
        - paymentCardIds
      type: object
    PaymentCardMigrationResponse:
      properties:
        migratedCards:
          description: Amount of cards that were successfully migrated
          type: integer
      type: object
    PaymentInstrument:
      discriminator:
        propertyName: method
      properties:
        method:
          $ref: '#/components/schemas/Method'
      required:
        - method
      type: object
    PaymentLink:
      allOf:
        - $ref: '#/components/schemas/NewLink'
      properties:
        rel:
          description: The link type
          enum:
            - payment
          type: string
      required:
        - rel
      type: object
    PaymentRetry:
      properties:
        afterAttemptPolicy:
          description: The policy on the attempt finishes
          enum:
            - none
            - change-subscription-renewal-time
          type: string
        afterRetryEndPolicy:
          description: The policy on the retry ends
          enum:
            - none
            - cancel-subscription
          type: string
        attempts:
          items:
            properties:
              paymentInstruction:
                $ref: '#/components/schemas/AmountAdjustment'
              scheduleInstruction:
                $ref: '#/components/schemas/CommonScheduleInstruction'
            required:
              - scheduleInstruction
              - paymentInstruction
            type: object
          minItems: 1
          type: array
      required:
        - attempts
        - afterAttemptPolicy
        - afterRetryEndPolicy
      type: object
    PaymentToken:
      properties:
        _links:
          description: The links related to resource
          items:
            $ref: '#/components/schemas/SelfLink'
          maxItems: 1
          minItems: 1
          readOnly: true
          type: array
        billingAddress:
          allOf:
            - $ref: '#/components/schemas/ContactObject'
          description: The Address. Required if bank account is not created from Token
        fingerprint:
          description: Device fingerprint hash
          type: string
        id:
          allOf:
            - $ref: '#/components/schemas/ResourceId'
          description: The token identifier string
          readOnly: true
        method:
          $ref: '#/components/schemas/Method'
        paymentInstrument:
          $ref: '#/components/schemas/PaymentTokenInstrument'
      required:
        - method
        - paymentInstrument
      type: object
    PaymentTokenInstrument:
      description: Payment Token instrument object
      properties:
        accountNumber:
          description: AccountNumber
          type: integer
        accountType:
          description: Account Type
          type: string
        bankName:
          description: Bank name
          type: string
        cvv:
          description: The CVV/CVC of the payment card
          type: string
        expMonth:
          description: Card's expiry month
          type: integer
        expYear:
          description: Card's expiry year
          type: integer
        pan:
          description: The card PAN (Primary Account Number)
          type: string
        routingNumber:
          description: Routing Number
          type: integer
      type: object
    Payr:
      allOf:
        - $ref: '#/components/schemas/GatewayAccount'
        - properties:
            gatewayConfig:
              properties:
                clientId:
                  description: Payr Gateway client ID
                  type: string
                secretWord:
                  description: Payr Gateway secret word
                  format: password
                  type: string
              required:
                - clientId
                - secretWord
              type: object
          required:
            - gatewayConfig
          type: object
      description: Payr Gateway config
    Payvision:
      allOf:
        - $ref: '#/components/schemas/GatewayAccount'
        - properties:
            gatewayConfig:
              properties:
                avs:
                  description: Payvision Gateway avs
                  type: boolean
                delay:
                  description: Payvision Gateway delay
                  type: integer
                memberGuid:
                  description: Payvision Gateway member guid
                  format: password
                  type: string
                memberId:
                  description: Payvision Gateway member id
                  type: string
              required:
                - memberId
                - memberGuid
                - avs
                - delay
              type: object
            mpi:
              $ref: '#/components/schemas/PayvisionMpis'
          required:
            - gatewayConfig
          type: object
      description: Payvision Gateway config
    PayvisionMpi:
      allOf:
        - $ref: '#/components/schemas/PayvisionMpis'
      description: Payvision Integrated
    PayvisionMpis:
      description: Payvision Mpis
      discriminator:
        propertyName: name
      properties:
        name:
          allOf:
            - $ref: '#/components/schemas/MpiName'
          enum:
            - PayvisionMpi
            - CardinalCommerce
            - Other
      required:
        - name
    Plan:
      properties:
        _links:
          description: The links related to resource
          items:
            $ref: '#/components/schemas/SelfLink'
          maxItems: 1
          minItems: 1
          readOnly: true
          type: array
        contractTermLength:
          description: The length that corresponds with the contractTermUnit
          type: integer
        contractTermUnit:
          description: The unit of time
          enum:
            - day
            - week
            - month
            - year
          type: string
        createdTime:
          allOf:
            - $ref: '#/components/schemas/ServerTimestamp'
          description: Plan created time
        currency:
          description: Currency (three letter ISO 4217 code)
          type: string
        currencySign:
          description: Currency sign
          type: string
        description:
          description: The plan description
          type: string
        expiredTime:
          description: Time when the plan is not longer valid
          format: date-time
          type: string
        id:
          allOf:
            - $ref: '#/components/schemas/ResourceId'
          description: The website identifier string
          readOnly: true
        isActive:
          description: 'If the plan is not active, customers cannot subscribe to the plan (default to true)'
          type: boolean
        maxQuantity:
          description: Maximum quantity per order (NULL if no maximum)
          type: integer
        minQuantity:
          description: 'Minimum quantity per order, defaults to 1'
          type: integer
        name:
          description: The plan name
          type: string
        recurringAmount:
          description: The amount that recurs according to the schedule
          format: double
          type: number
        recurringPeriodLength:
          description: The length of time (used with the recurringPeriodUnit)
          type: integer
        recurringPeriodLimit:
          description: The number of times a subscription will rebill until the contract is over
          type: integer
        recurringPeriodUnit:
          description: The unit of time
          enum:
            - day
            - week
            - month
            - year
          type: string
        richDescription:
          description: The plan rich description - supports HTML
          type: string
        setupAmount:
          description: The amount of a trial - 0 is a valid value (for free)
          format: double
          type: number
        trialAmount:
          description: The amount of a trial - 0 is a valid value (for free)
          format: double
          type: number
        trialPeriodLength:
          description: The length of time (used with the trialPeriodUnit)
          type: integer
        trialPeriodUnit:
          description: The unit of time
          enum:
            - day
            - week
            - month
            - year
          type: string
        updatedTime:
          allOf:
            - $ref: '#/components/schemas/ServerTimestamp'
          description: Plan updated time
      required:
        - name
        - currency
      type: object
    PlanLink:
      allOf:
        - $ref: '#/components/schemas/NewLink'
      properties:
        rel:
          description: The link type
          enum:
            - plan
          type: string
      required:
        - rel
      type: object
    Plugnpay:
      allOf:
        - $ref: '#/components/schemas/GatewayAccount'
        - properties:
            gatewayConfig:
              properties:
                publisher-name:
                  description: Plugnpay Gateway member id
                  type: string
                publisher-password:
                  description: Plugnpay Gateway avs
                  format: password
                  type: string
              required:
                - publisher-name
                - publisher-password
              type: object
          required:
            - gatewayConfig
          type: object
      description: Plugnpay Gateway config
    PriceBasedShippingRate:
      properties:
        _links:
          description: The links related to resource
          items:
            $ref: '#/components/schemas/SelfLink'
          maxItems: 1
          minItems: 1
          readOnly: true
          type: array
        currency:
          description: Currency (three letter ISO 4217 code)
          type: string
        maxOrderSubtotal:
          description: Maximum order subtotal for which this shipping rate is applicable (NULL if no maximum)
          format: double
          type: number
        minOrderSubtotal:
          default: 0
          description: 'Minimum order subtotal for which this shipping rate is applicable, defaults to 0.00'
          format: double
          type: number
        name:
          description: The shipping rate name
          maxLength: 255
          type: string
        price:
          description: The shipping price - 0 is a valid value (for free)
          format: double
          type: number
      required:
        - name
        - currency
        - price
      type: object
    Product:
      description: |
        Your product includes digital goods, services, and physical goods.
        Products appear on invoice line items. If you set a tax category identifier,
        taxes will be calculated upon invoice generation.
      example: |
        {
          "id": "stringid",
          "name": "Widget",
          "description": "Fantastic widget",
          "taxCategoryId": null,
          "requiresShipping": true,
          "accountingCode": "100",
          "customFields": [],
          "createdTime": "2015-08-27 13:45:12",
          "updatedTime": "2015-08-27 13:45:12",
          "_links": [
              {
                "rel": "self",
                "href": "https://api.rebilly.com/v2.1/products/stringid"
              }
          ]
        }
      properties:
        _links:
          description: The links related to resource
          items:
            $ref: '#/components/schemas/SelfLink'
          maxItems: 1
          minItems: 1
          readOnly: true
          type: array
        accountingCode:
          description: The product accounting code
          type: string
        createdTime:
          allOf:
            - $ref: '#/components/schemas/ServerTimestamp'
          description: The product created time
        customFields:
          $ref: '#/components/schemas/ResourceCustomFields'
        description:
          description: The product description
          maxLength: 512
          type: string
        id:
          allOf:
            - $ref: '#/components/schemas/ResourceId'
          description: The product identifier string
          readOnly: true
        name:
          description: The product name
          maxLength: 255
          type: string
        requiresShipping:
          description: 'If the product requires shipping, shipping calculations will be applied'
          type: boolean
        taxCategoryId:
          description: The product's tax category identifier string
          enum:
            - 99999
            - 20010
            - 40030
            - 51020
            - 51010
            - 31000
            - 30070
          type: string
        updatedTime:
          allOf:
            - $ref: '#/components/schemas/ServerTimestamp'
          description: The product updated time
      required:
        - name
      type: object
    Profile:
      properties:
        availableCurrencies:
          description: An array of reporting currencies enabled for the merchant
          items:
            type: string
          readOnly: true
          type: array
        businessPhone:
          description: The user business phone number
          readOnly: true
          type: string
        country:
          description: The user country setting - two letter code
          readOnly: true
          type: string
        email:
          description: The user email
          format: email
          maxLength: 100
          readOnly: true
          type: string
        firstName:
          description: User's first name
          readOnly: true
          type: string
        id:
          allOf:
            - $ref: '#/components/schemas/ResourceId'
          description: The user identifier string
          readOnly: true
        lastName:
          description: User's last name
          readOnly: true
          type: string
        mobilePhone:
          description: The user mobile phone number
          readOnly: true
          type: string
        preferences:
          description: 'User preferences like timezone, language and many more. This is an object with custom properties.'
          type: object
        reportingCurrency:
          description: The user's ISO Alpha-3 code used for reports
          type: string
        totpRequired:
          description: The user setting of two-factor authentification
          readOnly: true
          type: boolean
        totpSecret:
          description: The user TOTP key for authentification app (if TOTP enabled)
          readOnly: true
          type: string
        totpUrl:
          description: The user link to QR-code for TOTP authentification app (if TOTP enabled)
          format: url
          readOnly: true
          type: string
      type: object
    RPN:
      allOf:
        - $ref: '#/components/schemas/GatewayAccount'
        - properties:
            gatewayConfig:
              properties:
                key:
                  description: RPN Key
                  format: password
                  type: string
                mid:
                  description: RPN MID
                  type: string
              required:
                - mid
                - key
              type: object
          required:
            - gatewayConfig
          type: object
      description: RPN Gateway config
    RealTime:
      allOf:
        - $ref: '#/components/schemas/GatewayAccount'
        - properties:
            gatewayConfig:
              properties:
                clientId:
                  description: RealTime Gateway client ID
                  type: string
                secretWord:
                  description: RealTime Gateway secret word
                  format: password
                  type: string
              required:
                - clientId
                - secretWord
              type: object
          required:
            - gatewayConfig
          type: object
      description: RealTime Gateway config
    Realex:
      allOf:
        - $ref: '#/components/schemas/GatewayAccount'
        - properties:
            gatewayConfig:
              properties:
                account:
                  description: Realex Gateway account
                  type: string
                merchantId:
                  description: Realex Gateway merchant id
                  type: string
                rebatePassword:
                  description: Realex Gateway rebate password
                  format: password
                  type: string
                secretKey:
                  description: Realex Gateway secret key
                  format: password
                  type: string
              required:
                - merchantId
                - secretKey
                - rebatePassword
                - account
              type: object
          required:
            - gatewayConfig
          type: object
      description: Realex Gateway config
    RebillyProcessor:
      allOf:
        - $ref: '#/components/schemas/GatewayAccount'
      description: RebillyProcessor Gateway config
    RedemptionRestriction:
      allOf:
        - $ref: '#/components/schemas/GenericRestriction'
        - properties:
            type:
              description: Redemption's additional restriction type
              enum:
                - discounts-per-redemption
                - restrict-to-invoices
                - restrict-to-plans
                - restrict-to-subscriptions
                - minimum-order-amount
              type: string
          type: object
      description: Redemption restrictions
      type: object
    RedirectUrls:
      description: The redirect URIs
      properties:
        cancel:
          format: url
          type: string
        decline:
          format: url
          type: string
        error:
          format: url
          type: string
        success:
          format: url
          type: string
      required:
        - error
        - success
        - decline
        - cancel
      type: object
    Redsys:
      allOf:
        - $ref: '#/components/schemas/GatewayAccount'
        - properties:
            gatewayConfig:
              properties:
                merchantCode:
                  description: Redsys Gateway merchant code
                  format: password
                  type: string
                secretCode:
                  description: Redsys Gateway secret code
                  format: password
                  type: string
              required:
                - merchantCode
                - secretCode
              type: object
          required:
            - gatewayConfig
          type: object
      description: Redsys Gateway config
    RefundUrlLink:
      allOf:
        - $ref: '#/components/schemas/NewLink'
      properties:
        rel:
          description: The link type
          enum:
            - refundUrl
          type: string
      required:
        - rel
      type: object
    ResetPassword:
      properties:
        newPassword:
          description: New password
          format: password
          type: string
      required:
        - newPassword
      type: object
    ResetPasswordToken:
      properties:
        _links:
          description: The links related to resource
          items:
            $ref: '#/components/schemas/SelfLink'
          maxItems: 1
          minItems: 1
          readOnly: true
          type: array
        credential:
          description: Token's credential ID
          type: string
        expiredTime:
          description: Password expired time
          format: date-time
          type: string
        password:
          description: Token's password (only for POST)
          format: password
          type: string
        token:
          description: The token's identifier string
          readOnly: true
          type: string
        username:
          description: The token's username
          type: string
      required:
        - username
        - password
      type: object
    ResourceCustomFields:
      description: |
        "Custom Fields list as a map `{"custom field name": "custom field value", ...}"`.
        The format must follow the saved format (see Custom Fields section for the formats).
      type: object
    ResourceId:
      description: The resource ID. Defaults to UUID v4
      example: 4f6cf35x-2c4y-483z-a0a9-158621f77a21
      maxLength: 50
      type: string
    RetriedTransactionLink:
      allOf:
        - $ref: '#/components/schemas/NewLink'
      properties:
        rel:
          description: The link type
          enum:
            - retriedTransaction
          type: string
      required:
        - rel
      type: object
    Rule:
      description: The rule
      properties:
        actions:
          items:
            $ref: '#/components/schemas/RuleAction'
          type: array
          uniqueItems: true
        criteria:
          $ref: '#/components/schemas/Condition'
        final:
          default: true
          description: 'Whether rule is final, meaning stop further matching rules if this is matched'
          type: boolean
        name:
          type: string
        status:
          $ref: '#/components/schemas/OnOff'
      required:
        - name
        - actions
      type: object
    RuleAction:
      discriminator:
        propertyName: name
      properties:
        name:
          description: The action name
          enum:
            - blacklist
            - cancel-scheduled-payments
            - guess-payment-card-expiration
            - pick-gateway-account
            - schedule-payment-retry
            - schedule-payment
            - send-email
            - trigger-webhook
            - stop-subscriptions
            - add-risk-score
          type: string
        status:
          $ref: '#/components/schemas/OnOff'
      required:
        - name
      type: object
    RuleSet:
      description: Set of rules for particular event
      properties:
        _links:
          description: The links related to resource
          items:
            $ref: '#/components/schemas/SelfLink'
          maxItems: 1
          minItems: 1
          readOnly: true
          type: array
        rules:
          items:
            $ref: '#/components/schemas/Rule'
          type: array
        updatedTime:
          $ref: '#/components/schemas/ServerTimestamp'
        version:
          readOnly: true
          type: integer
      required:
        - rules
      type: object
    RuleSetHistoryItem:
      description: Version of rules
      properties:
        _links:
          description: The links related to a resource
          items:
            anyOf:
              - $ref: '#/components/schemas/SelfLink'
              - $ref: '#/components/schemas/RuleSetVersionLink'
          maxItems: 2
          minItems: 2
          readOnly: true
          type: array
        createdTime:
          $ref: '#/components/schemas/ServerTimestamp'
        version:
          type: integer
      readOnly: true
      type: object
    RuleSetVersion:
      description: Version of rules
      properties:
        _links:
          description: The links related to resource
          items:
            $ref: '#/components/schemas/SelfLink'
          maxItems: 1
          minItems: 1
          readOnly: true
          type: array
        createdTime:
          $ref: '#/components/schemas/ServerTimestamp'
        rules:
          items:
            $ref: '#/components/schemas/Rule'
          type: array
        version:
          type: integer
      readOnly: true
      type: object
    RuleSetVersionLink:
      allOf:
        - $ref: '#/components/schemas/NewLink'
      properties:
        rel:
          description: The link type
          enum:
            - rules
          type: string
      required:
        - rel
      type: object
    SMSVoucher:
      allOf:
        - $ref: '#/components/schemas/GatewayAccount'
        - properties:
            gatewayConfig:
              properties:
                AppId:
                  description: SMSVoucher AppId
                  type: string
              required:
                - AppId
              type: object
          required:
            - gatewayConfig
          type: object
      description: SMSVoucher Gateway config
    Sagepay:
      allOf:
        - $ref: '#/components/schemas/GatewayAccount'
        - properties:
            gatewayConfig:
              properties:
                M_ID:
                  description: Sagepay Gateway merchant ID
                  type: string
                M_KEY:
                  description: Sagepay Gateway merchant key
                  format: password
                  type: string
              required:
                - M_ID
                - M_KEY
              type: object
          required:
            - gatewayConfig
          type: object
      description: Sagepay Gateway config
    SelfLink:
      allOf:
        - $ref: '#/components/schemas/NewLink'
      properties:
        rel:
          description: The link type
          enum:
            - self
          type: string
      required:
        - rel
      type: object
    SendPreviewWebhook:
      allOf:
        - $ref: '#/components/schemas/Webhook'
      description: Trigger a test webhook
    SendTestEmail:
      allOf:
        - $ref: '#/components/schemas/EmailNotification'
      description: Send a test email
    ServerTimestamp:
      description: 'Read-only timestamp, automatically assigned on back-end.'
      format: date-time
      readOnly: true
      type: string
    Session:
      properties:
        _links:
          description: The links related to resource
          items:
            $ref: '#/components/schemas/SelfLink'
          maxItems: 1
          minItems: 1
          readOnly: true
          type: array
        createdTime:
          allOf:
            - $ref: '#/components/schemas/ServerTimestamp'
          description: Session created time
        expiredTime:
          description: Session expired time. Defaults to one hour
          format: date-time
          type: string
        id:
          allOf:
            - $ref: '#/components/schemas/ResourceId'
          description: The session identifier string
          readOnly: true
        permissions:
          allOf:
            - $ref: '#/components/schemas/UserPermissions'
          description: The session's permissions. See the format in example
        token:
          description: The session's token used for authentication
          type: string
        updatedTime:
          allOf:
            - $ref: '#/components/schemas/ServerTimestamp'
          description: Session updated time
        userId:
          allOf:
            - $ref: '#/components/schemas/ResourceId'
          description: The user identifier string
          readOnly: true
      required:
        - permissions
      type: object
    ShippingZone:
      properties:
        _links:
          description: The links related to resource
          items:
            $ref: '#/components/schemas/SelfLink'
          maxItems: 1
          minItems: 1
          readOnly: true
          type: array
        countries:
          description: |
            Countries covered by the shipping zone. A country can only belong to one shipping zone (no overlapping).
            This property can be empty or null to create a default shipping zone for countries that were not specified in other zones.
          items:
            description: Country ISO Alpha-2 code
            pattern: '^[A-Z]{2}$'
            type: string
          type: array
        createdTime:
          allOf:
            - $ref: '#/components/schemas/ServerTimestamp'
          description: The shipping zone created time
        id:
          allOf:
            - $ref: '#/components/schemas/ResourceId'
          description: The shipping zone identifier string
          readOnly: true
        isDefault:
          description: Is this Shipping Zone default
          readOnly: true
        name:
          description: The shipping zone name
          maxLength: 255
          type: string
        rates:
          description: Price-based shipping rate instructions
          items:
            allOf:
              - $ref: '#/components/schemas/PriceBasedShippingRate'
            description: Price based shipping rate instruction
          type: array
        updatedTime:
          allOf:
            - $ref: '#/components/schemas/ServerTimestamp'
          description: The shipping zone updated time
      required:
        - name
      type: object
    Signin:
      properties:
        email:
          description: Email
          type: string
        expiredTime:
          description: Session expired time. Defaults to one hour
          format: date-time
          type: string
        password:
          description: Password
          format: password
          type: string
      required:
        - email
        - password
      type: object
    Signup:
      properties:
        businessPhone:
          description: The user business phone number
          type: string
        company:
          description: The user's company name
          type: string
        currencies:
          default:
            - USD
          description: An array of currencies codes
          items:
            description: 3 letters ISO 4217 currency code
            type: string
          type: array
        email:
          description: The user email
          format: email
          maxLength: 100
          type: string
        firstName:
          description: The user first name
          type: string
        lastName:
          description: The user last name
          type: string
        merchantCategoryCode:
          default: 5734
          description: Merchant category code. Defaults to "Computer Software Stores"
          type: integer
        password:
          description: The user password
          format: password
          type: string
        website:
          description: The user's website address
          type: string
      required:
        - email
        - company
        - firstName
        - lastName
        - businessPhone
        - password
        - website
      type: object
    SmtpAuthorization:
      discriminator:
        propertyName: type
      properties:
        type:
          default: none
          enum:
            - none
            - plain
            - login
            - cram-md5
          type: string
      type: object
    SmtpCredential:
      description: SMTP Credential
      properties:
        _links:
          description: The links related to resource
          items:
            $ref: '#/components/schemas/SelfLink'
          maxItems: 1
          minItems: 1
          readOnly: true
          type: array
        auth:
          $ref: '#/components/schemas/SmtpAuthorization'
        encryption:
          default: none
          description: The encryption value
          enum:
            - none
            - tls
            - ssl
          type: string
        hash:
          allOf:
            - $ref: '#/components/schemas/ResourceId'
          readOnly: true
        host:
          description: The host name
          type: string
        port:
          default: 25
          description: The port value
          maximum: 65535
          minimum: 1
          type: integer
      required:
        - host
      type: object
    Status:
      properties:
        status:
          description: The API status. If everything is ok - value is 'ok'
          enum:
            - ok
          readOnly: true
          type: string
        time:
          allOf:
            - $ref: '#/components/schemas/ServerTimestamp'
          description: Current time
      type: object
    Stripe:
      allOf:
        - $ref: '#/components/schemas/GatewayAccount'
        - properties:
            gatewayConfig:
              properties:
                redirectUrl:
                  description: Stripe Gateway redirect url
                  format: url
                  type: string
              required:
                - redirectUrl
              type: object
          required:
            - gatewayConfig
          type: object
      description: Stripe Gateway config
    Subscription:
      properties:
        _links:
          description: The links related to resource
          items:
            anyOf:
              - $ref: '#/components/schemas/SelfLink'
              - $ref: '#/components/schemas/CustomerLink'
              - $ref: '#/components/schemas/PlanLink'
              - $ref: '#/components/schemas/WebsiteLink'
              - $ref: '#/components/schemas/BillingContactLink'
              - $ref: '#/components/schemas/DeliveryContactLink'
              - $ref: '#/components/schemas/LeadSourceLink'
          maxItems: 6
          minItems: 1
          readOnly: true
          type: array
        activationTime:
          allOf:
            - $ref: '#/components/schemas/ServerTimestamp'
          description: Subscription activation time
        autopay:
          default: true
          description: Autopay determines if a payment attempt will be automatic
          type: boolean
        billingAddress:
          allOf:
            - $ref: '#/components/schemas/ContactObject'
          description: Billing address
        cancelCategory:
          description: Cancel category
          enum:
            - billing-failure
            - did-not-use
            - did-not-want
            - missing-features
            - bugs-or-problems
            - do-not-remember
            - risk-warning
            - contract-expired
            - too-expensive
            - never-started
            - switched-plan
            - other
          readOnly: true
          type: string
        cancelDescription:
          description: Cancel reason description in free form
          maxLength: 255
          readOnly: true
          type: string
        canceledBy:
          description: Canceled by
          enum:
            - merchant
            - customer
            - rebilly
          readOnly: true
          type: string
        canceledTime:
          allOf:
            - $ref: '#/components/schemas/ServerTimestamp'
          description: Subscription canceled time
        createdTime:
          allOf:
            - $ref: '#/components/schemas/ServerTimestamp'
          description: Subscription created time
        customFields:
          $ref: '#/components/schemas/ResourceCustomFields'
        customerId:
          allOf:
            - $ref: '#/components/schemas/ResourceId'
          description: Unique id for each customer
        deliveryAddress:
          allOf:
            - $ref: '#/components/schemas/ContactObject'
          description: Delivery address
        endTime:
          allOf:
            - $ref: '#/components/schemas/ServerTimestamp'
          description: Subscription end time
        id:
          allOf:
            - $ref: '#/components/schemas/ResourceId'
          description: The Subscription identifier string
          readOnly: true
        inTrial:
          description: True if the subscription is currently in a trial period
          readOnly: true
          type: boolean
        initialInvoiceId:
          allOf:
            - $ref: '#/components/schemas/ResourceId'
          description: Unique id for the initial invoice
        planId:
          allOf:
            - $ref: '#/components/schemas/ResourceId'
          description: Unique id for each plan
        quantity:
          description: Quantity for each subscription. Default value to 1
          type: integer
        rebillNumber:
          description: The current period number
          readOnly: true
          type: integer
        renewalTime:
          description: Subscription renewal time
          format: date-time
          type: string
        startTime:
          description: Subscription start time
          format: date-time
          type: string
        status:
          description: Subscription status
          readOnly: true
          type: string
        updatedTime:
          allOf:
            - $ref: '#/components/schemas/ServerTimestamp'
          description: Subscription updated time
        websiteId:
          allOf:
            - $ref: '#/components/schemas/ResourceId'
          description: Unique id for each website
      required:
        - customerId
        - planId
        - websiteId
      type: object
    SubscriptionCancel:
      properties:
        cancelCategory:
          description: Cancel category
          enum:
            - did-not-use
            - did-not-want
            - missing-features
            - bugs-or-problems
            - do-not-remember
            - risk-warning
            - contract-expired
            - too-expensive
            - other
          type: string
        cancelDescription:
          description: Cancel reason description in free form
          maxLength: 255
          type: string
        canceledBy:
          description: Canceled by
          enum:
            - merchant
            - customer
          type: string
        policy:
          description: Cancel policy
          enum:
            - at-next-renewal
            - now-with-prorata-credit
            - now
          type: string
      required:
        - policy
        - canceledBy
        - cancelCategory
      type: object
    SubscriptionLink:
      allOf:
        - $ref: '#/components/schemas/NewLink'
      properties:
        rel:
          description: The link type
          enum:
            - subscription
          type: string
      required:
        - rel
      type: object
    SubscriptionSwitch:
      properties:
        planId:
          allOf:
            - $ref: '#/components/schemas/ResourceId'
          description: The plan identifier string
        policy:
          description: Switch policy
          enum:
            - at-next-renewal
            - now-with-prorata-credit
            - now
          type: string
        quantity:
          description: Quantity for each subscription. Default value to 1
          type: integer
        websiteId:
          allOf:
            - $ref: '#/components/schemas/ResourceId'
          description: The website's ID
      required:
        - planId
        - policy
      type: object
    SubscriptionTracking:
      description: Tracking subscription log
      properties:
        _links:
          description: The links related to resource
          items:
            $ref: '#/components/schemas/SelfLink'
          maxItems: 1
          minItems: 1
          readOnly: true
          type: array
        createdTime:
          allOf:
            - $ref: '#/components/schemas/ServerTimestamp'
          description: The log created time
        id:
          allOf:
            - $ref: '#/components/schemas/ResourceId'
        invoiceItemId:
          allOf:
            - $ref: '#/components/schemas/ResourceId'
        message:
          description: It contains the transaction number and renewal time
          type: string
        result:
          description: Subscription's result
          enum:
            - created
            - postponed
            - stopped
            - error
          type: string
        subscriptionId:
          allOf:
            - $ref: '#/components/schemas/ResourceId'
      readOnly: true
      type: object
    SystemEvent:
      description: The application event
      properties:
        _links:
          description: The links related to resource
          items:
            $ref: '#/components/schemas/SelfLink'
          maxItems: 1
          minItems: 1
          readOnly: true
          type: array
        description:
          type: string
        eventType:
          $ref: '#/components/schemas/EventType'
        rulesCount:
          readOnly: true
          type: integer
        title:
          type: string
      readOnly: true
      type: object
    TaxCategory:
      properties:
        _links:
          description: The links related to resource
          items:
            $ref: '#/components/schemas/SelfLink'
          maxItems: 1
          minItems: 1
          readOnly: true
          type: array
        description:
          description: The tax category description
          maxLength: 512
          type: string
        id:
          description: The tax category identifier string
          enum:
            - 99999
            - 20010
            - 40030
            - 51020
            - 51010
            - 31000
            - 30070
          maxLength: 50
          readOnly: true
          type: string
        taxProvider:
          description: The tax category maps to a provider
          enum:
            - tax-jar
          type: string
      type: object
    ThreeDSecure:
      properties:
        _links:
          description: The links related to resource
          items:
            $ref: '#/components/schemas/SelfLink'
          maxItems: 1
          minItems: 1
          readOnly: true
          type: array
        amount:
          description: Transaction amount
          format: double
          type: number
        cavv:
          description: The 3D Secure entry cardholder authentication verification value
          type: string
        createdTime:
          allOf:
            - $ref: '#/components/schemas/ServerTimestamp'
          description: The 3D Secure entry created time
        currency:
          description: The currency three letter code
          type: string
        customerId:
          allOf:
            - $ref: '#/components/schemas/ResourceId'
          description: Related customer ID
        eci:
          description: The 3D Secure entry electronic commerce indicator
          type: integer
        enrolled:
          description: Is the cardholder enrolled in 3DSecure
          enum:
            - 'Y'
            - 'N'
            - U
          type: string
        enrollmentEci:
          description: The 3D Secure entry enrollment eci
          type: string
        gatewayAccountId:
          allOf:
            - $ref: '#/components/schemas/ResourceId'
          description: Related gateway account ID
        id:
          allOf:
            - $ref: '#/components/schemas/ResourceId'
          description: The 3D Secure entry identifier string
          readOnly: true
        payerAuthResponseStatus:
          description: The 3D Secure entry Auth Response Status
          enum:
            - 'Y'
            - 'N'
            - U
            - A
          type: string
        paymentCardId:
          allOf:
            - $ref: '#/components/schemas/ResourceId'
          description: Related payment card ID
        signatureVerification:
          description: If signature was verified
          enum:
            - 'Y'
            - 'N'
          type: string
        websiteId:
          allOf:
            - $ref: '#/components/schemas/ResourceId'
          description: Related Website ID
        xid:
          description: The 3D Secure entry transaction Id
          type: string
      required:
        - enrolled
        - enrollmentEci
        - customerId
        - gatewayAccountId
        - paymentCardId
        - websiteId
        - currency
        - amount
      type: object
    ThreeDSecureResult:
      properties:
        authenticated:
          description: The 3D Secure entry Auth Response Status
          enum:
            - 'yes'
            - 'no'
            - not applicable
            - attempted
          type: string
        enrolled:
          description: Is the cardholder enrolled in 3D Secure
          enum:
            - 'yes'
            - 'no'
            - invalid card/timeout
            - unavailable
          type: string
        liability:
          enum:
            - protected
            - not protected
            - protected (attempt)
          type: string
      readOnly: true
      required:
        - enrolled
        - authenticated
        - liability
      type: object
    Time:
      format: date-time
      pattern: '^([0-9]|0[0-9]|1[0-9]|2[0-3]):[0-5][0-9]:[0-5][0-9](Z(\+|\-)([0-9]|0[0-9]|1[0-9]|2[0-3]):[0-5][0-9])?$'
      type: string
    TimeUnit:
      enum:
        - second
        - seconds
        - minute
        - minutes
        - hour
        - hours
        - day
        - days
        - month
        - months
        - year
        - years
      type: string
    Transaction:
      properties:
        3ds:
          allOf:
            - $ref: '#/components/schemas/ThreeDSecureResult'
        _links:
          description: The links related to resource
          items:
            anyOf:
              - $ref: '#/components/schemas/SelfLink'
              - $ref: '#/components/schemas/GatewayAccountLink'
              - $ref: '#/components/schemas/CustomerLink'
              - $ref: '#/components/schemas/WebsiteLink'
              - $ref: '#/components/schemas/PaymentCardLink'
              - $ref: '#/components/schemas/ParentTransactionLink'
              - $ref: '#/components/schemas/RetriedTransactionLink'
              - $ref: '#/components/schemas/BillingContactLink'
              - $ref: '#/components/schemas/LeadSourceLink'
              - $ref: '#/components/schemas/ApprovalUrlLink'
              - $ref: '#/components/schemas/CancelUrlLink'
              - $ref: '#/components/schemas/RefundUrlLink'
          maxItems: 12
          minItems: 1
          readOnly: true
          type: array
        acquirerName:
          description: 'Acquirer name, available only when transaction use gateway, else null'
          readOnly: true
          type: string
        amount:
          description: The transactions's amount
          format: double
          readOnly: true
          type: number
        billingAddress:
          allOf:
            - $ref: '#/components/schemas/ContactObject'
          description: Billing Address
        bin:
          description: Payment Card BIN
          format: bin
          readOnly: true
          type: string
        childTransactions:
          description: The child transaction IDs
          items:
            $ref: '#/components/schemas/ResourceId'
          readOnly: true
          type: array
        createdTime:
          allOf:
            - $ref: '#/components/schemas/ServerTimestamp'
          description: Transaction created time
        currency:
          description: The transactions's currency
          readOnly: true
          type: string
        customFields:
          $ref: '#/components/schemas/ResourceCustomFields'
        customerId:
          allOf:
            - $ref: '#/components/schemas/ResourceId'
          description: Customer's ID
          readOnly: true
        dcc:
          description: Dynamic Currency Conversion detailed information. Null if hasDcc is false
          properties:
            base:
              description: Initial amount and currency to convert from
              properties:
                amount:
                  format: double
                  type: number
                currency:
                  type: string
              type: object
            outcome:
              description: Dynamic Currency Conversion outcome
              enum:
                - rejected
                - selected
                - unknown
              type: string
            quote:
              description: Suggested amount and currency to convert to
              properties:
                amount:
                  format: double
                  type: number
                currency:
                  type: string
              type: object
            usdMarkup:
              description: The amount of markup translated to USD
              format: double
              type: number
          readOnly: true
          type: object
        description:
          description: The payment description
          maxLength: 255
          type: string
        gateway:
          description: The related gateway information
          properties:
            avsResponse:
              description: The AVS gateway's response
              properties:
                code:
                  description: The raw response code
                  type: string
                message:
                  description: The raw response message
                  type: string
              type: object
            cvvResponse:
              description: The CVV gateway's response
              properties:
                code:
                  description: The raw response code
                  type: string
                message:
                  description: The raw response message
                  type: string
              type: object
            response:
              description: The gateway's response
              properties:
                code:
                  description: The gateway's response code
                  type: string
                message:
                  description: The gateway's response message
                  type: string
                originalCode:
                  description: 'The raw, unmapped gateway''s response code'
                  type: string
                originalMessage:
                  description: 'The raw, unmapped gateway''s response message'
                  type: string
                type:
                  description: The gateway's response type
                  type: string
              type: object
          readOnly: true
          type: object
        gatewayAccountId:
          allOf:
            - $ref: '#/components/schemas/ResourceId'
          description: The transactions's Gateway Account ID
          readOnly: true
        gatewayName:
          description: 'Payment Gateway name, available only when transaction use gateway, else null'
          readOnly: true
          type: string
        gatewayTransactionId:
          allOf:
            - $ref: '#/components/schemas/ResourceId'
          description: The gateway's transaction ID
          readOnly: true
        has3ds:
          readOnly: true
          type: boolean
        hasDcc:
          description: True if transaction has Dynamic Currency Conversion applied
          readOnly: true
          type: boolean
        id:
          allOf:
            - $ref: '#/components/schemas/ResourceId'
          description: The transaction identifier string
          readOnly: true
        invoiceIds:
          description: The invoice IDs related to transaction
          items:
            $ref: '#/components/schemas/ResourceId'
          readOnly: true
          type: array
        isRebill:
          readOnly: true
          type: boolean
        method:
          allOf:
            - $ref: '#/components/schemas/Method'
          description: Payment Method
        parentTransactionId:
          allOf:
            - $ref: '#/components/schemas/ResourceId'
          description: The transactions's parent ID
          readOnly: true
        paymentInstrument:
          $ref: '#/components/schemas/PaymentInstrument'
        processedTime:
          allOf:
            - $ref: '#/components/schemas/ServerTimestamp'
          description: Transaction processed time
        rebillNumber:
          description: The transactions's rebill number
          readOnly: true
          type: integer
        redirectUrls:
          $ref: '#/components/schemas/RedirectUrls'
        result:
          description: Transaction result
          enum:
            - approved
            - canceled
            - declined
            - unknown
          readOnly: true
          type: string
        retriedTransactionId:
          allOf:
            - $ref: '#/components/schemas/ResourceId'
          description: The retried transaction ID
          readOnly: true
        retryInstruction:
          $ref: '#/components/schemas/PaymentRetry'
        retryNumber:
          description: The position in the sequence of retries
          readOnly: true
          type: integer
        riskScore:
          description: The transactions's risk score
          format: integer
          readOnly: true
          type: number
        scheduledTime:
          description: The time the transaction is scheduled for collection
          format: date-time
          type: string
        status:
          description: Transaction status
          enum:
            - completed
            - connection-error
            - never-sent
            - pending
            - sending
            - suspended
            - timeout
            - waiting-capture
            - waiting-refund
          readOnly: true
          type: string
        subscriptionIds:
          description: The subscription IDs related to transaction
          items:
            $ref: '#/components/schemas/ResourceId'
          readOnly: true
          type: array
        type:
          description: Transaction type
          enum:
            - authorize
            - capture
            - credit
            - refund
            - sale
            - void
          readOnly: true
          type: string
        updatedTime:
          allOf:
            - $ref: '#/components/schemas/ServerTimestamp'
          description: Transaction updated time
        velocity:
          description: The number of transactions by the same customer in the past 24 hours
          format: integer
          type: number
        websiteId:
          allOf:
            - $ref: '#/components/schemas/ResourceId'
          description: Website's ID
          readOnly: true
      type: object
    TransactionGatewayLog:
      properties:
        _links:
          description: The links related to resource
          items:
            $ref: '#/components/schemas/TransactionLink'
          maxItems: 1
          minItems: 1
          type: array
        createdTime:
          allOf:
            - $ref: '#/components/schemas/ServerTimestamp'
          description: The log entry created time
        duration:
          description: 'The request time, msec'
          type: integer
        headers:
          description: The request headers
          items:
            type: string
          type: array
        request:
          description: The request body
          type: string
        response:
          description: The response body
          type: string
        url:
          description: The request URL
          type: string
      readOnly: true
      type: object
    TransactionLink:
      allOf:
        - $ref: '#/components/schemas/NewLink'
      properties:
        rel:
          description: The link type
          enum:
            - transaction
          type: string
      required:
        - rel
      type: object
    TransactionRefund:
      properties:
        amount:
          description: Refund amount
          format: double
          type: number
      required:
        - amount
      type: object
    UPayCard:
      allOf:
        - $ref: '#/components/schemas/GatewayAccount'
        - properties:
            gatewayConfig:
              properties:
                key:
                  description: merchant key
                  format: password
                  type: string
                receiver_account:
                  description: merchant receiver account
                  type: string
                secret:
                  description: merchant secret
                  format: password
                  type: string
              required:
                - receiver_account
                - key
                - secret
              type: object
          required:
            - gatewayConfig
          type: object
      description: UPayCard Gateway config
    USAePay:
      allOf:
        - $ref: '#/components/schemas/GatewayAccount'
        - properties:
            gatewayConfig:
              properties:
                pin:
                  description: USAePay Gateway pin
                  format: password
                  type: string
                sourceKey:
                  description: USAePay Gateway source key
                  format: password
                  type: string
              required:
                - sourceKey
                - pin
              type: object
          required:
            - gatewayConfig
          type: object
      description: USAePay Gateway config
    UpdatePassword:
      properties:
        currentPassword:
          description: Current user's password - used when requesting password change
          format: password
          type: string
        newPassword:
          description: New user's password - used when requesting password change
          format: password
          type: string
      type: object
    User:
      properties:
        _links:
          description: The links related to resource
          items:
            $ref: '#/components/schemas/SelfLink'
          maxItems: 1
          minItems: 1
          readOnly: true
          type: array
        availableCurrencies:
          description: An array of reporting currencies enabled for the merchant
          items:
            type: string
          readOnly: true
          type: array
        businessPhone:
          description: The user business phone number
          type: string
        country:
          description: The user country setting - two letter code
          type: string
        createdTime:
          allOf:
            - $ref: '#/components/schemas/ServerTimestamp'
          description: The user created time
        email:
          description: The user email
          format: email
          maxLength: 100
          type: string
        firstName:
          description: User's first name
          type: string
        id:
          allOf:
            - $ref: '#/components/schemas/ResourceId'
          description: The user identifier string
          readOnly: true
        lastName:
          description: User's last name
          type: string
        loginTime:
          allOf:
            - $ref: '#/components/schemas/ServerTimestamp'
          description: The user last login time
        mobilePhone:
          description: The user mobile phone number
          type: string
        password:
          description: 'User''s password. If not provided, password reset email will be sent'
          format: password
          type: string
        permissions:
          allOf:
            - $ref: '#/components/schemas/UserPermissions'
          description: The user's permissions. See the format in example
        preferences:
          description: 'User preferences like timezone, language and many more. This is an object with custom properties.'
          type: object
        reportingCurrency:
          description: The user's ISO Alpha-3 code used for reports
          type: string
        status:
          description: The user status
          enum:
            - active
            - inactive
            - pending-confirmation
          readOnly: true
          type: string
        totpRequired:
          description: The user setting of two-factor authentification
          type: boolean
        totpSecret:
          description: The user TOTP key for authentification app (if TOTP enabled)
          type: string
        totpUrl:
          description: The user link to QR-code for TOTP authentification app (if TOTP enabled)
          format: url
          type: string
        updatedTime:
          allOf:
            - $ref: '#/components/schemas/ServerTimestamp'
          description: The user updated time
      required:
        - email
        - firstName
        - lastName
      type: object
    UserPasswordAuthorization:
      properties:
        password:
          format: password
          type: string
        username:
          type: string
      required:
        - username
        - password
      type: object
    UserPermissions:
      example:
        - methods:
            - GET
            - POST
            - PUT
            - HEAD
            - DELETE
          resourceName: plans
        - methods:
            - GET
            - HEAD
          resourceIds:
            - 4f6cf35x-2c4y-483z-a0a9-158621f77a21
            - 1586f35x-4f6c-483z-a0a9-2c4y21f77a21
          resourceName: invoices
        - {}
      items:
        properties:
          methods:
            items:
              enum:
                - HEAD
                - GET
                - POST
                - PUT
                - DELETE
                - PATCH
              type: string
            minItems: 1
            type: array
          resourceIds:
            items:
              $ref: '#/components/schemas/ResourceId'
            type: array
          resourceName:
            enum:
              - 3dsecure
              - api-keys
              - api-tracking
              - authentication-options
              - authentication-tokens
              - bank-accounts
              - blacklists
              - checkout-pages
              - contacts
              - coupons
              - coupons-redemptions
              - credentials
              - custom-events
              - custom-fields
              - customers
              - disputes
              - events
              - gateway-accounts
              - invoices
              - layouts
              - lead-sources
              - lists
              - matched-rules
              - notes
              - oct-batch
              - organizations
              - password-tokens
              - payments
              - payment-cards
              - payment-cards-migrations
              - paypal-accounts
              - plans
              - reports
              - reset-sandbox
              - rulesets
              - sessions
              - subscriptions
              - subscription-tracking
              - tokens
              - transactions
              - users
              - webhook
              - webhook-tracking
              - websites
            type: string
        type: object
      minItems: 1
      type: array
    VantivLitle:
      allOf:
        - $ref: '#/components/schemas/GatewayAccount'
        - properties:
            gatewayConfig:
              properties:
                merchantId:
                  description: VantivLitle Gateway merchant ID
                  type: string
                password:
                  description: VantivLitle Gateway password
                  format: password
                  type: string
                username:
                  description: VantivLitle Gateway username
                  type: string
              required:
                - username
                - password
                - merchantId
              type: object
            mpi:
              $ref: '#/components/schemas/VantivLitleMpis'
          required:
            - gatewayConfig
          type: object
      description: VantivLitle Gateway config
    VantivLitleMpis:
      description: VantivLitle Mpis
      discriminator:
        propertyName: name
      properties:
        name:
          allOf:
            - $ref: '#/components/schemas/MpiName'
          enum:
            - Other
      required:
        - name
    Walpay:
      allOf:
        - $ref: '#/components/schemas/GatewayAccount'
        - properties:
            gatewayConfig:
              properties:
                merchantName:
                  description: Walpay Gateway merchant name
                  type: string
                merchantPin:
                  description: Walpay Gateway merchant pin
                  format: password
                  type: string
              required:
                - merchantName
                - merchantPin
              type: object
            mpi:
              $ref: '#/components/schemas/WalpayMpis'
          required:
            - gatewayConfig
          type: object
      description: Walpay Gateway config
    WalpayMpis:
      description: WalpayMpis Mpis
      discriminator:
        propertyName: name
      properties:
        name:
          allOf:
            - $ref: '#/components/schemas/MpiName'
          enum:
            - Other
      required:
        - name
    Webhook:
      properties:
        body:
          type: string
        credentialHash:
          description: Webhook Credential identifier string.
          type: string
        headers:
          items:
            $ref: '#/components/schemas/WebhookHeader'
          type: array
        method:
          enum:
            - GET
            - POST
            - PUT
            - PATCH
            - DELETE
          type: string
        query:
          additionalProperties:
            example:
              param1: value1
              param2: value2
            type: string
          description: The URI parameters
          type: object
        url:
          format: uri
          type: string
      required:
        - method
        - url
      type: object
    WebhookAuthorization:
      discriminator:
        propertyName: type
      properties:
        type:
          default: none
          description: The authorization type
          enum:
            - none
            - basic
            - digest
            - oauth1
          type: string
      required:
        - type
      type: object
    WebhookCredential:
      description: Webhook credential
      properties:
        auth:
          $ref: '#/components/schemas/WebhookAuthorization'
        hash:
          allOf:
            - $ref: '#/components/schemas/ResourceId'
          readOnly: true
        host:
          description: The host name
          type: string
      required:
        - host
      type: object
    WebhookHeader:
      properties:
        name:
          type: string
        status:
          $ref: '#/components/schemas/OnOff'
        value:
          example:
            Header1: value1
            Header2: value2;value3
          type: string
      required:
        - name
        - value
      type: object
    Website:
      properties:
        _links:
          description: The links related to resource
          items:
            anyOf:
              - $ref: '#/components/schemas/SelfLink'
              - $ref: '#/components/schemas/NotesLink'
          maxItems: 2
          minItems: 1
          readOnly: true
          type: array
        checkoutPageUri:
          description: Your own custom URI for this Checkout Page
          type: string
        createdTime:
          allOf:
            - $ref: '#/components/schemas/ServerTimestamp'
          description: Website created time
        customFields:
          $ref: '#/components/schemas/ResourceCustomFields'
        id:
          allOf:
            - $ref: '#/components/schemas/ResourceId'
          description: The website identifier string
          readOnly: true
        name:
          description: The website's name
          type: string
        serviceEmail:
          description: The website's customer service email address
          format: email
          type: string
        servicePhone:
          description: The website's customer service phone number
          type: string
        updatedTime:
          allOf:
            - $ref: '#/components/schemas/ServerTimestamp'
          description: Website updated time
        url:
          description: The website's domain address
          type: string
      required:
        - name
        - url
        - servicePhone
        - serviceEmail
      type: object
    WebsiteLink:
      allOf:
        - $ref: '#/components/schemas/NewLink'
      properties:
        rel:
          description: The link type
          enum:
            - website
          type: string
      required:
        - rel
      type: object
    WebsiteWebhook:
      properties:
        webHookPassword:
          description: Webhook HTTP Authentication Password. An empty string will be returned in the response
          type: string
        webHookUrl:
          description: Webhook Url
          type: string
        webHookUsername:
          description: Webhook HTTP Authentication Username
          type: string
      required:
        - webHookUrl
        - webHookUsername
        - webHookPassword
      type: object
    WebsiteWebhookTracking:
      description: Webhook Tracking Requests.
      properties:
        _links:
          description: The links related to resource
          items:
            $ref: '#/components/schemas/SelfLink'
          maxItems: 1
          minItems: 1
          readOnly: true
          type: array
        createdTime:
          allOf:
            - $ref: '#/components/schemas/ServerTimestamp'
          description: The log created time
        eventName:
          description: Event name for which webhook was called
          type: string
        id:
          allOf:
            - $ref: '#/components/schemas/ResourceId'
        nextSendTime:
          allOf:
            - $ref: '#/components/schemas/ServerTimestamp'
          description: Next send time
        pushData:
          description: Event's data information JSON-string
          type: string
        response:
          description: HTTP code response
          type: integer
        sentTime:
          allOf:
            - $ref: '#/components/schemas/ServerTimestamp'
          description: Sent time
        status:
          description: Event's status
          enum:
            - fail
            - success
          type: string
        websiteId:
          allOf:
            - $ref: '#/components/schemas/ResourceId'
      readOnly: true
      type: object
    Wirecard:
      allOf:
        - $ref: '#/components/schemas/GatewayAccount'
        - properties:
            gatewayConfig:
              properties:
                businessSignature:
                  description: Wirecard Gateway merchant business case signature
                  format: password
                  type: string
                delay:
                  description: Wirecard Gateway delay
                  type: integer
                merchantPassword:
                  description: Wirecard Gateway merchant password
                  format: password
                  type: string
                merchantUsername:
                  description: Wirecard Gateway merchant username
                  type: string
              required:
                - merchantUsername
                - merchantPassword
                - businessSignature
                - delay
              type: object
            mpi:
              $ref: '#/components/schemas/WirecardMpis'
          required:
            - gatewayConfig
          type: object
      description: Wirecard Gateway config
    WirecardMpi:
      allOf:
        - $ref: '#/components/schemas/WirecardMpis'
      description: Wirecard Integrated
    WirecardMpis:
      description: Wirecard Mpis
      discriminator:
        propertyName: name
      properties:
        name:
          allOf:
            - $ref: '#/components/schemas/MpiName'
          enum:
            - WirecardMpi
      required:
        - name
    Worldpay:
      allOf:
        - $ref: '#/components/schemas/GatewayAccount'
        - properties:
            gatewayConfig:
              properties:
                merchantCode:
                  description: Worldpay Gateway merchant code
                  format: password
                  type: string
                merchantPassword:
                  description: Worldpay Gateway merchant password
                  format: password
                  type: string
              required:
                - merchantCode
                - merchantPassword
              type: object
            mpi:
              $ref: '#/components/schemas/WorldpayMpis'
          required:
            - gatewayConfig
          type: object
      description: Worldpay Gateway config
    WorldpayMpis:
      description: Worldpay Mpis
      discriminator:
        propertyName: name
      properties:
        name:
          allOf:
            - $ref: '#/components/schemas/MpiName'
          enum:
            - Other
      required:
        - name
    ach:
      allOf:
        - $ref: '#/components/schemas/PaymentInstrument'
        - properties:
            bankAccountId:
              allOf:
                - $ref: '#/components/schemas/ResourceId'
              description: The bank account identifier string
            gatewayAccountId:
              allOf:
                - $ref: '#/components/schemas/ResourceId'
              description: The payment gateway identifier string
          required:
            - bankAccountId
          type: object
      description: ACH payment instrument object
    and:
      allOf:
        - $ref: '#/components/schemas/Condition'
        - $ref: '#/components/schemas/logical'
      description: Logical AND
      type: object
    auto:
      allOf:
        - $ref: '#/components/schemas/CommonScheduleInstruction'
    basic:
      allOf:
        - $ref: '#/components/schemas/WebhookAuthorization'
        - properties:
            password:
              format: password
              type: string
            username:
              type: string
          required:
            - username
            - password
          type: object
    between:
      allOf:
        - $ref: '#/components/schemas/Condition'
        - properties:
            max:
              type: string
            min:
              type: string
            path:
              type: string
          required:
            - path
            - min
            - max
          type: object
      description: Between condition
      type: object
    blacklist:
      allOf:
        - $ref: '#/components/schemas/RuleAction'
        - properties:
            ttl:
              default: 0
              description: 'Blacklist TTL. Defaults to zero, meaning blacklist record won''t expire ever.'
              type: integer
            type:
              enum:
                - customer-id
                - email
                - fingerprint
                - ip-address
                - payment-card-id
              type: string
          required:
            - type
          type: object
      description: Add customer data to blacklist
    cancel-scheduled-payments:
      allOf:
        - $ref: '#/components/schemas/RuleAction'
      description: ''
    cash:
      allOf:
        - $ref: '#/components/schemas/PaymentInstrument'
        - properties:
            receivedBy:
              description: The receiver's name
              type: string
          type: object
      description: Cash payment instrument object
    compare:
      properties:
        path:
          type: string
        value:
          type: string
      required:
        - path
        - value
      type: object
    cram-md5:
      allOf:
        - $ref: '#/components/schemas/SmtpAuthorization'
        - $ref: '#/components/schemas/UserPasswordAuthorization'
    date-interval:
      allOf:
        - $ref: '#/components/schemas/CommonScheduleInstruction'
        - $ref: '#/components/schemas/CustomEventScheduleInstruction'
        - properties:
            duration:
              description: The number of the units
              minimum: 1
              type: integer
            unit:
              $ref: '#/components/schemas/TimeUnit'
          required:
            - duration
            - unit
          type: object
    day-of-month:
      allOf:
        - $ref: '#/components/schemas/CommonScheduleInstruction'
        - $ref: '#/components/schemas/CustomEventScheduleInstruction'
        - properties:
            day:
              description: |
                The day of the month when event will be scheduled.
                Be aware if the month has less days,
                the last day of the month will be selected.
              maximum: 31
              minimum: 1
              type: integer
            time:
              $ref: '#/components/schemas/Time'
          required:
            - day
          type: object
    day-of-week:
      allOf:
        - $ref: '#/components/schemas/CommonScheduleInstruction'
        - $ref: '#/components/schemas/CustomEventScheduleInstruction'
        - properties:
            day:
              $ref: '#/components/schemas/DayOfWeek'
            time:
              $ref: '#/components/schemas/Time'
            week:
              default: next
              enum:
                - next
                - first-in-month
                - last-in-month
              type: string
          required:
            - day
          type: object
    digest:
      allOf:
        - $ref: '#/components/schemas/WebhookAuthorization'
        - properties:
            password:
              format: password
              type: string
            username:
              type: string
          required:
            - username
            - password
          type: object
    discount:
      allOf:
        - $ref: '#/components/schemas/AmountAdjustment'
        - properties:
            type:
              description: The payment amount discount type
              enum:
                - percent
                - fixed
              type: string
            value:
              description: The payment amount discount
              format: float
              type: number
          required:
            - value
            - type
          type: object
    discounts-per-redemption:
      allOf:
        - $ref: '#/components/schemas/GenericRestriction'
        - properties:
            quantity:
              description: Restriction quantity
              type: integer
          required:
            - quantity
          type: object
      description: discounts-per-redemption restrictions
    eMerchantPay:
      allOf:
        - $ref: '#/components/schemas/GatewayAccount'
        - properties:
            gatewayConfig:
              properties:
                apiKey:
                  description: eMerchantPay Gateway api key
                  format: password
                  type: string
                clientId:
                  description: eMerchantPay Gateway client ID
                  type: string
              required:
                - clientId
                - apiKey
              type: object
            mpi:
              $ref: '#/components/schemas/eMerchantPayMpis'
          required:
            - gatewayConfig
          type: object
      description: eMerchantPay Gateway config
    eMerchantPayMpis:
      description: eMerchantPay Mpis
      discriminator:
        propertyName: name
      properties:
        name:
          allOf:
            - $ref: '#/components/schemas/MpiName'
          enum:
            - Other
      required:
        - name
    equals:
      allOf:
        - $ref: '#/components/schemas/Condition'
        - $ref: '#/components/schemas/compare'
      description: Equals condition
      type: object
    fixed:
      allOf:
        - $ref: '#/components/schemas/Discount'
        - properties:
            amount:
              description: Discount amount
              format: double
              type: number
            currency:
              description: Discount currency
              type: string
          required:
            - amount
            - currency
          type: object
      description: Coupon fixed amount discount
    gateway-account-weights:
      allOf:
        - $ref: '#/components/schemas/GatewayAccountPickInstruction'
        - properties:
            weightedList:
              example: |
                [
                  {"gatewayAccountId": "my_gateway_account_1", "weight": 80},
                  {"gatewayAccountId": "my_gateway_account_2", "weight": 20}
                ]
              items:
                properties:
                  gatewayAccountId:
                    $ref: '#/components/schemas/ResourceId'
                  weight:
                    type: integer
                required:
                  - gatewayAccountId
                  - weight
                type: object
              minimum: 0
              type: array
              uniqueItems: true
          required:
            - weightedList
          type: object
    gateway-acquirer-weights:
      allOf:
        - $ref: '#/components/schemas/GatewayAccountPickInstruction'
        - properties:
            weightedList:
              example: |
                [
                  {"gatewayName": "RebillyProcessor", "acquirerName": "AIB", "weight": 80},
                  {"gatewayName": "RebillyProcessor", "acquirerName": "B+S", "weight": 20}
              items:
                properties:
                  acquirerName:
                    $ref: '#/components/schemas/AcquirerName'
                  gatewayName:
                    $ref: '#/components/schemas/GatewayName'
                  weight:
                    type: integer
                required:
                  - gatewayName
                  - acquirerName
                  - weight
                type: object
              minimum: 0
              type: array
              uniqueItems: true
          required:
            - weightedList
          type: object
    gt:
      allOf:
        - $ref: '#/components/schemas/Condition'
        - $ref: '#/components/schemas/compare'
      description: Greater than condition
      type: object
    gte:
      allOf:
        - $ref: '#/components/schemas/Condition'
        - $ref: '#/components/schemas/compare'
      description: Greater than or equals condition
      type: object
    guess-payment-card-expiration:
      allOf:
        - $ref: '#/components/schemas/RuleAction'
      description: ''
    iCheque:
      allOf:
        - $ref: '#/components/schemas/GatewayAccount'
        - properties:
            gatewayConfig:
              properties:
                clientId:
                  description: iCheque Gateway client ID
                  type: string
                secretWord:
                  description: iCheque Gateway secret word
                  format: password
                  type: string
              required:
                - clientId
                - secretWord
              type: object
          required:
            - gatewayConfig
          type: object
      description: iCheque Gateway config
    immediately:
      allOf:
        - $ref: '#/components/schemas/CommonScheduleInstruction'
    in:
      allOf:
        - $ref: '#/components/schemas/Condition'
        - properties:
            path:
              type: string
            values:
              items:
                type: string
              type: array
          required:
            - path
            - values
          type: object
      description: In condition
      type: object
    logical:
      properties:
        conditions:
          items:
            $ref: '#/components/schemas/Condition'
          minItems: 2
          type: array
      required:
        - conditions
      type: object
    logical-not:
      example:
        condition:
          operation: equals
          path: /name
          value: John Dou
        operation: not
      properties:
        condition:
          $ref: '#/components/schemas/Condition'
      required:
        - condition
      type: object
    login:
      allOf:
        - $ref: '#/components/schemas/SmtpAuthorization'
        - $ref: '#/components/schemas/UserPasswordAuthorization'
    lt:
      allOf:
        - $ref: '#/components/schemas/Condition'
        - $ref: '#/components/schemas/compare'
      description: Less than condition
      type: object
    lte:
      allOf:
        - $ref: '#/components/schemas/Condition'
        - $ref: '#/components/schemas/compare'
      description: Less than or equals condition
      type: object
    minimum-order-amount:
      allOf:
        - $ref: '#/components/schemas/GenericRestriction'
        - properties:
            amount:
              description: Minimum order quantity
              type: integer
            currency:
              description: Minimum order currency
              type: string
          required:
            - amount
            - currency
          type: object
      description: minimum-order-amount restrictions
    none:
      allOf:
        - $ref: '#/components/schemas/AmountAdjustment'
        - $ref: '#/components/schemas/SmtpAuthorization'
        - $ref: '#/components/schemas/WebhookAuthorization'
    not:
      allOf:
        - $ref: '#/components/schemas/Condition'
        - $ref: '#/components/schemas/logical-not'
      description: Logical NOT
      type: object
    oauth1:
      allOf:
        - $ref: '#/components/schemas/WebhookAuthorization'
        - properties:
            consumerKey:
              type: string
            consumerSecret:
              type: string
            token:
              type: string
            tokenSecret:
              type: string
          required:
            - consumerKey
            - consumerSecret
            - token
            - tokenSecret
          type: object
    or:
      allOf:
        - $ref: '#/components/schemas/Condition'
        - $ref: '#/components/schemas/logical'
      description: Logical OR
      type: object
    partial:
      allOf:
        - $ref: '#/components/schemas/AmountAdjustment'
        - properties:
            type:
              description: The payment amount type
              enum:
                - percent
                - fixed
              type: string
            value:
              description: The payment amount
              format: float
              type: number
          required:
            - value
            - type
          type: object
    payment-card:
      allOf:
        - $ref: '#/components/schemas/PaymentInstrument'
        - properties:
            gatewayAccountId:
              allOf:
                - $ref: '#/components/schemas/ResourceId'
              description: The payment gateway identifier string
            paymentCardId:
              allOf:
                - $ref: '#/components/schemas/ResourceId'
              description: The payment card identifier string
          required:
            - paymentCardId
          type: object
      description: Payment card payment instrument object
    paypal:
      allOf:
        - $ref: '#/components/schemas/PaymentInstrument'
        - properties:
            gatewayAccountId:
              allOf:
                - $ref: '#/components/schemas/ResourceId'
              description: The payment gateway identifier string
            payPalAccountId:
              allOf:
                - $ref: '#/components/schemas/ResourceId'
              description: The PayPal account identifier string
          required:
            - payPalAccountId
          type: object
      description: PayPal payment instrument object
    percent:
      allOf:
        - $ref: '#/components/schemas/Discount'
        - properties:
            value:
              description: Discount percent
              format: double
              type: number
          required:
            - value
          type: object
      description: Coupon percent discount
    pick-gateway-account:
      allOf:
        - $ref: '#/components/schemas/RuleAction'
        - properties:
            pickInstruction:
              $ref: '#/components/schemas/GatewayAccountPickInstruction'
          required:
            - pickInstruction
          type: object
      description: ''
    plain:
      allOf:
        - $ref: '#/components/schemas/SmtpAuthorization'
        - $ref: '#/components/schemas/UserPasswordAuthorization'
    redemptions-per-customer:
      allOf:
        - $ref: '#/components/schemas/GenericRestriction'
        - properties:
            quantity:
              description: Restriction value
              type: integer
          required:
            - quantity
          type: object
      description: Quantity per Customer restrictions
    restrict-to-invoices:
      allOf:
        - $ref: '#/components/schemas/GenericRestriction'
        - properties:
            invoiceIds:
              description: Invoice IDs coupon can be applied to
              items:
                type: string
              type: array
          required:
            - invoiceIds
          type: object
      description: restrict-to-invoices restrictions
    restrict-to-plans:
      allOf:
        - $ref: '#/components/schemas/GenericRestriction'
        - properties:
            planIds:
              description: Plan IDs coupon can be applied to
              items:
                type: string
              type: array
          required:
            - planIds
          type: object
      description: restrict-to-plans restrictions
    restrict-to-subscriptions:
      allOf:
        - $ref: '#/components/schemas/GenericRestriction'
        - properties:
            subscriptionIds:
              description: Subscription IDs coupon can be applied to
              items:
                type: string
              type: array
          required:
            - subscriptionIds
          type: object
      description: restrict-to-subscriptions restrictions
    schedule-payment:
      allOf:
        - $ref: '#/components/schemas/RuleAction'
        - description: The calculation instruction of scheduled time for payment
          properties:
            amountPolicy:
              enum:
                - balance-outstanding
                - invoice-total
              type: string
            scheduleInstruction:
              $ref: '#/components/schemas/CommonScheduleInstruction'
          required:
            - scheduleInstruction
            - amountPolicy
          type: object
      description: ''
    schedule-payment-retry:
      allOf:
        - $ref: '#/components/schemas/RuleAction'
        - $ref: '#/components/schemas/PaymentRetry'
      description: ''
    send-email:
      allOf:
        - $ref: '#/components/schemas/RuleAction'
        - $ref: '#/components/schemas/EmailNotification'
      description: ''
    stop-subscriptions:
      allOf:
        - $ref: '#/components/schemas/RuleAction'
      description: Stop active subscriptions
    total-redemptions:
      allOf:
        - $ref: '#/components/schemas/GenericRestriction'
        - properties:
            quantity:
              description: Total redemptions quantity
              type: integer
          required:
            - quantity
          type: object
      description: total-redemptions restrictions
    trigger-webhook:
      allOf:
        - $ref: '#/components/schemas/RuleAction'
        - $ref: '#/components/schemas/Webhook'
      description: ''
    vegaaH:
      allOf:
        - $ref: '#/components/schemas/GatewayAccount'
        - properties:
            gatewayConfig:
              properties:
                password:
                  description: vegaaH Gateway password
                  format: password
                  type: string
                terminalId:
                  description: vegaaH Gateway terminal ID
                  type: string
              required:
                - terminalId
                - password
              type: object
          required:
            - gatewayConfig
          type: object
      description: vegaaH Gateway config
  responses:
    AccessForbidden:
      description: 'Access forbidden, invalid API-KEY was used'
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
    Conflict:
      description: Conflict
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
    InvalidDataError:
      description: Invalid data was sent
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/InvalidError'
    NotFound:
      description: Resource was not found
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
  parameters:
    collectionCriteria:
      description: The json criteria for collection
      in: query
      name: criteria
      schema:
        type: string
    collectionExpand:
      description: Expand response to get full related object intead of ID.  See the expand guide for more info.
      in: query
      name: expand
      schema:
        type: string
    collectionFields:
      description: 'Limit the returned fields to the list specified, separated by comma.  Note that id is always returned.'
      in: query
      name: fields
      schema:
        type: string
    collectionFilter:
      description: |
        The collection items filter requires a special format.
        Use "," for multiple allowed values.  Use ";" for multiple fields.
        See the filter guide for more options and examples about this format.
      in: query
      name: filter
      schema:
        type: string
    collectionLimit:
      description: The collection items limit
      in: query
      name: limit
      schema:
        type: integer
        minimum: 0
        maximum: 1000
    collectionOffset:
      description: The collection items offset
      in: query
      name: offset
      schema:
        type: integer
        minimum: 0
    collectionQuery:
      description: The partial search of the text fields.
      in: query
      name: q
      schema:
        type: string
    collectionSort:
      description: The collection items sort field and order (prefix with "-" for descending sort).
      in: query
      name: sort
      style: form
      schema:
        type: array
        items:
          type: string
    hash:
      description: The token identifier string
      in: path
      name: hash
      required: true
      schema:
        type: string
    mediaType:
      description: The response media type
      in: header
      name: Accept
      schema:
        type: string
        enum:
          - application/json
        default: application/json
    resourceId:
      description: The resource identifier string
      in: path
      name: id
      required: true
      schema:
        type: string
    rulesVersion:
      description: The rule set version. Expand response to get full related object instead of ID.  See the expand guide for more info.
      in: path
      name: version
      required: true
      schema:
        type: integer
        minimum: 1
    systemEventType:
      description: The event type
      in: path
      name: eventType
      required: true
      schema:
        type: string
  requestBodies:
    ApiKey:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ApiKey'
      description: ApiKey resource
      required: true
    Attachment:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Attachment'
      description: Attachment resource
      required: true
    BankAccount:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/BankAccount'
      description: BankAccount resource
      required: true
    Blacklist:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Blacklist'
      description: Blacklist resource
      required: true
    CheckoutPage:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/CheckoutPage'
      description: Checkout Page resource
      required: true
    Contact:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Contact'
      description: Contact resource
      required: true
    Coupon:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Coupon'
      description: Coupon resource
      required: true
    Credential:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Credential'
      description: Credential resource
      required: true
    CustomEvent:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/CustomEvent'
      description: Custom event resource
      required: true
    RuleSet:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/RuleSet'
      description: Set of rules resource
      required: true
    Customer:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Customer'
      description: Customer resource
      required: true
    LeadSource:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/LeadSource'
      description: Lead Source resource
      required: true
    Dispute:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Dispute'
      description: Dispute resource
      required: true
    GatewayAccount:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/GatewayAccount'
      description: Gateway Account resource
      required: true
    Invoice:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Invoice'
      description: Invoice resource
      required: true
    Layout:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Layout'
      description: Layout resource
      required: true
    List:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/List'
      description: List resource
      required: true
    Note:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Note'
      description: Note resource
      required: true
    Organization:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Organization'
      description: Organization resource
      required: true
    Payment:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Payment'
      description: Payment resource
      required: true
    Plan:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Plan'
      description: Plan resource
      required: true
    GlobalWebhook:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/GlobalWebhook'
      description: Webhook resource
      required: true
    Product:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Product'
      description: Product resource
      required: true
    Subscription:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Subscription'
      description: Subscription resource
      required: true
    PaymentToken:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/PaymentToken'
      description: PaymentToken resource
      required: true
    User:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/User'
      description: User resource
      required: true
    Website:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Website'
      description: Website resource
      required: true
  securitySchemes:
    ApiKey:
      description: |
        When you sign up for an account, you are given your first API key.
        To do so please follow this link: https://www.rebilly.com/site/signup/
        Also you can generate additional API keys, and delete API keys (as you may
        need to rotate your keys in the future).
      in: header
      name: REB-APIKEY
      type: apiKey
    JWT:
      description: |
        You can create a JSON Web Token (JWT) via our Sessions resource.
      type: http
      scheme: basic
    RebAuth:
      description: |
        Only for the Tokens resource.
        The REB-AUTH value is created in this way
        Generate a Nonce (random string), and a Timestamp (unix timestamp)
        Concatenate the values of ApiUser, Nonce, and Timestamp (in that order).
        Use that value as the input data when you calculate the <a href="http://tools.ietf.org/html/rfc2104">HMAC-SHA1</a> with your secret key, called the signature.
        Forming the four data points into a JSON object.

        ```json
        {
          "REB-APIUSER": "abcdefg",
          "REB-NONCE": "adfsjtreitou345fgkdafgj",
          "REB-TIMESTAMP": "1382591345",
          "REB-SIGNATURE": "a234fc95460401cfg09c9d09"
        }
        ```

        Then base64 encode that JSON object. This is the final value of the REB-AUTH HTTP header
      in: header
      name: REB-AUTH
      type: apiKey
