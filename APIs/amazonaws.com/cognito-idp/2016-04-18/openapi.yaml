openapi: 3.0.0
servers:
  - url: 'http://cognito-idp.amazonaws.com/'
info:
  version: '2016-04-18'
  x-release: v4
  title: Amazon Cognito Identity Provider
  description: '<p>Using the Amazon Cognito User Pools API, you can create a user pool to manage directories and users. You can authenticate a user to obtain tokens related to user identity and access policies.</p> <p>This API reference provides information about user pools in Amazon Cognito User Pools.</p> <p>For more information, see the Amazon Cognito Documentation.</p>'
  x-logo:
    url: 'https://media.amazonwebservices.com/blog/2007/big_pbaws_logo_300px.jpg'
    backgroundColor: '#FFFFFF'
  termsOfService: 'https://aws.amazon.com/service-terms/'
  contact:
    name: Mike Ralphson
    email: mike.ralphson@gmail.com
    url: 'https://github.com/mermade/aws2openapi'
  license:
    name: Apache 2.0 License
    url: 'http://www.apache.org/licenses/'
  x-providerName: amazonaws.com
  x-serviceName: cognito-idp
  x-origin:
    - contentType: application/json
      url: 'https://raw.githubusercontent.com/aws/aws-sdk-js/master/apis/cognito-idp-2016-04-18.normal.json'
      converter:
        url: 'https://github.com/mermade/aws2openapi'
        version: 1.0.0
      x-apisguru-direct: true
  x-apiClientRegistration:
    url: 'https://portal.aws.amazon.com/gp/aws/developer/registration/index.html?nc2=h_ct'
  x-apisguru-categories:
    - cloud
  x-preferred: true
externalDocs:
  description: Amazon Web Services documentation
  url: 'https://aws.amazon.com/cognito-idp/'
x-hasEquivalentPaths: true
security:
  - hmac: []
paths:
  /:
    post:
      operationId: AddCustomAttributes
      description: Adds additional user attributes to the user pool schema.
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AddCustomAttributesResponse'
        '480':
          description: ResourceNotFoundException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceNotFoundException'
        '481':
          description: InvalidParameterException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidParameterException'
        '482':
          description: TooManyRequestsException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TooManyRequestsException'
        '483':
          description: NotAuthorizedException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotAuthorizedException'
        '484':
          description: UserImportInProgressException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserImportInProgressException'
        '485':
          description: InternalErrorException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalErrorException'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AddCustomAttributesRequest'
        required: true
    parameters:
      - $ref: '#/components/parameters/Action'
      - $ref: '#/components/parameters/Version'
      - $ref: '#/components/parameters/X-Amz-Content-Sha256'
      - $ref: '#/components/parameters/X-Amz-Date'
      - $ref: '#/components/parameters/X-Amz-Algorithm'
      - $ref: '#/components/parameters/X-Amz-Credential'
      - $ref: '#/components/parameters/X-Amz-Security-Token'
      - $ref: '#/components/parameters/X-Amz-Signature'
      - $ref: '#/components/parameters/X-Amz-SignedHeaders'
  '/#AdminAddUserToGroup':
    post:
      operationId: AdminAddUserToGroup
      description: <p>Adds the specified user to the specified group.</p> <p>Requires developer credentials.</p>
      responses:
        '200':
          description: Success
        '480':
          description: InvalidParameterException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidParameterException'
        '481':
          description: ResourceNotFoundException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceNotFoundException'
        '482':
          description: TooManyRequestsException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TooManyRequestsException'
        '483':
          description: NotAuthorizedException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotAuthorizedException'
        '484':
          description: UserNotFoundException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserNotFoundException'
        '485':
          description: InternalErrorException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalErrorException'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AdminAddUserToGroupRequest'
        required: true
    parameters:
      - $ref: '#/components/parameters/Action'
      - $ref: '#/components/parameters/Version'
      - $ref: '#/components/parameters/X-Amz-Content-Sha256'
      - $ref: '#/components/parameters/X-Amz-Date'
      - $ref: '#/components/parameters/X-Amz-Algorithm'
      - $ref: '#/components/parameters/X-Amz-Credential'
      - $ref: '#/components/parameters/X-Amz-Security-Token'
      - $ref: '#/components/parameters/X-Amz-Signature'
      - $ref: '#/components/parameters/X-Amz-SignedHeaders'
  '/#AdminConfirmSignUp':
    post:
      operationId: AdminConfirmSignUp
      description: <p>Confirms user registration as an admin without using a confirmation code. Works on any user.</p> <p>Requires developer credentials.</p>
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AdminConfirmSignUpResponse'
        '480':
          description: ResourceNotFoundException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceNotFoundException'
        '481':
          description: InvalidParameterException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidParameterException'
        '482':
          description: UnexpectedLambdaException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnexpectedLambdaException'
        '483':
          description: UserLambdaValidationException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserLambdaValidationException'
        '484':
          description: NotAuthorizedException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotAuthorizedException'
        '485':
          description: TooManyFailedAttemptsException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TooManyFailedAttemptsException'
        '486':
          description: InvalidLambdaResponseException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidLambdaResponseException'
        '487':
          description: TooManyRequestsException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TooManyRequestsException'
        '488':
          description: LimitExceededException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LimitExceededException'
        '489':
          description: UserNotFoundException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserNotFoundException'
        '490':
          description: InternalErrorException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalErrorException'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AdminConfirmSignUpRequest'
        required: true
    parameters:
      - $ref: '#/components/parameters/Action'
      - $ref: '#/components/parameters/Version'
      - $ref: '#/components/parameters/X-Amz-Content-Sha256'
      - $ref: '#/components/parameters/X-Amz-Date'
      - $ref: '#/components/parameters/X-Amz-Algorithm'
      - $ref: '#/components/parameters/X-Amz-Credential'
      - $ref: '#/components/parameters/X-Amz-Security-Token'
      - $ref: '#/components/parameters/X-Amz-Signature'
      - $ref: '#/components/parameters/X-Amz-SignedHeaders'
  '/#AdminCreateUser':
    post:
      operationId: AdminCreateUser
      description: <p>Creates a new user in the specified user pool and sends a welcome message via email or phone (SMS). This message is based on a template that you configured in your call to <a href="API_CreateUserPool.html">CreateUserPool</a> or <a href="API_UpdateUserPool.html">UpdateUserPool</a>. This template includes your custom sign-up instructions and placeholders for user name and temporary password.</p> <p>Requires developer credentials.</p>
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AdminCreateUserResponse'
        '480':
          description: ResourceNotFoundException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceNotFoundException'
        '481':
          description: InvalidParameterException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidParameterException'
        '482':
          description: UserNotFoundException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserNotFoundException'
        '483':
          description: UsernameExistsException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsernameExistsException'
        '484':
          description: InvalidPasswordException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidPasswordException'
        '485':
          description: CodeDeliveryFailureException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CodeDeliveryFailureException'
        '486':
          description: UnexpectedLambdaException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnexpectedLambdaException'
        '487':
          description: UserLambdaValidationException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserLambdaValidationException'
        '488':
          description: InvalidLambdaResponseException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidLambdaResponseException'
        '489':
          description: PreconditionNotMetException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PreconditionNotMetException'
        '490':
          description: InvalidSmsRoleAccessPolicyException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidSmsRoleAccessPolicyException'
        '491':
          description: InvalidSmsRoleTrustRelationshipException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidSmsRoleTrustRelationshipException'
        '492':
          description: TooManyRequestsException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TooManyRequestsException'
        '493':
          description: NotAuthorizedException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotAuthorizedException'
        '494':
          description: UnsupportedUserStateException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnsupportedUserStateException'
        '495':
          description: InternalErrorException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalErrorException'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AdminCreateUserRequest'
        required: true
    parameters:
      - $ref: '#/components/parameters/Action'
      - $ref: '#/components/parameters/Version'
      - $ref: '#/components/parameters/X-Amz-Content-Sha256'
      - $ref: '#/components/parameters/X-Amz-Date'
      - $ref: '#/components/parameters/X-Amz-Algorithm'
      - $ref: '#/components/parameters/X-Amz-Credential'
      - $ref: '#/components/parameters/X-Amz-Security-Token'
      - $ref: '#/components/parameters/X-Amz-Signature'
      - $ref: '#/components/parameters/X-Amz-SignedHeaders'
  '/#AdminDeleteUser':
    post:
      operationId: AdminDeleteUser
      description: <p>Deletes a user as an administrator. Works on any user.</p> <p>Requires developer credentials.</p>
      responses:
        '200':
          description: Success
        '480':
          description: ResourceNotFoundException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceNotFoundException'
        '481':
          description: InvalidParameterException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidParameterException'
        '482':
          description: TooManyRequestsException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TooManyRequestsException'
        '483':
          description: NotAuthorizedException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotAuthorizedException'
        '484':
          description: UserNotFoundException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserNotFoundException'
        '485':
          description: InternalErrorException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalErrorException'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AdminDeleteUserRequest'
        required: true
    parameters:
      - $ref: '#/components/parameters/Action'
      - $ref: '#/components/parameters/Version'
      - $ref: '#/components/parameters/X-Amz-Content-Sha256'
      - $ref: '#/components/parameters/X-Amz-Date'
      - $ref: '#/components/parameters/X-Amz-Algorithm'
      - $ref: '#/components/parameters/X-Amz-Credential'
      - $ref: '#/components/parameters/X-Amz-Security-Token'
      - $ref: '#/components/parameters/X-Amz-Signature'
      - $ref: '#/components/parameters/X-Amz-SignedHeaders'
  '/#AdminDeleteUserAttributes':
    post:
      operationId: AdminDeleteUserAttributes
      description: <p>Deletes the user attributes in a user pool as an administrator. Works on any user.</p> <p>Requires developer credentials.</p>
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AdminDeleteUserAttributesResponse'
        '480':
          description: ResourceNotFoundException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceNotFoundException'
        '481':
          description: InvalidParameterException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidParameterException'
        '482':
          description: TooManyRequestsException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TooManyRequestsException'
        '483':
          description: NotAuthorizedException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotAuthorizedException'
        '484':
          description: UserNotFoundException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserNotFoundException'
        '485':
          description: InternalErrorException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalErrorException'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AdminDeleteUserAttributesRequest'
        required: true
    parameters:
      - $ref: '#/components/parameters/Action'
      - $ref: '#/components/parameters/Version'
      - $ref: '#/components/parameters/X-Amz-Content-Sha256'
      - $ref: '#/components/parameters/X-Amz-Date'
      - $ref: '#/components/parameters/X-Amz-Algorithm'
      - $ref: '#/components/parameters/X-Amz-Credential'
      - $ref: '#/components/parameters/X-Amz-Security-Token'
      - $ref: '#/components/parameters/X-Amz-Signature'
      - $ref: '#/components/parameters/X-Amz-SignedHeaders'
  '/#AdminDisableUser':
    post:
      operationId: AdminDisableUser
      description: <p>Disables the specified user as an administrator. Works on any user.</p> <p>Requires developer credentials.</p>
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AdminDisableUserResponse'
        '480':
          description: ResourceNotFoundException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceNotFoundException'
        '481':
          description: InvalidParameterException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidParameterException'
        '482':
          description: TooManyRequestsException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TooManyRequestsException'
        '483':
          description: NotAuthorizedException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotAuthorizedException'
        '484':
          description: UserNotFoundException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserNotFoundException'
        '485':
          description: InternalErrorException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalErrorException'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AdminDisableUserRequest'
        required: true
    parameters:
      - $ref: '#/components/parameters/Action'
      - $ref: '#/components/parameters/Version'
      - $ref: '#/components/parameters/X-Amz-Content-Sha256'
      - $ref: '#/components/parameters/X-Amz-Date'
      - $ref: '#/components/parameters/X-Amz-Algorithm'
      - $ref: '#/components/parameters/X-Amz-Credential'
      - $ref: '#/components/parameters/X-Amz-Security-Token'
      - $ref: '#/components/parameters/X-Amz-Signature'
      - $ref: '#/components/parameters/X-Amz-SignedHeaders'
  '/#AdminEnableUser':
    post:
      operationId: AdminEnableUser
      description: <p>Enables the specified user as an administrator. Works on any user.</p> <p>Requires developer credentials.</p>
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AdminEnableUserResponse'
        '480':
          description: ResourceNotFoundException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceNotFoundException'
        '481':
          description: InvalidParameterException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidParameterException'
        '482':
          description: TooManyRequestsException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TooManyRequestsException'
        '483':
          description: NotAuthorizedException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotAuthorizedException'
        '484':
          description: UserNotFoundException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserNotFoundException'
        '485':
          description: InternalErrorException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalErrorException'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AdminEnableUserRequest'
        required: true
    parameters:
      - $ref: '#/components/parameters/Action'
      - $ref: '#/components/parameters/Version'
      - $ref: '#/components/parameters/X-Amz-Content-Sha256'
      - $ref: '#/components/parameters/X-Amz-Date'
      - $ref: '#/components/parameters/X-Amz-Algorithm'
      - $ref: '#/components/parameters/X-Amz-Credential'
      - $ref: '#/components/parameters/X-Amz-Security-Token'
      - $ref: '#/components/parameters/X-Amz-Signature'
      - $ref: '#/components/parameters/X-Amz-SignedHeaders'
  '/#AdminForgetDevice':
    post:
      operationId: AdminForgetDevice
      description: '<p>Forgets the device, as an administrator.</p> <p>Requires developer credentials.</p>'
      responses:
        '200':
          description: Success
        '480':
          description: ResourceNotFoundException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceNotFoundException'
        '481':
          description: InvalidParameterException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidParameterException'
        '482':
          description: InvalidUserPoolConfigurationException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidUserPoolConfigurationException'
        '483':
          description: TooManyRequestsException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TooManyRequestsException'
        '484':
          description: NotAuthorizedException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotAuthorizedException'
        '485':
          description: UserNotFoundException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserNotFoundException'
        '486':
          description: InternalErrorException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalErrorException'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AdminForgetDeviceRequest'
        required: true
    parameters:
      - $ref: '#/components/parameters/Action'
      - $ref: '#/components/parameters/Version'
      - $ref: '#/components/parameters/X-Amz-Content-Sha256'
      - $ref: '#/components/parameters/X-Amz-Date'
      - $ref: '#/components/parameters/X-Amz-Algorithm'
      - $ref: '#/components/parameters/X-Amz-Credential'
      - $ref: '#/components/parameters/X-Amz-Security-Token'
      - $ref: '#/components/parameters/X-Amz-Signature'
      - $ref: '#/components/parameters/X-Amz-SignedHeaders'
  '/#AdminGetDevice':
    post:
      operationId: AdminGetDevice
      description: '<p>Gets the device, as an administrator.</p> <p>Requires developer credentials.</p>'
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AdminGetDeviceResponse'
        '480':
          description: ResourceNotFoundException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceNotFoundException'
        '481':
          description: InvalidParameterException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidParameterException'
        '482':
          description: InvalidUserPoolConfigurationException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidUserPoolConfigurationException'
        '483':
          description: TooManyRequestsException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TooManyRequestsException'
        '484':
          description: InternalErrorException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalErrorException'
        '485':
          description: NotAuthorizedException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotAuthorizedException'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AdminGetDeviceRequest'
        required: true
    parameters:
      - $ref: '#/components/parameters/Action'
      - $ref: '#/components/parameters/Version'
      - $ref: '#/components/parameters/X-Amz-Content-Sha256'
      - $ref: '#/components/parameters/X-Amz-Date'
      - $ref: '#/components/parameters/X-Amz-Algorithm'
      - $ref: '#/components/parameters/X-Amz-Credential'
      - $ref: '#/components/parameters/X-Amz-Security-Token'
      - $ref: '#/components/parameters/X-Amz-Signature'
      - $ref: '#/components/parameters/X-Amz-SignedHeaders'
  '/#AdminGetUser':
    post:
      operationId: AdminGetUser
      description: <p>Gets the specified user by user name in a user pool as an administrator. Works on any user.</p> <p>Requires developer credentials.</p>
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AdminGetUserResponse'
        '480':
          description: ResourceNotFoundException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceNotFoundException'
        '481':
          description: InvalidParameterException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidParameterException'
        '482':
          description: TooManyRequestsException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TooManyRequestsException'
        '483':
          description: NotAuthorizedException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotAuthorizedException'
        '484':
          description: UserNotFoundException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserNotFoundException'
        '485':
          description: InternalErrorException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalErrorException'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AdminGetUserRequest'
        required: true
    parameters:
      - $ref: '#/components/parameters/Action'
      - $ref: '#/components/parameters/Version'
      - $ref: '#/components/parameters/X-Amz-Content-Sha256'
      - $ref: '#/components/parameters/X-Amz-Date'
      - $ref: '#/components/parameters/X-Amz-Algorithm'
      - $ref: '#/components/parameters/X-Amz-Credential'
      - $ref: '#/components/parameters/X-Amz-Security-Token'
      - $ref: '#/components/parameters/X-Amz-Signature'
      - $ref: '#/components/parameters/X-Amz-SignedHeaders'
  '/#AdminInitiateAuth':
    post:
      operationId: AdminInitiateAuth
      description: '<p>Initiates the authentication flow, as an administrator.</p> <p>Requires developer credentials.</p>'
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AdminInitiateAuthResponse'
        '480':
          description: ResourceNotFoundException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceNotFoundException'
        '481':
          description: InvalidParameterException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidParameterException'
        '482':
          description: NotAuthorizedException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotAuthorizedException'
        '483':
          description: TooManyRequestsException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TooManyRequestsException'
        '484':
          description: InternalErrorException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalErrorException'
        '485':
          description: UnexpectedLambdaException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnexpectedLambdaException'
        '486':
          description: InvalidUserPoolConfigurationException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidUserPoolConfigurationException'
        '487':
          description: UserLambdaValidationException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserLambdaValidationException'
        '488':
          description: InvalidLambdaResponseException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidLambdaResponseException'
        '489':
          description: MFAMethodNotFoundException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MFAMethodNotFoundException'
        '490':
          description: InvalidSmsRoleAccessPolicyException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidSmsRoleAccessPolicyException'
        '491':
          description: InvalidSmsRoleTrustRelationshipException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidSmsRoleTrustRelationshipException'
        '492':
          description: PasswordResetRequiredException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PasswordResetRequiredException'
        '493':
          description: UserNotFoundException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserNotFoundException'
        '494':
          description: UserNotConfirmedException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserNotConfirmedException'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AdminInitiateAuthRequest'
        required: true
    parameters:
      - $ref: '#/components/parameters/Action'
      - $ref: '#/components/parameters/Version'
      - $ref: '#/components/parameters/X-Amz-Content-Sha256'
      - $ref: '#/components/parameters/X-Amz-Date'
      - $ref: '#/components/parameters/X-Amz-Algorithm'
      - $ref: '#/components/parameters/X-Amz-Credential'
      - $ref: '#/components/parameters/X-Amz-Security-Token'
      - $ref: '#/components/parameters/X-Amz-Signature'
      - $ref: '#/components/parameters/X-Amz-SignedHeaders'
  '/#AdminListDevices':
    post:
      operationId: AdminListDevices
      description: '<p>Lists devices, as an administrator.</p> <p>Requires developer credentials.</p>'
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AdminListDevicesResponse'
        '480':
          description: InvalidParameterException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidParameterException'
        '481':
          description: ResourceNotFoundException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceNotFoundException'
        '482':
          description: InvalidUserPoolConfigurationException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidUserPoolConfigurationException'
        '483':
          description: TooManyRequestsException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TooManyRequestsException'
        '484':
          description: InternalErrorException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalErrorException'
        '485':
          description: NotAuthorizedException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotAuthorizedException'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AdminListDevicesRequest'
        required: true
    parameters:
      - $ref: '#/components/parameters/Action'
      - $ref: '#/components/parameters/Version'
      - $ref: '#/components/parameters/X-Amz-Content-Sha256'
      - $ref: '#/components/parameters/X-Amz-Date'
      - $ref: '#/components/parameters/X-Amz-Algorithm'
      - $ref: '#/components/parameters/X-Amz-Credential'
      - $ref: '#/components/parameters/X-Amz-Security-Token'
      - $ref: '#/components/parameters/X-Amz-Signature'
      - $ref: '#/components/parameters/X-Amz-SignedHeaders'
  '/#AdminListGroupsForUser':
    post:
      operationId: AdminListGroupsForUser
      description: <p>Lists the groups that the user belongs to.</p> <p>Requires developer credentials.</p>
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AdminListGroupsForUserResponse'
        '480':
          description: InvalidParameterException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidParameterException'
        '481':
          description: ResourceNotFoundException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceNotFoundException'
        '482':
          description: TooManyRequestsException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TooManyRequestsException'
        '483':
          description: NotAuthorizedException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotAuthorizedException'
        '484':
          description: UserNotFoundException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserNotFoundException'
        '485':
          description: InternalErrorException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalErrorException'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AdminListGroupsForUserRequest'
        required: true
    parameters:
      - $ref: '#/components/parameters/Action'
      - $ref: '#/components/parameters/Version'
      - $ref: '#/components/parameters/X-Amz-Content-Sha256'
      - $ref: '#/components/parameters/X-Amz-Date'
      - $ref: '#/components/parameters/X-Amz-Algorithm'
      - $ref: '#/components/parameters/X-Amz-Credential'
      - $ref: '#/components/parameters/X-Amz-Security-Token'
      - $ref: '#/components/parameters/X-Amz-Signature'
      - $ref: '#/components/parameters/X-Amz-SignedHeaders'
  '/#AdminRemoveUserFromGroup':
    post:
      operationId: AdminRemoveUserFromGroup
      description: <p>Removes the specified user from the specified group.</p> <p>Requires developer credentials.</p>
      responses:
        '200':
          description: Success
        '480':
          description: InvalidParameterException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidParameterException'
        '481':
          description: ResourceNotFoundException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceNotFoundException'
        '482':
          description: TooManyRequestsException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TooManyRequestsException'
        '483':
          description: NotAuthorizedException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotAuthorizedException'
        '484':
          description: UserNotFoundException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserNotFoundException'
        '485':
          description: InternalErrorException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalErrorException'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AdminRemoveUserFromGroupRequest'
        required: true
    parameters:
      - $ref: '#/components/parameters/Action'
      - $ref: '#/components/parameters/Version'
      - $ref: '#/components/parameters/X-Amz-Content-Sha256'
      - $ref: '#/components/parameters/X-Amz-Date'
      - $ref: '#/components/parameters/X-Amz-Algorithm'
      - $ref: '#/components/parameters/X-Amz-Credential'
      - $ref: '#/components/parameters/X-Amz-Security-Token'
      - $ref: '#/components/parameters/X-Amz-Signature'
      - $ref: '#/components/parameters/X-Amz-SignedHeaders'
  '/#AdminResetUserPassword':
    post:
      operationId: AdminResetUserPassword
      description: '<p>Resets the specified user''s password in a user pool as an administrator. Works on any user.</p> <p>When a developer calls this API, the current password is invalidated, so it must be changed. If a user tries to sign in after the API is called, the app will get a PasswordResetRequiredException exception back and should direct the user down the flow to reset the password, which is the same as the forgot password flow. In addition, if the user pool has phone verification selected and a verified phone number exists for the user, or if email verification is selected and a verified email exists for the user, calling this API will also result in sending a message to the end user with the code to change their password.</p> <p>Requires developer credentials.</p>'
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AdminResetUserPasswordResponse'
        '480':
          description: ResourceNotFoundException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceNotFoundException'
        '481':
          description: InvalidParameterException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidParameterException'
        '482':
          description: UnexpectedLambdaException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnexpectedLambdaException'
        '483':
          description: UserLambdaValidationException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserLambdaValidationException'
        '484':
          description: NotAuthorizedException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotAuthorizedException'
        '485':
          description: InvalidLambdaResponseException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidLambdaResponseException'
        '486':
          description: TooManyRequestsException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TooManyRequestsException'
        '487':
          description: LimitExceededException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LimitExceededException'
        '488':
          description: UserNotFoundException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserNotFoundException'
        '489':
          description: InternalErrorException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalErrorException'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AdminResetUserPasswordRequest'
        required: true
    parameters:
      - $ref: '#/components/parameters/Action'
      - $ref: '#/components/parameters/Version'
      - $ref: '#/components/parameters/X-Amz-Content-Sha256'
      - $ref: '#/components/parameters/X-Amz-Date'
      - $ref: '#/components/parameters/X-Amz-Algorithm'
      - $ref: '#/components/parameters/X-Amz-Credential'
      - $ref: '#/components/parameters/X-Amz-Security-Token'
      - $ref: '#/components/parameters/X-Amz-Signature'
      - $ref: '#/components/parameters/X-Amz-SignedHeaders'
  '/#AdminRespondToAuthChallenge':
    post:
      operationId: AdminRespondToAuthChallenge
      description: '<p>Responds to an authentication challenge, as an administrator.</p> <p>Requires developer credentials.</p>'
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AdminRespondToAuthChallengeResponse'
        '480':
          description: ResourceNotFoundException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceNotFoundException'
        '481':
          description: InvalidParameterException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidParameterException'
        '482':
          description: NotAuthorizedException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotAuthorizedException'
        '483':
          description: CodeMismatchException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CodeMismatchException'
        '484':
          description: ExpiredCodeException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ExpiredCodeException'
        '485':
          description: UnexpectedLambdaException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnexpectedLambdaException'
        '486':
          description: InvalidPasswordException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidPasswordException'
        '487':
          description: UserLambdaValidationException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserLambdaValidationException'
        '488':
          description: InvalidLambdaResponseException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidLambdaResponseException'
        '489':
          description: TooManyRequestsException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TooManyRequestsException'
        '490':
          description: InvalidUserPoolConfigurationException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidUserPoolConfigurationException'
        '491':
          description: InternalErrorException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalErrorException'
        '492':
          description: MFAMethodNotFoundException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MFAMethodNotFoundException'
        '493':
          description: InvalidSmsRoleAccessPolicyException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidSmsRoleAccessPolicyException'
        '494':
          description: InvalidSmsRoleTrustRelationshipException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidSmsRoleTrustRelationshipException'
        '495':
          description: AliasExistsException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AliasExistsException'
        '496':
          description: PasswordResetRequiredException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PasswordResetRequiredException'
        '497':
          description: UserNotFoundException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserNotFoundException'
        '498':
          description: UserNotConfirmedException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserNotConfirmedException'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AdminRespondToAuthChallengeRequest'
        required: true
    parameters:
      - $ref: '#/components/parameters/Action'
      - $ref: '#/components/parameters/Version'
      - $ref: '#/components/parameters/X-Amz-Content-Sha256'
      - $ref: '#/components/parameters/X-Amz-Date'
      - $ref: '#/components/parameters/X-Amz-Algorithm'
      - $ref: '#/components/parameters/X-Amz-Credential'
      - $ref: '#/components/parameters/X-Amz-Security-Token'
      - $ref: '#/components/parameters/X-Amz-Signature'
      - $ref: '#/components/parameters/X-Amz-SignedHeaders'
  '/#AdminSetUserSettings':
    post:
      operationId: AdminSetUserSettings
      description: <p>Sets all the user settings for a specified user name. Works on any user.</p> <p>Requires developer credentials.</p>
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AdminSetUserSettingsResponse'
        '480':
          description: ResourceNotFoundException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceNotFoundException'
        '481':
          description: InvalidParameterException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidParameterException'
        '482':
          description: NotAuthorizedException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotAuthorizedException'
        '483':
          description: UserNotFoundException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserNotFoundException'
        '484':
          description: InternalErrorException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalErrorException'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AdminSetUserSettingsRequest'
        required: true
    parameters:
      - $ref: '#/components/parameters/Action'
      - $ref: '#/components/parameters/Version'
      - $ref: '#/components/parameters/X-Amz-Content-Sha256'
      - $ref: '#/components/parameters/X-Amz-Date'
      - $ref: '#/components/parameters/X-Amz-Algorithm'
      - $ref: '#/components/parameters/X-Amz-Credential'
      - $ref: '#/components/parameters/X-Amz-Security-Token'
      - $ref: '#/components/parameters/X-Amz-Signature'
      - $ref: '#/components/parameters/X-Amz-SignedHeaders'
  '/#AdminUpdateDeviceStatus':
    post:
      operationId: AdminUpdateDeviceStatus
      description: <p>Updates the device status as an administrator.</p> <p>Requires developer credentials.</p>
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AdminUpdateDeviceStatusResponse'
        '480':
          description: InvalidParameterException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidParameterException'
        '481':
          description: ResourceNotFoundException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceNotFoundException'
        '482':
          description: InvalidUserPoolConfigurationException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidUserPoolConfigurationException'
        '483':
          description: TooManyRequestsException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TooManyRequestsException'
        '484':
          description: NotAuthorizedException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotAuthorizedException'
        '485':
          description: UserNotFoundException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserNotFoundException'
        '486':
          description: InternalErrorException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalErrorException'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AdminUpdateDeviceStatusRequest'
        required: true
    parameters:
      - $ref: '#/components/parameters/Action'
      - $ref: '#/components/parameters/Version'
      - $ref: '#/components/parameters/X-Amz-Content-Sha256'
      - $ref: '#/components/parameters/X-Amz-Date'
      - $ref: '#/components/parameters/X-Amz-Algorithm'
      - $ref: '#/components/parameters/X-Amz-Credential'
      - $ref: '#/components/parameters/X-Amz-Security-Token'
      - $ref: '#/components/parameters/X-Amz-Signature'
      - $ref: '#/components/parameters/X-Amz-SignedHeaders'
  '/#AdminUpdateUserAttributes':
    post:
      operationId: AdminUpdateUserAttributes
      description: '<p>Updates the specified user''s attributes, including developer attributes, as an administrator. Works on any user.</p> <p>For custom attributes, you must prepend the <code>custom:</code> prefix to the attribute name.</p> <p>In addition to updating user attributes, this API can also be used to mark phone and email as verified.</p> <p>Requires developer credentials.</p>'
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AdminUpdateUserAttributesResponse'
        '480':
          description: ResourceNotFoundException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceNotFoundException'
        '481':
          description: InvalidParameterException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidParameterException'
        '482':
          description: UnexpectedLambdaException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnexpectedLambdaException'
        '483':
          description: UserLambdaValidationException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserLambdaValidationException'
        '484':
          description: InvalidLambdaResponseException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidLambdaResponseException'
        '485':
          description: AliasExistsException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AliasExistsException'
        '486':
          description: TooManyRequestsException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TooManyRequestsException'
        '487':
          description: NotAuthorizedException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotAuthorizedException'
        '488':
          description: UserNotFoundException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserNotFoundException'
        '489':
          description: InternalErrorException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalErrorException'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AdminUpdateUserAttributesRequest'
        required: true
    parameters:
      - $ref: '#/components/parameters/Action'
      - $ref: '#/components/parameters/Version'
      - $ref: '#/components/parameters/X-Amz-Content-Sha256'
      - $ref: '#/components/parameters/X-Amz-Date'
      - $ref: '#/components/parameters/X-Amz-Algorithm'
      - $ref: '#/components/parameters/X-Amz-Credential'
      - $ref: '#/components/parameters/X-Amz-Security-Token'
      - $ref: '#/components/parameters/X-Amz-Signature'
      - $ref: '#/components/parameters/X-Amz-SignedHeaders'
  '/#AdminUserGlobalSignOut':
    post:
      operationId: AdminUserGlobalSignOut
      description: '<p>Signs out users from all devices, as an administrator.</p> <p>Requires developer credentials.</p>'
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AdminUserGlobalSignOutResponse'
        '480':
          description: ResourceNotFoundException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceNotFoundException'
        '481':
          description: InvalidParameterException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidParameterException'
        '482':
          description: TooManyRequestsException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TooManyRequestsException'
        '483':
          description: NotAuthorizedException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotAuthorizedException'
        '484':
          description: UserNotFoundException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserNotFoundException'
        '485':
          description: InternalErrorException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalErrorException'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AdminUserGlobalSignOutRequest'
        required: true
    parameters:
      - $ref: '#/components/parameters/Action'
      - $ref: '#/components/parameters/Version'
      - $ref: '#/components/parameters/X-Amz-Content-Sha256'
      - $ref: '#/components/parameters/X-Amz-Date'
      - $ref: '#/components/parameters/X-Amz-Algorithm'
      - $ref: '#/components/parameters/X-Amz-Credential'
      - $ref: '#/components/parameters/X-Amz-Security-Token'
      - $ref: '#/components/parameters/X-Amz-Signature'
      - $ref: '#/components/parameters/X-Amz-SignedHeaders'
  '/#ChangePassword':
    post:
      operationId: ChangePassword
      description: Changes the password for a specified user in a user pool.
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ChangePasswordResponse'
        '480':
          description: ResourceNotFoundException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceNotFoundException'
        '481':
          description: InvalidParameterException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidParameterException'
        '482':
          description: InvalidPasswordException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidPasswordException'
        '483':
          description: NotAuthorizedException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotAuthorizedException'
        '484':
          description: TooManyRequestsException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TooManyRequestsException'
        '485':
          description: LimitExceededException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LimitExceededException'
        '486':
          description: PasswordResetRequiredException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PasswordResetRequiredException'
        '487':
          description: UserNotFoundException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserNotFoundException'
        '488':
          description: UserNotConfirmedException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserNotConfirmedException'
        '489':
          description: InternalErrorException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalErrorException'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ChangePasswordRequest'
        required: true
    parameters:
      - $ref: '#/components/parameters/Action'
      - $ref: '#/components/parameters/Version'
      - $ref: '#/components/parameters/X-Amz-Content-Sha256'
      - $ref: '#/components/parameters/X-Amz-Date'
      - $ref: '#/components/parameters/X-Amz-Algorithm'
      - $ref: '#/components/parameters/X-Amz-Credential'
      - $ref: '#/components/parameters/X-Amz-Security-Token'
      - $ref: '#/components/parameters/X-Amz-Signature'
      - $ref: '#/components/parameters/X-Amz-SignedHeaders'
  '/#ConfirmDevice':
    post:
      operationId: ConfirmDevice
      description: Confirms tracking of the device. This API call is the call that begins device tracking.
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ConfirmDeviceResponse'
        '480':
          description: ResourceNotFoundException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceNotFoundException'
        '481':
          description: InvalidParameterException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidParameterException'
        '482':
          description: NotAuthorizedException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotAuthorizedException'
        '483':
          description: InvalidPasswordException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidPasswordException'
        '484':
          description: InvalidLambdaResponseException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidLambdaResponseException'
        '485':
          description: UsernameExistsException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsernameExistsException'
        '486':
          description: InvalidUserPoolConfigurationException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidUserPoolConfigurationException'
        '487':
          description: TooManyRequestsException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TooManyRequestsException'
        '488':
          description: PasswordResetRequiredException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PasswordResetRequiredException'
        '489':
          description: UserNotFoundException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserNotFoundException'
        '490':
          description: UserNotConfirmedException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserNotConfirmedException'
        '491':
          description: InternalErrorException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalErrorException'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ConfirmDeviceRequest'
        required: true
    parameters:
      - $ref: '#/components/parameters/Action'
      - $ref: '#/components/parameters/Version'
      - $ref: '#/components/parameters/X-Amz-Content-Sha256'
      - $ref: '#/components/parameters/X-Amz-Date'
      - $ref: '#/components/parameters/X-Amz-Algorithm'
      - $ref: '#/components/parameters/X-Amz-Credential'
      - $ref: '#/components/parameters/X-Amz-Security-Token'
      - $ref: '#/components/parameters/X-Amz-Signature'
      - $ref: '#/components/parameters/X-Amz-SignedHeaders'
  '/#ConfirmForgotPassword':
    post:
      operationId: ConfirmForgotPassword
      description: Allows a user to enter a confirmation code to reset a forgotten password.
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ConfirmForgotPasswordResponse'
        '480':
          description: ResourceNotFoundException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceNotFoundException'
        '481':
          description: UnexpectedLambdaException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnexpectedLambdaException'
        '482':
          description: UserLambdaValidationException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserLambdaValidationException'
        '483':
          description: InvalidParameterException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidParameterException'
        '484':
          description: InvalidPasswordException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidPasswordException'
        '485':
          description: NotAuthorizedException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotAuthorizedException'
        '486':
          description: CodeMismatchException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CodeMismatchException'
        '487':
          description: ExpiredCodeException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ExpiredCodeException'
        '488':
          description: TooManyFailedAttemptsException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TooManyFailedAttemptsException'
        '489':
          description: InvalidLambdaResponseException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidLambdaResponseException'
        '490':
          description: TooManyRequestsException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TooManyRequestsException'
        '491':
          description: LimitExceededException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LimitExceededException'
        '492':
          description: UserNotFoundException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserNotFoundException'
        '493':
          description: UserNotConfirmedException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserNotConfirmedException'
        '494':
          description: InternalErrorException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalErrorException'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ConfirmForgotPasswordRequest'
        required: true
    parameters:
      - $ref: '#/components/parameters/Action'
      - $ref: '#/components/parameters/Version'
      - $ref: '#/components/parameters/X-Amz-Content-Sha256'
      - $ref: '#/components/parameters/X-Amz-Date'
      - $ref: '#/components/parameters/X-Amz-Algorithm'
      - $ref: '#/components/parameters/X-Amz-Credential'
      - $ref: '#/components/parameters/X-Amz-Security-Token'
      - $ref: '#/components/parameters/X-Amz-Signature'
      - $ref: '#/components/parameters/X-Amz-SignedHeaders'
  '/#ConfirmSignUp':
    post:
      operationId: ConfirmSignUp
      description: Confirms registration of a user and handles the existing alias from a previous user.
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ConfirmSignUpResponse'
        '480':
          description: ResourceNotFoundException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceNotFoundException'
        '481':
          description: InvalidParameterException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidParameterException'
        '482':
          description: UnexpectedLambdaException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnexpectedLambdaException'
        '483':
          description: UserLambdaValidationException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserLambdaValidationException'
        '484':
          description: NotAuthorizedException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotAuthorizedException'
        '485':
          description: TooManyFailedAttemptsException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TooManyFailedAttemptsException'
        '486':
          description: CodeMismatchException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CodeMismatchException'
        '487':
          description: ExpiredCodeException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ExpiredCodeException'
        '488':
          description: InvalidLambdaResponseException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidLambdaResponseException'
        '489':
          description: AliasExistsException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AliasExistsException'
        '490':
          description: TooManyRequestsException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TooManyRequestsException'
        '491':
          description: LimitExceededException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LimitExceededException'
        '492':
          description: UserNotFoundException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserNotFoundException'
        '493':
          description: InternalErrorException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalErrorException'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ConfirmSignUpRequest'
        required: true
    parameters:
      - $ref: '#/components/parameters/Action'
      - $ref: '#/components/parameters/Version'
      - $ref: '#/components/parameters/X-Amz-Content-Sha256'
      - $ref: '#/components/parameters/X-Amz-Date'
      - $ref: '#/components/parameters/X-Amz-Algorithm'
      - $ref: '#/components/parameters/X-Amz-Credential'
      - $ref: '#/components/parameters/X-Amz-Security-Token'
      - $ref: '#/components/parameters/X-Amz-Signature'
      - $ref: '#/components/parameters/X-Amz-SignedHeaders'
  '/#CreateGroup':
    post:
      operationId: CreateGroup
      description: <p>Creates a new group in the specified user pool.</p> <p>Requires developer credentials.</p>
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CreateGroupResponse'
        '480':
          description: InvalidParameterException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidParameterException'
        '481':
          description: GroupExistsException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GroupExistsException'
        '482':
          description: ResourceNotFoundException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceNotFoundException'
        '483':
          description: TooManyRequestsException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TooManyRequestsException'
        '484':
          description: LimitExceededException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LimitExceededException'
        '485':
          description: NotAuthorizedException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotAuthorizedException'
        '486':
          description: InternalErrorException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalErrorException'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateGroupRequest'
        required: true
    parameters:
      - $ref: '#/components/parameters/Action'
      - $ref: '#/components/parameters/Version'
      - $ref: '#/components/parameters/X-Amz-Content-Sha256'
      - $ref: '#/components/parameters/X-Amz-Date'
      - $ref: '#/components/parameters/X-Amz-Algorithm'
      - $ref: '#/components/parameters/X-Amz-Credential'
      - $ref: '#/components/parameters/X-Amz-Security-Token'
      - $ref: '#/components/parameters/X-Amz-Signature'
      - $ref: '#/components/parameters/X-Amz-SignedHeaders'
  '/#CreateIdentityProvider':
    post:
      operationId: CreateIdentityProvider
      description: Creates an identity provider for a user pool.
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CreateIdentityProviderResponse'
        '480':
          description: InvalidParameterException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidParameterException'
        '481':
          description: DuplicateProviderException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DuplicateProviderException'
        '482':
          description: ResourceNotFoundException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceNotFoundException'
        '483':
          description: NotAuthorizedException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotAuthorizedException'
        '484':
          description: TooManyRequestsException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TooManyRequestsException'
        '485':
          description: LimitExceededException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LimitExceededException'
        '486':
          description: InternalErrorException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalErrorException'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateIdentityProviderRequest'
        required: true
    parameters:
      - $ref: '#/components/parameters/Action'
      - $ref: '#/components/parameters/Version'
      - $ref: '#/components/parameters/X-Amz-Content-Sha256'
      - $ref: '#/components/parameters/X-Amz-Date'
      - $ref: '#/components/parameters/X-Amz-Algorithm'
      - $ref: '#/components/parameters/X-Amz-Credential'
      - $ref: '#/components/parameters/X-Amz-Security-Token'
      - $ref: '#/components/parameters/X-Amz-Signature'
      - $ref: '#/components/parameters/X-Amz-SignedHeaders'
  '/#CreateUserImportJob':
    post:
      operationId: CreateUserImportJob
      description: Creates the user import job.
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CreateUserImportJobResponse'
        '480':
          description: ResourceNotFoundException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceNotFoundException'
        '481':
          description: InvalidParameterException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidParameterException'
        '482':
          description: TooManyRequestsException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TooManyRequestsException'
        '483':
          description: PreconditionNotMetException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PreconditionNotMetException'
        '484':
          description: NotAuthorizedException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotAuthorizedException'
        '485':
          description: LimitExceededException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LimitExceededException'
        '486':
          description: InternalErrorException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalErrorException'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateUserImportJobRequest'
        required: true
    parameters:
      - $ref: '#/components/parameters/Action'
      - $ref: '#/components/parameters/Version'
      - $ref: '#/components/parameters/X-Amz-Content-Sha256'
      - $ref: '#/components/parameters/X-Amz-Date'
      - $ref: '#/components/parameters/X-Amz-Algorithm'
      - $ref: '#/components/parameters/X-Amz-Credential'
      - $ref: '#/components/parameters/X-Amz-Security-Token'
      - $ref: '#/components/parameters/X-Amz-Signature'
      - $ref: '#/components/parameters/X-Amz-SignedHeaders'
  '/#CreateUserPool':
    post:
      operationId: CreateUserPool
      description: Creates a new Amazon Cognito user pool and sets the password policy for the pool.
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CreateUserPoolResponse'
        '480':
          description: InvalidParameterException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidParameterException'
        '481':
          description: TooManyRequestsException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TooManyRequestsException'
        '482':
          description: LimitExceededException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LimitExceededException'
        '483':
          description: InvalidSmsRoleAccessPolicyException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidSmsRoleAccessPolicyException'
        '484':
          description: InvalidSmsRoleTrustRelationshipException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidSmsRoleTrustRelationshipException'
        '485':
          description: InvalidEmailRoleAccessPolicyException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidEmailRoleAccessPolicyException'
        '486':
          description: NotAuthorizedException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotAuthorizedException'
        '487':
          description: UserPoolTaggingException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserPoolTaggingException'
        '488':
          description: InternalErrorException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalErrorException'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateUserPoolRequest'
        required: true
    parameters:
      - $ref: '#/components/parameters/Action'
      - $ref: '#/components/parameters/Version'
      - $ref: '#/components/parameters/X-Amz-Content-Sha256'
      - $ref: '#/components/parameters/X-Amz-Date'
      - $ref: '#/components/parameters/X-Amz-Algorithm'
      - $ref: '#/components/parameters/X-Amz-Credential'
      - $ref: '#/components/parameters/X-Amz-Security-Token'
      - $ref: '#/components/parameters/X-Amz-Signature'
      - $ref: '#/components/parameters/X-Amz-SignedHeaders'
  '/#CreateUserPoolClient':
    post:
      operationId: CreateUserPoolClient
      description: Creates the user pool client.
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CreateUserPoolClientResponse'
        '480':
          description: InvalidParameterException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidParameterException'
        '481':
          description: ResourceNotFoundException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceNotFoundException'
        '482':
          description: TooManyRequestsException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TooManyRequestsException'
        '483':
          description: LimitExceededException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LimitExceededException'
        '484':
          description: NotAuthorizedException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotAuthorizedException'
        '485':
          description: ScopeDoesNotExistException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ScopeDoesNotExistException'
        '486':
          description: InvalidOAuthFlowException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidOAuthFlowException'
        '487':
          description: InternalErrorException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalErrorException'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateUserPoolClientRequest'
        required: true
    parameters:
      - $ref: '#/components/parameters/Action'
      - $ref: '#/components/parameters/Version'
      - $ref: '#/components/parameters/X-Amz-Content-Sha256'
      - $ref: '#/components/parameters/X-Amz-Date'
      - $ref: '#/components/parameters/X-Amz-Algorithm'
      - $ref: '#/components/parameters/X-Amz-Credential'
      - $ref: '#/components/parameters/X-Amz-Security-Token'
      - $ref: '#/components/parameters/X-Amz-Signature'
      - $ref: '#/components/parameters/X-Amz-SignedHeaders'
  '/#CreateUserPoolDomain':
    post:
      operationId: CreateUserPoolDomain
      description: Creates a new domain for a user pool.
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CreateUserPoolDomainResponse'
        '480':
          description: InvalidParameterException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidParameterException'
        '481':
          description: NotAuthorizedException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotAuthorizedException'
        '482':
          description: ResourceNotFoundException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceNotFoundException'
        '483':
          description: InternalErrorException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalErrorException'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateUserPoolDomainRequest'
        required: true
    parameters:
      - $ref: '#/components/parameters/Action'
      - $ref: '#/components/parameters/Version'
      - $ref: '#/components/parameters/X-Amz-Content-Sha256'
      - $ref: '#/components/parameters/X-Amz-Date'
      - $ref: '#/components/parameters/X-Amz-Algorithm'
      - $ref: '#/components/parameters/X-Amz-Credential'
      - $ref: '#/components/parameters/X-Amz-Security-Token'
      - $ref: '#/components/parameters/X-Amz-Signature'
      - $ref: '#/components/parameters/X-Amz-SignedHeaders'
  '/#DeleteGroup':
    post:
      operationId: DeleteGroup
      description: <p>Deletes a group. Currently only groups with no members can be deleted.</p> <p>Requires developer credentials.</p>
      responses:
        '200':
          description: Success
        '480':
          description: ResourceNotFoundException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceNotFoundException'
        '481':
          description: InvalidParameterException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidParameterException'
        '482':
          description: TooManyRequestsException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TooManyRequestsException'
        '483':
          description: NotAuthorizedException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotAuthorizedException'
        '484':
          description: InternalErrorException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalErrorException'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/DeleteGroupRequest'
        required: true
    parameters:
      - $ref: '#/components/parameters/Action'
      - $ref: '#/components/parameters/Version'
      - $ref: '#/components/parameters/X-Amz-Content-Sha256'
      - $ref: '#/components/parameters/X-Amz-Date'
      - $ref: '#/components/parameters/X-Amz-Algorithm'
      - $ref: '#/components/parameters/X-Amz-Credential'
      - $ref: '#/components/parameters/X-Amz-Security-Token'
      - $ref: '#/components/parameters/X-Amz-Signature'
      - $ref: '#/components/parameters/X-Amz-SignedHeaders'
  '/#DeleteIdentityProvider':
    post:
      operationId: DeleteIdentityProvider
      description: Deletes an identity provider for a user pool.
      responses:
        '200':
          description: Success
        '480':
          description: InvalidParameterException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidParameterException'
        '481':
          description: UnsupportedIdentityProviderException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnsupportedIdentityProviderException'
        '482':
          description: ResourceNotFoundException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceNotFoundException'
        '483':
          description: NotAuthorizedException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotAuthorizedException'
        '484':
          description: TooManyRequestsException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TooManyRequestsException'
        '485':
          description: InternalErrorException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalErrorException'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/DeleteIdentityProviderRequest'
        required: true
    parameters:
      - $ref: '#/components/parameters/Action'
      - $ref: '#/components/parameters/Version'
      - $ref: '#/components/parameters/X-Amz-Content-Sha256'
      - $ref: '#/components/parameters/X-Amz-Date'
      - $ref: '#/components/parameters/X-Amz-Algorithm'
      - $ref: '#/components/parameters/X-Amz-Credential'
      - $ref: '#/components/parameters/X-Amz-Security-Token'
      - $ref: '#/components/parameters/X-Amz-Signature'
      - $ref: '#/components/parameters/X-Amz-SignedHeaders'
  '/#DeleteUser':
    post:
      operationId: DeleteUser
      description: Allows a user to delete one's self.
      responses:
        '200':
          description: Success
        '480':
          description: ResourceNotFoundException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceNotFoundException'
        '481':
          description: InvalidParameterException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidParameterException'
        '482':
          description: NotAuthorizedException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotAuthorizedException'
        '483':
          description: TooManyRequestsException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TooManyRequestsException'
        '484':
          description: PasswordResetRequiredException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PasswordResetRequiredException'
        '485':
          description: UserNotFoundException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserNotFoundException'
        '486':
          description: UserNotConfirmedException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserNotConfirmedException'
        '487':
          description: InternalErrorException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalErrorException'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/DeleteUserRequest'
        required: true
    parameters:
      - $ref: '#/components/parameters/Action'
      - $ref: '#/components/parameters/Version'
      - $ref: '#/components/parameters/X-Amz-Content-Sha256'
      - $ref: '#/components/parameters/X-Amz-Date'
      - $ref: '#/components/parameters/X-Amz-Algorithm'
      - $ref: '#/components/parameters/X-Amz-Credential'
      - $ref: '#/components/parameters/X-Amz-Security-Token'
      - $ref: '#/components/parameters/X-Amz-Signature'
      - $ref: '#/components/parameters/X-Amz-SignedHeaders'
  '/#DeleteUserAttributes':
    post:
      operationId: DeleteUserAttributes
      description: Deletes the attributes for a user.
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DeleteUserAttributesResponse'
        '480':
          description: ResourceNotFoundException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceNotFoundException'
        '481':
          description: InvalidParameterException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidParameterException'
        '482':
          description: NotAuthorizedException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotAuthorizedException'
        '483':
          description: TooManyRequestsException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TooManyRequestsException'
        '484':
          description: PasswordResetRequiredException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PasswordResetRequiredException'
        '485':
          description: UserNotFoundException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserNotFoundException'
        '486':
          description: UserNotConfirmedException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserNotConfirmedException'
        '487':
          description: InternalErrorException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalErrorException'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/DeleteUserAttributesRequest'
        required: true
    parameters:
      - $ref: '#/components/parameters/Action'
      - $ref: '#/components/parameters/Version'
      - $ref: '#/components/parameters/X-Amz-Content-Sha256'
      - $ref: '#/components/parameters/X-Amz-Date'
      - $ref: '#/components/parameters/X-Amz-Algorithm'
      - $ref: '#/components/parameters/X-Amz-Credential'
      - $ref: '#/components/parameters/X-Amz-Security-Token'
      - $ref: '#/components/parameters/X-Amz-Signature'
      - $ref: '#/components/parameters/X-Amz-SignedHeaders'
  '/#DeleteUserPool':
    post:
      operationId: DeleteUserPool
      description: Deletes the specified Amazon Cognito user pool.
      responses:
        '200':
          description: Success
        '480':
          description: ResourceNotFoundException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceNotFoundException'
        '481':
          description: InvalidParameterException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidParameterException'
        '482':
          description: TooManyRequestsException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TooManyRequestsException'
        '483':
          description: NotAuthorizedException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotAuthorizedException'
        '484':
          description: UserImportInProgressException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserImportInProgressException'
        '485':
          description: InternalErrorException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalErrorException'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/DeleteUserPoolRequest'
        required: true
    parameters:
      - $ref: '#/components/parameters/Action'
      - $ref: '#/components/parameters/Version'
      - $ref: '#/components/parameters/X-Amz-Content-Sha256'
      - $ref: '#/components/parameters/X-Amz-Date'
      - $ref: '#/components/parameters/X-Amz-Algorithm'
      - $ref: '#/components/parameters/X-Amz-Credential'
      - $ref: '#/components/parameters/X-Amz-Security-Token'
      - $ref: '#/components/parameters/X-Amz-Signature'
      - $ref: '#/components/parameters/X-Amz-SignedHeaders'
  '/#DeleteUserPoolClient':
    post:
      operationId: DeleteUserPoolClient
      description: Allows the developer to delete the user pool client.
      responses:
        '200':
          description: Success
        '480':
          description: ResourceNotFoundException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceNotFoundException'
        '481':
          description: InvalidParameterException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidParameterException'
        '482':
          description: TooManyRequestsException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TooManyRequestsException'
        '483':
          description: NotAuthorizedException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotAuthorizedException'
        '484':
          description: InternalErrorException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalErrorException'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/DeleteUserPoolClientRequest'
        required: true
    parameters:
      - $ref: '#/components/parameters/Action'
      - $ref: '#/components/parameters/Version'
      - $ref: '#/components/parameters/X-Amz-Content-Sha256'
      - $ref: '#/components/parameters/X-Amz-Date'
      - $ref: '#/components/parameters/X-Amz-Algorithm'
      - $ref: '#/components/parameters/X-Amz-Credential'
      - $ref: '#/components/parameters/X-Amz-Security-Token'
      - $ref: '#/components/parameters/X-Amz-Signature'
      - $ref: '#/components/parameters/X-Amz-SignedHeaders'
  '/#DeleteUserPoolDomain':
    post:
      operationId: DeleteUserPoolDomain
      description: Deletes a domain for a user pool.
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DeleteUserPoolDomainResponse'
        '480':
          description: NotAuthorizedException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotAuthorizedException'
        '481':
          description: InvalidParameterException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidParameterException'
        '482':
          description: ResourceNotFoundException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceNotFoundException'
        '483':
          description: InternalErrorException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalErrorException'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/DeleteUserPoolDomainRequest'
        required: true
    parameters:
      - $ref: '#/components/parameters/Action'
      - $ref: '#/components/parameters/Version'
      - $ref: '#/components/parameters/X-Amz-Content-Sha256'
      - $ref: '#/components/parameters/X-Amz-Date'
      - $ref: '#/components/parameters/X-Amz-Algorithm'
      - $ref: '#/components/parameters/X-Amz-Credential'
      - $ref: '#/components/parameters/X-Amz-Security-Token'
      - $ref: '#/components/parameters/X-Amz-Signature'
      - $ref: '#/components/parameters/X-Amz-SignedHeaders'
  '/#DescribeIdentityProvider':
    post:
      operationId: DescribeIdentityProvider
      description: Gets information about a specific identity provider.
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DescribeIdentityProviderResponse'
        '480':
          description: InvalidParameterException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidParameterException'
        '481':
          description: ResourceNotFoundException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceNotFoundException'
        '482':
          description: NotAuthorizedException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotAuthorizedException'
        '483':
          description: TooManyRequestsException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TooManyRequestsException'
        '484':
          description: InternalErrorException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalErrorException'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/DescribeIdentityProviderRequest'
        required: true
    parameters:
      - $ref: '#/components/parameters/Action'
      - $ref: '#/components/parameters/Version'
      - $ref: '#/components/parameters/X-Amz-Content-Sha256'
      - $ref: '#/components/parameters/X-Amz-Date'
      - $ref: '#/components/parameters/X-Amz-Algorithm'
      - $ref: '#/components/parameters/X-Amz-Credential'
      - $ref: '#/components/parameters/X-Amz-Security-Token'
      - $ref: '#/components/parameters/X-Amz-Signature'
      - $ref: '#/components/parameters/X-Amz-SignedHeaders'
  '/#DescribeUserImportJob':
    post:
      operationId: DescribeUserImportJob
      description: Describes the user import job.
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DescribeUserImportJobResponse'
        '480':
          description: ResourceNotFoundException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceNotFoundException'
        '481':
          description: InvalidParameterException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidParameterException'
        '482':
          description: TooManyRequestsException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TooManyRequestsException'
        '483':
          description: NotAuthorizedException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotAuthorizedException'
        '484':
          description: InternalErrorException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalErrorException'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/DescribeUserImportJobRequest'
        required: true
    parameters:
      - $ref: '#/components/parameters/Action'
      - $ref: '#/components/parameters/Version'
      - $ref: '#/components/parameters/X-Amz-Content-Sha256'
      - $ref: '#/components/parameters/X-Amz-Date'
      - $ref: '#/components/parameters/X-Amz-Algorithm'
      - $ref: '#/components/parameters/X-Amz-Credential'
      - $ref: '#/components/parameters/X-Amz-Security-Token'
      - $ref: '#/components/parameters/X-Amz-Signature'
      - $ref: '#/components/parameters/X-Amz-SignedHeaders'
  '/#DescribeUserPool':
    post:
      operationId: DescribeUserPool
      description: Returns the configuration information and metadata of the specified user pool.
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DescribeUserPoolResponse'
        '480':
          description: ResourceNotFoundException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceNotFoundException'
        '481':
          description: InvalidParameterException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidParameterException'
        '482':
          description: TooManyRequestsException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TooManyRequestsException'
        '483':
          description: NotAuthorizedException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotAuthorizedException'
        '484':
          description: UserPoolTaggingException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserPoolTaggingException'
        '485':
          description: InternalErrorException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalErrorException'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/DescribeUserPoolRequest'
        required: true
    parameters:
      - $ref: '#/components/parameters/Action'
      - $ref: '#/components/parameters/Version'
      - $ref: '#/components/parameters/X-Amz-Content-Sha256'
      - $ref: '#/components/parameters/X-Amz-Date'
      - $ref: '#/components/parameters/X-Amz-Algorithm'
      - $ref: '#/components/parameters/X-Amz-Credential'
      - $ref: '#/components/parameters/X-Amz-Security-Token'
      - $ref: '#/components/parameters/X-Amz-Signature'
      - $ref: '#/components/parameters/X-Amz-SignedHeaders'
  '/#DescribeUserPoolClient':
    post:
      operationId: DescribeUserPoolClient
      description: Client method for returning the configuration information and metadata of the specified user pool client.
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DescribeUserPoolClientResponse'
        '480':
          description: ResourceNotFoundException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceNotFoundException'
        '481':
          description: InvalidParameterException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidParameterException'
        '482':
          description: TooManyRequestsException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TooManyRequestsException'
        '483':
          description: NotAuthorizedException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotAuthorizedException'
        '484':
          description: InternalErrorException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalErrorException'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/DescribeUserPoolClientRequest'
        required: true
    parameters:
      - $ref: '#/components/parameters/Action'
      - $ref: '#/components/parameters/Version'
      - $ref: '#/components/parameters/X-Amz-Content-Sha256'
      - $ref: '#/components/parameters/X-Amz-Date'
      - $ref: '#/components/parameters/X-Amz-Algorithm'
      - $ref: '#/components/parameters/X-Amz-Credential'
      - $ref: '#/components/parameters/X-Amz-Security-Token'
      - $ref: '#/components/parameters/X-Amz-Signature'
      - $ref: '#/components/parameters/X-Amz-SignedHeaders'
  '/#DescribeUserPoolDomain':
    post:
      operationId: DescribeUserPoolDomain
      description: Gets information about a domain.
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DescribeUserPoolDomainResponse'
        '480':
          description: NotAuthorizedException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotAuthorizedException'
        '481':
          description: InvalidParameterException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidParameterException'
        '482':
          description: ResourceNotFoundException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceNotFoundException'
        '483':
          description: InternalErrorException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalErrorException'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/DescribeUserPoolDomainRequest'
        required: true
    parameters:
      - $ref: '#/components/parameters/Action'
      - $ref: '#/components/parameters/Version'
      - $ref: '#/components/parameters/X-Amz-Content-Sha256'
      - $ref: '#/components/parameters/X-Amz-Date'
      - $ref: '#/components/parameters/X-Amz-Algorithm'
      - $ref: '#/components/parameters/X-Amz-Credential'
      - $ref: '#/components/parameters/X-Amz-Security-Token'
      - $ref: '#/components/parameters/X-Amz-Signature'
      - $ref: '#/components/parameters/X-Amz-SignedHeaders'
  '/#ForgetDevice':
    post:
      operationId: ForgetDevice
      description: Forgets the specified device.
      responses:
        '200':
          description: Success
        '480':
          description: ResourceNotFoundException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceNotFoundException'
        '481':
          description: InvalidParameterException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidParameterException'
        '482':
          description: NotAuthorizedException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotAuthorizedException'
        '483':
          description: TooManyRequestsException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TooManyRequestsException'
        '484':
          description: InvalidUserPoolConfigurationException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidUserPoolConfigurationException'
        '485':
          description: PasswordResetRequiredException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PasswordResetRequiredException'
        '486':
          description: UserNotFoundException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserNotFoundException'
        '487':
          description: UserNotConfirmedException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserNotConfirmedException'
        '488':
          description: InternalErrorException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalErrorException'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ForgetDeviceRequest'
        required: true
    parameters:
      - $ref: '#/components/parameters/Action'
      - $ref: '#/components/parameters/Version'
      - $ref: '#/components/parameters/X-Amz-Content-Sha256'
      - $ref: '#/components/parameters/X-Amz-Date'
      - $ref: '#/components/parameters/X-Amz-Algorithm'
      - $ref: '#/components/parameters/X-Amz-Credential'
      - $ref: '#/components/parameters/X-Amz-Security-Token'
      - $ref: '#/components/parameters/X-Amz-Signature'
      - $ref: '#/components/parameters/X-Amz-SignedHeaders'
  '/#ForgotPassword':
    post:
      operationId: ForgotPassword
      description: 'Calling this API causes a message to be sent to the end user with a confirmation code that is required to change the user''s password. For the <code>Username</code> parameter, you can use the username or user alias. If a verified phone number exists for the user, the confirmation code is sent to the phone number. Otherwise, if a verified email exists, the confirmation code is sent to the email. If neither a verified phone number nor a verified email exists, <code>InvalidParameterException</code> is thrown. To use the confirmation code for resetting the password, call <a href="API_ConfirmForgotPassword.html">ConfirmForgotPassword</a>.'
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ForgotPasswordResponse'
        '480':
          description: ResourceNotFoundException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceNotFoundException'
        '481':
          description: InvalidParameterException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidParameterException'
        '482':
          description: UnexpectedLambdaException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnexpectedLambdaException'
        '483':
          description: UserLambdaValidationException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserLambdaValidationException'
        '484':
          description: NotAuthorizedException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotAuthorizedException'
        '485':
          description: InvalidLambdaResponseException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidLambdaResponseException'
        '486':
          description: TooManyRequestsException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TooManyRequestsException'
        '487':
          description: LimitExceededException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LimitExceededException'
        '488':
          description: InvalidSmsRoleAccessPolicyException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidSmsRoleAccessPolicyException'
        '489':
          description: InvalidSmsRoleTrustRelationshipException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidSmsRoleTrustRelationshipException'
        '490':
          description: InvalidEmailRoleAccessPolicyException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidEmailRoleAccessPolicyException'
        '491':
          description: CodeDeliveryFailureException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CodeDeliveryFailureException'
        '492':
          description: UserNotFoundException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserNotFoundException'
        '493':
          description: UserNotConfirmedException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserNotConfirmedException'
        '494':
          description: InternalErrorException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalErrorException'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ForgotPasswordRequest'
        required: true
    parameters:
      - $ref: '#/components/parameters/Action'
      - $ref: '#/components/parameters/Version'
      - $ref: '#/components/parameters/X-Amz-Content-Sha256'
      - $ref: '#/components/parameters/X-Amz-Date'
      - $ref: '#/components/parameters/X-Amz-Algorithm'
      - $ref: '#/components/parameters/X-Amz-Credential'
      - $ref: '#/components/parameters/X-Amz-Security-Token'
      - $ref: '#/components/parameters/X-Amz-Signature'
      - $ref: '#/components/parameters/X-Amz-SignedHeaders'
  '/#GetCSVHeader':
    post:
      operationId: GetCSVHeader
      description: Gets the header information for the .csv file to be used as input for the user import job.
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetCSVHeaderResponse'
        '480':
          description: ResourceNotFoundException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceNotFoundException'
        '481':
          description: InvalidParameterException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidParameterException'
        '482':
          description: TooManyRequestsException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TooManyRequestsException'
        '483':
          description: NotAuthorizedException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotAuthorizedException'
        '484':
          description: InternalErrorException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalErrorException'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/GetCSVHeaderRequest'
        required: true
    parameters:
      - $ref: '#/components/parameters/Action'
      - $ref: '#/components/parameters/Version'
      - $ref: '#/components/parameters/X-Amz-Content-Sha256'
      - $ref: '#/components/parameters/X-Amz-Date'
      - $ref: '#/components/parameters/X-Amz-Algorithm'
      - $ref: '#/components/parameters/X-Amz-Credential'
      - $ref: '#/components/parameters/X-Amz-Security-Token'
      - $ref: '#/components/parameters/X-Amz-Signature'
      - $ref: '#/components/parameters/X-Amz-SignedHeaders'
  '/#GetDevice':
    post:
      operationId: GetDevice
      description: Gets the device.
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetDeviceResponse'
        '480':
          description: ResourceNotFoundException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceNotFoundException'
        '481':
          description: InvalidParameterException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidParameterException'
        '482':
          description: InvalidUserPoolConfigurationException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidUserPoolConfigurationException'
        '483':
          description: NotAuthorizedException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotAuthorizedException'
        '484':
          description: TooManyRequestsException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TooManyRequestsException'
        '485':
          description: PasswordResetRequiredException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PasswordResetRequiredException'
        '486':
          description: UserNotFoundException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserNotFoundException'
        '487':
          description: UserNotConfirmedException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserNotConfirmedException'
        '488':
          description: InternalErrorException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalErrorException'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/GetDeviceRequest'
        required: true
    parameters:
      - $ref: '#/components/parameters/Action'
      - $ref: '#/components/parameters/Version'
      - $ref: '#/components/parameters/X-Amz-Content-Sha256'
      - $ref: '#/components/parameters/X-Amz-Date'
      - $ref: '#/components/parameters/X-Amz-Algorithm'
      - $ref: '#/components/parameters/X-Amz-Credential'
      - $ref: '#/components/parameters/X-Amz-Security-Token'
      - $ref: '#/components/parameters/X-Amz-Signature'
      - $ref: '#/components/parameters/X-Amz-SignedHeaders'
  '/#GetGroup':
    post:
      operationId: GetGroup
      description: <p>Gets a group.</p> <p>Requires developer credentials.</p>
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetGroupResponse'
        '480':
          description: ResourceNotFoundException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceNotFoundException'
        '481':
          description: InvalidParameterException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidParameterException'
        '482':
          description: TooManyRequestsException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TooManyRequestsException'
        '483':
          description: NotAuthorizedException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotAuthorizedException'
        '484':
          description: InternalErrorException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalErrorException'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/GetGroupRequest'
        required: true
    parameters:
      - $ref: '#/components/parameters/Action'
      - $ref: '#/components/parameters/Version'
      - $ref: '#/components/parameters/X-Amz-Content-Sha256'
      - $ref: '#/components/parameters/X-Amz-Date'
      - $ref: '#/components/parameters/X-Amz-Algorithm'
      - $ref: '#/components/parameters/X-Amz-Credential'
      - $ref: '#/components/parameters/X-Amz-Security-Token'
      - $ref: '#/components/parameters/X-Amz-Signature'
      - $ref: '#/components/parameters/X-Amz-SignedHeaders'
  '/#GetIdentityProviderByIdentifier':
    post:
      operationId: GetIdentityProviderByIdentifier
      description: Gets the specified identity provider.
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetIdentityProviderByIdentifierResponse'
        '480':
          description: InvalidParameterException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidParameterException'
        '481':
          description: ResourceNotFoundException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceNotFoundException'
        '482':
          description: NotAuthorizedException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotAuthorizedException'
        '483':
          description: TooManyRequestsException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TooManyRequestsException'
        '484':
          description: InternalErrorException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalErrorException'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/GetIdentityProviderByIdentifierRequest'
        required: true
    parameters:
      - $ref: '#/components/parameters/Action'
      - $ref: '#/components/parameters/Version'
      - $ref: '#/components/parameters/X-Amz-Content-Sha256'
      - $ref: '#/components/parameters/X-Amz-Date'
      - $ref: '#/components/parameters/X-Amz-Algorithm'
      - $ref: '#/components/parameters/X-Amz-Credential'
      - $ref: '#/components/parameters/X-Amz-Security-Token'
      - $ref: '#/components/parameters/X-Amz-Signature'
      - $ref: '#/components/parameters/X-Amz-SignedHeaders'
  '/#GetUser':
    post:
      operationId: GetUser
      description: Gets the user attributes and metadata for a user.
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetUserResponse'
        '480':
          description: ResourceNotFoundException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceNotFoundException'
        '481':
          description: InvalidParameterException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidParameterException'
        '482':
          description: NotAuthorizedException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotAuthorizedException'
        '483':
          description: TooManyRequestsException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TooManyRequestsException'
        '484':
          description: PasswordResetRequiredException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PasswordResetRequiredException'
        '485':
          description: UserNotFoundException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserNotFoundException'
        '486':
          description: UserNotConfirmedException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserNotConfirmedException'
        '487':
          description: InternalErrorException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalErrorException'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/GetUserRequest'
        required: true
    parameters:
      - $ref: '#/components/parameters/Action'
      - $ref: '#/components/parameters/Version'
      - $ref: '#/components/parameters/X-Amz-Content-Sha256'
      - $ref: '#/components/parameters/X-Amz-Date'
      - $ref: '#/components/parameters/X-Amz-Algorithm'
      - $ref: '#/components/parameters/X-Amz-Credential'
      - $ref: '#/components/parameters/X-Amz-Security-Token'
      - $ref: '#/components/parameters/X-Amz-Signature'
      - $ref: '#/components/parameters/X-Amz-SignedHeaders'
  '/#GetUserAttributeVerificationCode':
    post:
      operationId: GetUserAttributeVerificationCode
      description: Gets the user attribute verification code for the specified attribute name.
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetUserAttributeVerificationCodeResponse'
        '480':
          description: ResourceNotFoundException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceNotFoundException'
        '481':
          description: InvalidParameterException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidParameterException'
        '482':
          description: TooManyRequestsException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TooManyRequestsException'
        '483':
          description: NotAuthorizedException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotAuthorizedException'
        '484':
          description: UnexpectedLambdaException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnexpectedLambdaException'
        '485':
          description: UserLambdaValidationException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserLambdaValidationException'
        '486':
          description: InvalidLambdaResponseException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidLambdaResponseException'
        '487':
          description: InvalidSmsRoleAccessPolicyException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidSmsRoleAccessPolicyException'
        '488':
          description: InvalidSmsRoleTrustRelationshipException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidSmsRoleTrustRelationshipException'
        '489':
          description: InvalidEmailRoleAccessPolicyException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidEmailRoleAccessPolicyException'
        '490':
          description: CodeDeliveryFailureException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CodeDeliveryFailureException'
        '491':
          description: LimitExceededException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LimitExceededException'
        '492':
          description: PasswordResetRequiredException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PasswordResetRequiredException'
        '493':
          description: UserNotFoundException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserNotFoundException'
        '494':
          description: UserNotConfirmedException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserNotConfirmedException'
        '495':
          description: InternalErrorException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalErrorException'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/GetUserAttributeVerificationCodeRequest'
        required: true
    parameters:
      - $ref: '#/components/parameters/Action'
      - $ref: '#/components/parameters/Version'
      - $ref: '#/components/parameters/X-Amz-Content-Sha256'
      - $ref: '#/components/parameters/X-Amz-Date'
      - $ref: '#/components/parameters/X-Amz-Algorithm'
      - $ref: '#/components/parameters/X-Amz-Credential'
      - $ref: '#/components/parameters/X-Amz-Security-Token'
      - $ref: '#/components/parameters/X-Amz-Signature'
      - $ref: '#/components/parameters/X-Amz-SignedHeaders'
  '/#GlobalSignOut':
    post:
      operationId: GlobalSignOut
      description: Signs out users from all devices.
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GlobalSignOutResponse'
        '480':
          description: ResourceNotFoundException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceNotFoundException'
        '481':
          description: InvalidParameterException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidParameterException'
        '482':
          description: NotAuthorizedException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotAuthorizedException'
        '483':
          description: TooManyRequestsException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TooManyRequestsException'
        '484':
          description: PasswordResetRequiredException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PasswordResetRequiredException'
        '485':
          description: UserNotConfirmedException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserNotConfirmedException'
        '486':
          description: InternalErrorException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalErrorException'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/GlobalSignOutRequest'
        required: true
    parameters:
      - $ref: '#/components/parameters/Action'
      - $ref: '#/components/parameters/Version'
      - $ref: '#/components/parameters/X-Amz-Content-Sha256'
      - $ref: '#/components/parameters/X-Amz-Date'
      - $ref: '#/components/parameters/X-Amz-Algorithm'
      - $ref: '#/components/parameters/X-Amz-Credential'
      - $ref: '#/components/parameters/X-Amz-Security-Token'
      - $ref: '#/components/parameters/X-Amz-Signature'
      - $ref: '#/components/parameters/X-Amz-SignedHeaders'
  '/#InitiateAuth':
    post:
      operationId: InitiateAuth
      description: Initiates the authentication flow.
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InitiateAuthResponse'
        '480':
          description: ResourceNotFoundException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceNotFoundException'
        '481':
          description: InvalidParameterException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidParameterException'
        '482':
          description: NotAuthorizedException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotAuthorizedException'
        '483':
          description: TooManyRequestsException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TooManyRequestsException'
        '484':
          description: UnexpectedLambdaException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnexpectedLambdaException'
        '485':
          description: InvalidUserPoolConfigurationException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidUserPoolConfigurationException'
        '486':
          description: UserLambdaValidationException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserLambdaValidationException'
        '487':
          description: InvalidLambdaResponseException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidLambdaResponseException'
        '488':
          description: PasswordResetRequiredException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PasswordResetRequiredException'
        '489':
          description: UserNotFoundException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserNotFoundException'
        '490':
          description: UserNotConfirmedException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserNotConfirmedException'
        '491':
          description: InternalErrorException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalErrorException'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/InitiateAuthRequest'
        required: true
    parameters:
      - $ref: '#/components/parameters/Action'
      - $ref: '#/components/parameters/Version'
      - $ref: '#/components/parameters/X-Amz-Content-Sha256'
      - $ref: '#/components/parameters/X-Amz-Date'
      - $ref: '#/components/parameters/X-Amz-Algorithm'
      - $ref: '#/components/parameters/X-Amz-Credential'
      - $ref: '#/components/parameters/X-Amz-Security-Token'
      - $ref: '#/components/parameters/X-Amz-Signature'
      - $ref: '#/components/parameters/X-Amz-SignedHeaders'
  '/#ListDevices':
    post:
      operationId: ListDevices
      description: Lists the devices.
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ListDevicesResponse'
        '480':
          description: InvalidParameterException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidParameterException'
        '481':
          description: ResourceNotFoundException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceNotFoundException'
        '482':
          description: NotAuthorizedException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotAuthorizedException'
        '483':
          description: InvalidUserPoolConfigurationException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidUserPoolConfigurationException'
        '484':
          description: TooManyRequestsException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TooManyRequestsException'
        '485':
          description: PasswordResetRequiredException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PasswordResetRequiredException'
        '486':
          description: UserNotFoundException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserNotFoundException'
        '487':
          description: UserNotConfirmedException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserNotConfirmedException'
        '488':
          description: InternalErrorException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalErrorException'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ListDevicesRequest'
        required: true
    parameters:
      - $ref: '#/components/parameters/Action'
      - $ref: '#/components/parameters/Version'
      - $ref: '#/components/parameters/X-Amz-Content-Sha256'
      - $ref: '#/components/parameters/X-Amz-Date'
      - $ref: '#/components/parameters/X-Amz-Algorithm'
      - $ref: '#/components/parameters/X-Amz-Credential'
      - $ref: '#/components/parameters/X-Amz-Security-Token'
      - $ref: '#/components/parameters/X-Amz-Signature'
      - $ref: '#/components/parameters/X-Amz-SignedHeaders'
  '/#ListGroups':
    post:
      operationId: ListGroups
      description: <p>Lists the groups associated with a user pool.</p> <p>Requires developer credentials.</p>
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ListGroupsResponse'
        '480':
          description: InvalidParameterException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidParameterException'
        '481':
          description: ResourceNotFoundException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceNotFoundException'
        '482':
          description: TooManyRequestsException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TooManyRequestsException'
        '483':
          description: NotAuthorizedException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotAuthorizedException'
        '484':
          description: InternalErrorException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalErrorException'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ListGroupsRequest'
        required: true
    parameters:
      - $ref: '#/components/parameters/Action'
      - $ref: '#/components/parameters/Version'
      - $ref: '#/components/parameters/X-Amz-Content-Sha256'
      - $ref: '#/components/parameters/X-Amz-Date'
      - $ref: '#/components/parameters/X-Amz-Algorithm'
      - $ref: '#/components/parameters/X-Amz-Credential'
      - $ref: '#/components/parameters/X-Amz-Security-Token'
      - $ref: '#/components/parameters/X-Amz-Signature'
      - $ref: '#/components/parameters/X-Amz-SignedHeaders'
  '/#ListIdentityProviders':
    post:
      operationId: ListIdentityProviders
      description: Lists information about all identity providers for a user pool.
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ListIdentityProvidersResponse'
        '480':
          description: InvalidParameterException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidParameterException'
        '481':
          description: ResourceNotFoundException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceNotFoundException'
        '482':
          description: NotAuthorizedException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotAuthorizedException'
        '483':
          description: TooManyRequestsException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TooManyRequestsException'
        '484':
          description: InternalErrorException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalErrorException'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ListIdentityProvidersRequest'
        required: true
    parameters:
      - $ref: '#/components/parameters/Action'
      - $ref: '#/components/parameters/Version'
      - $ref: '#/components/parameters/X-Amz-Content-Sha256'
      - $ref: '#/components/parameters/X-Amz-Date'
      - $ref: '#/components/parameters/X-Amz-Algorithm'
      - $ref: '#/components/parameters/X-Amz-Credential'
      - $ref: '#/components/parameters/X-Amz-Security-Token'
      - $ref: '#/components/parameters/X-Amz-Signature'
      - $ref: '#/components/parameters/X-Amz-SignedHeaders'
  '/#ListUserImportJobs':
    post:
      operationId: ListUserImportJobs
      description: Lists the user import jobs.
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ListUserImportJobsResponse'
        '480':
          description: ResourceNotFoundException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceNotFoundException'
        '481':
          description: InvalidParameterException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidParameterException'
        '482':
          description: TooManyRequestsException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TooManyRequestsException'
        '483':
          description: NotAuthorizedException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotAuthorizedException'
        '484':
          description: InternalErrorException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalErrorException'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ListUserImportJobsRequest'
        required: true
    parameters:
      - $ref: '#/components/parameters/Action'
      - $ref: '#/components/parameters/Version'
      - $ref: '#/components/parameters/X-Amz-Content-Sha256'
      - $ref: '#/components/parameters/X-Amz-Date'
      - $ref: '#/components/parameters/X-Amz-Algorithm'
      - $ref: '#/components/parameters/X-Amz-Credential'
      - $ref: '#/components/parameters/X-Amz-Security-Token'
      - $ref: '#/components/parameters/X-Amz-Signature'
      - $ref: '#/components/parameters/X-Amz-SignedHeaders'
  '/#ListUserPoolClients':
    post:
      operationId: ListUserPoolClients
      description: Lists the clients that have been created for the specified user pool.
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ListUserPoolClientsResponse'
        '480':
          description: InvalidParameterException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidParameterException'
        '481':
          description: ResourceNotFoundException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceNotFoundException'
        '482':
          description: TooManyRequestsException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TooManyRequestsException'
        '483':
          description: NotAuthorizedException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotAuthorizedException'
        '484':
          description: InternalErrorException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalErrorException'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ListUserPoolClientsRequest'
        required: true
    parameters:
      - $ref: '#/components/parameters/Action'
      - $ref: '#/components/parameters/Version'
      - $ref: '#/components/parameters/X-Amz-Content-Sha256'
      - $ref: '#/components/parameters/X-Amz-Date'
      - $ref: '#/components/parameters/X-Amz-Algorithm'
      - $ref: '#/components/parameters/X-Amz-Credential'
      - $ref: '#/components/parameters/X-Amz-Security-Token'
      - $ref: '#/components/parameters/X-Amz-Signature'
      - $ref: '#/components/parameters/X-Amz-SignedHeaders'
  '/#ListUserPools':
    post:
      operationId: ListUserPools
      description: Lists the user pools associated with an AWS account.
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ListUserPoolsResponse'
        '480':
          description: InvalidParameterException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidParameterException'
        '481':
          description: TooManyRequestsException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TooManyRequestsException'
        '482':
          description: NotAuthorizedException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotAuthorizedException'
        '483':
          description: InternalErrorException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalErrorException'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ListUserPoolsRequest'
        required: true
    parameters:
      - $ref: '#/components/parameters/Action'
      - $ref: '#/components/parameters/Version'
      - $ref: '#/components/parameters/X-Amz-Content-Sha256'
      - $ref: '#/components/parameters/X-Amz-Date'
      - $ref: '#/components/parameters/X-Amz-Algorithm'
      - $ref: '#/components/parameters/X-Amz-Credential'
      - $ref: '#/components/parameters/X-Amz-Security-Token'
      - $ref: '#/components/parameters/X-Amz-Signature'
      - $ref: '#/components/parameters/X-Amz-SignedHeaders'
  '/#ListUsers':
    post:
      operationId: ListUsers
      description: Lists the users in the Amazon Cognito user pool.
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ListUsersResponse'
        '480':
          description: InvalidParameterException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidParameterException'
        '481':
          description: ResourceNotFoundException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceNotFoundException'
        '482':
          description: TooManyRequestsException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TooManyRequestsException'
        '483':
          description: NotAuthorizedException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotAuthorizedException'
        '484':
          description: InternalErrorException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalErrorException'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ListUsersRequest'
        required: true
    parameters:
      - $ref: '#/components/parameters/Action'
      - $ref: '#/components/parameters/Version'
      - $ref: '#/components/parameters/X-Amz-Content-Sha256'
      - $ref: '#/components/parameters/X-Amz-Date'
      - $ref: '#/components/parameters/X-Amz-Algorithm'
      - $ref: '#/components/parameters/X-Amz-Credential'
      - $ref: '#/components/parameters/X-Amz-Security-Token'
      - $ref: '#/components/parameters/X-Amz-Signature'
      - $ref: '#/components/parameters/X-Amz-SignedHeaders'
  '/#ListUsersInGroup':
    post:
      operationId: ListUsersInGroup
      description: <p>Lists the users in the specified group.</p> <p>Requires developer credentials.</p>
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ListUsersInGroupResponse'
        '480':
          description: InvalidParameterException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidParameterException'
        '481':
          description: ResourceNotFoundException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceNotFoundException'
        '482':
          description: TooManyRequestsException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TooManyRequestsException'
        '483':
          description: NotAuthorizedException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotAuthorizedException'
        '484':
          description: InternalErrorException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalErrorException'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ListUsersInGroupRequest'
        required: true
    parameters:
      - $ref: '#/components/parameters/Action'
      - $ref: '#/components/parameters/Version'
      - $ref: '#/components/parameters/X-Amz-Content-Sha256'
      - $ref: '#/components/parameters/X-Amz-Date'
      - $ref: '#/components/parameters/X-Amz-Algorithm'
      - $ref: '#/components/parameters/X-Amz-Credential'
      - $ref: '#/components/parameters/X-Amz-Security-Token'
      - $ref: '#/components/parameters/X-Amz-Signature'
      - $ref: '#/components/parameters/X-Amz-SignedHeaders'
  '/#ResendConfirmationCode':
    post:
      operationId: ResendConfirmationCode
      description: Resends the confirmation (for confirmation of registration) to a specific user in the user pool.
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResendConfirmationCodeResponse'
        '480':
          description: ResourceNotFoundException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceNotFoundException'
        '481':
          description: InvalidParameterException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidParameterException'
        '482':
          description: UnexpectedLambdaException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnexpectedLambdaException'
        '483':
          description: UserLambdaValidationException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserLambdaValidationException'
        '484':
          description: NotAuthorizedException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotAuthorizedException'
        '485':
          description: InvalidLambdaResponseException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidLambdaResponseException'
        '486':
          description: TooManyRequestsException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TooManyRequestsException'
        '487':
          description: LimitExceededException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LimitExceededException'
        '488':
          description: InvalidSmsRoleAccessPolicyException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidSmsRoleAccessPolicyException'
        '489':
          description: InvalidSmsRoleTrustRelationshipException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidSmsRoleTrustRelationshipException'
        '490':
          description: InvalidEmailRoleAccessPolicyException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidEmailRoleAccessPolicyException'
        '491':
          description: CodeDeliveryFailureException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CodeDeliveryFailureException'
        '492':
          description: UserNotFoundException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserNotFoundException'
        '493':
          description: InternalErrorException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalErrorException'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ResendConfirmationCodeRequest'
        required: true
    parameters:
      - $ref: '#/components/parameters/Action'
      - $ref: '#/components/parameters/Version'
      - $ref: '#/components/parameters/X-Amz-Content-Sha256'
      - $ref: '#/components/parameters/X-Amz-Date'
      - $ref: '#/components/parameters/X-Amz-Algorithm'
      - $ref: '#/components/parameters/X-Amz-Credential'
      - $ref: '#/components/parameters/X-Amz-Security-Token'
      - $ref: '#/components/parameters/X-Amz-Signature'
      - $ref: '#/components/parameters/X-Amz-SignedHeaders'
  '/#RespondToAuthChallenge':
    post:
      operationId: RespondToAuthChallenge
      description: Responds to the authentication challenge.
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RespondToAuthChallengeResponse'
        '480':
          description: ResourceNotFoundException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceNotFoundException'
        '481':
          description: InvalidParameterException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidParameterException'
        '482':
          description: NotAuthorizedException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotAuthorizedException'
        '483':
          description: CodeMismatchException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CodeMismatchException'
        '484':
          description: ExpiredCodeException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ExpiredCodeException'
        '485':
          description: UnexpectedLambdaException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnexpectedLambdaException'
        '486':
          description: UserLambdaValidationException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserLambdaValidationException'
        '487':
          description: InvalidPasswordException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidPasswordException'
        '488':
          description: InvalidLambdaResponseException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidLambdaResponseException'
        '489':
          description: TooManyRequestsException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TooManyRequestsException'
        '490':
          description: InvalidUserPoolConfigurationException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidUserPoolConfigurationException'
        '491':
          description: MFAMethodNotFoundException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MFAMethodNotFoundException'
        '492':
          description: PasswordResetRequiredException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PasswordResetRequiredException'
        '493':
          description: UserNotFoundException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserNotFoundException'
        '494':
          description: UserNotConfirmedException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserNotConfirmedException'
        '495':
          description: InvalidSmsRoleAccessPolicyException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidSmsRoleAccessPolicyException'
        '496':
          description: InvalidSmsRoleTrustRelationshipException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidSmsRoleTrustRelationshipException'
        '497':
          description: AliasExistsException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AliasExistsException'
        '498':
          description: InternalErrorException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalErrorException'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RespondToAuthChallengeRequest'
        required: true
    parameters:
      - $ref: '#/components/parameters/Action'
      - $ref: '#/components/parameters/Version'
      - $ref: '#/components/parameters/X-Amz-Content-Sha256'
      - $ref: '#/components/parameters/X-Amz-Date'
      - $ref: '#/components/parameters/X-Amz-Algorithm'
      - $ref: '#/components/parameters/X-Amz-Credential'
      - $ref: '#/components/parameters/X-Amz-Security-Token'
      - $ref: '#/components/parameters/X-Amz-Signature'
      - $ref: '#/components/parameters/X-Amz-SignedHeaders'
  '/#SetUserSettings':
    post:
      operationId: SetUserSettings
      description: 'Sets the user settings like multi-factor authentication (MFA). If MFA is to be removed for a particular attribute pass the attribute with code delivery as null. If null list is passed, all MFA options are removed.'
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SetUserSettingsResponse'
        '480':
          description: ResourceNotFoundException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceNotFoundException'
        '481':
          description: InvalidParameterException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidParameterException'
        '482':
          description: NotAuthorizedException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotAuthorizedException'
        '483':
          description: PasswordResetRequiredException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PasswordResetRequiredException'
        '484':
          description: UserNotFoundException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserNotFoundException'
        '485':
          description: UserNotConfirmedException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserNotConfirmedException'
        '486':
          description: InternalErrorException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalErrorException'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SetUserSettingsRequest'
        required: true
    parameters:
      - $ref: '#/components/parameters/Action'
      - $ref: '#/components/parameters/Version'
      - $ref: '#/components/parameters/X-Amz-Content-Sha256'
      - $ref: '#/components/parameters/X-Amz-Date'
      - $ref: '#/components/parameters/X-Amz-Algorithm'
      - $ref: '#/components/parameters/X-Amz-Credential'
      - $ref: '#/components/parameters/X-Amz-Security-Token'
      - $ref: '#/components/parameters/X-Amz-Signature'
      - $ref: '#/components/parameters/X-Amz-SignedHeaders'
  '/#SignUp':
    post:
      operationId: SignUp
      description: 'Registers the user in the specified user pool and creates a user name, password, and user attributes.'
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SignUpResponse'
        '480':
          description: ResourceNotFoundException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceNotFoundException'
        '481':
          description: InvalidParameterException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidParameterException'
        '482':
          description: UnexpectedLambdaException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnexpectedLambdaException'
        '483':
          description: UserLambdaValidationException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserLambdaValidationException'
        '484':
          description: NotAuthorizedException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotAuthorizedException'
        '485':
          description: InvalidPasswordException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidPasswordException'
        '486':
          description: InvalidLambdaResponseException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidLambdaResponseException'
        '487':
          description: UsernameExistsException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsernameExistsException'
        '488':
          description: TooManyRequestsException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TooManyRequestsException'
        '489':
          description: InternalErrorException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalErrorException'
        '490':
          description: InvalidSmsRoleAccessPolicyException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidSmsRoleAccessPolicyException'
        '491':
          description: InvalidSmsRoleTrustRelationshipException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidSmsRoleTrustRelationshipException'
        '492':
          description: InvalidEmailRoleAccessPolicyException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidEmailRoleAccessPolicyException'
        '493':
          description: CodeDeliveryFailureException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CodeDeliveryFailureException'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SignUpRequest'
        required: true
    parameters:
      - $ref: '#/components/parameters/Action'
      - $ref: '#/components/parameters/Version'
      - $ref: '#/components/parameters/X-Amz-Content-Sha256'
      - $ref: '#/components/parameters/X-Amz-Date'
      - $ref: '#/components/parameters/X-Amz-Algorithm'
      - $ref: '#/components/parameters/X-Amz-Credential'
      - $ref: '#/components/parameters/X-Amz-Security-Token'
      - $ref: '#/components/parameters/X-Amz-Signature'
      - $ref: '#/components/parameters/X-Amz-SignedHeaders'
  '/#StartUserImportJob':
    post:
      operationId: StartUserImportJob
      description: Starts the user import.
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/StartUserImportJobResponse'
        '480':
          description: ResourceNotFoundException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceNotFoundException'
        '481':
          description: InvalidParameterException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidParameterException'
        '482':
          description: TooManyRequestsException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TooManyRequestsException'
        '483':
          description: InternalErrorException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalErrorException'
        '484':
          description: PreconditionNotMetException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PreconditionNotMetException'
        '485':
          description: NotAuthorizedException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotAuthorizedException'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/StartUserImportJobRequest'
        required: true
    parameters:
      - $ref: '#/components/parameters/Action'
      - $ref: '#/components/parameters/Version'
      - $ref: '#/components/parameters/X-Amz-Content-Sha256'
      - $ref: '#/components/parameters/X-Amz-Date'
      - $ref: '#/components/parameters/X-Amz-Algorithm'
      - $ref: '#/components/parameters/X-Amz-Credential'
      - $ref: '#/components/parameters/X-Amz-Security-Token'
      - $ref: '#/components/parameters/X-Amz-Signature'
      - $ref: '#/components/parameters/X-Amz-SignedHeaders'
  '/#StopUserImportJob':
    post:
      operationId: StopUserImportJob
      description: Stops the user import job.
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/StopUserImportJobResponse'
        '480':
          description: ResourceNotFoundException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceNotFoundException'
        '481':
          description: InvalidParameterException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidParameterException'
        '482':
          description: TooManyRequestsException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TooManyRequestsException'
        '483':
          description: InternalErrorException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalErrorException'
        '484':
          description: PreconditionNotMetException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PreconditionNotMetException'
        '485':
          description: NotAuthorizedException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotAuthorizedException'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/StopUserImportJobRequest'
        required: true
    parameters:
      - $ref: '#/components/parameters/Action'
      - $ref: '#/components/parameters/Version'
      - $ref: '#/components/parameters/X-Amz-Content-Sha256'
      - $ref: '#/components/parameters/X-Amz-Date'
      - $ref: '#/components/parameters/X-Amz-Algorithm'
      - $ref: '#/components/parameters/X-Amz-Credential'
      - $ref: '#/components/parameters/X-Amz-Security-Token'
      - $ref: '#/components/parameters/X-Amz-Signature'
      - $ref: '#/components/parameters/X-Amz-SignedHeaders'
  '/#UpdateDeviceStatus':
    post:
      operationId: UpdateDeviceStatus
      description: Updates the device status.
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UpdateDeviceStatusResponse'
        '480':
          description: InvalidParameterException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidParameterException'
        '481':
          description: ResourceNotFoundException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceNotFoundException'
        '482':
          description: NotAuthorizedException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotAuthorizedException'
        '483':
          description: InvalidUserPoolConfigurationException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidUserPoolConfigurationException'
        '484':
          description: TooManyRequestsException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TooManyRequestsException'
        '485':
          description: PasswordResetRequiredException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PasswordResetRequiredException'
        '486':
          description: UserNotFoundException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserNotFoundException'
        '487':
          description: UserNotConfirmedException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserNotConfirmedException'
        '488':
          description: InternalErrorException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalErrorException'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateDeviceStatusRequest'
        required: true
    parameters:
      - $ref: '#/components/parameters/Action'
      - $ref: '#/components/parameters/Version'
      - $ref: '#/components/parameters/X-Amz-Content-Sha256'
      - $ref: '#/components/parameters/X-Amz-Date'
      - $ref: '#/components/parameters/X-Amz-Algorithm'
      - $ref: '#/components/parameters/X-Amz-Credential'
      - $ref: '#/components/parameters/X-Amz-Security-Token'
      - $ref: '#/components/parameters/X-Amz-Signature'
      - $ref: '#/components/parameters/X-Amz-SignedHeaders'
  '/#UpdateGroup':
    post:
      operationId: UpdateGroup
      description: <p>Updates the specified group with the specified attributes.</p> <p>Requires developer credentials.</p>
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UpdateGroupResponse'
        '480':
          description: ResourceNotFoundException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceNotFoundException'
        '481':
          description: InvalidParameterException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidParameterException'
        '482':
          description: TooManyRequestsException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TooManyRequestsException'
        '483':
          description: NotAuthorizedException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotAuthorizedException'
        '484':
          description: InternalErrorException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalErrorException'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateGroupRequest'
        required: true
    parameters:
      - $ref: '#/components/parameters/Action'
      - $ref: '#/components/parameters/Version'
      - $ref: '#/components/parameters/X-Amz-Content-Sha256'
      - $ref: '#/components/parameters/X-Amz-Date'
      - $ref: '#/components/parameters/X-Amz-Algorithm'
      - $ref: '#/components/parameters/X-Amz-Credential'
      - $ref: '#/components/parameters/X-Amz-Security-Token'
      - $ref: '#/components/parameters/X-Amz-Signature'
      - $ref: '#/components/parameters/X-Amz-SignedHeaders'
  '/#UpdateIdentityProvider':
    post:
      operationId: UpdateIdentityProvider
      description: Updates identity provider information for a user pool.
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UpdateIdentityProviderResponse'
        '480':
          description: InvalidParameterException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidParameterException'
        '481':
          description: UnsupportedIdentityProviderException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnsupportedIdentityProviderException'
        '482':
          description: ResourceNotFoundException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceNotFoundException'
        '483':
          description: NotAuthorizedException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotAuthorizedException'
        '484':
          description: TooManyRequestsException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TooManyRequestsException'
        '485':
          description: InternalErrorException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalErrorException'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateIdentityProviderRequest'
        required: true
    parameters:
      - $ref: '#/components/parameters/Action'
      - $ref: '#/components/parameters/Version'
      - $ref: '#/components/parameters/X-Amz-Content-Sha256'
      - $ref: '#/components/parameters/X-Amz-Date'
      - $ref: '#/components/parameters/X-Amz-Algorithm'
      - $ref: '#/components/parameters/X-Amz-Credential'
      - $ref: '#/components/parameters/X-Amz-Security-Token'
      - $ref: '#/components/parameters/X-Amz-Signature'
      - $ref: '#/components/parameters/X-Amz-SignedHeaders'
  '/#UpdateUserAttributes':
    post:
      operationId: UpdateUserAttributes
      description: Allows a user to update a specific attribute (one at a time).
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UpdateUserAttributesResponse'
        '480':
          description: ResourceNotFoundException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceNotFoundException'
        '481':
          description: InvalidParameterException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidParameterException'
        '482':
          description: CodeMismatchException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CodeMismatchException'
        '483':
          description: ExpiredCodeException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ExpiredCodeException'
        '484':
          description: NotAuthorizedException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotAuthorizedException'
        '485':
          description: UnexpectedLambdaException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnexpectedLambdaException'
        '486':
          description: UserLambdaValidationException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserLambdaValidationException'
        '487':
          description: InvalidLambdaResponseException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidLambdaResponseException'
        '488':
          description: TooManyRequestsException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TooManyRequestsException'
        '489':
          description: AliasExistsException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AliasExistsException'
        '490':
          description: InvalidSmsRoleAccessPolicyException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidSmsRoleAccessPolicyException'
        '491':
          description: InvalidSmsRoleTrustRelationshipException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidSmsRoleTrustRelationshipException'
        '492':
          description: InvalidEmailRoleAccessPolicyException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidEmailRoleAccessPolicyException'
        '493':
          description: CodeDeliveryFailureException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CodeDeliveryFailureException'
        '494':
          description: PasswordResetRequiredException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PasswordResetRequiredException'
        '495':
          description: UserNotFoundException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserNotFoundException'
        '496':
          description: UserNotConfirmedException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserNotConfirmedException'
        '497':
          description: InternalErrorException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalErrorException'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateUserAttributesRequest'
        required: true
    parameters:
      - $ref: '#/components/parameters/Action'
      - $ref: '#/components/parameters/Version'
      - $ref: '#/components/parameters/X-Amz-Content-Sha256'
      - $ref: '#/components/parameters/X-Amz-Date'
      - $ref: '#/components/parameters/X-Amz-Algorithm'
      - $ref: '#/components/parameters/X-Amz-Credential'
      - $ref: '#/components/parameters/X-Amz-Security-Token'
      - $ref: '#/components/parameters/X-Amz-Signature'
      - $ref: '#/components/parameters/X-Amz-SignedHeaders'
  '/#UpdateUserPool':
    post:
      operationId: UpdateUserPool
      description: Updates the specified user pool with the specified attributes.
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UpdateUserPoolResponse'
        '480':
          description: ResourceNotFoundException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceNotFoundException'
        '481':
          description: InvalidParameterException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidParameterException'
        '482':
          description: ConcurrentModificationException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ConcurrentModificationException'
        '483':
          description: TooManyRequestsException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TooManyRequestsException'
        '484':
          description: NotAuthorizedException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotAuthorizedException'
        '485':
          description: UserImportInProgressException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserImportInProgressException'
        '486':
          description: InternalErrorException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalErrorException'
        '487':
          description: InvalidSmsRoleAccessPolicyException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidSmsRoleAccessPolicyException'
        '488':
          description: InvalidSmsRoleTrustRelationshipException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidSmsRoleTrustRelationshipException'
        '489':
          description: UserPoolTaggingException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserPoolTaggingException'
        '490':
          description: InvalidEmailRoleAccessPolicyException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidEmailRoleAccessPolicyException'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateUserPoolRequest'
        required: true
    parameters:
      - $ref: '#/components/parameters/Action'
      - $ref: '#/components/parameters/Version'
      - $ref: '#/components/parameters/X-Amz-Content-Sha256'
      - $ref: '#/components/parameters/X-Amz-Date'
      - $ref: '#/components/parameters/X-Amz-Algorithm'
      - $ref: '#/components/parameters/X-Amz-Credential'
      - $ref: '#/components/parameters/X-Amz-Security-Token'
      - $ref: '#/components/parameters/X-Amz-Signature'
      - $ref: '#/components/parameters/X-Amz-SignedHeaders'
  '/#UpdateUserPoolClient':
    post:
      operationId: UpdateUserPoolClient
      description: Allows the developer to update the specified user pool client and password policy.
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UpdateUserPoolClientResponse'
        '480':
          description: ResourceNotFoundException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceNotFoundException'
        '481':
          description: InvalidParameterException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidParameterException'
        '482':
          description: TooManyRequestsException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TooManyRequestsException'
        '483':
          description: NotAuthorizedException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotAuthorizedException'
        '484':
          description: ScopeDoesNotExistException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ScopeDoesNotExistException'
        '485':
          description: InvalidOAuthFlowException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidOAuthFlowException'
        '486':
          description: InternalErrorException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalErrorException'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateUserPoolClientRequest'
        required: true
    parameters:
      - $ref: '#/components/parameters/Action'
      - $ref: '#/components/parameters/Version'
      - $ref: '#/components/parameters/X-Amz-Content-Sha256'
      - $ref: '#/components/parameters/X-Amz-Date'
      - $ref: '#/components/parameters/X-Amz-Algorithm'
      - $ref: '#/components/parameters/X-Amz-Credential'
      - $ref: '#/components/parameters/X-Amz-Security-Token'
      - $ref: '#/components/parameters/X-Amz-Signature'
      - $ref: '#/components/parameters/X-Amz-SignedHeaders'
  '/#VerifyUserAttribute':
    post:
      operationId: VerifyUserAttribute
      description: Verifies the specified user attributes in the user pool.
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/VerifyUserAttributeResponse'
        '480':
          description: ResourceNotFoundException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceNotFoundException'
        '481':
          description: InvalidParameterException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidParameterException'
        '482':
          description: CodeMismatchException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CodeMismatchException'
        '483':
          description: ExpiredCodeException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ExpiredCodeException'
        '484':
          description: NotAuthorizedException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotAuthorizedException'
        '485':
          description: TooManyRequestsException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TooManyRequestsException'
        '486':
          description: LimitExceededException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LimitExceededException'
        '487':
          description: PasswordResetRequiredException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PasswordResetRequiredException'
        '488':
          description: UserNotFoundException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserNotFoundException'
        '489':
          description: UserNotConfirmedException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserNotConfirmedException'
        '490':
          description: InternalErrorException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalErrorException'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/VerifyUserAttributeRequest'
        required: true
    parameters:
      - $ref: '#/components/parameters/Action'
      - $ref: '#/components/parameters/Version'
      - $ref: '#/components/parameters/X-Amz-Content-Sha256'
      - $ref: '#/components/parameters/X-Amz-Date'
      - $ref: '#/components/parameters/X-Amz-Algorithm'
      - $ref: '#/components/parameters/X-Amz-Credential'
      - $ref: '#/components/parameters/X-Amz-Security-Token'
      - $ref: '#/components/parameters/X-Amz-Signature'
      - $ref: '#/components/parameters/X-Amz-SignedHeaders'
components:
  schemas:
    AWSAccountIdType:
      type: string
    AddCustomAttributesRequest:
      type: object
      required:
        - UserPoolId
        - CustomAttributes
      properties:
        UserPoolId:
          $ref: '#/components/schemas/UserPoolIdType'
        CustomAttributes:
          $ref: '#/components/schemas/CustomAttributesListType'
      description: Represents the request to add custom attributes.
    AddCustomAttributesResponse:
      type: object
      properties: {}
      description: Represents the response from the server for the request to add custom attributes.
    AdminAddUserToGroupRequest:
      type: object
      required:
        - UserPoolId
        - Username
        - GroupName
      properties:
        UserPoolId:
          $ref: '#/components/schemas/UserPoolIdType'
        Username:
          $ref: '#/components/schemas/UsernameType'
        GroupName:
          $ref: '#/components/schemas/GroupNameType'
    AdminConfirmSignUpRequest:
      type: object
      required:
        - UserPoolId
        - Username
      properties:
        UserPoolId:
          $ref: '#/components/schemas/UserPoolIdType'
        Username:
          $ref: '#/components/schemas/UsernameType'
      description: Represents the request to confirm user registration.
    AdminConfirmSignUpResponse:
      type: object
      properties: {}
      description: Represents the response from the server for the request to confirm registration.
    AdminCreateUserConfigType:
      type: object
      properties:
        AllowAdminCreateUserOnly:
          $ref: '#/components/schemas/BooleanType'
        UnusedAccountValidityDays:
          $ref: '#/components/schemas/AdminCreateUserUnusedAccountValidityDaysType'
        InviteMessageTemplate:
          $ref: '#/components/schemas/MessageTemplateType'
      description: The type of configuration for creating a new user profile.
    AdminCreateUserRequest:
      type: object
      required:
        - UserPoolId
        - Username
      properties:
        UserPoolId:
          $ref: '#/components/schemas/UserPoolIdType'
        Username:
          $ref: '#/components/schemas/UsernameType'
        UserAttributes:
          $ref: '#/components/schemas/AttributeListType'
        ValidationData:
          $ref: '#/components/schemas/AttributeListType'
        TemporaryPassword:
          $ref: '#/components/schemas/PasswordType'
        ForceAliasCreation:
          $ref: '#/components/schemas/ForceAliasCreation'
        MessageAction:
          $ref: '#/components/schemas/MessageActionType'
        DesiredDeliveryMediums:
          $ref: '#/components/schemas/DeliveryMediumListType'
      description: Represents the request to create a user in the specified user pool.
    AdminCreateUserResponse:
      type: object
      properties:
        User:
          $ref: '#/components/schemas/UserType'
      description: Represents the response from the server to the request to create the user.
    AdminCreateUserUnusedAccountValidityDaysType:
      type: integer
      minimum: 0
      maximum: 90
    AdminDeleteUserAttributesRequest:
      type: object
      required:
        - UserPoolId
        - Username
        - UserAttributeNames
      properties:
        UserPoolId:
          $ref: '#/components/schemas/UserPoolIdType'
        Username:
          $ref: '#/components/schemas/UsernameType'
        UserAttributeNames:
          $ref: '#/components/schemas/AttributeNameListType'
      description: Represents the request to delete user attributes as an administrator.
    AdminDeleteUserAttributesResponse:
      type: object
      properties: {}
      description: Represents the response received from the server for a request to delete user attributes.
    AdminDeleteUserRequest:
      type: object
      required:
        - UserPoolId
        - Username
      properties:
        UserPoolId:
          $ref: '#/components/schemas/UserPoolIdType'
        Username:
          $ref: '#/components/schemas/UsernameType'
      description: Represents the request to delete a user as an administrator.
    AdminDisableUserRequest:
      type: object
      required:
        - UserPoolId
        - Username
      properties:
        UserPoolId:
          $ref: '#/components/schemas/UserPoolIdType'
        Username:
          $ref: '#/components/schemas/UsernameType'
      description: Represents the request to disable any user as an administrator.
    AdminDisableUserResponse:
      type: object
      properties: {}
      description: Represents the response received from the server to disable the user as an administrator.
    AdminEnableUserRequest:
      type: object
      required:
        - UserPoolId
        - Username
      properties:
        UserPoolId:
          $ref: '#/components/schemas/UserPoolIdType'
        Username:
          $ref: '#/components/schemas/UsernameType'
      description: Represents the request that enables the user as an administrator.
    AdminEnableUserResponse:
      type: object
      properties: {}
      description: Represents the response from the server for the request to enable a user as an administrator.
    AdminForgetDeviceRequest:
      type: object
      required:
        - UserPoolId
        - Username
        - DeviceKey
      properties:
        UserPoolId:
          $ref: '#/components/schemas/UserPoolIdType'
        Username:
          $ref: '#/components/schemas/UsernameType'
        DeviceKey:
          $ref: '#/components/schemas/DeviceKeyType'
      description: 'Sends the forgot device request, as an administrator.'
    AdminGetDeviceRequest:
      type: object
      required:
        - DeviceKey
        - UserPoolId
        - Username
      properties:
        DeviceKey:
          $ref: '#/components/schemas/DeviceKeyType'
        UserPoolId:
          $ref: '#/components/schemas/UserPoolIdType'
        Username:
          $ref: '#/components/schemas/UsernameType'
      description: 'Represents the request to get the device, as an administrator.'
    AdminGetDeviceResponse:
      type: object
      required:
        - Device
      properties:
        Device:
          $ref: '#/components/schemas/DeviceType'
      description: 'Gets the device response, as an administrator.'
    AdminGetUserRequest:
      type: object
      required:
        - UserPoolId
        - Username
      properties:
        UserPoolId:
          $ref: '#/components/schemas/UserPoolIdType'
        Username:
          $ref: '#/components/schemas/UsernameType'
      description: Represents the request to get the specified user as an administrator.
    AdminGetUserResponse:
      type: object
      required:
        - Username
      properties:
        Username:
          $ref: '#/components/schemas/UsernameType'
        UserAttributes:
          $ref: '#/components/schemas/AttributeListType'
        UserCreateDate:
          $ref: '#/components/schemas/DateType'
        UserLastModifiedDate:
          $ref: '#/components/schemas/DateType'
        Enabled:
          $ref: '#/components/schemas/BooleanType'
        UserStatus:
          $ref: '#/components/schemas/UserStatusType'
        MFAOptions:
          $ref: '#/components/schemas/MFAOptionListType'
      description: Represents the response from the server from the request to get the specified user as an administrator.
    AdminInitiateAuthRequest:
      type: object
      required:
        - UserPoolId
        - ClientId
        - AuthFlow
      properties:
        UserPoolId:
          $ref: '#/components/schemas/UserPoolIdType'
        ClientId:
          $ref: '#/components/schemas/ClientIdType'
        AuthFlow:
          $ref: '#/components/schemas/AuthFlowType'
        AuthParameters:
          $ref: '#/components/schemas/AuthParametersType'
        ClientMetadata:
          $ref: '#/components/schemas/ClientMetadataType'
      description: 'Initiates the authorization request, as an administrator.'
    AdminInitiateAuthResponse:
      type: object
      properties:
        ChallengeName:
          $ref: '#/components/schemas/ChallengeNameType'
        Session:
          $ref: '#/components/schemas/SessionType'
        ChallengeParameters:
          $ref: '#/components/schemas/ChallengeParametersType'
        AuthenticationResult:
          $ref: '#/components/schemas/AuthenticationResultType'
      description: 'Initiates the authentication response, as an administrator.'
    AdminListDevicesRequest:
      type: object
      required:
        - UserPoolId
        - Username
      properties:
        UserPoolId:
          $ref: '#/components/schemas/UserPoolIdType'
        Username:
          $ref: '#/components/schemas/UsernameType'
        Limit:
          $ref: '#/components/schemas/QueryLimitType'
        PaginationToken:
          $ref: '#/components/schemas/SearchPaginationTokenType'
      description: 'Represents the request to list devices, as an administrator.'
    AdminListDevicesResponse:
      type: object
      properties:
        Devices:
          $ref: '#/components/schemas/DeviceListType'
        PaginationToken:
          $ref: '#/components/schemas/SearchPaginationTokenType'
      description: 'Lists the device''s response, as an administrator.'
    AdminListGroupsForUserRequest:
      type: object
      required:
        - Username
        - UserPoolId
      properties:
        Username:
          $ref: '#/components/schemas/UsernameType'
        UserPoolId:
          $ref: '#/components/schemas/UserPoolIdType'
        Limit:
          $ref: '#/components/schemas/QueryLimitType'
        NextToken:
          $ref: '#/components/schemas/PaginationKey'
    AdminListGroupsForUserResponse:
      type: object
      properties:
        Groups:
          $ref: '#/components/schemas/GroupListType'
        NextToken:
          $ref: '#/components/schemas/PaginationKey'
    AdminRemoveUserFromGroupRequest:
      type: object
      required:
        - UserPoolId
        - Username
        - GroupName
      properties:
        UserPoolId:
          $ref: '#/components/schemas/UserPoolIdType'
        Username:
          $ref: '#/components/schemas/UsernameType'
        GroupName:
          $ref: '#/components/schemas/GroupNameType'
    AdminResetUserPasswordRequest:
      type: object
      required:
        - UserPoolId
        - Username
      properties:
        UserPoolId:
          $ref: '#/components/schemas/UserPoolIdType'
        Username:
          $ref: '#/components/schemas/UsernameType'
      description: Represents the request to reset a user's password as an administrator.
    AdminResetUserPasswordResponse:
      type: object
      properties: {}
      description: Represents the response from the server to reset a user password as an administrator.
    AdminRespondToAuthChallengeRequest:
      type: object
      required:
        - UserPoolId
        - ClientId
        - ChallengeName
      properties:
        UserPoolId:
          $ref: '#/components/schemas/UserPoolIdType'
        ClientId:
          $ref: '#/components/schemas/ClientIdType'
        ChallengeName:
          $ref: '#/components/schemas/ChallengeNameType'
        ChallengeResponses:
          $ref: '#/components/schemas/ChallengeResponsesType'
        Session:
          $ref: '#/components/schemas/SessionType'
      description: 'The request to respond to the authentication challenge, as an administrator.'
    AdminRespondToAuthChallengeResponse:
      type: object
      properties:
        ChallengeName:
          $ref: '#/components/schemas/ChallengeNameType'
        Session:
          $ref: '#/components/schemas/SessionType'
        ChallengeParameters:
          $ref: '#/components/schemas/ChallengeParametersType'
        AuthenticationResult:
          $ref: '#/components/schemas/AuthenticationResultType'
      description: 'Responds to the authentication challenge, as an administrator.'
    AdminSetUserSettingsRequest:
      type: object
      required:
        - UserPoolId
        - Username
        - MFAOptions
      properties:
        UserPoolId:
          $ref: '#/components/schemas/UserPoolIdType'
        Username:
          $ref: '#/components/schemas/UsernameType'
        MFAOptions:
          $ref: '#/components/schemas/MFAOptionListType'
      description: Represents the request to set user settings as an administrator.
    AdminSetUserSettingsResponse:
      type: object
      properties: {}
      description: Represents the response from the server to set user settings as an administrator.
    AdminUpdateDeviceStatusRequest:
      type: object
      required:
        - UserPoolId
        - Username
        - DeviceKey
      properties:
        UserPoolId:
          $ref: '#/components/schemas/UserPoolIdType'
        Username:
          $ref: '#/components/schemas/UsernameType'
        DeviceKey:
          $ref: '#/components/schemas/DeviceKeyType'
        DeviceRememberedStatus:
          $ref: '#/components/schemas/DeviceRememberedStatusType'
      description: 'The request to update the device status, as an administrator.'
    AdminUpdateDeviceStatusResponse:
      type: object
      properties: {}
      description: 'The status response from the request to update the device, as an administrator.'
    AdminUpdateUserAttributesRequest:
      type: object
      required:
        - UserPoolId
        - Username
        - UserAttributes
      properties:
        UserPoolId:
          $ref: '#/components/schemas/UserPoolIdType'
        Username:
          $ref: '#/components/schemas/UsernameType'
        UserAttributes:
          $ref: '#/components/schemas/AttributeListType'
      description: Represents the request to update the user's attributes as an administrator.
    AdminUpdateUserAttributesResponse:
      type: object
      properties: {}
      description: Represents the response from the server for the request to update user attributes as an administrator.
    AdminUserGlobalSignOutRequest:
      type: object
      required:
        - UserPoolId
        - Username
      properties:
        UserPoolId:
          $ref: '#/components/schemas/UserPoolIdType'
        Username:
          $ref: '#/components/schemas/UsernameType'
      description: 'The request to sign out of all devices, as an administrator.'
    AdminUserGlobalSignOutResponse:
      type: object
      properties: {}
      description: 'The global sign-out response, as an administrator.'
    AliasAttributeType:
      type: string
      enum:
        - phone_number
        - email
        - preferred_username
    AliasAttributesListType:
      type: array
      items:
        $ref: '#/components/schemas/AliasAttributeType'
    AliasExistsException:
      type: object
      properties:
        message:
          $ref: '#/components/schemas/MessageType'
      description: This exception is thrown when a user tries to confirm the account with an email or phone number that has already been supplied as an alias from a different account. This exception tells user that an account with this email or phone already exists.
    ArnType:
      type: string
      pattern: 'arn:[\w+=/,.@-]+:[\w+=/,.@-]+:([\w+=/,.@-]*)?:[0-9]+:[\w+=/,.@-]+(:[\w+=/,.@-]+)?(:[\w+=/,.@-]+)?'
      minLength: 20
      maxLength: 2048
    AttributeDataType:
      type: string
      enum:
        - String
        - Number
        - DateTime
        - Boolean
    AttributeListType:
      type: array
      items:
        $ref: '#/components/schemas/AttributeType'
    AttributeMappingType:
      type: array
      items:
        type: object
        properties:
          key:
            $ref: '#/components/schemas/CustomAttributeNameType'
          value:
            $ref: '#/components/schemas/StringType'
    AttributeNameListType:
      type: array
      items:
        $ref: '#/components/schemas/AttributeNameType'
    AttributeNameType:
      type: string
      pattern: '[\p{L}\p{M}\p{S}\p{N}\p{P}]+'
      minLength: 1
      maxLength: 32
    AttributeType:
      type: object
      required:
        - Name
      properties:
        Name:
          $ref: '#/components/schemas/AttributeNameType'
        Value:
          $ref: '#/components/schemas/AttributeValueType'
      description: Specifies whether the attribute is standard or custom.
    AttributeValueType:
      type: string
      maxLength: 2048
      format: password
    AuthFlowType:
      type: string
      enum:
        - USER_SRP_AUTH
        - REFRESH_TOKEN_AUTH
        - REFRESH_TOKEN
        - CUSTOM_AUTH
        - ADMIN_NO_SRP_AUTH
    AuthParametersType:
      type: array
      items:
        type: object
        properties:
          key:
            $ref: '#/components/schemas/StringType'
          value:
            $ref: '#/components/schemas/StringType'
    AuthenticationResultType:
      type: object
      properties:
        AccessToken:
          $ref: '#/components/schemas/TokenModelType'
        ExpiresIn:
          $ref: '#/components/schemas/IntegerType'
        TokenType:
          $ref: '#/components/schemas/StringType'
        RefreshToken:
          $ref: '#/components/schemas/TokenModelType'
        IdToken:
          $ref: '#/components/schemas/TokenModelType'
        NewDeviceMetadata:
          $ref: '#/components/schemas/NewDeviceMetadataType'
      description: The result type of the authentication result.
    BooleanType:
      type: boolean
    CallbackURLsListType:
      type: array
      items:
        $ref: '#/components/schemas/RedirectUrlType'
      minItems: 0
      maxItems: 100
    ChallengeNameType:
      type: string
      enum:
        - SMS_MFA
        - PASSWORD_VERIFIER
        - CUSTOM_CHALLENGE
        - DEVICE_SRP_AUTH
        - DEVICE_PASSWORD_VERIFIER
        - ADMIN_NO_SRP_AUTH
        - NEW_PASSWORD_REQUIRED
    ChallengeParametersType:
      type: array
      items:
        type: object
        properties:
          key:
            $ref: '#/components/schemas/StringType'
          value:
            $ref: '#/components/schemas/StringType'
    ChallengeResponsesType:
      type: array
      items:
        type: object
        properties:
          key:
            $ref: '#/components/schemas/StringType'
          value:
            $ref: '#/components/schemas/StringType'
    ChangePasswordRequest:
      type: object
      required:
        - PreviousPassword
        - ProposedPassword
        - AccessToken
      properties:
        PreviousPassword:
          $ref: '#/components/schemas/PasswordType'
        ProposedPassword:
          $ref: '#/components/schemas/PasswordType'
        AccessToken:
          $ref: '#/components/schemas/TokenModelType'
      description: Represents the request to change a user password.
    ChangePasswordResponse:
      type: object
      properties: {}
      description: The response from the server to the change password request.
    ClientIdType:
      type: string
      pattern: '[\w+]+'
      minLength: 1
      maxLength: 128
      format: password
    ClientMetadataType:
      type: array
      items:
        type: object
        properties:
          key:
            $ref: '#/components/schemas/StringType'
          value:
            $ref: '#/components/schemas/StringType'
    ClientNameType:
      type: string
      pattern: '[\w\s+=,.@-]+'
      minLength: 1
      maxLength: 128
    ClientPermissionListType:
      type: array
      items:
        $ref: '#/components/schemas/ClientPermissionType'
    ClientPermissionType:
      type: string
      minLength: 1
      maxLength: 2048
    ClientSecretType:
      type: string
      pattern: '[\w+]+'
      minLength: 1
      maxLength: 64
      format: password
    CodeDeliveryDetailsListType:
      type: array
      items:
        $ref: '#/components/schemas/CodeDeliveryDetailsType'
    CodeDeliveryDetailsType:
      type: object
      properties:
        Destination:
          $ref: '#/components/schemas/StringType'
        DeliveryMedium:
          $ref: '#/components/schemas/DeliveryMediumType'
        AttributeName:
          $ref: '#/components/schemas/AttributeNameType'
      description: The type of code delivery details being returned from the server.
    CodeDeliveryFailureException:
      type: object
      properties:
        message:
          $ref: '#/components/schemas/MessageType'
      description: This exception is thrown when a verification code fails to deliver successfully.
    CodeMismatchException:
      type: object
      properties:
        message:
          $ref: '#/components/schemas/MessageType'
      description: This exception is thrown if the provided code does not match what the server was expecting.
    CompletionMessageType:
      type: string
      pattern: '[\w]+'
      minLength: 1
      maxLength: 128
    ConcurrentModificationException:
      type: object
      properties:
        message:
          $ref: '#/components/schemas/MessageType'
      description: This exception is thrown if two or more modifications are happening concurrently.
    ConfirmDeviceRequest:
      type: object
      required:
        - AccessToken
        - DeviceKey
      properties:
        AccessToken:
          $ref: '#/components/schemas/TokenModelType'
        DeviceKey:
          $ref: '#/components/schemas/DeviceKeyType'
        DeviceSecretVerifierConfig:
          $ref: '#/components/schemas/DeviceSecretVerifierConfigType'
        DeviceName:
          $ref: '#/components/schemas/DeviceNameType'
      description: Confirms the device request.
    ConfirmDeviceResponse:
      type: object
      properties:
        UserConfirmationNecessary:
          $ref: '#/components/schemas/BooleanType'
      description: Confirms the device response.
    ConfirmForgotPasswordRequest:
      type: object
      required:
        - ClientId
        - Username
        - ConfirmationCode
        - Password
      properties:
        ClientId:
          $ref: '#/components/schemas/ClientIdType'
        SecretHash:
          $ref: '#/components/schemas/SecretHashType'
        Username:
          $ref: '#/components/schemas/UsernameType'
        ConfirmationCode:
          $ref: '#/components/schemas/ConfirmationCodeType'
        Password:
          $ref: '#/components/schemas/PasswordType'
      description: The request representing the confirmation for a password reset.
    ConfirmForgotPasswordResponse:
      type: object
      properties: {}
      description: The response from the server that results from a user's request to retrieve a forgotten password.
    ConfirmSignUpRequest:
      type: object
      required:
        - ClientId
        - Username
        - ConfirmationCode
      properties:
        ClientId:
          $ref: '#/components/schemas/ClientIdType'
        SecretHash:
          $ref: '#/components/schemas/SecretHashType'
        Username:
          $ref: '#/components/schemas/UsernameType'
        ConfirmationCode:
          $ref: '#/components/schemas/ConfirmationCodeType'
        ForceAliasCreation:
          $ref: '#/components/schemas/ForceAliasCreation'
      description: Represents the request to confirm registration of a user.
    ConfirmSignUpResponse:
      type: object
      properties: {}
      description: Represents the response from the server for the registration confirmation.
    ConfirmationCodeType:
      type: string
      pattern: '[\S]+'
      minLength: 1
      maxLength: 2048
    CreateGroupRequest:
      type: object
      required:
        - GroupName
        - UserPoolId
      properties:
        GroupName:
          $ref: '#/components/schemas/GroupNameType'
        UserPoolId:
          $ref: '#/components/schemas/UserPoolIdType'
        Description:
          $ref: '#/components/schemas/DescriptionType'
        RoleArn:
          $ref: '#/components/schemas/ArnType'
        Precedence:
          $ref: '#/components/schemas/PrecedenceType'
    CreateGroupResponse:
      type: object
      properties:
        Group:
          $ref: '#/components/schemas/GroupType'
    CreateIdentityProviderRequest:
      type: object
      required:
        - UserPoolId
        - ProviderName
        - ProviderType
        - ProviderDetails
      properties:
        UserPoolId:
          $ref: '#/components/schemas/UserPoolIdType'
        ProviderName:
          $ref: '#/components/schemas/ProviderNameType'
        ProviderType:
          $ref: '#/components/schemas/IdentityProviderTypeType'
        ProviderDetails:
          $ref: '#/components/schemas/ProviderDetailsType'
        AttributeMapping:
          $ref: '#/components/schemas/AttributeMappingType'
        IdpIdentifiers:
          $ref: '#/components/schemas/IdpIdentifiersListType'
    CreateIdentityProviderResponse:
      type: object
      required:
        - IdentityProvider
      properties:
        IdentityProvider:
          $ref: '#/components/schemas/IdentityProviderType'
    CreateUserImportJobRequest:
      type: object
      required:
        - JobName
        - UserPoolId
        - CloudWatchLogsRoleArn
      properties:
        JobName:
          $ref: '#/components/schemas/UserImportJobNameType'
        UserPoolId:
          $ref: '#/components/schemas/UserPoolIdType'
        CloudWatchLogsRoleArn:
          $ref: '#/components/schemas/ArnType'
      description: Represents the request to create the user import job.
    CreateUserImportJobResponse:
      type: object
      properties:
        UserImportJob:
          $ref: '#/components/schemas/UserImportJobType'
      description: Represents the response from the server to the request to create the user import job.
    CreateUserPoolClientRequest:
      type: object
      required:
        - UserPoolId
        - ClientName
      properties:
        UserPoolId:
          $ref: '#/components/schemas/UserPoolIdType'
        ClientName:
          $ref: '#/components/schemas/ClientNameType'
        GenerateSecret:
          $ref: '#/components/schemas/GenerateSecret'
        RefreshTokenValidity:
          $ref: '#/components/schemas/RefreshTokenValidityType'
        ReadAttributes:
          $ref: '#/components/schemas/ClientPermissionListType'
        WriteAttributes:
          $ref: '#/components/schemas/ClientPermissionListType'
        ExplicitAuthFlows:
          $ref: '#/components/schemas/ExplicitAuthFlowsListType'
        SupportedIdentityProviders:
          $ref: '#/components/schemas/SupportedIdentityProvidersListType'
        CallbackURLs:
          $ref: '#/components/schemas/CallbackURLsListType'
        LogoutURLs:
          $ref: '#/components/schemas/LogoutURLsListType'
        DefaultRedirectURI:
          $ref: '#/components/schemas/RedirectUrlType'
        AllowedOAuthFlows:
          $ref: '#/components/schemas/OAuthFlowsType'
        AllowedOAuthScopes:
          $ref: '#/components/schemas/ScopeListType'
        AllowedOAuthFlowsUserPoolClient:
          $ref: '#/components/schemas/BooleanType'
      description: Represents the request to create a user pool client.
    CreateUserPoolClientResponse:
      type: object
      properties:
        UserPoolClient:
          $ref: '#/components/schemas/UserPoolClientType'
      description: Represents the response from the server to create a user pool client.
    CreateUserPoolDomainRequest:
      type: object
      required:
        - Domain
        - UserPoolId
      properties:
        Domain:
          $ref: '#/components/schemas/DomainType'
        UserPoolId:
          $ref: '#/components/schemas/UserPoolIdType'
    CreateUserPoolDomainResponse:
      type: object
      properties: {}
    CreateUserPoolRequest:
      type: object
      required:
        - PoolName
      properties:
        PoolName:
          $ref: '#/components/schemas/UserPoolNameType'
        Policies:
          $ref: '#/components/schemas/UserPoolPolicyType'
        LambdaConfig:
          $ref: '#/components/schemas/LambdaConfigType'
        AutoVerifiedAttributes:
          $ref: '#/components/schemas/VerifiedAttributesListType'
        AliasAttributes:
          $ref: '#/components/schemas/AliasAttributesListType'
        SmsVerificationMessage:
          $ref: '#/components/schemas/SmsVerificationMessageType'
        EmailVerificationMessage:
          $ref: '#/components/schemas/EmailVerificationMessageType'
        EmailVerificationSubject:
          $ref: '#/components/schemas/EmailVerificationSubjectType'
        SmsAuthenticationMessage:
          $ref: '#/components/schemas/SmsVerificationMessageType'
        MfaConfiguration:
          $ref: '#/components/schemas/UserPoolMfaType'
        DeviceConfiguration:
          $ref: '#/components/schemas/DeviceConfigurationType'
        EmailConfiguration:
          $ref: '#/components/schemas/EmailConfigurationType'
        SmsConfiguration:
          $ref: '#/components/schemas/SmsConfigurationType'
        UserPoolTags:
          $ref: '#/components/schemas/UserPoolTagsType'
        AdminCreateUserConfig:
          $ref: '#/components/schemas/AdminCreateUserConfigType'
        Schema:
          $ref: '#/components/schemas/SchemaAttributesListType'
      description: Represents the request to create a user pool.
    CreateUserPoolResponse:
      type: object
      properties:
        UserPool:
          $ref: '#/components/schemas/UserPoolType'
      description: Represents the response from the server for the request to create a user pool.
    CustomAttributeNameType:
      type: string
      pattern: '[\p{L}\p{M}\p{S}\p{N}\p{P}]+'
      minLength: 1
      maxLength: 20
    CustomAttributesListType:
      type: array
      items:
        $ref: '#/components/schemas/SchemaAttributeType'
      minItems: 1
      maxItems: 25
    DateType:
      type: string
      format: date-time
    DeleteGroupRequest:
      type: object
      required:
        - GroupName
        - UserPoolId
      properties:
        GroupName:
          $ref: '#/components/schemas/GroupNameType'
        UserPoolId:
          $ref: '#/components/schemas/UserPoolIdType'
    DeleteIdentityProviderRequest:
      type: object
      required:
        - UserPoolId
        - ProviderName
      properties:
        UserPoolId:
          $ref: '#/components/schemas/UserPoolIdType'
        ProviderName:
          $ref: '#/components/schemas/ProviderNameType'
    DeleteUserAttributesRequest:
      type: object
      required:
        - UserAttributeNames
        - AccessToken
      properties:
        UserAttributeNames:
          $ref: '#/components/schemas/AttributeNameListType'
        AccessToken:
          $ref: '#/components/schemas/TokenModelType'
      description: Represents the request to delete user attributes.
    DeleteUserAttributesResponse:
      type: object
      properties: {}
      description: Represents the response from the server to delete user attributes.
    DeleteUserPoolClientRequest:
      type: object
      required:
        - UserPoolId
        - ClientId
      properties:
        UserPoolId:
          $ref: '#/components/schemas/UserPoolIdType'
        ClientId:
          $ref: '#/components/schemas/ClientIdType'
      description: Represents the request to delete a user pool client.
    DeleteUserPoolDomainRequest:
      type: object
      required:
        - Domain
        - UserPoolId
      properties:
        Domain:
          $ref: '#/components/schemas/DomainType'
        UserPoolId:
          $ref: '#/components/schemas/UserPoolIdType'
    DeleteUserPoolDomainResponse:
      type: object
      properties: {}
    DeleteUserPoolRequest:
      type: object
      required:
        - UserPoolId
      properties:
        UserPoolId:
          $ref: '#/components/schemas/UserPoolIdType'
      description: Represents the request to delete a user pool.
    DeleteUserRequest:
      type: object
      required:
        - AccessToken
      properties:
        AccessToken:
          $ref: '#/components/schemas/TokenModelType'
      description: Represents the request to delete a user.
    DeliveryMediumListType:
      type: array
      items:
        $ref: '#/components/schemas/DeliveryMediumType'
    DeliveryMediumType:
      type: string
      enum:
        - SMS
        - EMAIL
    DescribeIdentityProviderRequest:
      type: object
      required:
        - UserPoolId
        - ProviderName
      properties:
        UserPoolId:
          $ref: '#/components/schemas/UserPoolIdType'
        ProviderName:
          $ref: '#/components/schemas/ProviderNameType'
    DescribeIdentityProviderResponse:
      type: object
      required:
        - IdentityProvider
      properties:
        IdentityProvider:
          $ref: '#/components/schemas/IdentityProviderType'
    DescribeUserImportJobRequest:
      type: object
      required:
        - UserPoolId
        - JobId
      properties:
        UserPoolId:
          $ref: '#/components/schemas/UserPoolIdType'
        JobId:
          $ref: '#/components/schemas/UserImportJobIdType'
      description: Represents the request to describe the user import job.
    DescribeUserImportJobResponse:
      type: object
      properties:
        UserImportJob:
          $ref: '#/components/schemas/UserImportJobType'
      description: Represents the response from the server to the request to describe the user import job.
    DescribeUserPoolClientRequest:
      type: object
      required:
        - UserPoolId
        - ClientId
      properties:
        UserPoolId:
          $ref: '#/components/schemas/UserPoolIdType'
        ClientId:
          $ref: '#/components/schemas/ClientIdType'
      description: Represents the request to describe a user pool client.
    DescribeUserPoolClientResponse:
      type: object
      properties:
        UserPoolClient:
          $ref: '#/components/schemas/UserPoolClientType'
      description: Represents the response from the server from a request to describe the user pool client.
    DescribeUserPoolDomainRequest:
      type: object
      required:
        - Domain
      properties:
        Domain:
          $ref: '#/components/schemas/DomainType'
    DescribeUserPoolDomainResponse:
      type: object
      properties:
        DomainDescription:
          $ref: '#/components/schemas/DomainDescriptionType'
    DescribeUserPoolRequest:
      type: object
      required:
        - UserPoolId
      properties:
        UserPoolId:
          $ref: '#/components/schemas/UserPoolIdType'
      description: Represents the request to describe the user pool.
    DescribeUserPoolResponse:
      type: object
      properties:
        UserPool:
          $ref: '#/components/schemas/UserPoolType'
      description: Represents the response to describe the user pool.
    DescriptionType:
      type: string
      maxLength: 2048
    DeviceConfigurationType:
      type: object
      properties:
        ChallengeRequiredOnNewDevice:
          $ref: '#/components/schemas/BooleanType'
        DeviceOnlyRememberedOnUserPrompt:
          $ref: '#/components/schemas/BooleanType'
      description: The type of configuration for the user pool's device tracking.
    DeviceKeyType:
      type: string
      pattern: '[\w-]+_[0-9a-f-]+'
      minLength: 1
      maxLength: 55
    DeviceListType:
      type: array
      items:
        $ref: '#/components/schemas/DeviceType'
    DeviceNameType:
      type: string
      minLength: 1
      maxLength: 1024
    DeviceRememberedStatusType:
      type: string
      enum:
        - remembered
        - not_remembered
    DeviceSecretVerifierConfigType:
      type: object
      properties:
        PasswordVerifier:
          $ref: '#/components/schemas/StringType'
        Salt:
          $ref: '#/components/schemas/StringType'
      description: The device verifier against which it will be authenticated.
    DeviceType:
      type: object
      properties:
        DeviceKey:
          $ref: '#/components/schemas/DeviceKeyType'
        DeviceAttributes:
          $ref: '#/components/schemas/AttributeListType'
        DeviceCreateDate:
          $ref: '#/components/schemas/DateType'
        DeviceLastModifiedDate:
          $ref: '#/components/schemas/DateType'
        DeviceLastAuthenticatedDate:
          $ref: '#/components/schemas/DateType'
      description: The device type.
    DomainDescriptionType:
      type: object
      properties:
        UserPoolId:
          $ref: '#/components/schemas/UserPoolIdType'
        AWSAccountId:
          $ref: '#/components/schemas/AWSAccountIdType'
        Domain:
          $ref: '#/components/schemas/DomainType'
        S3Bucket:
          $ref: '#/components/schemas/S3BucketType'
        CloudFrontDistribution:
          $ref: '#/components/schemas/ArnType'
        Version:
          $ref: '#/components/schemas/DomainVersionType'
        Status:
          $ref: '#/components/schemas/DomainStatusType'
      description: A container for information about a domain.
    DomainStatusType:
      type: string
      enum:
        - CREATING
        - DELETING
        - UPDATING
        - ACTIVE
    DomainType:
      type: string
      minLength: 1
      maxLength: 1024
    DomainVersionType:
      type: string
      minLength: 1
      maxLength: 20
    DuplicateProviderException:
      type: object
      properties:
        message:
          $ref: '#/components/schemas/MessageType'
      description: This exception is thrown when the provider is already supported by the user pool.
    EmailAddressType:
      type: string
      pattern: '[\p{L}\p{M}\p{S}\p{N}\p{P}]+@[\p{L}\p{M}\p{S}\p{N}\p{P}]+'
    EmailConfigurationType:
      type: object
      properties:
        SourceArn:
          $ref: '#/components/schemas/ArnType'
        ReplyToEmailAddress:
          $ref: '#/components/schemas/EmailAddressType'
      description: The email configuration type.
    EmailVerificationMessageType:
      type: string
      pattern: '[\p{L}\p{M}\p{S}\p{N}\p{P}\s*]*\{####\}[\p{L}\p{M}\p{S}\p{N}\p{P}\s*]*'
      minLength: 6
      maxLength: 20000
    EmailVerificationSubjectType:
      type: string
      pattern: '[\p{L}\p{M}\p{S}\p{N}\p{P}\s]+'
      minLength: 1
      maxLength: 140
    ExpiredCodeException:
      type: object
      properties:
        message:
          $ref: '#/components/schemas/MessageType'
      description: This exception is thrown if a code has expired.
    ExplicitAuthFlowsListType:
      type: array
      items:
        $ref: '#/components/schemas/ExplicitAuthFlowsType'
    ExplicitAuthFlowsType:
      type: string
      enum:
        - ADMIN_NO_SRP_AUTH
        - CUSTOM_AUTH_FLOW_ONLY
    ForceAliasCreation:
      type: boolean
    ForgetDeviceRequest:
      type: object
      required:
        - DeviceKey
      properties:
        AccessToken:
          $ref: '#/components/schemas/TokenModelType'
        DeviceKey:
          $ref: '#/components/schemas/DeviceKeyType'
      description: Represents the request to forget the device.
    ForgotPasswordRequest:
      type: object
      required:
        - ClientId
        - Username
      properties:
        ClientId:
          $ref: '#/components/schemas/ClientIdType'
        SecretHash:
          $ref: '#/components/schemas/SecretHashType'
        Username:
          $ref: '#/components/schemas/UsernameType'
      description: Represents the request to reset a user's password.
    ForgotPasswordResponse:
      type: object
      properties:
        CodeDeliveryDetails:
          $ref: '#/components/schemas/CodeDeliveryDetailsType'
      description: Respresents the response from the server regarding the request to reset a password.
    GenerateSecret:
      type: boolean
    GetCSVHeaderRequest:
      type: object
      required:
        - UserPoolId
      properties:
        UserPoolId:
          $ref: '#/components/schemas/UserPoolIdType'
      description: Represents the request to get the header information for the .csv file for the user import job.
    GetCSVHeaderResponse:
      type: object
      properties:
        UserPoolId:
          $ref: '#/components/schemas/UserPoolIdType'
        CSVHeader:
          $ref: '#/components/schemas/ListOfStringTypes'
      description: Represents the response from the server to the request to get the header information for the .csv file for the user import job.
    GetDeviceRequest:
      type: object
      required:
        - DeviceKey
      properties:
        DeviceKey:
          $ref: '#/components/schemas/DeviceKeyType'
        AccessToken:
          $ref: '#/components/schemas/TokenModelType'
      description: Represents the request to get the device.
    GetDeviceResponse:
      type: object
      required:
        - Device
      properties:
        Device:
          $ref: '#/components/schemas/DeviceType'
      description: Gets the device response.
    GetGroupRequest:
      type: object
      required:
        - GroupName
        - UserPoolId
      properties:
        GroupName:
          $ref: '#/components/schemas/GroupNameType'
        UserPoolId:
          $ref: '#/components/schemas/UserPoolIdType'
    GetGroupResponse:
      type: object
      properties:
        Group:
          $ref: '#/components/schemas/GroupType'
    GetIdentityProviderByIdentifierRequest:
      type: object
      required:
        - UserPoolId
        - IdpIdentifier
      properties:
        UserPoolId:
          $ref: '#/components/schemas/UserPoolIdType'
        IdpIdentifier:
          $ref: '#/components/schemas/IdpIdentifierType'
    GetIdentityProviderByIdentifierResponse:
      type: object
      required:
        - IdentityProvider
      properties:
        IdentityProvider:
          $ref: '#/components/schemas/IdentityProviderType'
    GetUserAttributeVerificationCodeRequest:
      type: object
      required:
        - AccessToken
        - AttributeName
      properties:
        AccessToken:
          $ref: '#/components/schemas/TokenModelType'
        AttributeName:
          $ref: '#/components/schemas/AttributeNameType'
      description: Represents the request to get user attribute verification.
    GetUserAttributeVerificationCodeResponse:
      type: object
      properties:
        CodeDeliveryDetails:
          $ref: '#/components/schemas/CodeDeliveryDetailsType'
      description: The verification code response returned by the server response to get the user attribute verification code.
    GetUserRequest:
      type: object
      required:
        - AccessToken
      properties:
        AccessToken:
          $ref: '#/components/schemas/TokenModelType'
      description: Represents the request to get information about the user.
    GetUserResponse:
      type: object
      required:
        - Username
        - UserAttributes
      properties:
        Username:
          $ref: '#/components/schemas/UsernameType'
        UserAttributes:
          $ref: '#/components/schemas/AttributeListType'
        MFAOptions:
          $ref: '#/components/schemas/MFAOptionListType'
      description: Represents the response from the server from the request to get information about the user.
    GlobalSignOutRequest:
      type: object
      required:
        - AccessToken
      properties:
        AccessToken:
          $ref: '#/components/schemas/TokenModelType'
      description: Represents the request to sign out all devices.
    GlobalSignOutResponse:
      type: object
      properties: {}
      description: The response to the request to sign out all devices.
    GroupExistsException:
      type: object
      properties:
        message:
          $ref: '#/components/schemas/MessageType'
      description: This exception is thrown when Amazon Cognito encounters a group that already exists in the user pool.
    GroupListType:
      type: array
      items:
        $ref: '#/components/schemas/GroupType'
    GroupNameType:
      type: string
      pattern: '[\p{L}\p{M}\p{S}\p{N}\p{P}]+'
      minLength: 1
      maxLength: 128
    GroupType:
      type: object
      properties:
        GroupName:
          $ref: '#/components/schemas/GroupNameType'
        UserPoolId:
          $ref: '#/components/schemas/UserPoolIdType'
        Description:
          $ref: '#/components/schemas/DescriptionType'
        RoleArn:
          $ref: '#/components/schemas/ArnType'
        Precedence:
          $ref: '#/components/schemas/PrecedenceType'
        LastModifiedDate:
          $ref: '#/components/schemas/DateType'
        CreationDate:
          $ref: '#/components/schemas/DateType'
      description: The group type.
    IdentityProviderType:
      type: object
      properties:
        UserPoolId:
          $ref: '#/components/schemas/UserPoolIdType'
        ProviderName:
          $ref: '#/components/schemas/ProviderNameType'
        ProviderType:
          $ref: '#/components/schemas/IdentityProviderTypeType'
        ProviderDetails:
          $ref: '#/components/schemas/ProviderDetailsType'
        AttributeMapping:
          $ref: '#/components/schemas/AttributeMappingType'
        IdpIdentifiers:
          $ref: '#/components/schemas/IdpIdentifiersListType'
        LastModifiedDate:
          $ref: '#/components/schemas/DateType'
        CreationDate:
          $ref: '#/components/schemas/DateType'
      description: A container for information about an identity provider.
    IdentityProviderTypeType:
      type: string
      enum:
        - SAML
    IdpIdentifierType:
      type: string
      pattern: '[\w\s+=.@-]+'
      minLength: 1
      maxLength: 40
    IdpIdentifiersListType:
      type: array
      items:
        $ref: '#/components/schemas/IdpIdentifierType'
      minItems: 0
      maxItems: 50
    InitiateAuthRequest:
      type: object
      required:
        - AuthFlow
        - ClientId
      properties:
        AuthFlow:
          $ref: '#/components/schemas/AuthFlowType'
        AuthParameters:
          $ref: '#/components/schemas/AuthParametersType'
        ClientMetadata:
          $ref: '#/components/schemas/ClientMetadataType'
        ClientId:
          $ref: '#/components/schemas/ClientIdType'
      description: Initiates the authentication request.
    InitiateAuthResponse:
      type: object
      properties:
        ChallengeName:
          $ref: '#/components/schemas/ChallengeNameType'
        Session:
          $ref: '#/components/schemas/SessionType'
        ChallengeParameters:
          $ref: '#/components/schemas/ChallengeParametersType'
        AuthenticationResult:
          $ref: '#/components/schemas/AuthenticationResultType'
      description: Initiates the authentication response.
    IntegerType:
      type: integer
    InternalErrorException:
      type: object
      properties:
        message:
          $ref: '#/components/schemas/MessageType'
      description: This exception is thrown when Amazon Cognito encounters an internal error.
    InvalidEmailRoleAccessPolicyException:
      type: object
      properties:
        message:
          $ref: '#/components/schemas/MessageType'
      description: 'This exception is thrown when Amazon Cognito is not allowed to use your email identity. HTTP status code: 400.'
    InvalidLambdaResponseException:
      type: object
      properties:
        message:
          $ref: '#/components/schemas/MessageType'
      description: This exception is thrown when the Amazon Cognito service encounters an invalid AWS Lambda response.
    InvalidOAuthFlowException:
      type: object
      properties:
        message:
          $ref: '#/components/schemas/MessageType'
      description: This exception is thrown when the specified OAuth flow is invalid.
    InvalidParameterException:
      type: object
      properties:
        message:
          $ref: '#/components/schemas/MessageType'
      description: This exception is thrown when the Amazon Cognito service encounters an invalid parameter.
    InvalidPasswordException:
      type: object
      properties:
        message:
          $ref: '#/components/schemas/MessageType'
      description: This exception is thrown when the Amazon Cognito service encounters an invalid password.
    InvalidSmsRoleAccessPolicyException:
      type: object
      properties:
        message:
          $ref: '#/components/schemas/MessageType'
      description: This exception is returned when the role provided for SMS configuration does not have permission to publish using Amazon SNS.
    InvalidSmsRoleTrustRelationshipException:
      type: object
      properties:
        message:
          $ref: '#/components/schemas/MessageType'
      description: This exception is thrown when the trust relationship is invalid for the role provided for SMS configuration. This can happen if you do not trust <b>cognito-idp.amazonaws.com</b> or the external ID provided in the role does not match what is provided in the SMS configuration for the user pool.
    InvalidUserPoolConfigurationException:
      type: object
      properties:
        message:
          $ref: '#/components/schemas/MessageType'
      description: This exception is thrown when the user pool configuration is invalid.
    LambdaConfigType:
      type: object
      properties:
        PreSignUp:
          $ref: '#/components/schemas/ArnType'
        CustomMessage:
          $ref: '#/components/schemas/ArnType'
        PostConfirmation:
          $ref: '#/components/schemas/ArnType'
        PreAuthentication:
          $ref: '#/components/schemas/ArnType'
        PostAuthentication:
          $ref: '#/components/schemas/ArnType'
        DefineAuthChallenge:
          $ref: '#/components/schemas/ArnType'
        CreateAuthChallenge:
          $ref: '#/components/schemas/ArnType'
        VerifyAuthChallengeResponse:
          $ref: '#/components/schemas/ArnType'
      description: Specifies the type of configuration for AWS Lambda triggers.
    LimitExceededException:
      type: object
      properties:
        message:
          $ref: '#/components/schemas/MessageType'
      description: This exception is thrown when a user exceeds the limit for a requested AWS resource.
    ListDevicesRequest:
      type: object
      required:
        - AccessToken
      properties:
        AccessToken:
          $ref: '#/components/schemas/TokenModelType'
        Limit:
          $ref: '#/components/schemas/QueryLimitType'
        PaginationToken:
          $ref: '#/components/schemas/SearchPaginationTokenType'
      description: Represents the request to list the devices.
    ListDevicesResponse:
      type: object
      properties:
        Devices:
          $ref: '#/components/schemas/DeviceListType'
        PaginationToken:
          $ref: '#/components/schemas/SearchPaginationTokenType'
      description: Represents the response to list devices.
    ListGroupsRequest:
      type: object
      required:
        - UserPoolId
      properties:
        UserPoolId:
          $ref: '#/components/schemas/UserPoolIdType'
        Limit:
          $ref: '#/components/schemas/QueryLimitType'
        NextToken:
          $ref: '#/components/schemas/PaginationKey'
    ListGroupsResponse:
      type: object
      properties:
        Groups:
          $ref: '#/components/schemas/GroupListType'
        NextToken:
          $ref: '#/components/schemas/PaginationKey'
    ListIdentityProvidersRequest:
      type: object
      required:
        - UserPoolId
      properties:
        UserPoolId:
          $ref: '#/components/schemas/UserPoolIdType'
        MaxResults:
          $ref: '#/components/schemas/ListProvidersLimitType'
        NextToken:
          $ref: '#/components/schemas/PaginationKeyType'
    ListIdentityProvidersResponse:
      type: object
      required:
        - Providers
      properties:
        Providers:
          $ref: '#/components/schemas/ProvidersListType'
        NextToken:
          $ref: '#/components/schemas/PaginationKeyType'
    ListOfStringTypes:
      type: array
      items:
        $ref: '#/components/schemas/StringType'
    ListProvidersLimitType:
      type: integer
      minimum: 1
      maximum: 60
    ListUserImportJobsRequest:
      type: object
      required:
        - UserPoolId
        - MaxResults
      properties:
        UserPoolId:
          $ref: '#/components/schemas/UserPoolIdType'
        MaxResults:
          $ref: '#/components/schemas/PoolQueryLimitType'
        PaginationToken:
          $ref: '#/components/schemas/PaginationKeyType'
      description: Represents the request to list the user import jobs.
    ListUserImportJobsResponse:
      type: object
      properties:
        UserImportJobs:
          $ref: '#/components/schemas/UserImportJobsListType'
        PaginationToken:
          $ref: '#/components/schemas/PaginationKeyType'
      description: Represents the response from the server to the request to list the user import jobs.
    ListUserPoolClientsRequest:
      type: object
      required:
        - UserPoolId
      properties:
        UserPoolId:
          $ref: '#/components/schemas/UserPoolIdType'
        MaxResults:
          $ref: '#/components/schemas/QueryLimit'
        NextToken:
          $ref: '#/components/schemas/PaginationKey'
      description: Represents the request to list the user pool clients.
    ListUserPoolClientsResponse:
      type: object
      properties:
        UserPoolClients:
          $ref: '#/components/schemas/UserPoolClientListType'
        NextToken:
          $ref: '#/components/schemas/PaginationKey'
      description: Represents the response from the server that lists user pool clients.
    ListUserPoolsRequest:
      type: object
      required:
        - MaxResults
      properties:
        NextToken:
          $ref: '#/components/schemas/PaginationKeyType'
        MaxResults:
          $ref: '#/components/schemas/PoolQueryLimitType'
      description: Represents the request to list user pools.
    ListUserPoolsResponse:
      type: object
      properties:
        UserPools:
          $ref: '#/components/schemas/UserPoolListType'
        NextToken:
          $ref: '#/components/schemas/PaginationKeyType'
      description: Represents the response to list user pools.
    ListUsersInGroupRequest:
      type: object
      required:
        - UserPoolId
        - GroupName
      properties:
        UserPoolId:
          $ref: '#/components/schemas/UserPoolIdType'
        GroupName:
          $ref: '#/components/schemas/GroupNameType'
        Limit:
          $ref: '#/components/schemas/QueryLimitType'
        NextToken:
          $ref: '#/components/schemas/PaginationKey'
    ListUsersInGroupResponse:
      type: object
      properties:
        Users:
          $ref: '#/components/schemas/UsersListType'
        NextToken:
          $ref: '#/components/schemas/PaginationKey'
    ListUsersRequest:
      type: object
      required:
        - UserPoolId
      properties:
        UserPoolId:
          $ref: '#/components/schemas/UserPoolIdType'
        AttributesToGet:
          $ref: '#/components/schemas/SearchedAttributeNamesListType'
        Limit:
          $ref: '#/components/schemas/QueryLimitType'
        PaginationToken:
          $ref: '#/components/schemas/SearchPaginationTokenType'
        Filter:
          $ref: '#/components/schemas/UserFilterType'
      description: Represents the request to list users.
    ListUsersResponse:
      type: object
      properties:
        Users:
          $ref: '#/components/schemas/UsersListType'
        PaginationToken:
          $ref: '#/components/schemas/SearchPaginationTokenType'
      description: The response from the request to list users.
    LogoutURLsListType:
      type: array
      items:
        $ref: '#/components/schemas/RedirectUrlType'
      minItems: 0
      maxItems: 100
    LongType:
      type: integer
    MFAMethodNotFoundException:
      type: object
      properties:
        message:
          $ref: '#/components/schemas/MessageType'
      description: This exception is thrown when Amazon Cognito cannot find a multi-factor authentication (MFA) method.
    MFAOptionListType:
      type: array
      items:
        $ref: '#/components/schemas/MFAOptionType'
    MFAOptionType:
      type: object
      properties:
        DeliveryMedium:
          $ref: '#/components/schemas/DeliveryMediumType'
        AttributeName:
          $ref: '#/components/schemas/AttributeNameType'
      description: Specifies the different settings for multi-factor authentication (MFA).
    MessageActionType:
      type: string
      enum:
        - RESEND
        - SUPPRESS
    MessageTemplateType:
      type: object
      properties:
        SMSMessage:
          $ref: '#/components/schemas/SmsVerificationMessageType'
        EmailMessage:
          $ref: '#/components/schemas/EmailVerificationMessageType'
        EmailSubject:
          $ref: '#/components/schemas/EmailVerificationSubjectType'
      description: The message template structure.
    MessageType:
      type: string
    NewDeviceMetadataType:
      type: object
      properties:
        DeviceKey:
          $ref: '#/components/schemas/DeviceKeyType'
        DeviceGroupKey:
          $ref: '#/components/schemas/StringType'
      description: The new device metadata type.
    NotAuthorizedException:
      type: object
      properties:
        message:
          $ref: '#/components/schemas/MessageType'
      description: This exception is thrown when a user is not authorized.
    NumberAttributeConstraintsType:
      type: object
      properties:
        MinValue:
          $ref: '#/components/schemas/StringType'
        MaxValue:
          $ref: '#/components/schemas/StringType'
      description: The minimum and maximum value of an attribute that is of the number data type.
    OAuthFlowType:
      type: string
      enum:
        - code
        - implicit
        - client_credentials
    OAuthFlowsType:
      type: array
      items:
        $ref: '#/components/schemas/OAuthFlowType'
      minItems: 0
      maxItems: 3
    PaginationKey:
      type: string
      pattern: '[\S]+'
      minLength: 1
    PaginationKeyType:
      type: string
      pattern: '[\S]+'
      minLength: 1
    PasswordPolicyMinLengthType:
      type: integer
      minimum: 6
      maximum: 99
    PasswordPolicyType:
      type: object
      properties:
        MinimumLength:
          $ref: '#/components/schemas/PasswordPolicyMinLengthType'
        RequireUppercase:
          $ref: '#/components/schemas/BooleanType'
        RequireLowercase:
          $ref: '#/components/schemas/BooleanType'
        RequireNumbers:
          $ref: '#/components/schemas/BooleanType'
        RequireSymbols:
          $ref: '#/components/schemas/BooleanType'
      description: The password policy type.
    PasswordResetRequiredException:
      type: object
      properties:
        message:
          $ref: '#/components/schemas/MessageType'
      description: This exception is thrown when a password reset is required.
    PasswordType:
      type: string
      pattern: '[\S]+'
      minLength: 6
      maxLength: 256
      format: password
    PoolQueryLimitType:
      type: integer
      minimum: 1
      maximum: 60
    PreSignedUrlType:
      type: string
      minLength: 0
      maxLength: 2048
    PrecedenceType:
      type: integer
      minimum: 0
    PreconditionNotMetException:
      type: object
      properties:
        message:
          $ref: '#/components/schemas/MessageType'
      description: This exception is thrown when a precondition is not met.
    ProviderDescription:
      type: object
      properties:
        ProviderName:
          $ref: '#/components/schemas/ProviderNameType'
        ProviderType:
          $ref: '#/components/schemas/IdentityProviderTypeType'
        LastModifiedDate:
          $ref: '#/components/schemas/DateType'
        CreationDate:
          $ref: '#/components/schemas/DateType'
      description: A container for identity provider details.
    ProviderDetailsType:
      type: array
      items:
        type: object
        properties:
          key:
            $ref: '#/components/schemas/StringType'
          value:
            $ref: '#/components/schemas/StringType'
    ProviderNameType:
      type: string
      pattern: '[\p{L}\p{M}\p{S}\p{N}\p{P}]+'
      minLength: 1
      maxLength: 32
    ProvidersListType:
      type: array
      items:
        $ref: '#/components/schemas/ProviderDescription'
      minItems: 0
      maxItems: 50
    QueryLimit:
      type: integer
      minimum: 1
      maximum: 60
    QueryLimitType:
      type: integer
      minimum: 0
      maximum: 60
    RedirectUrlType:
      type: string
      pattern: '[\p{L}\p{M}\p{S}\p{N}\p{P}]+'
      minLength: 1
      maxLength: 1024
    RefreshTokenValidityType:
      type: integer
      minimum: 0
      maximum: 3650
    ResendConfirmationCodeRequest:
      type: object
      required:
        - ClientId
        - Username
      properties:
        ClientId:
          $ref: '#/components/schemas/ClientIdType'
        SecretHash:
          $ref: '#/components/schemas/SecretHashType'
        Username:
          $ref: '#/components/schemas/UsernameType'
      description: Represents the request to resend the confirmation code.
    ResendConfirmationCodeResponse:
      type: object
      properties:
        CodeDeliveryDetails:
          $ref: '#/components/schemas/CodeDeliveryDetailsType'
      description: The response from the server when the Amazon Cognito Your User Pools service makes the request to resend a confirmation code.
    ResourceNotFoundException:
      type: object
      properties:
        message:
          $ref: '#/components/schemas/MessageType'
      description: This exception is thrown when the Amazon Cognito service cannot find the requested resource.
    RespondToAuthChallengeRequest:
      type: object
      required:
        - ClientId
        - ChallengeName
      properties:
        ClientId:
          $ref: '#/components/schemas/ClientIdType'
        ChallengeName:
          $ref: '#/components/schemas/ChallengeNameType'
        Session:
          $ref: '#/components/schemas/SessionType'
        ChallengeResponses:
          $ref: '#/components/schemas/ChallengeResponsesType'
      description: The request to respond to an authentication challenge.
    RespondToAuthChallengeResponse:
      type: object
      properties:
        ChallengeName:
          $ref: '#/components/schemas/ChallengeNameType'
        Session:
          $ref: '#/components/schemas/SessionType'
        ChallengeParameters:
          $ref: '#/components/schemas/ChallengeParametersType'
        AuthenticationResult:
          $ref: '#/components/schemas/AuthenticationResultType'
      description: The response to respond to the authentication challenge.
    S3BucketType:
      type: string
      pattern: '^[0-9A-Za-z\.\-_]*\(\?<!\.\)$'
      minLength: 3
      maxLength: 1024
    SchemaAttributeType:
      type: object
      properties:
        Name:
          $ref: '#/components/schemas/CustomAttributeNameType'
        AttributeDataType:
          $ref: '#/components/schemas/AttributeDataType'
        DeveloperOnlyAttribute:
          $ref: '#/components/schemas/BooleanType'
        Mutable:
          $ref: '#/components/schemas/BooleanType'
        Required:
          $ref: '#/components/schemas/BooleanType'
        NumberAttributeConstraints:
          $ref: '#/components/schemas/NumberAttributeConstraintsType'
        StringAttributeConstraints:
          $ref: '#/components/schemas/StringAttributeConstraintsType'
      description: Contains information about the schema attribute.
    SchemaAttributesListType:
      type: array
      items:
        $ref: '#/components/schemas/SchemaAttributeType'
      minItems: 1
      maxItems: 50
    ScopeDoesNotExistException:
      type: object
      properties:
        message:
          $ref: '#/components/schemas/MessageType'
      description: This exception is thrown when the specified scope does not exist.
    ScopeListType:
      type: array
      items:
        $ref: '#/components/schemas/ScopeType'
    ScopeType:
      type: string
      pattern: '[\x21\x23-\x5B\x5D-\x7E]+'
      minLength: 1
      maxLength: 256
    SearchPaginationTokenType:
      type: string
      pattern: '[\S]+'
      minLength: 1
    SearchedAttributeNamesListType:
      type: array
      items:
        $ref: '#/components/schemas/AttributeNameType'
    SecretHashType:
      type: string
      pattern: '[\w+=/]+'
      minLength: 1
      maxLength: 128
      format: password
    SessionType:
      type: string
      minLength: 20
      maxLength: 2048
    SetUserSettingsRequest:
      type: object
      required:
        - AccessToken
        - MFAOptions
      properties:
        AccessToken:
          $ref: '#/components/schemas/TokenModelType'
        MFAOptions:
          $ref: '#/components/schemas/MFAOptionListType'
      description: Represents the request to set user settings.
    SetUserSettingsResponse:
      type: object
      properties: {}
      description: The response from the server for a set user settings request.
    SignUpRequest:
      type: object
      required:
        - ClientId
        - Username
        - Password
      properties:
        ClientId:
          $ref: '#/components/schemas/ClientIdType'
        SecretHash:
          $ref: '#/components/schemas/SecretHashType'
        Username:
          $ref: '#/components/schemas/UsernameType'
        Password:
          $ref: '#/components/schemas/PasswordType'
        UserAttributes:
          $ref: '#/components/schemas/AttributeListType'
        ValidationData:
          $ref: '#/components/schemas/AttributeListType'
      description: Represents the request to register a user.
    SignUpResponse:
      type: object
      required:
        - UserConfirmed
        - UserSub
      properties:
        UserConfirmed:
          $ref: '#/components/schemas/BooleanType'
        CodeDeliveryDetails:
          $ref: '#/components/schemas/CodeDeliveryDetailsType'
        UserSub:
          $ref: '#/components/schemas/StringType'
      description: The response from the server for a registration request.
    SmsConfigurationType:
      type: object
      required:
        - SnsCallerArn
      properties:
        SnsCallerArn:
          $ref: '#/components/schemas/ArnType'
        ExternalId:
          $ref: '#/components/schemas/StringType'
      description: The SMS configuration type.
    SmsVerificationMessageType:
      type: string
      pattern: '.*\{####\}.*'
      minLength: 6
      maxLength: 140
    StartUserImportJobRequest:
      type: object
      required:
        - UserPoolId
        - JobId
      properties:
        UserPoolId:
          $ref: '#/components/schemas/UserPoolIdType'
        JobId:
          $ref: '#/components/schemas/UserImportJobIdType'
      description: Represents the request to start the user import job.
    StartUserImportJobResponse:
      type: object
      properties:
        UserImportJob:
          $ref: '#/components/schemas/UserImportJobType'
      description: Represents the response from the server to the request to start the user import job.
    StatusType:
      type: string
      enum:
        - Enabled
        - Disabled
    StopUserImportJobRequest:
      type: object
      required:
        - UserPoolId
        - JobId
      properties:
        UserPoolId:
          $ref: '#/components/schemas/UserPoolIdType'
        JobId:
          $ref: '#/components/schemas/UserImportJobIdType'
      description: Represents the request to stop the user import job.
    StopUserImportJobResponse:
      type: object
      properties:
        UserImportJob:
          $ref: '#/components/schemas/UserImportJobType'
      description: Represents the response from the server to the request to stop the user import job.
    StringAttributeConstraintsType:
      type: object
      properties:
        MinLength:
          $ref: '#/components/schemas/StringType'
        MaxLength:
          $ref: '#/components/schemas/StringType'
      description: The type of constraints associated with an attribute of the string type.
    StringType:
      type: string
    SupportedIdentityProvidersListType:
      type: array
      items:
        $ref: '#/components/schemas/ProviderNameType'
    TokenModelType:
      type: string
      pattern: '[A-Za-z0-9-_=.]+'
      format: password
    TooManyFailedAttemptsException:
      type: object
      properties:
        message:
          $ref: '#/components/schemas/MessageType'
      description: 'This exception is thrown when the user has made too many failed attempts for a given action (e.g., sign in).'
    TooManyRequestsException:
      type: object
      properties:
        message:
          $ref: '#/components/schemas/MessageType'
      description: This exception is thrown when the user has made too many requests for a given operation.
    UnexpectedLambdaException:
      type: object
      properties:
        message:
          $ref: '#/components/schemas/MessageType'
      description: This exception is thrown when the Amazon Cognito service encounters an unexpected exception with the AWS Lambda service.
    UnsupportedIdentityProviderException:
      type: object
      properties:
        message:
          $ref: '#/components/schemas/MessageType'
      description: This exception is thrown when the specified identifier is not supported.
    UnsupportedUserStateException:
      type: object
      properties:
        message:
          $ref: '#/components/schemas/MessageType'
      description: The request failed because the user is in an unsupported state.
    UpdateDeviceStatusRequest:
      type: object
      required:
        - AccessToken
        - DeviceKey
      properties:
        AccessToken:
          $ref: '#/components/schemas/TokenModelType'
        DeviceKey:
          $ref: '#/components/schemas/DeviceKeyType'
        DeviceRememberedStatus:
          $ref: '#/components/schemas/DeviceRememberedStatusType'
      description: Represents the request to update the device status.
    UpdateDeviceStatusResponse:
      type: object
      properties: {}
      description: The response to the request to update the device status.
    UpdateGroupRequest:
      type: object
      required:
        - GroupName
        - UserPoolId
      properties:
        GroupName:
          $ref: '#/components/schemas/GroupNameType'
        UserPoolId:
          $ref: '#/components/schemas/UserPoolIdType'
        Description:
          $ref: '#/components/schemas/DescriptionType'
        RoleArn:
          $ref: '#/components/schemas/ArnType'
        Precedence:
          $ref: '#/components/schemas/PrecedenceType'
    UpdateGroupResponse:
      type: object
      properties:
        Group:
          $ref: '#/components/schemas/GroupType'
    UpdateIdentityProviderRequest:
      type: object
      required:
        - UserPoolId
        - ProviderName
      properties:
        UserPoolId:
          $ref: '#/components/schemas/UserPoolIdType'
        ProviderName:
          $ref: '#/components/schemas/ProviderNameType'
        ProviderDetails:
          $ref: '#/components/schemas/ProviderDetailsType'
        AttributeMapping:
          $ref: '#/components/schemas/AttributeMappingType'
        IdpIdentifiers:
          $ref: '#/components/schemas/IdpIdentifiersListType'
    UpdateIdentityProviderResponse:
      type: object
      required:
        - IdentityProvider
      properties:
        IdentityProvider:
          $ref: '#/components/schemas/IdentityProviderType'
    UpdateUserAttributesRequest:
      type: object
      required:
        - UserAttributes
        - AccessToken
      properties:
        UserAttributes:
          $ref: '#/components/schemas/AttributeListType'
        AccessToken:
          $ref: '#/components/schemas/TokenModelType'
      description: Represents the request to update user attributes.
    UpdateUserAttributesResponse:
      type: object
      properties:
        CodeDeliveryDetailsList:
          $ref: '#/components/schemas/CodeDeliveryDetailsListType'
      description: Represents the response from the server for the request to update user attributes.
    UpdateUserPoolClientRequest:
      type: object
      required:
        - UserPoolId
        - ClientId
      properties:
        UserPoolId:
          $ref: '#/components/schemas/UserPoolIdType'
        ClientId:
          $ref: '#/components/schemas/ClientIdType'
        ClientName:
          $ref: '#/components/schemas/ClientNameType'
        RefreshTokenValidity:
          $ref: '#/components/schemas/RefreshTokenValidityType'
        ReadAttributes:
          $ref: '#/components/schemas/ClientPermissionListType'
        WriteAttributes:
          $ref: '#/components/schemas/ClientPermissionListType'
        ExplicitAuthFlows:
          $ref: '#/components/schemas/ExplicitAuthFlowsListType'
        SupportedIdentityProviders:
          $ref: '#/components/schemas/SupportedIdentityProvidersListType'
        CallbackURLs:
          $ref: '#/components/schemas/CallbackURLsListType'
        LogoutURLs:
          $ref: '#/components/schemas/LogoutURLsListType'
        DefaultRedirectURI:
          $ref: '#/components/schemas/RedirectUrlType'
        AllowedOAuthFlows:
          $ref: '#/components/schemas/OAuthFlowsType'
        AllowedOAuthScopes:
          $ref: '#/components/schemas/ScopeListType'
        AllowedOAuthFlowsUserPoolClient:
          $ref: '#/components/schemas/BooleanType'
      description: Represents the request to update the user pool client.
    UpdateUserPoolClientResponse:
      type: object
      properties:
        UserPoolClient:
          $ref: '#/components/schemas/UserPoolClientType'
      description: Represents the response from the server to the request to update the user pool client.
    UpdateUserPoolRequest:
      type: object
      required:
        - UserPoolId
      properties:
        UserPoolId:
          $ref: '#/components/schemas/UserPoolIdType'
        Policies:
          $ref: '#/components/schemas/UserPoolPolicyType'
        LambdaConfig:
          $ref: '#/components/schemas/LambdaConfigType'
        AutoVerifiedAttributes:
          $ref: '#/components/schemas/VerifiedAttributesListType'
        SmsVerificationMessage:
          $ref: '#/components/schemas/SmsVerificationMessageType'
        EmailVerificationMessage:
          $ref: '#/components/schemas/EmailVerificationMessageType'
        EmailVerificationSubject:
          $ref: '#/components/schemas/EmailVerificationSubjectType'
        SmsAuthenticationMessage:
          $ref: '#/components/schemas/SmsVerificationMessageType'
        MfaConfiguration:
          $ref: '#/components/schemas/UserPoolMfaType'
        DeviceConfiguration:
          $ref: '#/components/schemas/DeviceConfigurationType'
        EmailConfiguration:
          $ref: '#/components/schemas/EmailConfigurationType'
        SmsConfiguration:
          $ref: '#/components/schemas/SmsConfigurationType'
        UserPoolTags:
          $ref: '#/components/schemas/UserPoolTagsType'
        AdminCreateUserConfig:
          $ref: '#/components/schemas/AdminCreateUserConfigType'
      description: Represents the request to update the user pool.
    UpdateUserPoolResponse:
      type: object
      properties: {}
      description: Represents the response from the server when you make a request to update the user pool.
    UserFilterType:
      type: string
      maxLength: 256
    UserImportInProgressException:
      type: object
      properties:
        message:
          $ref: '#/components/schemas/MessageType'
      description: This exception is thrown when you are trying to modify a user pool while a user import job is in progress for that pool.
    UserImportJobIdType:
      type: string
      pattern: 'import-[0-9a-zA-Z-]+'
      minLength: 1
      maxLength: 55
    UserImportJobNameType:
      type: string
      pattern: '[\w\s+=,.@-]+'
      minLength: 1
      maxLength: 128
    UserImportJobStatusType:
      type: string
      enum:
        - Created
        - Pending
        - InProgress
        - Stopping
        - Expired
        - Stopped
        - Failed
        - Succeeded
    UserImportJobType:
      type: object
      properties:
        JobName:
          $ref: '#/components/schemas/UserImportJobNameType'
        JobId:
          $ref: '#/components/schemas/UserImportJobIdType'
        UserPoolId:
          $ref: '#/components/schemas/UserPoolIdType'
        PreSignedUrl:
          $ref: '#/components/schemas/PreSignedUrlType'
        CreationDate:
          $ref: '#/components/schemas/DateType'
        StartDate:
          $ref: '#/components/schemas/DateType'
        CompletionDate:
          $ref: '#/components/schemas/DateType'
        Status:
          $ref: '#/components/schemas/UserImportJobStatusType'
        CloudWatchLogsRoleArn:
          $ref: '#/components/schemas/ArnType'
        ImportedUsers:
          $ref: '#/components/schemas/LongType'
        SkippedUsers:
          $ref: '#/components/schemas/LongType'
        FailedUsers:
          $ref: '#/components/schemas/LongType'
        CompletionMessage:
          $ref: '#/components/schemas/CompletionMessageType'
      description: The user import job type.
    UserImportJobsListType:
      type: array
      items:
        $ref: '#/components/schemas/UserImportJobType'
      minItems: 1
      maxItems: 50
    UserLambdaValidationException:
      type: object
      properties:
        message:
          $ref: '#/components/schemas/MessageType'
      description: This exception is thrown when the Amazon Cognito service encounters a user validation exception with the AWS Lambda service.
    UserNotConfirmedException:
      type: object
      properties:
        message:
          $ref: '#/components/schemas/MessageType'
      description: This exception is thrown when a user is not confirmed successfully.
    UserNotFoundException:
      type: object
      properties:
        message:
          $ref: '#/components/schemas/MessageType'
      description: This exception is thrown when a user is not found.
    UserPoolClientDescription:
      type: object
      properties:
        ClientId:
          $ref: '#/components/schemas/ClientIdType'
        UserPoolId:
          $ref: '#/components/schemas/UserPoolIdType'
        ClientName:
          $ref: '#/components/schemas/ClientNameType'
      description: The description of the user pool client.
    UserPoolClientListType:
      type: array
      items:
        $ref: '#/components/schemas/UserPoolClientDescription'
    UserPoolClientType:
      type: object
      properties:
        UserPoolId:
          $ref: '#/components/schemas/UserPoolIdType'
        ClientName:
          $ref: '#/components/schemas/ClientNameType'
        ClientId:
          $ref: '#/components/schemas/ClientIdType'
        ClientSecret:
          $ref: '#/components/schemas/ClientSecretType'
        LastModifiedDate:
          $ref: '#/components/schemas/DateType'
        CreationDate:
          $ref: '#/components/schemas/DateType'
        RefreshTokenValidity:
          $ref: '#/components/schemas/RefreshTokenValidityType'
        ReadAttributes:
          $ref: '#/components/schemas/ClientPermissionListType'
        WriteAttributes:
          $ref: '#/components/schemas/ClientPermissionListType'
        ExplicitAuthFlows:
          $ref: '#/components/schemas/ExplicitAuthFlowsListType'
        SupportedIdentityProviders:
          $ref: '#/components/schemas/SupportedIdentityProvidersListType'
        CallbackURLs:
          $ref: '#/components/schemas/CallbackURLsListType'
        LogoutURLs:
          $ref: '#/components/schemas/LogoutURLsListType'
        DefaultRedirectURI:
          $ref: '#/components/schemas/RedirectUrlType'
        AllowedOAuthFlows:
          $ref: '#/components/schemas/OAuthFlowsType'
        AllowedOAuthScopes:
          $ref: '#/components/schemas/ScopeListType'
        AllowedOAuthFlowsUserPoolClient:
          $ref: '#/components/schemas/BooleanType'
      description: A user pool of the client type.
    UserPoolDescriptionType:
      type: object
      properties:
        Id:
          $ref: '#/components/schemas/UserPoolIdType'
        Name:
          $ref: '#/components/schemas/UserPoolNameType'
        LambdaConfig:
          $ref: '#/components/schemas/LambdaConfigType'
        Status:
          $ref: '#/components/schemas/StatusType'
        LastModifiedDate:
          $ref: '#/components/schemas/DateType'
        CreationDate:
          $ref: '#/components/schemas/DateType'
      description: A user pool description.
    UserPoolIdType:
      type: string
      pattern: '[\w-]+_[0-9a-zA-Z]+'
      minLength: 1
      maxLength: 55
    UserPoolListType:
      type: array
      items:
        $ref: '#/components/schemas/UserPoolDescriptionType'
    UserPoolMfaType:
      type: string
      enum:
        - 'OFF'
        - 'ON'
        - OPTIONAL
    UserPoolNameType:
      type: string
      pattern: '[\w\s+=,.@-]+'
      minLength: 1
      maxLength: 128
    UserPoolPolicyType:
      type: object
      properties:
        PasswordPolicy:
          $ref: '#/components/schemas/PasswordPolicyType'
      description: The type of policy in a user pool.
    UserPoolTaggingException:
      type: object
      properties:
        message:
          $ref: '#/components/schemas/MessageType'
      description: This exception is thrown when a user pool tag cannot be set or updated.
    UserPoolTagsType:
      type: array
      items:
        type: object
        properties:
          key:
            $ref: '#/components/schemas/StringType'
          value:
            $ref: '#/components/schemas/StringType'
    UserPoolType:
      type: object
      properties:
        Id:
          $ref: '#/components/schemas/UserPoolIdType'
        Name:
          $ref: '#/components/schemas/UserPoolNameType'
        Policies:
          $ref: '#/components/schemas/UserPoolPolicyType'
        LambdaConfig:
          $ref: '#/components/schemas/LambdaConfigType'
        Status:
          $ref: '#/components/schemas/StatusType'
        LastModifiedDate:
          $ref: '#/components/schemas/DateType'
        CreationDate:
          $ref: '#/components/schemas/DateType'
        SchemaAttributes:
          $ref: '#/components/schemas/SchemaAttributesListType'
        AutoVerifiedAttributes:
          $ref: '#/components/schemas/VerifiedAttributesListType'
        AliasAttributes:
          $ref: '#/components/schemas/AliasAttributesListType'
        SmsVerificationMessage:
          $ref: '#/components/schemas/SmsVerificationMessageType'
        EmailVerificationMessage:
          $ref: '#/components/schemas/EmailVerificationMessageType'
        EmailVerificationSubject:
          $ref: '#/components/schemas/EmailVerificationSubjectType'
        SmsAuthenticationMessage:
          $ref: '#/components/schemas/SmsVerificationMessageType'
        MfaConfiguration:
          $ref: '#/components/schemas/UserPoolMfaType'
        DeviceConfiguration:
          $ref: '#/components/schemas/DeviceConfigurationType'
        EstimatedNumberOfUsers:
          $ref: '#/components/schemas/IntegerType'
        EmailConfiguration:
          $ref: '#/components/schemas/EmailConfigurationType'
        SmsConfiguration:
          $ref: '#/components/schemas/SmsConfigurationType'
        UserPoolTags:
          $ref: '#/components/schemas/UserPoolTagsType'
        SmsConfigurationFailure:
          $ref: '#/components/schemas/StringType'
        EmailConfigurationFailure:
          $ref: '#/components/schemas/StringType'
        AdminCreateUserConfig:
          $ref: '#/components/schemas/AdminCreateUserConfigType'
      description: A container for information about the user pool type.
    UserStatusType:
      type: string
      enum:
        - UNCONFIRMED
        - CONFIRMED
        - ARCHIVED
        - COMPROMISED
        - UNKNOWN
        - RESET_REQUIRED
        - FORCE_CHANGE_PASSWORD
    UserType:
      type: object
      properties:
        Username:
          $ref: '#/components/schemas/UsernameType'
        Attributes:
          $ref: '#/components/schemas/AttributeListType'
        UserCreateDate:
          $ref: '#/components/schemas/DateType'
        UserLastModifiedDate:
          $ref: '#/components/schemas/DateType'
        Enabled:
          $ref: '#/components/schemas/BooleanType'
        UserStatus:
          $ref: '#/components/schemas/UserStatusType'
        MFAOptions:
          $ref: '#/components/schemas/MFAOptionListType'
      description: The user type.
    UsernameExistsException:
      type: object
      properties:
        message:
          $ref: '#/components/schemas/MessageType'
      description: This exception is thrown when Amazon Cognito encounters a user name that already exists in the user pool.
    UsernameType:
      type: string
      pattern: '[\p{L}\p{M}\p{S}\p{N}\p{P}]+'
      minLength: 1
      maxLength: 128
      format: password
    UsersListType:
      type: array
      items:
        $ref: '#/components/schemas/UserType'
    VerifiedAttributeType:
      type: string
      enum:
        - phone_number
        - email
    VerifiedAttributesListType:
      type: array
      items:
        $ref: '#/components/schemas/VerifiedAttributeType'
    VerifyUserAttributeRequest:
      type: object
      required:
        - AccessToken
        - AttributeName
        - Code
      properties:
        AccessToken:
          $ref: '#/components/schemas/TokenModelType'
        AttributeName:
          $ref: '#/components/schemas/AttributeNameType'
        Code:
          $ref: '#/components/schemas/ConfirmationCodeType'
      description: Represents the request to verify user attributes.
    VerifyUserAttributeResponse:
      type: object
      properties: {}
      description: A container representing the response from the server from the request to verify user attributes.
  parameters:
    Action:
      name: Action
      in: header
      required: true
      schema:
        type: string
    Version:
      name: Version
      in: header
      required: true
      schema:
        type: string
    X-Amz-Content-Sha256:
      name: X-Amz-Content-Sha256
      in: header
      required: false
      schema:
        type: string
    X-Amz-Date:
      name: X-Amz-Date
      in: header
      required: false
      schema:
        type: string
    X-Amz-Algorithm:
      name: X-Amz-Algorithm
      in: header
      required: false
      schema:
        type: string
    X-Amz-Credential:
      name: X-Amz-Credential
      in: header
      required: false
      schema:
        type: string
    X-Amz-Security-Token:
      name: X-Amz-Security-Token
      in: header
      required: false
      schema:
        type: string
    X-Amz-Signature:
      name: X-Amz-Signature
      in: header
      required: false
      schema:
        type: string
    X-Amz-SignedHeaders:
      name: X-Amz-SignedHeaders
      in: header
      required: false
      schema:
        type: string
  securitySchemes:
    hmac:
      type: apiKey
      name: Authorization
      in: header
      description: Amazon Signature authorization v4
      x-amazon-apigateway-authtype: awsSigv4
