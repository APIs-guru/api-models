openapi: 3.0.0
servers:
  - url: 'http://elasticloadbalancing.amazonaws.com/'
info:
  version: '2015-12-01'
  x-release: v4
  title: Elastic Load Balancing
  description: '<fullname>Elastic Load Balancing</fullname> <p>A load balancer distributes incoming traffic across targets, such as your EC2 instances. This enables you to increase the availability of your application. The load balancer also monitors the health of its registered targets and ensures that it routes traffic only to healthy targets. You configure your load balancer to accept incoming traffic by specifying one or more listeners, which are configured with a protocol and port number for connections from clients to the load balancer. You configure a target group with a protocol and port number for connections from the load balancer to the targets, and with health check settings to be used when checking the health status of the targets.</p> <p>Elastic Load Balancing supports two types of load balancers: Classic Load Balancers and Application Load Balancers. A Classic Load Balancer makes routing and load balancing decisions either at the transport layer (TCP/SSL) or the application layer (HTTP/HTTPS), and supports either EC2-Classic or a VPC. An Application Load Balancer makes routing and load balancing decisions at the application layer (HTTP/HTTPS), supports path-based routing, and can route requests to one or more ports on each EC2 instance or container instance in your virtual private cloud (VPC). For more information, see the <a href="http://docs.aws.amazon.com/elasticloadbalancing/latest/userguide/">Elastic Load Balancing User Guide</a>.</p> <p>This reference covers the 2015-12-01 API, which supports Application Load Balancers. The 2012-06-01 API supports Classic Load Balancers.</p> <p>To get started, complete the following tasks:</p> <ol> <li> <p>Create an Application Load Balancer using <a>CreateLoadBalancer</a>.</p> </li> <li> <p>Create a target group using <a>CreateTargetGroup</a>.</p> </li> <li> <p>Register targets for the target group using <a>RegisterTargets</a>.</p> </li> <li> <p>Create one or more listeners for your load balancer using <a>CreateListener</a>.</p> </li> <li> <p>(Optional) Create one or more rules for content routing based on URL using <a>CreateRule</a>.</p> </li> </ol> <p>To delete an Application Load Balancer and its related resources, complete the following tasks:</p> <ol> <li> <p>Delete the load balancer using <a>DeleteLoadBalancer</a>.</p> </li> <li> <p>Delete the target group using <a>DeleteTargetGroup</a>.</p> </li> </ol> <p>All Elastic Load Balancing operations are idempotent, which means that they complete at most one time. If you repeat an operation, it succeeds.</p>'
  x-logo:
    url: 'https://media.amazonwebservices.com/blog/2007/big_pbaws_logo_300px.jpg'
    backgroundColor: '#FFFFFF'
  termsOfService: 'https://aws.amazon.com/service-terms/'
  contact:
    name: Mike Ralphson
    email: mike.ralphson@gmail.com
    url: 'https://github.com/mermade/aws2openapi'
  license:
    name: Apache 2.0 License
    url: 'http://www.apache.org/licenses/'
  x-providerName: amazonaws.com
  x-serviceName: elasticloadbalancing
  x-origin:
    - contentType: application/json
      url: 'https://raw.githubusercontent.com/aws/aws-sdk-js/master/apis/elasticloadbalancingv2-2015-12-01.normal.json'
      converter:
        url: 'https://github.com/mermade/aws2openapi'
        version: 1.0.0
      x-apisguru-direct: true
  x-apiClientRegistration:
    url: 'https://portal.aws.amazon.com/gp/aws/developer/registration/index.html?nc2=h_ct'
  x-apisguru-categories:
    - cloud
  x-preferred: true
externalDocs:
  description: Amazon Web Services documentation
  url: 'https://aws.amazon.com/elasticloadbalancing/'
x-hasEquivalentPaths: true
security:
  - hmac: []
paths:
  /:
    post:
      operationId: AddTags
      description: '<p>Adds the specified tags to the specified resource. You can tag your Application Load Balancers and your target groups.</p> <p>Each tag consists of a key and an optional value. If a resource already has a tag with the same key, <code>AddTags</code> updates its value.</p> <p>To list the current tags for your resources, use <a>DescribeTags</a>. To remove tags from your resources, use <a>RemoveTags</a>.</p>'
      responses:
        '200':
          description: Success
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/AddTagsOutput'
        '480':
          description: DuplicateTagKeysException
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/DuplicateTagKeysException'
        '481':
          description: TooManyTagsException
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/TooManyTagsException'
        '482':
          description: LoadBalancerNotFoundException
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/LoadBalancerNotFoundException'
        '483':
          description: TargetGroupNotFoundException
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/TargetGroupNotFoundException'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AddTagsInput'
        required: true
    parameters:
      - $ref: '#/components/parameters/Action'
      - $ref: '#/components/parameters/Version'
      - $ref: '#/components/parameters/X-Amz-Content-Sha256'
      - $ref: '#/components/parameters/X-Amz-Date'
      - $ref: '#/components/parameters/X-Amz-Algorithm'
      - $ref: '#/components/parameters/X-Amz-Credential'
      - $ref: '#/components/parameters/X-Amz-Security-Token'
      - $ref: '#/components/parameters/X-Amz-Signature'
      - $ref: '#/components/parameters/X-Amz-SignedHeaders'
  '/#CreateListener':
    post:
      operationId: CreateListener
      description: '<p>Creates a listener for the specified Application Load Balancer.</p> <p>You can create up to 10 listeners per load balancer.</p> <p>To update a listener, use <a>ModifyListener</a>. When you are finished with a listener, you can delete it using <a>DeleteListener</a>. If you are finished with both the listener and the load balancer, you can delete them both using <a>DeleteLoadBalancer</a>.</p> <p>For more information, see <a href="http://docs.aws.amazon.com/elasticloadbalancing/latest/application/load-balancer-listeners.html">Listeners for Your Application Load Balancers</a> in the <i>Application Load Balancers Guide</i>.</p>'
      responses:
        '200':
          description: Success
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/CreateListenerOutput'
        '480':
          description: DuplicateListenerException
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/DuplicateListenerException'
        '481':
          description: TooManyListenersException
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/TooManyListenersException'
        '482':
          description: TooManyCertificatesException
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/TooManyCertificatesException'
        '483':
          description: LoadBalancerNotFoundException
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/LoadBalancerNotFoundException'
        '484':
          description: TargetGroupNotFoundException
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/TargetGroupNotFoundException'
        '485':
          description: TargetGroupAssociationLimitException
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/TargetGroupAssociationLimitException'
        '486':
          description: InvalidConfigurationRequestException
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/InvalidConfigurationRequestException'
        '487':
          description: IncompatibleProtocolsException
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/IncompatibleProtocolsException'
        '488':
          description: SSLPolicyNotFoundException
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/SSLPolicyNotFoundException'
        '489':
          description: CertificateNotFoundException
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/CertificateNotFoundException'
        '490':
          description: UnsupportedProtocolException
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/UnsupportedProtocolException'
        '491':
          description: TooManyRegistrationsForTargetIdException
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/TooManyRegistrationsForTargetIdException'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateListenerInput'
        required: true
    parameters:
      - $ref: '#/components/parameters/Action'
      - $ref: '#/components/parameters/Version'
      - $ref: '#/components/parameters/X-Amz-Content-Sha256'
      - $ref: '#/components/parameters/X-Amz-Date'
      - $ref: '#/components/parameters/X-Amz-Algorithm'
      - $ref: '#/components/parameters/X-Amz-Credential'
      - $ref: '#/components/parameters/X-Amz-Security-Token'
      - $ref: '#/components/parameters/X-Amz-Signature'
      - $ref: '#/components/parameters/X-Amz-SignedHeaders'
  '/#CreateLoadBalancer':
    post:
      operationId: CreateLoadBalancer
      description: '<p>Creates an Application Load Balancer.</p> <p>When you create a load balancer, you can specify security groups, subnets, IP address type, and tags. Otherwise, you could do so later using <a>SetSecurityGroups</a>, <a>SetSubnets</a>, <a>SetIpAddressType</a>, and <a>AddTags</a>.</p> <p>To create listeners for your load balancer, use <a>CreateListener</a>. To describe your current load balancers, see <a>DescribeLoadBalancers</a>. When you are finished with a load balancer, you can delete it using <a>DeleteLoadBalancer</a>.</p> <p>You can create up to 20 load balancers per region per account. You can request an increase for the number of load balancers for your account. For more information, see <a href="http://docs.aws.amazon.com/elasticloadbalancing/latest/application/load-balancer-limits.html">Limits for Your Application Load Balancer</a> in the <i>Application Load Balancers Guide</i>.</p> <p>For more information, see <a href="http://docs.aws.amazon.com/elasticloadbalancing/latest/application/application-load-balancers.html">Application Load Balancers</a> in the <i>Application Load Balancers Guide</i>.</p>'
      responses:
        '200':
          description: Success
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/CreateLoadBalancerOutput'
        '480':
          description: DuplicateLoadBalancerNameException
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/DuplicateLoadBalancerNameException'
        '481':
          description: TooManyLoadBalancersException
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/TooManyLoadBalancersException'
        '482':
          description: InvalidConfigurationRequestException
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/InvalidConfigurationRequestException'
        '483':
          description: SubnetNotFoundException
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/SubnetNotFoundException'
        '484':
          description: InvalidSubnetException
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/InvalidSubnetException'
        '485':
          description: InvalidSecurityGroupException
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/InvalidSecurityGroupException'
        '486':
          description: InvalidSchemeException
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/InvalidSchemeException'
        '487':
          description: TooManyTagsException
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/TooManyTagsException'
        '488':
          description: DuplicateTagKeysException
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/DuplicateTagKeysException'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateLoadBalancerInput'
        required: true
    parameters:
      - $ref: '#/components/parameters/Action'
      - $ref: '#/components/parameters/Version'
      - $ref: '#/components/parameters/X-Amz-Content-Sha256'
      - $ref: '#/components/parameters/X-Amz-Date'
      - $ref: '#/components/parameters/X-Amz-Algorithm'
      - $ref: '#/components/parameters/X-Amz-Credential'
      - $ref: '#/components/parameters/X-Amz-Security-Token'
      - $ref: '#/components/parameters/X-Amz-Signature'
      - $ref: '#/components/parameters/X-Amz-SignedHeaders'
  '/#CreateRule':
    post:
      operationId: CreateRule
      description: '<p>Creates a rule for the specified listener.</p> <p>Each rule can have one action and one condition. Rules are evaluated in priority order, from the lowest value to the highest value. When the condition for a rule is met, the specified action is taken. If no conditions are met, the default action for the default rule is taken. For more information, see <a href="http://docs.aws.amazon.com/elasticloadbalancing/latest/application/load-balancer-listeners.html#listener-rules">Listener Rules</a> in the <i>Application Load Balancers Guide</i>.</p> <p>To view your current rules, use <a>DescribeRules</a>. To update a rule, use <a>ModifyRule</a>. To set the priorities of your rules, use <a>SetRulePriorities</a>. To delete a rule, use <a>DeleteRule</a>.</p>'
      responses:
        '200':
          description: Success
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/CreateRuleOutput'
        '480':
          description: PriorityInUseException
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/PriorityInUseException'
        '481':
          description: TooManyTargetGroupsException
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/TooManyTargetGroupsException'
        '482':
          description: TooManyRulesException
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/TooManyRulesException'
        '483':
          description: TargetGroupAssociationLimitException
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/TargetGroupAssociationLimitException'
        '484':
          description: ListenerNotFoundException
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ListenerNotFoundException'
        '485':
          description: TargetGroupNotFoundException
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/TargetGroupNotFoundException'
        '486':
          description: InvalidConfigurationRequestException
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/InvalidConfigurationRequestException'
        '487':
          description: TooManyRegistrationsForTargetIdException
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/TooManyRegistrationsForTargetIdException'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateRuleInput'
        required: true
    parameters:
      - $ref: '#/components/parameters/Action'
      - $ref: '#/components/parameters/Version'
      - $ref: '#/components/parameters/X-Amz-Content-Sha256'
      - $ref: '#/components/parameters/X-Amz-Date'
      - $ref: '#/components/parameters/X-Amz-Algorithm'
      - $ref: '#/components/parameters/X-Amz-Credential'
      - $ref: '#/components/parameters/X-Amz-Security-Token'
      - $ref: '#/components/parameters/X-Amz-Signature'
      - $ref: '#/components/parameters/X-Amz-SignedHeaders'
  '/#CreateTargetGroup':
    post:
      operationId: CreateTargetGroup
      description: '<p>Creates a target group.</p> <p>To register targets with the target group, use <a>RegisterTargets</a>. To update the health check settings for the target group, use <a>ModifyTargetGroup</a>. To monitor the health of targets in the target group, use <a>DescribeTargetHealth</a>.</p> <p>To route traffic to the targets in a target group, specify the target group in an action using <a>CreateListener</a> or <a>CreateRule</a>.</p> <p>To delete a target group, use <a>DeleteTargetGroup</a>.</p> <p>For more information, see <a href="http://docs.aws.amazon.com/elasticloadbalancing/latest/application/load-balancer-target-groups.html">Target Groups for Your Application Load Balancers</a> in the <i>Application Load Balancers Guide</i>.</p>'
      responses:
        '200':
          description: Success
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/CreateTargetGroupOutput'
        '480':
          description: DuplicateTargetGroupNameException
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/DuplicateTargetGroupNameException'
        '481':
          description: TooManyTargetGroupsException
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/TooManyTargetGroupsException'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateTargetGroupInput'
        required: true
    parameters:
      - $ref: '#/components/parameters/Action'
      - $ref: '#/components/parameters/Version'
      - $ref: '#/components/parameters/X-Amz-Content-Sha256'
      - $ref: '#/components/parameters/X-Amz-Date'
      - $ref: '#/components/parameters/X-Amz-Algorithm'
      - $ref: '#/components/parameters/X-Amz-Credential'
      - $ref: '#/components/parameters/X-Amz-Security-Token'
      - $ref: '#/components/parameters/X-Amz-Signature'
      - $ref: '#/components/parameters/X-Amz-SignedHeaders'
  '/#DeleteListener':
    post:
      operationId: DeleteListener
      description: '<p>Deletes the specified listener.</p> <p>Alternatively, your listener is deleted when you delete the load balancer it is attached to using <a>DeleteLoadBalancer</a>.</p>'
      responses:
        '200':
          description: Success
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/DeleteListenerOutput'
        '480':
          description: ListenerNotFoundException
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ListenerNotFoundException'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/DeleteListenerInput'
        required: true
    parameters:
      - $ref: '#/components/parameters/Action'
      - $ref: '#/components/parameters/Version'
      - $ref: '#/components/parameters/X-Amz-Content-Sha256'
      - $ref: '#/components/parameters/X-Amz-Date'
      - $ref: '#/components/parameters/X-Amz-Algorithm'
      - $ref: '#/components/parameters/X-Amz-Credential'
      - $ref: '#/components/parameters/X-Amz-Security-Token'
      - $ref: '#/components/parameters/X-Amz-Signature'
      - $ref: '#/components/parameters/X-Amz-SignedHeaders'
  '/#DeleteLoadBalancer':
    post:
      operationId: DeleteLoadBalancer
      description: '<p>Deletes the specified Application Load Balancer and its attached listeners.</p> <p>You can''t delete a load balancer if deletion protection is enabled. If the load balancer does not exist or has already been deleted, the call succeeds.</p> <p>Deleting a load balancer does not affect its registered targets. For example, your EC2 instances continue to run and are still registered to their target groups. If you no longer need these EC2 instances, you can stop or terminate them.</p>'
      responses:
        '200':
          description: Success
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/DeleteLoadBalancerOutput'
        '480':
          description: LoadBalancerNotFoundException
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/LoadBalancerNotFoundException'
        '481':
          description: OperationNotPermittedException
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/OperationNotPermittedException'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/DeleteLoadBalancerInput'
        required: true
    parameters:
      - $ref: '#/components/parameters/Action'
      - $ref: '#/components/parameters/Version'
      - $ref: '#/components/parameters/X-Amz-Content-Sha256'
      - $ref: '#/components/parameters/X-Amz-Date'
      - $ref: '#/components/parameters/X-Amz-Algorithm'
      - $ref: '#/components/parameters/X-Amz-Credential'
      - $ref: '#/components/parameters/X-Amz-Security-Token'
      - $ref: '#/components/parameters/X-Amz-Signature'
      - $ref: '#/components/parameters/X-Amz-SignedHeaders'
  '/#DeleteRule':
    post:
      operationId: DeleteRule
      description: Deletes the specified rule.
      responses:
        '200':
          description: Success
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/DeleteRuleOutput'
        '480':
          description: RuleNotFoundException
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/RuleNotFoundException'
        '481':
          description: OperationNotPermittedException
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/OperationNotPermittedException'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/DeleteRuleInput'
        required: true
    parameters:
      - $ref: '#/components/parameters/Action'
      - $ref: '#/components/parameters/Version'
      - $ref: '#/components/parameters/X-Amz-Content-Sha256'
      - $ref: '#/components/parameters/X-Amz-Date'
      - $ref: '#/components/parameters/X-Amz-Algorithm'
      - $ref: '#/components/parameters/X-Amz-Credential'
      - $ref: '#/components/parameters/X-Amz-Security-Token'
      - $ref: '#/components/parameters/X-Amz-Signature'
      - $ref: '#/components/parameters/X-Amz-SignedHeaders'
  '/#DeleteTargetGroup':
    post:
      operationId: DeleteTargetGroup
      description: <p>Deletes the specified target group.</p> <p>You can delete a target group if it is not referenced by any actions. Deleting a target group also deletes any associated health checks.</p>
      responses:
        '200':
          description: Success
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/DeleteTargetGroupOutput'
        '480':
          description: ResourceInUseException
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ResourceInUseException'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/DeleteTargetGroupInput'
        required: true
    parameters:
      - $ref: '#/components/parameters/Action'
      - $ref: '#/components/parameters/Version'
      - $ref: '#/components/parameters/X-Amz-Content-Sha256'
      - $ref: '#/components/parameters/X-Amz-Date'
      - $ref: '#/components/parameters/X-Amz-Algorithm'
      - $ref: '#/components/parameters/X-Amz-Credential'
      - $ref: '#/components/parameters/X-Amz-Security-Token'
      - $ref: '#/components/parameters/X-Amz-Signature'
      - $ref: '#/components/parameters/X-Amz-SignedHeaders'
  '/#DeregisterTargets':
    post:
      operationId: DeregisterTargets
      description: 'Deregisters the specified targets from the specified target group. After the targets are deregistered, they no longer receive traffic from the load balancer.'
      responses:
        '200':
          description: Success
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/DeregisterTargetsOutput'
        '480':
          description: TargetGroupNotFoundException
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/TargetGroupNotFoundException'
        '481':
          description: InvalidTargetException
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/InvalidTargetException'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/DeregisterTargetsInput'
        required: true
    parameters:
      - $ref: '#/components/parameters/Action'
      - $ref: '#/components/parameters/Version'
      - $ref: '#/components/parameters/X-Amz-Content-Sha256'
      - $ref: '#/components/parameters/X-Amz-Date'
      - $ref: '#/components/parameters/X-Amz-Algorithm'
      - $ref: '#/components/parameters/X-Amz-Credential'
      - $ref: '#/components/parameters/X-Amz-Security-Token'
      - $ref: '#/components/parameters/X-Amz-Signature'
      - $ref: '#/components/parameters/X-Amz-SignedHeaders'
  '/#DescribeAccountLimits':
    post:
      operationId: DescribeAccountLimits
      description: '<p>Describes the current Elastic Load Balancing resource limits for your AWS account.</p> <p>For more information, see <a href="http://docs.aws.amazon.com/elasticloadbalancing/latest/application/load-balancer-limits.html">Limits for Your Application Load Balancer</a> in the <i>Application Load Balancer Guide</i>.</p>'
      responses:
        '200':
          description: Success
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/DescribeAccountLimitsOutput'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/DescribeAccountLimitsInput'
        required: true
    parameters:
      - $ref: '#/components/parameters/Action'
      - $ref: '#/components/parameters/Version'
      - $ref: '#/components/parameters/X-Amz-Content-Sha256'
      - $ref: '#/components/parameters/X-Amz-Date'
      - $ref: '#/components/parameters/X-Amz-Algorithm'
      - $ref: '#/components/parameters/X-Amz-Credential'
      - $ref: '#/components/parameters/X-Amz-Security-Token'
      - $ref: '#/components/parameters/X-Amz-Signature'
      - $ref: '#/components/parameters/X-Amz-SignedHeaders'
  '/#DescribeListeners':
    post:
      operationId: DescribeListeners
      description: Describes the specified listeners or the listeners for the specified Application Load Balancer. You must specify either a load balancer or one or more listeners.
      responses:
        '200':
          description: Success
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/DescribeListenersOutput'
        '480':
          description: ListenerNotFoundException
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ListenerNotFoundException'
        '481':
          description: LoadBalancerNotFoundException
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/LoadBalancerNotFoundException'
      parameters:
        - name: Marker
          in: query
          description: Pagination token
          required: false
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/DescribeListenersInput'
        required: true
    parameters:
      - $ref: '#/components/parameters/Action'
      - $ref: '#/components/parameters/Version'
      - $ref: '#/components/parameters/X-Amz-Content-Sha256'
      - $ref: '#/components/parameters/X-Amz-Date'
      - $ref: '#/components/parameters/X-Amz-Algorithm'
      - $ref: '#/components/parameters/X-Amz-Credential'
      - $ref: '#/components/parameters/X-Amz-Security-Token'
      - $ref: '#/components/parameters/X-Amz-Signature'
      - $ref: '#/components/parameters/X-Amz-SignedHeaders'
  '/#DescribeLoadBalancerAttributes':
    post:
      operationId: DescribeLoadBalancerAttributes
      description: Describes the attributes for the specified Application Load Balancer.
      responses:
        '200':
          description: Success
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/DescribeLoadBalancerAttributesOutput'
        '480':
          description: LoadBalancerNotFoundException
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/LoadBalancerNotFoundException'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/DescribeLoadBalancerAttributesInput'
        required: true
    parameters:
      - $ref: '#/components/parameters/Action'
      - $ref: '#/components/parameters/Version'
      - $ref: '#/components/parameters/X-Amz-Content-Sha256'
      - $ref: '#/components/parameters/X-Amz-Date'
      - $ref: '#/components/parameters/X-Amz-Algorithm'
      - $ref: '#/components/parameters/X-Amz-Credential'
      - $ref: '#/components/parameters/X-Amz-Security-Token'
      - $ref: '#/components/parameters/X-Amz-Signature'
      - $ref: '#/components/parameters/X-Amz-SignedHeaders'
  '/#DescribeLoadBalancers':
    post:
      operationId: DescribeLoadBalancers
      description: '<p>Describes the specified Application Load Balancers or all of your Application Load Balancers.</p> <p>To describe the listeners for a load balancer, use <a>DescribeListeners</a>. To describe the attributes for a load balancer, use <a>DescribeLoadBalancerAttributes</a>.</p>'
      responses:
        '200':
          description: Success
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/DescribeLoadBalancersOutput'
        '480':
          description: LoadBalancerNotFoundException
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/LoadBalancerNotFoundException'
      parameters:
        - name: Marker
          in: query
          description: Pagination token
          required: false
          schema:
            type: string
      x-waiters:
        - delay: 15
          operation: DescribeLoadBalancers
          maxAttempts: 40
          acceptors:
            - matcher: status
              expected: 200
              state: success
            - matcher: error
              expected: LoadBalancerNotFound
              state: retry
        - delay: 15
          operation: DescribeLoadBalancers
          maxAttempts: 40
          acceptors:
            - state: success
              matcher: pathAll
              argument: 'LoadBalancers[].State.Code'
              expected: active
            - state: retry
              matcher: pathAny
              argument: 'LoadBalancers[].State.Code'
              expected: provisioning
            - state: retry
              matcher: error
              expected: LoadBalancerNotFound
        - delay: 15
          operation: DescribeLoadBalancers
          maxAttempts: 40
          acceptors:
            - state: retry
              matcher: pathAll
              argument: 'LoadBalancers[].State.Code'
              expected: active
            - matcher: error
              expected: LoadBalancerNotFound
              state: success
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/DescribeLoadBalancersInput'
        required: true
    parameters:
      - $ref: '#/components/parameters/Action'
      - $ref: '#/components/parameters/Version'
      - $ref: '#/components/parameters/X-Amz-Content-Sha256'
      - $ref: '#/components/parameters/X-Amz-Date'
      - $ref: '#/components/parameters/X-Amz-Algorithm'
      - $ref: '#/components/parameters/X-Amz-Credential'
      - $ref: '#/components/parameters/X-Amz-Security-Token'
      - $ref: '#/components/parameters/X-Amz-Signature'
      - $ref: '#/components/parameters/X-Amz-SignedHeaders'
  '/#DescribeRules':
    post:
      operationId: DescribeRules
      description: Describes the specified rules or the rules for the specified listener. You must specify either a listener or one or more rules.
      responses:
        '200':
          description: Success
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/DescribeRulesOutput'
        '480':
          description: ListenerNotFoundException
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ListenerNotFoundException'
        '481':
          description: RuleNotFoundException
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/RuleNotFoundException'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/DescribeRulesInput'
        required: true
    parameters:
      - $ref: '#/components/parameters/Action'
      - $ref: '#/components/parameters/Version'
      - $ref: '#/components/parameters/X-Amz-Content-Sha256'
      - $ref: '#/components/parameters/X-Amz-Date'
      - $ref: '#/components/parameters/X-Amz-Algorithm'
      - $ref: '#/components/parameters/X-Amz-Credential'
      - $ref: '#/components/parameters/X-Amz-Security-Token'
      - $ref: '#/components/parameters/X-Amz-Signature'
      - $ref: '#/components/parameters/X-Amz-SignedHeaders'
  '/#DescribeSSLPolicies':
    post:
      operationId: DescribeSSLPolicies
      description: '<p>Describes the specified policies or all policies used for SSL negotiation.</p> <p>For more information, see <a href="http://docs.aws.amazon.com/elasticloadbalancing/latest/application/create-https-listener.html#describe-ssl-policies">Security Policies</a> in the <i>Application Load Balancers Guide</i>.</p>'
      responses:
        '200':
          description: Success
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/DescribeSSLPoliciesOutput'
        '480':
          description: SSLPolicyNotFoundException
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/SSLPolicyNotFoundException'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/DescribeSSLPoliciesInput'
        required: true
    parameters:
      - $ref: '#/components/parameters/Action'
      - $ref: '#/components/parameters/Version'
      - $ref: '#/components/parameters/X-Amz-Content-Sha256'
      - $ref: '#/components/parameters/X-Amz-Date'
      - $ref: '#/components/parameters/X-Amz-Algorithm'
      - $ref: '#/components/parameters/X-Amz-Credential'
      - $ref: '#/components/parameters/X-Amz-Security-Token'
      - $ref: '#/components/parameters/X-Amz-Signature'
      - $ref: '#/components/parameters/X-Amz-SignedHeaders'
  '/#DescribeTags':
    post:
      operationId: DescribeTags
      description: Describes the tags for the specified resources. You can describe the tags for one or more Application Load Balancers and target groups.
      responses:
        '200':
          description: Success
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/DescribeTagsOutput'
        '480':
          description: LoadBalancerNotFoundException
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/LoadBalancerNotFoundException'
        '481':
          description: TargetGroupNotFoundException
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/TargetGroupNotFoundException'
        '482':
          description: ListenerNotFoundException
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ListenerNotFoundException'
        '483':
          description: RuleNotFoundException
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/RuleNotFoundException'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/DescribeTagsInput'
        required: true
    parameters:
      - $ref: '#/components/parameters/Action'
      - $ref: '#/components/parameters/Version'
      - $ref: '#/components/parameters/X-Amz-Content-Sha256'
      - $ref: '#/components/parameters/X-Amz-Date'
      - $ref: '#/components/parameters/X-Amz-Algorithm'
      - $ref: '#/components/parameters/X-Amz-Credential'
      - $ref: '#/components/parameters/X-Amz-Security-Token'
      - $ref: '#/components/parameters/X-Amz-Signature'
      - $ref: '#/components/parameters/X-Amz-SignedHeaders'
  '/#DescribeTargetGroupAttributes':
    post:
      operationId: DescribeTargetGroupAttributes
      description: Describes the attributes for the specified target group.
      responses:
        '200':
          description: Success
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/DescribeTargetGroupAttributesOutput'
        '480':
          description: TargetGroupNotFoundException
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/TargetGroupNotFoundException'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/DescribeTargetGroupAttributesInput'
        required: true
    parameters:
      - $ref: '#/components/parameters/Action'
      - $ref: '#/components/parameters/Version'
      - $ref: '#/components/parameters/X-Amz-Content-Sha256'
      - $ref: '#/components/parameters/X-Amz-Date'
      - $ref: '#/components/parameters/X-Amz-Algorithm'
      - $ref: '#/components/parameters/X-Amz-Credential'
      - $ref: '#/components/parameters/X-Amz-Security-Token'
      - $ref: '#/components/parameters/X-Amz-Signature'
      - $ref: '#/components/parameters/X-Amz-SignedHeaders'
  '/#DescribeTargetGroups':
    post:
      operationId: DescribeTargetGroups
      description: '<p>Describes the specified target groups or all of your target groups. By default, all target groups are described. Alternatively, you can specify one of the following to filter the results: the ARN of the load balancer, the names of one or more target groups, or the ARNs of one or more target groups.</p> <p>To describe the targets for a target group, use <a>DescribeTargetHealth</a>. To describe the attributes of a target group, use <a>DescribeTargetGroupAttributes</a>.</p>'
      responses:
        '200':
          description: Success
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/DescribeTargetGroupsOutput'
        '480':
          description: LoadBalancerNotFoundException
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/LoadBalancerNotFoundException'
        '481':
          description: TargetGroupNotFoundException
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/TargetGroupNotFoundException'
      parameters:
        - name: Marker
          in: query
          description: Pagination token
          required: false
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/DescribeTargetGroupsInput'
        required: true
    parameters:
      - $ref: '#/components/parameters/Action'
      - $ref: '#/components/parameters/Version'
      - $ref: '#/components/parameters/X-Amz-Content-Sha256'
      - $ref: '#/components/parameters/X-Amz-Date'
      - $ref: '#/components/parameters/X-Amz-Algorithm'
      - $ref: '#/components/parameters/X-Amz-Credential'
      - $ref: '#/components/parameters/X-Amz-Security-Token'
      - $ref: '#/components/parameters/X-Amz-Signature'
      - $ref: '#/components/parameters/X-Amz-SignedHeaders'
  '/#DescribeTargetHealth':
    post:
      operationId: DescribeTargetHealth
      description: Describes the health of the specified targets or all of your targets.
      responses:
        '200':
          description: Success
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/DescribeTargetHealthOutput'
        '480':
          description: InvalidTargetException
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/InvalidTargetException'
        '481':
          description: TargetGroupNotFoundException
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/TargetGroupNotFoundException'
        '482':
          description: HealthUnavailableException
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/HealthUnavailableException'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/DescribeTargetHealthInput'
        required: true
    parameters:
      - $ref: '#/components/parameters/Action'
      - $ref: '#/components/parameters/Version'
      - $ref: '#/components/parameters/X-Amz-Content-Sha256'
      - $ref: '#/components/parameters/X-Amz-Date'
      - $ref: '#/components/parameters/X-Amz-Algorithm'
      - $ref: '#/components/parameters/X-Amz-Credential'
      - $ref: '#/components/parameters/X-Amz-Security-Token'
      - $ref: '#/components/parameters/X-Amz-Signature'
      - $ref: '#/components/parameters/X-Amz-SignedHeaders'
  '/#ModifyListener':
    post:
      operationId: ModifyListener
      description: '<p>Modifies the specified properties of the specified listener.</p> <p>Any properties that you do not specify retain their current values. However, changing the protocol from HTTPS to HTTP removes the security policy and SSL certificate properties. If you change the protocol from HTTP to HTTPS, you must add the security policy and server certificate.</p>'
      responses:
        '200':
          description: Success
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ModifyListenerOutput'
        '480':
          description: DuplicateListenerException
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/DuplicateListenerException'
        '481':
          description: TooManyListenersException
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/TooManyListenersException'
        '482':
          description: TooManyCertificatesException
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/TooManyCertificatesException'
        '483':
          description: ListenerNotFoundException
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ListenerNotFoundException'
        '484':
          description: TargetGroupNotFoundException
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/TargetGroupNotFoundException'
        '485':
          description: TargetGroupAssociationLimitException
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/TargetGroupAssociationLimitException'
        '486':
          description: IncompatibleProtocolsException
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/IncompatibleProtocolsException'
        '487':
          description: SSLPolicyNotFoundException
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/SSLPolicyNotFoundException'
        '488':
          description: CertificateNotFoundException
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/CertificateNotFoundException'
        '489':
          description: InvalidConfigurationRequestException
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/InvalidConfigurationRequestException'
        '490':
          description: UnsupportedProtocolException
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/UnsupportedProtocolException'
        '491':
          description: TooManyRegistrationsForTargetIdException
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/TooManyRegistrationsForTargetIdException'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ModifyListenerInput'
        required: true
    parameters:
      - $ref: '#/components/parameters/Action'
      - $ref: '#/components/parameters/Version'
      - $ref: '#/components/parameters/X-Amz-Content-Sha256'
      - $ref: '#/components/parameters/X-Amz-Date'
      - $ref: '#/components/parameters/X-Amz-Algorithm'
      - $ref: '#/components/parameters/X-Amz-Credential'
      - $ref: '#/components/parameters/X-Amz-Security-Token'
      - $ref: '#/components/parameters/X-Amz-Signature'
      - $ref: '#/components/parameters/X-Amz-SignedHeaders'
  '/#ModifyLoadBalancerAttributes':
    post:
      operationId: ModifyLoadBalancerAttributes
      description: '<p>Modifies the specified attributes of the specified Application Load Balancer.</p> <p>If any of the specified attributes can''t be modified as requested, the call fails. Any existing attributes that you do not modify retain their current values.</p>'
      responses:
        '200':
          description: Success
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ModifyLoadBalancerAttributesOutput'
        '480':
          description: LoadBalancerNotFoundException
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/LoadBalancerNotFoundException'
        '481':
          description: InvalidConfigurationRequestException
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/InvalidConfigurationRequestException'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ModifyLoadBalancerAttributesInput'
        required: true
    parameters:
      - $ref: '#/components/parameters/Action'
      - $ref: '#/components/parameters/Version'
      - $ref: '#/components/parameters/X-Amz-Content-Sha256'
      - $ref: '#/components/parameters/X-Amz-Date'
      - $ref: '#/components/parameters/X-Amz-Algorithm'
      - $ref: '#/components/parameters/X-Amz-Credential'
      - $ref: '#/components/parameters/X-Amz-Security-Token'
      - $ref: '#/components/parameters/X-Amz-Signature'
      - $ref: '#/components/parameters/X-Amz-SignedHeaders'
  '/#ModifyRule':
    post:
      operationId: ModifyRule
      description: '<p>Modifies the specified rule.</p> <p>Any existing properties that you do not modify retain their current values.</p> <p>To modify the default action, use <a>ModifyListener</a>.</p>'
      responses:
        '200':
          description: Success
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ModifyRuleOutput'
        '480':
          description: TargetGroupAssociationLimitException
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/TargetGroupAssociationLimitException'
        '481':
          description: RuleNotFoundException
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/RuleNotFoundException'
        '482':
          description: OperationNotPermittedException
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/OperationNotPermittedException'
        '483':
          description: TooManyRegistrationsForTargetIdException
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/TooManyRegistrationsForTargetIdException'
        '484':
          description: TooManyTargetsException
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/TooManyTargetsException'
        '485':
          description: TargetGroupNotFoundException
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/TargetGroupNotFoundException'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ModifyRuleInput'
        required: true
    parameters:
      - $ref: '#/components/parameters/Action'
      - $ref: '#/components/parameters/Version'
      - $ref: '#/components/parameters/X-Amz-Content-Sha256'
      - $ref: '#/components/parameters/X-Amz-Date'
      - $ref: '#/components/parameters/X-Amz-Algorithm'
      - $ref: '#/components/parameters/X-Amz-Credential'
      - $ref: '#/components/parameters/X-Amz-Security-Token'
      - $ref: '#/components/parameters/X-Amz-Signature'
      - $ref: '#/components/parameters/X-Amz-SignedHeaders'
  '/#ModifyTargetGroup':
    post:
      operationId: ModifyTargetGroup
      description: '<p>Modifies the health checks used when evaluating the health state of the targets in the specified target group.</p> <p>To monitor the health of the targets, use <a>DescribeTargetHealth</a>.</p>'
      responses:
        '200':
          description: Success
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ModifyTargetGroupOutput'
        '480':
          description: TargetGroupNotFoundException
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/TargetGroupNotFoundException'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ModifyTargetGroupInput'
        required: true
    parameters:
      - $ref: '#/components/parameters/Action'
      - $ref: '#/components/parameters/Version'
      - $ref: '#/components/parameters/X-Amz-Content-Sha256'
      - $ref: '#/components/parameters/X-Amz-Date'
      - $ref: '#/components/parameters/X-Amz-Algorithm'
      - $ref: '#/components/parameters/X-Amz-Credential'
      - $ref: '#/components/parameters/X-Amz-Security-Token'
      - $ref: '#/components/parameters/X-Amz-Signature'
      - $ref: '#/components/parameters/X-Amz-SignedHeaders'
  '/#ModifyTargetGroupAttributes':
    post:
      operationId: ModifyTargetGroupAttributes
      description: Modifies the specified attributes of the specified target group.
      responses:
        '200':
          description: Success
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ModifyTargetGroupAttributesOutput'
        '480':
          description: TargetGroupNotFoundException
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/TargetGroupNotFoundException'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ModifyTargetGroupAttributesInput'
        required: true
    parameters:
      - $ref: '#/components/parameters/Action'
      - $ref: '#/components/parameters/Version'
      - $ref: '#/components/parameters/X-Amz-Content-Sha256'
      - $ref: '#/components/parameters/X-Amz-Date'
      - $ref: '#/components/parameters/X-Amz-Algorithm'
      - $ref: '#/components/parameters/X-Amz-Credential'
      - $ref: '#/components/parameters/X-Amz-Security-Token'
      - $ref: '#/components/parameters/X-Amz-Signature'
      - $ref: '#/components/parameters/X-Amz-SignedHeaders'
  '/#RegisterTargets':
    post:
      operationId: RegisterTargets
      description: '<p>Registers the specified targets with the specified target group.</p> <p>By default, the load balancer routes requests to registered targets using the protocol and port number for the target group. Alternatively, you can override the port for a target when you register it.</p> <p>The target must be in the virtual private cloud (VPC) that you specified for the target group. If the target is an EC2 instance, it must be in the <code>running</code> state when you register it.</p> <p>To remove a target from a target group, use <a>DeregisterTargets</a>.</p>'
      responses:
        '200':
          description: Success
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/RegisterTargetsOutput'
        '480':
          description: TargetGroupNotFoundException
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/TargetGroupNotFoundException'
        '481':
          description: TooManyTargetsException
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/TooManyTargetsException'
        '482':
          description: InvalidTargetException
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/InvalidTargetException'
        '483':
          description: TooManyRegistrationsForTargetIdException
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/TooManyRegistrationsForTargetIdException'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RegisterTargetsInput'
        required: true
    parameters:
      - $ref: '#/components/parameters/Action'
      - $ref: '#/components/parameters/Version'
      - $ref: '#/components/parameters/X-Amz-Content-Sha256'
      - $ref: '#/components/parameters/X-Amz-Date'
      - $ref: '#/components/parameters/X-Amz-Algorithm'
      - $ref: '#/components/parameters/X-Amz-Credential'
      - $ref: '#/components/parameters/X-Amz-Security-Token'
      - $ref: '#/components/parameters/X-Amz-Signature'
      - $ref: '#/components/parameters/X-Amz-SignedHeaders'
  '/#RemoveTags':
    post:
      operationId: RemoveTags
      description: '<p>Removes the specified tags from the specified resource.</p> <p>To list the current tags for your resources, use <a>DescribeTags</a>.</p>'
      responses:
        '200':
          description: Success
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/RemoveTagsOutput'
        '480':
          description: LoadBalancerNotFoundException
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/LoadBalancerNotFoundException'
        '481':
          description: TargetGroupNotFoundException
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/TargetGroupNotFoundException'
        '482':
          description: ListenerNotFoundException
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ListenerNotFoundException'
        '483':
          description: RuleNotFoundException
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/RuleNotFoundException'
        '484':
          description: TooManyTagsException
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/TooManyTagsException'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RemoveTagsInput'
        required: true
    parameters:
      - $ref: '#/components/parameters/Action'
      - $ref: '#/components/parameters/Version'
      - $ref: '#/components/parameters/X-Amz-Content-Sha256'
      - $ref: '#/components/parameters/X-Amz-Date'
      - $ref: '#/components/parameters/X-Amz-Algorithm'
      - $ref: '#/components/parameters/X-Amz-Credential'
      - $ref: '#/components/parameters/X-Amz-Security-Token'
      - $ref: '#/components/parameters/X-Amz-Signature'
      - $ref: '#/components/parameters/X-Amz-SignedHeaders'
  '/#SetIpAddressType':
    post:
      operationId: SetIpAddressType
      description: Sets the type of IP addresses used by the subnets of the specified Application Load Balancer.
      responses:
        '200':
          description: Success
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/SetIpAddressTypeOutput'
        '480':
          description: LoadBalancerNotFoundException
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/LoadBalancerNotFoundException'
        '481':
          description: InvalidConfigurationRequestException
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/InvalidConfigurationRequestException'
        '482':
          description: InvalidSubnetException
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/InvalidSubnetException'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SetIpAddressTypeInput'
        required: true
    parameters:
      - $ref: '#/components/parameters/Action'
      - $ref: '#/components/parameters/Version'
      - $ref: '#/components/parameters/X-Amz-Content-Sha256'
      - $ref: '#/components/parameters/X-Amz-Date'
      - $ref: '#/components/parameters/X-Amz-Algorithm'
      - $ref: '#/components/parameters/X-Amz-Credential'
      - $ref: '#/components/parameters/X-Amz-Security-Token'
      - $ref: '#/components/parameters/X-Amz-Signature'
      - $ref: '#/components/parameters/X-Amz-SignedHeaders'
  '/#SetRulePriorities':
    post:
      operationId: SetRulePriorities
      description: <p>Sets the priorities of the specified rules.</p> <p>You can reorder the rules as long as there are no priority conflicts in the new order. Any existing rules that you do not specify retain their current priority.</p>
      responses:
        '200':
          description: Success
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/SetRulePrioritiesOutput'
        '480':
          description: RuleNotFoundException
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/RuleNotFoundException'
        '481':
          description: PriorityInUseException
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/PriorityInUseException'
        '482':
          description: OperationNotPermittedException
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/OperationNotPermittedException'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SetRulePrioritiesInput'
        required: true
    parameters:
      - $ref: '#/components/parameters/Action'
      - $ref: '#/components/parameters/Version'
      - $ref: '#/components/parameters/X-Amz-Content-Sha256'
      - $ref: '#/components/parameters/X-Amz-Date'
      - $ref: '#/components/parameters/X-Amz-Algorithm'
      - $ref: '#/components/parameters/X-Amz-Credential'
      - $ref: '#/components/parameters/X-Amz-Security-Token'
      - $ref: '#/components/parameters/X-Amz-Signature'
      - $ref: '#/components/parameters/X-Amz-SignedHeaders'
  '/#SetSecurityGroups':
    post:
      operationId: SetSecurityGroups
      description: Associates the specified security groups with the specified load balancer. The specified security groups override the previously associated security groups.
      responses:
        '200':
          description: Success
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/SetSecurityGroupsOutput'
        '480':
          description: LoadBalancerNotFoundException
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/LoadBalancerNotFoundException'
        '481':
          description: InvalidConfigurationRequestException
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/InvalidConfigurationRequestException'
        '482':
          description: InvalidSecurityGroupException
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/InvalidSecurityGroupException'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SetSecurityGroupsInput'
        required: true
    parameters:
      - $ref: '#/components/parameters/Action'
      - $ref: '#/components/parameters/Version'
      - $ref: '#/components/parameters/X-Amz-Content-Sha256'
      - $ref: '#/components/parameters/X-Amz-Date'
      - $ref: '#/components/parameters/X-Amz-Algorithm'
      - $ref: '#/components/parameters/X-Amz-Credential'
      - $ref: '#/components/parameters/X-Amz-Security-Token'
      - $ref: '#/components/parameters/X-Amz-Signature'
      - $ref: '#/components/parameters/X-Amz-SignedHeaders'
  '/#SetSubnets':
    post:
      operationId: SetSubnets
      description: Enables the Availability Zone for the specified subnets for the specified load balancer. The specified subnets replace the previously enabled subnets.
      responses:
        '200':
          description: Success
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/SetSubnetsOutput'
        '480':
          description: LoadBalancerNotFoundException
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/LoadBalancerNotFoundException'
        '481':
          description: InvalidConfigurationRequestException
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/InvalidConfigurationRequestException'
        '482':
          description: SubnetNotFoundException
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/SubnetNotFoundException'
        '483':
          description: InvalidSubnetException
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/InvalidSubnetException'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SetSubnetsInput'
        required: true
    parameters:
      - $ref: '#/components/parameters/Action'
      - $ref: '#/components/parameters/Version'
      - $ref: '#/components/parameters/X-Amz-Content-Sha256'
      - $ref: '#/components/parameters/X-Amz-Date'
      - $ref: '#/components/parameters/X-Amz-Algorithm'
      - $ref: '#/components/parameters/X-Amz-Credential'
      - $ref: '#/components/parameters/X-Amz-Security-Token'
      - $ref: '#/components/parameters/X-Amz-Signature'
      - $ref: '#/components/parameters/X-Amz-SignedHeaders'
components:
  schemas:
    Action:
      type: object
      required:
        - Type
        - TargetGroupArn
      properties:
        Type:
          $ref: '#/components/schemas/ActionTypeEnum'
        TargetGroupArn:
          $ref: '#/components/schemas/TargetGroupArn'
      description: Information about an action.
    ActionTypeEnum:
      type: string
      enum:
        - forward
    Actions:
      type: array
      items:
        $ref: '#/components/schemas/Action'
    AddTagsInput:
      type: object
      required:
        - ResourceArns
        - Tags
      example:
        ResourceArns:
          - 'arn:aws:elasticloadbalancing:us-west-2:123456789012:loadbalancer/app/my-load-balancer/50dc6c495c0c9188'
        Tags:
          - Key: project
            Value: lima
          - Key: department
            Value: digital-media
      properties:
        ResourceArns:
          $ref: '#/components/schemas/ResourceArns'
        Tags:
          $ref: '#/components/schemas/TagList'
    AddTagsOutput:
      type: object
      properties: {}
    AvailabilityZone:
      type: object
      properties:
        ZoneName:
          $ref: '#/components/schemas/ZoneName'
        SubnetId:
          $ref: '#/components/schemas/SubnetId'
      description: Information about an Availability Zone.
    AvailabilityZones:
      type: array
      items:
        $ref: '#/components/schemas/AvailabilityZone'
    CanonicalHostedZoneId:
      type: string
    Certificate:
      type: object
      properties:
        CertificateArn:
          $ref: '#/components/schemas/CertificateArn'
      description: Information about an SSL server certificate deployed on a load balancer.
    CertificateArn:
      type: string
    CertificateList:
      type: array
      items:
        $ref: '#/components/schemas/Certificate'
    CertificateNotFoundException:
      type: object
      properties: {}
      description: The specified certificate does not exist.
    Cipher:
      type: object
      properties:
        Name:
          $ref: '#/components/schemas/CipherName'
        Priority:
          $ref: '#/components/schemas/CipherPriority'
      description: Information about a cipher used in a policy.
    CipherName:
      type: string
    CipherPriority:
      type: integer
    Ciphers:
      type: array
      items:
        $ref: '#/components/schemas/Cipher'
    ConditionFieldName:
      type: string
      maxLength: 64
    CreateListenerInput:
      type: object
      required:
        - LoadBalancerArn
        - Protocol
        - Port
        - DefaultActions
      example:
        Certificates:
          - CertificateArn: 'arn:aws:iam::123456789012:server-certificate/my-server-cert'
        DefaultActions:
          - TargetGroupArn: 'arn:aws:elasticloadbalancing:us-west-2:123456789012:targetgroup/my-targets/73e2d6bc24d8a067'
            Type: forward
        LoadBalancerArn: 'arn:aws:elasticloadbalancing:us-west-2:123456789012:loadbalancer/app/my-load-balancer/50dc6c495c0c9188'
        Port: 443
        Protocol: HTTPS
        SslPolicy: ELBSecurityPolicy-2015-05
      properties:
        LoadBalancerArn:
          $ref: '#/components/schemas/LoadBalancerArn'
        Protocol:
          $ref: '#/components/schemas/ProtocolEnum'
        Port:
          $ref: '#/components/schemas/Port'
        SslPolicy:
          $ref: '#/components/schemas/SslPolicyName'
        Certificates:
          $ref: '#/components/schemas/CertificateList'
        DefaultActions:
          $ref: '#/components/schemas/Actions'
    CreateListenerOutput:
      type: object
      example:
        Listeners:
          - Certificates:
              - CertificateArn: 'arn:aws:iam::123456789012:server-certificate/my-server-cert'
            DefaultActions:
              - TargetGroupArn: 'arn:aws:elasticloadbalancing:us-west-2:123456789012:targetgroup/my-targets/73e2d6bc24d8a067'
                Type: forward
            ListenerArn: 'arn:aws:elasticloadbalancing:us-west-2:123456789012:listener/app/my-load-balancer/50dc6c495c0c9188/f2f7dc8efc522ab2'
            LoadBalancerArn: 'arn:aws:elasticloadbalancing:us-west-2:123456789012:loadbalancer/app/my-load-balancer/50dc6c495c0c9188'
            Port: 443
            Protocol: HTTPS
            SslPolicy: ELBSecurityPolicy-2015-05
      properties:
        Listeners:
          $ref: '#/components/schemas/Listeners'
    CreateLoadBalancerInput:
      type: object
      required:
        - Name
        - Subnets
      example:
        Name: my-internal-load-balancer
        Scheme: internal
        SecurityGroups: []
        Subnets:
          - subnet-b7d581c0
          - subnet-8360a9e7
      properties:
        Name:
          $ref: '#/components/schemas/LoadBalancerName'
        Subnets:
          $ref: '#/components/schemas/Subnets'
        SecurityGroups:
          $ref: '#/components/schemas/SecurityGroups'
        Scheme:
          $ref: '#/components/schemas/LoadBalancerSchemeEnum'
        Tags:
          $ref: '#/components/schemas/TagList'
        IpAddressType:
          $ref: '#/components/schemas/IpAddressType'
    CreateLoadBalancerOutput:
      type: object
      example:
        LoadBalancers:
          - AvailabilityZones:
              - SubnetId: subnet-8360a9e7
                ZoneName: us-west-2a
              - SubnetId: subnet-b7d581c0
                ZoneName: us-west-2b
            CanonicalHostedZoneId: Z2P70J7EXAMPLE
            CreatedTime: '2016-03-25T21:29:48.850Z'
            DNSName: internal-my-internal-load-balancer-1529930873.us-west-2.elb.amazonaws.com
            LoadBalancerArn: 'arn:aws:elasticloadbalancing:us-west-2:123456789012:loadbalancer/app/my-internal-load-balancer/5b49b8d4303115c2'
            LoadBalancerName: my-internal-load-balancer
            Scheme: internal
            SecurityGroups:
              - sg-5943793c
            State:
              Code: provisioning
            Type: application
            VpcId: vpc-3ac0fb5f
      properties:
        LoadBalancers:
          $ref: '#/components/schemas/LoadBalancers'
    CreateRuleInput:
      type: object
      required:
        - ListenerArn
        - Conditions
        - Priority
        - Actions
      example:
        Actions:
          - TargetGroupArn: 'arn:aws:elasticloadbalancing:us-west-2:123456789012:targetgroup/my-targets/73e2d6bc24d8a067'
            Type: forward
        Conditions:
          - Field: path-pattern
            Values:
              - /img/*
        ListenerArn: 'arn:aws:elasticloadbalancing:us-west-2:123456789012:listener/app/my-load-balancer/50dc6c495c0c9188/f2f7dc8efc522ab2'
        Priority: 10
      properties:
        ListenerArn:
          $ref: '#/components/schemas/ListenerArn'
        Conditions:
          $ref: '#/components/schemas/RuleConditionList'
        Priority:
          $ref: '#/components/schemas/RulePriority'
        Actions:
          $ref: '#/components/schemas/Actions'
    CreateRuleOutput:
      type: object
      example:
        Rules:
          - Actions:
              - TargetGroupArn: 'arn:aws:elasticloadbalancing:us-west-2:123456789012:targetgroup/my-targets/73e2d6bc24d8a067'
                Type: forward
            Conditions:
              - Field: path-pattern
                Values:
                  - /img/*
            IsDefault: false
            Priority: '10'
            RuleArn: 'arn:aws:elasticloadbalancing:us-west-2:123456789012:listener-rule/app/my-load-balancer/50dc6c495c0c9188/f2f7dc8efc522ab2/9683b2d02a6cabee'
      properties:
        Rules:
          $ref: '#/components/schemas/Rules'
    CreateTargetGroupInput:
      type: object
      required:
        - Name
        - Protocol
        - Port
        - VpcId
      example:
        Name: my-targets
        Port: 80
        Protocol: HTTP
        VpcId: vpc-3ac0fb5f
      properties:
        Name:
          $ref: '#/components/schemas/TargetGroupName'
        Protocol:
          $ref: '#/components/schemas/ProtocolEnum'
        Port:
          $ref: '#/components/schemas/Port'
        VpcId:
          $ref: '#/components/schemas/VpcId'
        HealthCheckProtocol:
          $ref: '#/components/schemas/ProtocolEnum'
        HealthCheckPort:
          $ref: '#/components/schemas/HealthCheckPort'
        HealthCheckPath:
          $ref: '#/components/schemas/Path'
        HealthCheckIntervalSeconds:
          $ref: '#/components/schemas/HealthCheckIntervalSeconds'
        HealthCheckTimeoutSeconds:
          $ref: '#/components/schemas/HealthCheckTimeoutSeconds'
        HealthyThresholdCount:
          $ref: '#/components/schemas/HealthCheckThresholdCount'
        UnhealthyThresholdCount:
          $ref: '#/components/schemas/HealthCheckThresholdCount'
        Matcher:
          $ref: '#/components/schemas/Matcher'
    CreateTargetGroupOutput:
      type: object
      example:
        TargetGroups:
          - HealthCheckIntervalSeconds: 30
            HealthCheckPath: /
            HealthCheckPort: traffic-port
            HealthCheckProtocol: HTTP
            HealthCheckTimeoutSeconds: 5
            HealthyThresholdCount: 5
            Matcher:
              HttpCode: '200'
            Port: 80
            Protocol: HTTP
            TargetGroupArn: 'arn:aws:elasticloadbalancing:us-west-2:123456789012:targetgroup/my-targets/73e2d6bc24d8a067'
            TargetGroupName: my-targets
            UnhealthyThresholdCount: 2
            VpcId: vpc-3ac0fb5f
      properties:
        TargetGroups:
          $ref: '#/components/schemas/TargetGroups'
    CreatedTime:
      type: string
      format: date-time
    DNSName:
      type: string
    DeleteListenerInput:
      type: object
      required:
        - ListenerArn
      example:
        ListenerArn: 'arn:aws:elasticloadbalancing:ua-west-2:123456789012:listener/app/my-load-balancer/50dc6c495c0c9188/f2f7dc8efc522ab2'
      properties:
        ListenerArn:
          $ref: '#/components/schemas/ListenerArn'
    DeleteListenerOutput:
      type: object
      properties: {}
    DeleteLoadBalancerInput:
      type: object
      required:
        - LoadBalancerArn
      example:
        LoadBalancerArn: 'arn:aws:elasticloadbalancing:us-west-2:123456789012:loadbalancer/app/my-load-balancer/50dc6c495c0c9188'
      properties:
        LoadBalancerArn:
          $ref: '#/components/schemas/LoadBalancerArn'
    DeleteLoadBalancerOutput:
      type: object
      properties: {}
    DeleteRuleInput:
      type: object
      required:
        - RuleArn
      example:
        RuleArn: 'arn:aws:elasticloadbalancing:us-west-2:123456789012:listener-rule/app/my-load-balancer/50dc6c495c0c9188/f2f7dc8efc522ab2/1291d13826f405c3'
      properties:
        RuleArn:
          $ref: '#/components/schemas/RuleArn'
    DeleteRuleOutput:
      type: object
      properties: {}
    DeleteTargetGroupInput:
      type: object
      required:
        - TargetGroupArn
      example:
        TargetGroupArn: 'arn:aws:elasticloadbalancing:us-west-2:123456789012:targetgroup/my-targets/73e2d6bc24d8a067'
      properties:
        TargetGroupArn:
          $ref: '#/components/schemas/TargetGroupArn'
    DeleteTargetGroupOutput:
      type: object
      properties: {}
    DeregisterTargetsInput:
      type: object
      required:
        - TargetGroupArn
        - Targets
      example:
        TargetGroupArn: 'arn:aws:elasticloadbalancing:us-west-2:123456789012:targetgroup/my-targets/73e2d6bc24d8a067'
        Targets:
          - Id: i-0f76fade
      properties:
        TargetGroupArn:
          $ref: '#/components/schemas/TargetGroupArn'
        Targets:
          $ref: '#/components/schemas/TargetDescriptions'
    DeregisterTargetsOutput:
      type: object
      properties: {}
    DescribeAccountLimitsInput:
      type: object
      properties:
        Marker:
          $ref: '#/components/schemas/Marker'
        PageSize:
          $ref: '#/components/schemas/PageSize'
    DescribeAccountLimitsOutput:
      type: object
      properties:
        Limits:
          $ref: '#/components/schemas/Limits'
        NextMarker:
          $ref: '#/components/schemas/Marker'
    DescribeListenersInput:
      type: object
      example:
        ListenerArns:
          - 'arn:aws:elasticloadbalancing:us-west-2:123456789012:listener/app/my-load-balancer/50dc6c495c0c9188/f2f7dc8efc522ab2'
      properties:
        LoadBalancerArn:
          $ref: '#/components/schemas/LoadBalancerArn'
        ListenerArns:
          $ref: '#/components/schemas/ListenerArns'
        Marker:
          $ref: '#/components/schemas/Marker'
        PageSize:
          $ref: '#/components/schemas/PageSize'
    DescribeListenersOutput:
      type: object
      example:
        Listeners:
          - DefaultActions:
              - TargetGroupArn: 'arn:aws:elasticloadbalancing:us-west-2:123456789012:targetgroup/my-targets/73e2d6bc24d8a067'
                Type: forward
            ListenerArn: 'arn:aws:elasticloadbalancing:us-west-2:123456789012:listener/app/my-load-balancer/50dc6c495c0c9188/f2f7dc8efc522ab2'
            LoadBalancerArn: 'arn:aws:elasticloadbalancing:us-west-2:123456789012:loadbalancer/app/my-load-balancer/50dc6c495c0c9188'
            Port: 80
            Protocol: HTTP
      properties:
        Listeners:
          $ref: '#/components/schemas/Listeners'
        NextMarker:
          $ref: '#/components/schemas/Marker'
    DescribeLoadBalancerAttributesInput:
      type: object
      required:
        - LoadBalancerArn
      example:
        LoadBalancerArn: 'arn:aws:elasticloadbalancing:us-west-2:123456789012:loadbalancer/app/my-load-balancer/50dc6c495c0c9188'
      properties:
        LoadBalancerArn:
          $ref: '#/components/schemas/LoadBalancerArn'
    DescribeLoadBalancerAttributesOutput:
      type: object
      example:
        Attributes:
          - Key: access_logs.s3.enabled
            Value: 'false'
          - Key: idle_timeout.timeout_seconds
            Value: '60'
          - Key: access_logs.s3.prefix
            Value: ''
          - Key: deletion_protection.enabled
            Value: 'false'
          - Key: access_logs.s3.bucket
            Value: ''
      properties:
        Attributes:
          $ref: '#/components/schemas/LoadBalancerAttributes'
    DescribeLoadBalancersInput:
      type: object
      example:
        LoadBalancerArns:
          - 'arn:aws:elasticloadbalancing:us-west-2:123456789012:loadbalancer/app/my-load-balancer/50dc6c495c0c9188'
      properties:
        LoadBalancerArns:
          $ref: '#/components/schemas/LoadBalancerArns'
        Names:
          $ref: '#/components/schemas/LoadBalancerNames'
        Marker:
          $ref: '#/components/schemas/Marker'
        PageSize:
          $ref: '#/components/schemas/PageSize'
    DescribeLoadBalancersOutput:
      type: object
      example:
        LoadBalancers:
          - AvailabilityZones:
              - SubnetId: subnet-8360a9e7
                ZoneName: us-west-2a
              - SubnetId: subnet-b7d581c0
                ZoneName: us-west-2b
            CanonicalHostedZoneId: Z2P70J7EXAMPLE
            CreatedTime: '2016-03-25T21:26:12.920Z'
            DNSName: my-load-balancer-424835706.us-west-2.elb.amazonaws.com
            LoadBalancerArn: 'arn:aws:elasticloadbalancing:us-west-2:123456789012:loadbalancer/app/my-load-balancer/50dc6c495c0c9188'
            LoadBalancerName: my-load-balancer
            Scheme: internet-facing
            SecurityGroups:
              - sg-5943793c
            State:
              Code: active
            Type: application
            VpcId: vpc-3ac0fb5f
      properties:
        LoadBalancers:
          $ref: '#/components/schemas/LoadBalancers'
        NextMarker:
          $ref: '#/components/schemas/Marker'
    DescribeRulesInput:
      type: object
      example:
        RuleArns:
          - 'arn:aws:elasticloadbalancing:us-west-2:123456789012:listener-rule/app/my-load-balancer/50dc6c495c0c9188/f2f7dc8efc522ab2/9683b2d02a6cabee'
      properties:
        ListenerArn:
          $ref: '#/components/schemas/ListenerArn'
        RuleArns:
          $ref: '#/components/schemas/RuleArns'
        Marker:
          $ref: '#/components/schemas/Marker'
        PageSize:
          $ref: '#/components/schemas/PageSize'
    DescribeRulesOutput:
      type: object
      example:
        Rules:
          - Actions:
              - TargetGroupArn: 'arn:aws:elasticloadbalancing:us-west-2:123456789012:targetgroup/my-targets/73e2d6bc24d8a067'
                Type: forward
            Conditions:
              - Field: path-pattern
                Values:
                  - /img/*
            IsDefault: false
            Priority: '10'
            RuleArn: 'arn:aws:elasticloadbalancing:us-west-2:123456789012:listener-rule/app/my-load-balancer/50dc6c495c0c9188/f2f7dc8efc522ab2/9683b2d02a6cabee'
      properties:
        Rules:
          $ref: '#/components/schemas/Rules'
        NextMarker:
          $ref: '#/components/schemas/Marker'
    DescribeSSLPoliciesInput:
      type: object
      example:
        Names:
          - ELBSecurityPolicy-2015-05
      properties:
        Names:
          $ref: '#/components/schemas/SslPolicyNames'
        Marker:
          $ref: '#/components/schemas/Marker'
        PageSize:
          $ref: '#/components/schemas/PageSize'
    DescribeSSLPoliciesOutput:
      type: object
      example:
        SslPolicies:
          - Ciphers:
              - Name: ECDHE-ECDSA-AES128-GCM-SHA256
                Priority: 1
              - Name: ECDHE-RSA-AES128-GCM-SHA256
                Priority: 2
              - Name: ECDHE-ECDSA-AES128-SHA256
                Priority: 3
              - Name: ECDHE-RSA-AES128-SHA256
                Priority: 4
              - Name: ECDHE-ECDSA-AES128-SHA
                Priority: 5
              - Name: ECDHE-RSA-AES128-SHA
                Priority: 6
              - Name: DHE-RSA-AES128-SHA
                Priority: 7
              - Name: ECDHE-ECDSA-AES256-GCM-SHA384
                Priority: 8
              - Name: ECDHE-RSA-AES256-GCM-SHA384
                Priority: 9
              - Name: ECDHE-ECDSA-AES256-SHA384
                Priority: 10
              - Name: ECDHE-RSA-AES256-SHA384
                Priority: 11
              - Name: ECDHE-RSA-AES256-SHA
                Priority: 12
              - Name: ECDHE-ECDSA-AES256-SHA
                Priority: 13
              - Name: AES128-GCM-SHA256
                Priority: 14
              - Name: AES128-SHA256
                Priority: 15
              - Name: AES128-SHA
                Priority: 16
              - Name: AES256-GCM-SHA384
                Priority: 17
              - Name: AES256-SHA256
                Priority: 18
              - Name: AES256-SHA
                Priority: 19
            Name: ELBSecurityPolicy-2015-05
            SslProtocols:
              - TLSv1
              - TLSv1.1
              - TLSv1.2
      properties:
        SslPolicies:
          $ref: '#/components/schemas/SslPolicies'
        NextMarker:
          $ref: '#/components/schemas/Marker'
    DescribeTagsInput:
      type: object
      required:
        - ResourceArns
      example:
        ResourceArns:
          - 'arn:aws:elasticloadbalancing:us-west-2:123456789012:loadbalancer/app/my-load-balancer/50dc6c495c0c9188'
      properties:
        ResourceArns:
          $ref: '#/components/schemas/ResourceArns'
    DescribeTagsOutput:
      type: object
      example:
        TagDescriptions:
          - ResourceArn: 'arn:aws:elasticloadbalancing:us-west-2:123456789012:loadbalancer/app/my-load-balancer/50dc6c495c0c9188'
            Tags:
              - Key: project
                Value: lima
              - Key: department
                Value: digital-media
      properties:
        TagDescriptions:
          $ref: '#/components/schemas/TagDescriptions'
    DescribeTargetGroupAttributesInput:
      type: object
      required:
        - TargetGroupArn
      example:
        TargetGroupArn: 'arn:aws:elasticloadbalancing:us-west-2:123456789012:targetgroup/my-targets/73e2d6bc24d8a067'
      properties:
        TargetGroupArn:
          $ref: '#/components/schemas/TargetGroupArn'
    DescribeTargetGroupAttributesOutput:
      type: object
      example:
        Attributes:
          - Key: stickiness.enabled
            Value: 'false'
          - Key: deregistration_delay.timeout_seconds
            Value: '300'
          - Key: stickiness.type
            Value: lb_cookie
          - Key: stickiness.lb_cookie.duration_seconds
            Value: '86400'
      properties:
        Attributes:
          $ref: '#/components/schemas/TargetGroupAttributes'
    DescribeTargetGroupsInput:
      type: object
      example:
        TargetGroupArns:
          - 'arn:aws:elasticloadbalancing:us-west-2:123456789012:targetgroup/my-targets/73e2d6bc24d8a067'
      properties:
        LoadBalancerArn:
          $ref: '#/components/schemas/LoadBalancerArn'
        TargetGroupArns:
          $ref: '#/components/schemas/TargetGroupArns'
        Names:
          $ref: '#/components/schemas/TargetGroupNames'
        Marker:
          $ref: '#/components/schemas/Marker'
        PageSize:
          $ref: '#/components/schemas/PageSize'
    DescribeTargetGroupsOutput:
      type: object
      example:
        TargetGroups:
          - HealthCheckIntervalSeconds: 30
            HealthCheckPath: /
            HealthCheckPort: traffic-port
            HealthCheckProtocol: HTTP
            HealthCheckTimeoutSeconds: 5
            HealthyThresholdCount: 5
            LoadBalancerArns:
              - 'arn:aws:elasticloadbalancing:us-west-2:123456789012:loadbalancer/app/my-load-balancer/50dc6c495c0c9188'
            Matcher:
              HttpCode: '200'
            Port: 80
            Protocol: HTTP
            TargetGroupArn: 'arn:aws:elasticloadbalancing:us-west-2:123456789012:targetgroup/my-targets/73e2d6bc24d8a067'
            TargetGroupName: my-targets
            UnhealthyThresholdCount: 2
            VpcId: vpc-3ac0fb5f
      properties:
        TargetGroups:
          $ref: '#/components/schemas/TargetGroups'
        NextMarker:
          $ref: '#/components/schemas/Marker'
    DescribeTargetHealthInput:
      type: object
      required:
        - TargetGroupArn
      example:
        TargetGroupArn: 'arn:aws:elasticloadbalancing:us-west-2:123456789012:targetgroup/my-targets/73e2d6bc24d8a067'
        Targets:
          - Id: i-0f76fade
            Port: 80
      properties:
        TargetGroupArn:
          $ref: '#/components/schemas/TargetGroupArn'
        Targets:
          $ref: '#/components/schemas/TargetDescriptions'
    DescribeTargetHealthOutput:
      type: object
      example:
        TargetHealthDescriptions:
          - HealthCheckPort: '80'
            Target:
              Id: i-0f76fade
              Port: 80
            TargetHealth:
              State: healthy
      properties:
        TargetHealthDescriptions:
          $ref: '#/components/schemas/TargetHealthDescriptions'
    Description:
      type: string
    DuplicateListenerException:
      type: object
      properties: {}
      description: A listener with the specified port already exists.
    DuplicateLoadBalancerNameException:
      type: object
      properties: {}
      description: A load balancer with the specified name already exists.
    DuplicateTagKeysException:
      type: object
      properties: {}
      description: A tag key was specified more than once.
    DuplicateTargetGroupNameException:
      type: object
      properties: {}
      description: A target group with the specified name already exists.
    HealthCheckIntervalSeconds:
      type: integer
      minimum: 5
      maximum: 300
    HealthCheckPort:
      type: string
    HealthCheckThresholdCount:
      type: integer
      minimum: 2
      maximum: 10
    HealthCheckTimeoutSeconds:
      type: integer
      minimum: 2
      maximum: 60
    HealthUnavailableException:
      type: object
      properties: {}
      description: The health of the specified targets could not be retrieved due to an internal error.
    HttpCode:
      type: string
    IncompatibleProtocolsException:
      type: object
      properties: {}
      description: The specified configuration is not valid with this protocol.
    InvalidConfigurationRequestException:
      type: object
      properties: {}
      description: The requested configuration is not valid.
    InvalidSchemeException:
      type: object
      properties: {}
      description: The requested scheme is not valid.
    InvalidSecurityGroupException:
      type: object
      properties: {}
      description: The specified security group does not exist.
    InvalidSubnetException:
      type: object
      properties: {}
      description: The specified subnet is out of available addresses.
    InvalidTargetException:
      type: object
      properties: {}
      description: The specified target does not exist or is not in the same VPC as the target group.
    IpAddressType:
      type: string
      enum:
        - ipv4
        - dualstack
    IsDefault:
      type: boolean
    Limit:
      type: object
      properties:
        Name:
          $ref: '#/components/schemas/Name'
        Max:
          $ref: '#/components/schemas/Max'
      description: Information about an Elastic Load Balancing resource limit for your AWS account.
    Limits:
      type: array
      items:
        $ref: '#/components/schemas/Limit'
    ListOfString:
      type: array
      items:
        $ref: '#/components/schemas/StringValue'
    Listener:
      type: object
      properties:
        ListenerArn:
          $ref: '#/components/schemas/ListenerArn'
        LoadBalancerArn:
          $ref: '#/components/schemas/LoadBalancerArn'
        Port:
          $ref: '#/components/schemas/Port'
        Protocol:
          $ref: '#/components/schemas/ProtocolEnum'
        Certificates:
          $ref: '#/components/schemas/CertificateList'
        SslPolicy:
          $ref: '#/components/schemas/SslPolicyName'
        DefaultActions:
          $ref: '#/components/schemas/Actions'
      description: Information about a listener.
    ListenerArn:
      type: string
    ListenerArns:
      type: array
      items:
        $ref: '#/components/schemas/ListenerArn'
    ListenerNotFoundException:
      type: object
      properties: {}
      description: The specified listener does not exist.
    Listeners:
      type: array
      items:
        $ref: '#/components/schemas/Listener'
    LoadBalancer:
      type: object
      properties:
        LoadBalancerArn:
          $ref: '#/components/schemas/LoadBalancerArn'
        DNSName:
          $ref: '#/components/schemas/DNSName'
        CanonicalHostedZoneId:
          $ref: '#/components/schemas/CanonicalHostedZoneId'
        CreatedTime:
          $ref: '#/components/schemas/CreatedTime'
        LoadBalancerName:
          $ref: '#/components/schemas/LoadBalancerName'
        Scheme:
          $ref: '#/components/schemas/LoadBalancerSchemeEnum'
        VpcId:
          $ref: '#/components/schemas/VpcId'
        State:
          $ref: '#/components/schemas/LoadBalancerState'
        Type:
          $ref: '#/components/schemas/LoadBalancerTypeEnum'
        AvailabilityZones:
          $ref: '#/components/schemas/AvailabilityZones'
        SecurityGroups:
          $ref: '#/components/schemas/SecurityGroups'
        IpAddressType:
          $ref: '#/components/schemas/IpAddressType'
      description: Information about a load balancer.
    LoadBalancerArn:
      type: string
    LoadBalancerArns:
      type: array
      items:
        $ref: '#/components/schemas/LoadBalancerArn'
    LoadBalancerAttribute:
      type: object
      properties:
        Key:
          $ref: '#/components/schemas/LoadBalancerAttributeKey'
        Value:
          $ref: '#/components/schemas/LoadBalancerAttributeValue'
      description: Information about a load balancer attribute.
    LoadBalancerAttributeKey:
      type: string
      pattern: '^[a-zA-Z0-9._]+$'
      maxLength: 256
    LoadBalancerAttributeValue:
      type: string
      maxLength: 1024
    LoadBalancerAttributes:
      type: array
      items:
        $ref: '#/components/schemas/LoadBalancerAttribute'
      maxItems: 20
    LoadBalancerName:
      type: string
    LoadBalancerNames:
      type: array
      items:
        $ref: '#/components/schemas/LoadBalancerName'
    LoadBalancerNotFoundException:
      type: object
      properties: {}
      description: The specified load balancer does not exist.
    LoadBalancerSchemeEnum:
      type: string
      enum:
        - internet-facing
        - internal
    LoadBalancerState:
      type: object
      properties:
        Code:
          $ref: '#/components/schemas/LoadBalancerStateEnum'
        Reason:
          $ref: '#/components/schemas/StateReason'
      description: Information about the state of the load balancer.
    LoadBalancerStateEnum:
      type: string
      enum:
        - active
        - provisioning
        - failed
    LoadBalancerTypeEnum:
      type: string
      enum:
        - application
    LoadBalancers:
      type: array
      items:
        $ref: '#/components/schemas/LoadBalancer'
    Marker:
      type: string
    Matcher:
      type: object
      required:
        - HttpCode
      properties:
        HttpCode:
          $ref: '#/components/schemas/HttpCode'
      description: Information to use when checking for a successful response from a target.
    Max:
      type: string
    ModifyListenerInput:
      type: object
      required:
        - ListenerArn
      example:
        Certificates:
          - CertificateArn: 'arn:aws:iam::123456789012:server-certificate/my-new-server-cert'
        ListenerArn: 'arn:aws:elasticloadbalancing:us-west-2:123456789012:listener/app/my-load-balancer/50dc6c495c0c9188/0467ef3c8400ae65'
      properties:
        ListenerArn:
          $ref: '#/components/schemas/ListenerArn'
        Port:
          $ref: '#/components/schemas/Port'
        Protocol:
          $ref: '#/components/schemas/ProtocolEnum'
        SslPolicy:
          $ref: '#/components/schemas/SslPolicyName'
        Certificates:
          $ref: '#/components/schemas/CertificateList'
        DefaultActions:
          $ref: '#/components/schemas/Actions'
    ModifyListenerOutput:
      type: object
      example:
        Listeners:
          - Certificates:
              - CertificateArn: 'arn:aws:iam::123456789012:server-certificate/my-new-server-cert'
            DefaultActions:
              - TargetGroupArn: 'arn:aws:elasticloadbalancing:us-west-2:123456789012:targetgroup/my-targets/73e2d6bc24d8a067'
                Type: forward
            ListenerArn: 'arn:aws:elasticloadbalancing:us-west-2:123456789012:listener/app/my-load-balancer/50dc6c495c0c9188/0467ef3c8400ae65'
            LoadBalancerArn: 'arn:aws:elasticloadbalancing:us-west-2:123456789012:loadbalancer/app/my-load-balancer/50dc6c495c0c9188'
            Port: 443
            Protocol: HTTPS
            SslPolicy: ELBSecurityPolicy-2015-05
      properties:
        Listeners:
          $ref: '#/components/schemas/Listeners'
    ModifyLoadBalancerAttributesInput:
      type: object
      required:
        - LoadBalancerArn
        - Attributes
      example:
        Attributes:
          - Key: access_logs.s3.enabled
            Value: 'true'
          - Key: access_logs.s3.bucket
            Value: my-loadbalancer-logs
          - Key: access_logs.s3.prefix
            Value: myapp
        LoadBalancerArn: 'arn:aws:elasticloadbalancing:us-west-2:123456789012:loadbalancer/app/my-load-balancer/50dc6c495c0c9188'
      properties:
        LoadBalancerArn:
          $ref: '#/components/schemas/LoadBalancerArn'
        Attributes:
          $ref: '#/components/schemas/LoadBalancerAttributes'
    ModifyLoadBalancerAttributesOutput:
      type: object
      example:
        Attributes:
          - Key: access_logs.s3.enabled
            Value: 'true'
          - Key: access_logs.s3.bucket
            Value: my-load-balancer-logs
          - Key: access_logs.s3.prefix
            Value: myapp
          - Key: idle_timeout.timeout_seconds
            Value: '60'
          - Key: deletion_protection.enabled
            Value: 'false'
      properties:
        Attributes:
          $ref: '#/components/schemas/LoadBalancerAttributes'
    ModifyRuleInput:
      type: object
      required:
        - RuleArn
      example:
        Conditions:
          - Field: path-pattern
            Values:
              - /images/*
        RuleArn: 'arn:aws:elasticloadbalancing:us-west-2:123456789012:listener-rule/app/my-load-balancer/50dc6c495c0c9188/f2f7dc8efc522ab2/9683b2d02a6cabee'
      properties:
        RuleArn:
          $ref: '#/components/schemas/RuleArn'
        Conditions:
          $ref: '#/components/schemas/RuleConditionList'
        Actions:
          $ref: '#/components/schemas/Actions'
    ModifyRuleOutput:
      type: object
      example:
        Rules:
          - Actions:
              - TargetGroupArn: 'arn:aws:elasticloadbalancing:us-west-2:123456789012:targetgroup/my-targets/73e2d6bc24d8a067'
                Type: forward
            Conditions:
              - Field: path-pattern
                Values:
                  - /images/*
            IsDefault: false
            Priority: '10'
            RuleArn: 'arn:aws:elasticloadbalancing:us-west-2:123456789012:listener-rule/app/my-load-balancer/50dc6c495c0c9188/f2f7dc8efc522ab2/9683b2d02a6cabee'
      properties:
        Rules:
          $ref: '#/components/schemas/Rules'
    ModifyTargetGroupAttributesInput:
      type: object
      required:
        - TargetGroupArn
        - Attributes
      example:
        Attributes:
          - Key: deregistration_delay.timeout_seconds
            Value: '600'
        TargetGroupArn: 'arn:aws:elasticloadbalancing:us-west-2:123456789012:targetgroup/my-targets/73e2d6bc24d8a067'
      properties:
        TargetGroupArn:
          $ref: '#/components/schemas/TargetGroupArn'
        Attributes:
          $ref: '#/components/schemas/TargetGroupAttributes'
    ModifyTargetGroupAttributesOutput:
      type: object
      example:
        Attributes:
          - Key: stickiness.enabled
            Value: 'false'
          - Key: deregistration_delay.timeout_seconds
            Value: '600'
          - Key: stickiness.type
            Value: lb_cookie
          - Key: stickiness.lb_cookie.duration_seconds
            Value: '86400'
      properties:
        Attributes:
          $ref: '#/components/schemas/TargetGroupAttributes'
    ModifyTargetGroupInput:
      type: object
      required:
        - TargetGroupArn
      example:
        HealthCheckPort: '443'
        HealthCheckProtocol: HTTPS
        TargetGroupArn: 'arn:aws:elasticloadbalancing:us-west-2:123456789012:targetgroup/my-https-targets/2453ed029918f21f'
      properties:
        TargetGroupArn:
          $ref: '#/components/schemas/TargetGroupArn'
        HealthCheckProtocol:
          $ref: '#/components/schemas/ProtocolEnum'
        HealthCheckPort:
          $ref: '#/components/schemas/HealthCheckPort'
        HealthCheckPath:
          $ref: '#/components/schemas/Path'
        HealthCheckIntervalSeconds:
          $ref: '#/components/schemas/HealthCheckIntervalSeconds'
        HealthCheckTimeoutSeconds:
          $ref: '#/components/schemas/HealthCheckTimeoutSeconds'
        HealthyThresholdCount:
          $ref: '#/components/schemas/HealthCheckThresholdCount'
        UnhealthyThresholdCount:
          $ref: '#/components/schemas/HealthCheckThresholdCount'
        Matcher:
          $ref: '#/components/schemas/Matcher'
    ModifyTargetGroupOutput:
      type: object
      example:
        TargetGroups:
          - HealthCheckIntervalSeconds: 30
            HealthCheckPort: '443'
            HealthCheckProtocol: HTTPS
            HealthCheckTimeoutSeconds: 5
            HealthyThresholdCount: 5
            LoadBalancerArns:
              - 'arn:aws:elasticloadbalancing:us-west-2:123456789012:loadbalancer/app/my-load-balancer/50dc6c495c0c9188'
            Matcher:
              HttpCode: '200'
            Port: 443
            Protocol: HTTPS
            TargetGroupArn: 'arn:aws:elasticloadbalancing:us-west-2:123456789012:targetgroup/my-https-targets/2453ed029918f21f'
            TargetGroupName: my-https-targets
            UnhealthyThresholdCount: 2
            VpcId: vpc-3ac0fb5f
      properties:
        TargetGroups:
          $ref: '#/components/schemas/TargetGroups'
    Name:
      type: string
    OperationNotPermittedException:
      type: object
      properties: {}
      description: This operation is not allowed.
    PageSize:
      type: integer
      minimum: 1
      maximum: 400
    Path:
      type: string
      minLength: 1
      maxLength: 1024
    Port:
      type: integer
      minimum: 1
      maximum: 65535
    PriorityInUseException:
      type: object
      properties: {}
      description: The specified priority is in use.
    ProtocolEnum:
      type: string
      enum:
        - HTTP
        - HTTPS
    RegisterTargetsInput:
      type: object
      required:
        - TargetGroupArn
        - Targets
      example:
        TargetGroupArn: 'arn:aws:elasticloadbalancing:us-west-2:123456789012:targetgroup/my-new-targets/3bb63f11dfb0faf9'
        Targets:
          - Id: i-80c8dd94
            Port: 80
          - Id: i-80c8dd94
            Port: 766
      properties:
        TargetGroupArn:
          $ref: '#/components/schemas/TargetGroupArn'
        Targets:
          $ref: '#/components/schemas/TargetDescriptions'
    RegisterTargetsOutput:
      type: object
      properties: {}
    RemoveTagsInput:
      type: object
      required:
        - ResourceArns
        - TagKeys
      example:
        ResourceArns:
          - 'arn:aws:elasticloadbalancing:us-west-2:123456789012:loadbalancer/app/my-load-balancer/50dc6c495c0c9188'
        TagKeys:
          - project
          - department
      properties:
        ResourceArns:
          $ref: '#/components/schemas/ResourceArns'
        TagKeys:
          $ref: '#/components/schemas/TagKeys'
    RemoveTagsOutput:
      type: object
      properties: {}
    ResourceArn:
      type: string
    ResourceArns:
      type: array
      items:
        $ref: '#/components/schemas/ResourceArn'
    ResourceInUseException:
      type: object
      properties: {}
      description: A specified resource is in use.
    Rule:
      type: object
      properties:
        RuleArn:
          $ref: '#/components/schemas/RuleArn'
        Priority:
          $ref: '#/components/schemas/String'
        Conditions:
          $ref: '#/components/schemas/RuleConditionList'
        Actions:
          $ref: '#/components/schemas/Actions'
        IsDefault:
          $ref: '#/components/schemas/IsDefault'
      description: Information about a rule.
    RuleArn:
      type: string
    RuleArns:
      type: array
      items:
        $ref: '#/components/schemas/RuleArn'
    RuleCondition:
      type: object
      properties:
        Field:
          $ref: '#/components/schemas/ConditionFieldName'
        Values:
          $ref: '#/components/schemas/ListOfString'
      description: Information about a condition for a rule.
    RuleConditionList:
      type: array
      items:
        $ref: '#/components/schemas/RuleCondition'
    RuleNotFoundException:
      type: object
      properties: {}
      description: The specified rule does not exist.
    RulePriority:
      type: integer
      minimum: 1
      maximum: 99999
    RulePriorityList:
      type: array
      items:
        $ref: '#/components/schemas/RulePriorityPair'
    RulePriorityPair:
      type: object
      properties:
        RuleArn:
          $ref: '#/components/schemas/RuleArn'
        Priority:
          $ref: '#/components/schemas/RulePriority'
      description: Information about the priorities for the rules for a listener.
    Rules:
      type: array
      items:
        $ref: '#/components/schemas/Rule'
    SSLPolicyNotFoundException:
      type: object
      properties: {}
      description: The specified SSL policy does not exist.
    SecurityGroupId:
      type: string
    SecurityGroups:
      type: array
      items:
        $ref: '#/components/schemas/SecurityGroupId'
    SetIpAddressTypeInput:
      type: object
      required:
        - LoadBalancerArn
        - IpAddressType
      properties:
        LoadBalancerArn:
          $ref: '#/components/schemas/LoadBalancerArn'
        IpAddressType:
          $ref: '#/components/schemas/IpAddressType'
    SetIpAddressTypeOutput:
      type: object
      properties:
        IpAddressType:
          $ref: '#/components/schemas/IpAddressType'
    SetRulePrioritiesInput:
      type: object
      required:
        - RulePriorities
      example:
        RulePriorities:
          - Priority: 5
            RuleArn: 'arn:aws:elasticloadbalancing:us-west-2:123456789012:listener-rule/app/my-load-balancer/50dc6c495c0c9188/f2f7dc8efc522ab2/1291d13826f405c3'
      properties:
        RulePriorities:
          $ref: '#/components/schemas/RulePriorityList'
    SetRulePrioritiesOutput:
      type: object
      example:
        Rules:
          - Actions:
              - TargetGroupArn: 'arn:aws:elasticloadbalancing:us-west-2:123456789012:targetgroup/my-targets/73e2d6bc24d8a067'
                Type: forward
            Conditions:
              - Field: path-pattern
                Values:
                  - /img/*
            IsDefault: false
            Priority: '5'
            RuleArn: 'arn:aws:elasticloadbalancing:us-west-2:123456789012:listener-rule/app/my-load-balancer/50dc6c495c0c9188/f2f7dc8efc522ab2/1291d13826f405c3'
      properties:
        Rules:
          $ref: '#/components/schemas/Rules'
    SetSecurityGroupsInput:
      type: object
      required:
        - LoadBalancerArn
        - SecurityGroups
      example:
        LoadBalancerArn: 'arn:aws:elasticloadbalancing:us-west-2:123456789012:loadbalancer/app/my-load-balancer/50dc6c495c0c9188'
        SecurityGroups:
          - sg-5943793c
      properties:
        LoadBalancerArn:
          $ref: '#/components/schemas/LoadBalancerArn'
        SecurityGroups:
          $ref: '#/components/schemas/SecurityGroups'
    SetSecurityGroupsOutput:
      type: object
      example:
        SecurityGroupIds:
          - sg-5943793c
      properties:
        SecurityGroupIds:
          $ref: '#/components/schemas/SecurityGroups'
    SetSubnetsInput:
      type: object
      required:
        - LoadBalancerArn
        - Subnets
      example:
        LoadBalancerArn: 'arn:aws:elasticloadbalancing:us-west-2:123456789012:loadbalancer/app/my-load-balancer/50dc6c495c0c9188'
        Subnets:
          - subnet-8360a9e7
          - subnet-b7d581c0
      properties:
        LoadBalancerArn:
          $ref: '#/components/schemas/LoadBalancerArn'
        Subnets:
          $ref: '#/components/schemas/Subnets'
    SetSubnetsOutput:
      type: object
      example:
        AvailabilityZones:
          - SubnetId: subnet-8360a9e7
            ZoneName: us-west-2a
          - SubnetId: subnet-b7d581c0
            ZoneName: us-west-2b
      properties:
        AvailabilityZones:
          $ref: '#/components/schemas/AvailabilityZones'
    SslPolicies:
      type: array
      items:
        $ref: '#/components/schemas/SslPolicy'
    SslPolicy:
      type: object
      properties:
        SslProtocols:
          $ref: '#/components/schemas/SslProtocols'
        Ciphers:
          $ref: '#/components/schemas/Ciphers'
        Name:
          $ref: '#/components/schemas/SslPolicyName'
      description: Information about a policy used for SSL negotiation.
    SslPolicyName:
      type: string
    SslPolicyNames:
      type: array
      items:
        $ref: '#/components/schemas/SslPolicyName'
    SslProtocol:
      type: string
    SslProtocols:
      type: array
      items:
        $ref: '#/components/schemas/SslProtocol'
    StateReason:
      type: string
    String:
      type: string
    StringValue:
      type: string
    SubnetId:
      type: string
    SubnetNotFoundException:
      type: object
      properties: {}
      description: The specified subnet does not exist.
    Subnets:
      type: array
      items:
        $ref: '#/components/schemas/SubnetId'
    Tag:
      type: object
      required:
        - Key
      properties:
        Key:
          $ref: '#/components/schemas/TagKey'
        Value:
          $ref: '#/components/schemas/TagValue'
      description: Information about a tag.
    TagDescription:
      type: object
      properties:
        ResourceArn:
          $ref: '#/components/schemas/ResourceArn'
        Tags:
          $ref: '#/components/schemas/TagList'
      description: The tags associated with a resource.
    TagDescriptions:
      type: array
      items:
        $ref: '#/components/schemas/TagDescription'
    TagKey:
      type: string
      pattern: '^([\p{L}\p{Z}\p{N}_.:/=+\-@]*)$'
      minLength: 1
      maxLength: 128
    TagKeys:
      type: array
      items:
        $ref: '#/components/schemas/TagKey'
    TagList:
      type: array
      items:
        $ref: '#/components/schemas/Tag'
      minItems: 1
    TagValue:
      type: string
      pattern: '^([\p{L}\p{Z}\p{N}_.:/=+\-@]*)$'
      minLength: 0
      maxLength: 256
    TargetDescription:
      type: object
      required:
        - Id
      properties:
        Id:
          $ref: '#/components/schemas/TargetId'
        Port:
          $ref: '#/components/schemas/Port'
      description: Information about a target.
    TargetDescriptions:
      type: array
      items:
        $ref: '#/components/schemas/TargetDescription'
    TargetGroup:
      type: object
      properties:
        TargetGroupArn:
          $ref: '#/components/schemas/TargetGroupArn'
        TargetGroupName:
          $ref: '#/components/schemas/TargetGroupName'
        Protocol:
          $ref: '#/components/schemas/ProtocolEnum'
        Port:
          $ref: '#/components/schemas/Port'
        VpcId:
          $ref: '#/components/schemas/VpcId'
        HealthCheckProtocol:
          $ref: '#/components/schemas/ProtocolEnum'
        HealthCheckPort:
          $ref: '#/components/schemas/HealthCheckPort'
        HealthCheckIntervalSeconds:
          $ref: '#/components/schemas/HealthCheckIntervalSeconds'
        HealthCheckTimeoutSeconds:
          $ref: '#/components/schemas/HealthCheckTimeoutSeconds'
        HealthyThresholdCount:
          $ref: '#/components/schemas/HealthCheckThresholdCount'
        UnhealthyThresholdCount:
          $ref: '#/components/schemas/HealthCheckThresholdCount'
        HealthCheckPath:
          $ref: '#/components/schemas/Path'
        Matcher:
          $ref: '#/components/schemas/Matcher'
        LoadBalancerArns:
          $ref: '#/components/schemas/LoadBalancerArns'
      description: Information about a target group.
    TargetGroupArn:
      type: string
    TargetGroupArns:
      type: array
      items:
        $ref: '#/components/schemas/TargetGroupArn'
    TargetGroupAssociationLimitException:
      type: object
      properties: {}
      description: You've reached the limit on the number of load balancers per target group.
    TargetGroupAttribute:
      type: object
      properties:
        Key:
          $ref: '#/components/schemas/TargetGroupAttributeKey'
        Value:
          $ref: '#/components/schemas/TargetGroupAttributeValue'
      description: Information about a target group attribute.
    TargetGroupAttributeKey:
      type: string
      pattern: '^[a-zA-Z0-9._]+$'
      maxLength: 256
    TargetGroupAttributeValue:
      type: string
    TargetGroupAttributes:
      type: array
      items:
        $ref: '#/components/schemas/TargetGroupAttribute'
    TargetGroupName:
      type: string
    TargetGroupNames:
      type: array
      items:
        $ref: '#/components/schemas/TargetGroupName'
    TargetGroupNotFoundException:
      type: object
      properties: {}
      description: The specified target group does not exist.
    TargetGroups:
      type: array
      items:
        $ref: '#/components/schemas/TargetGroup'
    TargetHealth:
      type: object
      properties:
        State:
          $ref: '#/components/schemas/TargetHealthStateEnum'
        Reason:
          $ref: '#/components/schemas/TargetHealthReasonEnum'
        Description:
          $ref: '#/components/schemas/Description'
      description: Information about the current health of a target.
    TargetHealthDescription:
      type: object
      properties:
        Target:
          $ref: '#/components/schemas/TargetDescription'
        HealthCheckPort:
          $ref: '#/components/schemas/HealthCheckPort'
        TargetHealth:
          $ref: '#/components/schemas/TargetHealth'
      description: Information about the health of a target.
    TargetHealthDescriptions:
      type: array
      items:
        $ref: '#/components/schemas/TargetHealthDescription'
    TargetHealthReasonEnum:
      type: string
      enum:
        - Elb.RegistrationInProgress
        - Elb.InitialHealthChecking
        - Target.ResponseCodeMismatch
        - Target.Timeout
        - Target.FailedHealthChecks
        - Target.NotRegistered
        - Target.NotInUse
        - Target.DeregistrationInProgress
        - Target.InvalidState
        - Elb.InternalError
    TargetHealthStateEnum:
      type: string
      enum:
        - initial
        - healthy
        - unhealthy
        - unused
        - draining
    TargetId:
      type: string
    TooManyCertificatesException:
      type: object
      properties: {}
      description: You've reached the limit on the number of certificates per listener.
    TooManyListenersException:
      type: object
      properties: {}
      description: You've reached the limit on the number of listeners per load balancer.
    TooManyLoadBalancersException:
      type: object
      properties: {}
      description: You've reached the limit on the number of load balancers for your AWS account.
    TooManyRegistrationsForTargetIdException:
      type: object
      properties: {}
      description: You've reached the limit on the number of times a target can be registered with a load balancer.
    TooManyRulesException:
      type: object
      properties: {}
      description: You've reached the limit on the number of rules per load balancer.
    TooManyTagsException:
      type: object
      properties: {}
      description: You've reached the limit on the number of tags per load balancer.
    TooManyTargetGroupsException:
      type: object
      properties: {}
      description: You've reached the limit on the number of target groups for your AWS account.
    TooManyTargetsException:
      type: object
      properties: {}
      description: You've reached the limit on the number of targets.
    UnsupportedProtocolException:
      type: object
      properties: {}
      description: The specified protocol is not supported.
    VpcId:
      type: string
    ZoneName:
      type: string
  parameters:
    Action:
      name: Action
      in: header
      required: true
      schema:
        type: string
    Version:
      name: Version
      in: header
      required: true
      schema:
        type: string
    X-Amz-Content-Sha256:
      name: X-Amz-Content-Sha256
      in: header
      required: false
      schema:
        type: string
    X-Amz-Date:
      name: X-Amz-Date
      in: header
      required: false
      schema:
        type: string
    X-Amz-Algorithm:
      name: X-Amz-Algorithm
      in: header
      required: false
      schema:
        type: string
    X-Amz-Credential:
      name: X-Amz-Credential
      in: header
      required: false
      schema:
        type: string
    X-Amz-Security-Token:
      name: X-Amz-Security-Token
      in: header
      required: false
      schema:
        type: string
    X-Amz-Signature:
      name: X-Amz-Signature
      in: header
      required: false
      schema:
        type: string
    X-Amz-SignedHeaders:
      name: X-Amz-SignedHeaders
      in: header
      required: false
      schema:
        type: string
  securitySchemes:
    hmac:
      type: apiKey
      name: Authorization
      in: header
      description: Amazon Signature authorization v4
      x-amazon-apigateway-authtype: awsSigv4
