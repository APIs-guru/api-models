swagger: '2.0'
info:
  version: '2017-03-31'
  x-release: v4
  title: AWS Glue
  description: <fullname>AWS Glue</fullname> <p>Defines the public endpoint for the AWS Glue service.</p>
  x-logo:
    url: 'https://twitter.com/awscloud/profile_image?size=original'
    backgroundColor: '#FFFFFF'
  termsOfService: 'https://aws.amazon.com/service-terms/'
  contact:
    name: Mike Ralphson
    email: mike.ralphson@gmail.com
    url: 'https://github.com/mermade/aws2openapi'
    x-twitter: PermittedSoc
  license:
    name: Apache 2.0 License
    url: 'http://www.apache.org/licenses/'
  x-providerName: amazonaws.com
  x-serviceName: glue
  x-origin:
    - contentType: application/json
      url: 'https://raw.githubusercontent.com/aws/aws-sdk-js/master/apis/glue-2017-03-31.normal.json'
      converter:
        url: 'https://github.com/mermade/aws2openapi'
        version: 1.0.0
      x-apisguru-direct: true
  x-apiClientRegistration:
    url: 'https://portal.aws.amazon.com/gp/aws/developer/registration/index.html?nc2=h_ct'
  x-apisguru-categories:
    - cloud
  x-preferred: true
externalDocs:
  description: Amazon Web Services documentation
  url: 'https://aws.amazon.com/glue/'
host: glue.amazonaws.com
basePath: /
x-hasEquivalentPaths: true
schemes:
  - https
  - http
consumes:
  - application/json
produces:
  - application/json
parameters:
  Action:
    name: Action
    in: header
    type: string
    required: true
  Version:
    name: Version
    in: header
    type: string
    required: true
  X-Amz-Content-Sha256:
    name: X-Amz-Content-Sha256
    in: header
    type: string
    required: false
  X-Amz-Date:
    name: X-Amz-Date
    in: header
    type: string
    required: false
  X-Amz-Algorithm:
    name: X-Amz-Algorithm
    in: header
    type: string
    required: false
  X-Amz-Credential:
    name: X-Amz-Credential
    in: header
    type: string
    required: false
  X-Amz-Security-Token:
    name: X-Amz-Security-Token
    in: header
    type: string
    required: false
  X-Amz-Signature:
    name: X-Amz-Signature
    in: header
    type: string
    required: false
  X-Amz-SignedHeaders:
    name: X-Amz-SignedHeaders
    in: header
    type: string
    required: false
securityDefinitions:
  hmac:
    type: apiKey
    name: Authorization
    in: header
    description: Amazon Signature authorization v4
    x-amazon-apigateway-authtype: awsSigv4
security:
  - hmac: []
paths:
  /:
    post:
      operationId: BatchCreatePartition
      description: Creates one or more partitions in a batch operation.
      responses:
        '200':
          description: Success
          schema:
            $ref: '#/definitions/BatchCreatePartitionResponse'
        '480':
          description: InvalidInputException
          schema:
            $ref: '#/definitions/InvalidInputException'
        '481':
          description: AlreadyExistsException
          schema:
            $ref: '#/definitions/AlreadyExistsException'
        '482':
          description: ResourceNumberLimitExceededException
          schema:
            $ref: '#/definitions/ResourceNumberLimitExceededException'
        '483':
          description: InternalServiceException
          schema:
            $ref: '#/definitions/InternalServiceException'
        '484':
          description: EntityNotFoundException
          schema:
            $ref: '#/definitions/EntityNotFoundException'
        '485':
          description: OperationTimeoutException
          schema:
            $ref: '#/definitions/OperationTimeoutException'
      parameters:
        - name: body
          in: body
          required: true
          schema:
            $ref: '#/definitions/BatchCreatePartitionRequest'
    parameters:
      - $ref: '#/parameters/Action'
      - $ref: '#/parameters/Version'
      - $ref: '#/parameters/X-Amz-Content-Sha256'
      - $ref: '#/parameters/X-Amz-Date'
      - $ref: '#/parameters/X-Amz-Algorithm'
      - $ref: '#/parameters/X-Amz-Credential'
      - $ref: '#/parameters/X-Amz-Security-Token'
      - $ref: '#/parameters/X-Amz-Signature'
      - $ref: '#/parameters/X-Amz-SignedHeaders'
  '/#BatchDeleteConnection':
    post:
      operationId: BatchDeleteConnection
      description: Deletes a list of connection definitions from the Data Catalog.
      responses:
        '200':
          description: Success
          schema:
            $ref: '#/definitions/BatchDeleteConnectionResponse'
        '480':
          description: InternalServiceException
          schema:
            $ref: '#/definitions/InternalServiceException'
        '481':
          description: OperationTimeoutException
          schema:
            $ref: '#/definitions/OperationTimeoutException'
      parameters:
        - name: body
          in: body
          required: true
          schema:
            $ref: '#/definitions/BatchDeleteConnectionRequest'
    parameters:
      - $ref: '#/parameters/Action'
      - $ref: '#/parameters/Version'
      - $ref: '#/parameters/X-Amz-Content-Sha256'
      - $ref: '#/parameters/X-Amz-Date'
      - $ref: '#/parameters/X-Amz-Algorithm'
      - $ref: '#/parameters/X-Amz-Credential'
      - $ref: '#/parameters/X-Amz-Security-Token'
      - $ref: '#/parameters/X-Amz-Signature'
      - $ref: '#/parameters/X-Amz-SignedHeaders'
  '/#BatchDeletePartition':
    post:
      operationId: BatchDeletePartition
      description: Deletes one or more partitions in a batch operation.
      responses:
        '200':
          description: Success
          schema:
            $ref: '#/definitions/BatchDeletePartitionResponse'
        '480':
          description: InvalidInputException
          schema:
            $ref: '#/definitions/InvalidInputException'
        '481':
          description: EntityNotFoundException
          schema:
            $ref: '#/definitions/EntityNotFoundException'
        '482':
          description: InternalServiceException
          schema:
            $ref: '#/definitions/InternalServiceException'
        '483':
          description: OperationTimeoutException
          schema:
            $ref: '#/definitions/OperationTimeoutException'
      parameters:
        - name: body
          in: body
          required: true
          schema:
            $ref: '#/definitions/BatchDeletePartitionRequest'
    parameters:
      - $ref: '#/parameters/Action'
      - $ref: '#/parameters/Version'
      - $ref: '#/parameters/X-Amz-Content-Sha256'
      - $ref: '#/parameters/X-Amz-Date'
      - $ref: '#/parameters/X-Amz-Algorithm'
      - $ref: '#/parameters/X-Amz-Credential'
      - $ref: '#/parameters/X-Amz-Security-Token'
      - $ref: '#/parameters/X-Amz-Signature'
      - $ref: '#/parameters/X-Amz-SignedHeaders'
  '/#BatchDeleteTable':
    post:
      operationId: BatchDeleteTable
      description: Deletes multiple tables at once.
      responses:
        '200':
          description: Success
          schema:
            $ref: '#/definitions/BatchDeleteTableResponse'
        '480':
          description: InvalidInputException
          schema:
            $ref: '#/definitions/InvalidInputException'
        '481':
          description: EntityNotFoundException
          schema:
            $ref: '#/definitions/EntityNotFoundException'
        '482':
          description: InternalServiceException
          schema:
            $ref: '#/definitions/InternalServiceException'
        '483':
          description: OperationTimeoutException
          schema:
            $ref: '#/definitions/OperationTimeoutException'
      parameters:
        - name: body
          in: body
          required: true
          schema:
            $ref: '#/definitions/BatchDeleteTableRequest'
    parameters:
      - $ref: '#/parameters/Action'
      - $ref: '#/parameters/Version'
      - $ref: '#/parameters/X-Amz-Content-Sha256'
      - $ref: '#/parameters/X-Amz-Date'
      - $ref: '#/parameters/X-Amz-Algorithm'
      - $ref: '#/parameters/X-Amz-Credential'
      - $ref: '#/parameters/X-Amz-Security-Token'
      - $ref: '#/parameters/X-Amz-Signature'
      - $ref: '#/parameters/X-Amz-SignedHeaders'
  '/#BatchDeleteTableVersion':
    post:
      operationId: BatchDeleteTableVersion
      description: Deletes a specified batch of versions of a table.
      responses:
        '200':
          description: Success
          schema:
            $ref: '#/definitions/BatchDeleteTableVersionResponse'
        '480':
          description: EntityNotFoundException
          schema:
            $ref: '#/definitions/EntityNotFoundException'
        '481':
          description: InvalidInputException
          schema:
            $ref: '#/definitions/InvalidInputException'
        '482':
          description: InternalServiceException
          schema:
            $ref: '#/definitions/InternalServiceException'
        '483':
          description: OperationTimeoutException
          schema:
            $ref: '#/definitions/OperationTimeoutException'
      parameters:
        - name: body
          in: body
          required: true
          schema:
            $ref: '#/definitions/BatchDeleteTableVersionRequest'
    parameters:
      - $ref: '#/parameters/Action'
      - $ref: '#/parameters/Version'
      - $ref: '#/parameters/X-Amz-Content-Sha256'
      - $ref: '#/parameters/X-Amz-Date'
      - $ref: '#/parameters/X-Amz-Algorithm'
      - $ref: '#/parameters/X-Amz-Credential'
      - $ref: '#/parameters/X-Amz-Security-Token'
      - $ref: '#/parameters/X-Amz-Signature'
      - $ref: '#/parameters/X-Amz-SignedHeaders'
  '/#BatchGetPartition':
    post:
      operationId: BatchGetPartition
      description: Retrieves partitions in a batch request.
      responses:
        '200':
          description: Success
          schema:
            $ref: '#/definitions/BatchGetPartitionResponse'
        '480':
          description: InvalidInputException
          schema:
            $ref: '#/definitions/InvalidInputException'
        '481':
          description: EntityNotFoundException
          schema:
            $ref: '#/definitions/EntityNotFoundException'
        '482':
          description: OperationTimeoutException
          schema:
            $ref: '#/definitions/OperationTimeoutException'
        '483':
          description: InternalServiceException
          schema:
            $ref: '#/definitions/InternalServiceException'
      parameters:
        - name: body
          in: body
          required: true
          schema:
            $ref: '#/definitions/BatchGetPartitionRequest'
    parameters:
      - $ref: '#/parameters/Action'
      - $ref: '#/parameters/Version'
      - $ref: '#/parameters/X-Amz-Content-Sha256'
      - $ref: '#/parameters/X-Amz-Date'
      - $ref: '#/parameters/X-Amz-Algorithm'
      - $ref: '#/parameters/X-Amz-Credential'
      - $ref: '#/parameters/X-Amz-Security-Token'
      - $ref: '#/parameters/X-Amz-Signature'
      - $ref: '#/parameters/X-Amz-SignedHeaders'
  '/#BatchStopJobRun':
    post:
      operationId: BatchStopJobRun
      description: Stops one or more job runs for a specified Job.
      responses:
        '200':
          description: Success
          schema:
            $ref: '#/definitions/BatchStopJobRunResponse'
        '480':
          description: InvalidInputException
          schema:
            $ref: '#/definitions/InvalidInputException'
        '481':
          description: InternalServiceException
          schema:
            $ref: '#/definitions/InternalServiceException'
        '482':
          description: OperationTimeoutException
          schema:
            $ref: '#/definitions/OperationTimeoutException'
      parameters:
        - name: body
          in: body
          required: true
          schema:
            $ref: '#/definitions/BatchStopJobRunRequest'
    parameters:
      - $ref: '#/parameters/Action'
      - $ref: '#/parameters/Version'
      - $ref: '#/parameters/X-Amz-Content-Sha256'
      - $ref: '#/parameters/X-Amz-Date'
      - $ref: '#/parameters/X-Amz-Algorithm'
      - $ref: '#/parameters/X-Amz-Credential'
      - $ref: '#/parameters/X-Amz-Security-Token'
      - $ref: '#/parameters/X-Amz-Signature'
      - $ref: '#/parameters/X-Amz-SignedHeaders'
  '/#CreateClassifier':
    post:
      operationId: CreateClassifier
      description: 'Creates a classifier in the user''s account. This may be a <code>GrokClassifier</code>, an <code>XMLClassifier</code>, or abbrev <code>JsonClassifier</code>, depending on which field of the request is present.'
      responses:
        '200':
          description: Success
          schema:
            $ref: '#/definitions/CreateClassifierResponse'
        '480':
          description: AlreadyExistsException
          schema:
            $ref: '#/definitions/AlreadyExistsException'
        '481':
          description: InvalidInputException
          schema:
            $ref: '#/definitions/InvalidInputException'
        '482':
          description: OperationTimeoutException
          schema:
            $ref: '#/definitions/OperationTimeoutException'
      parameters:
        - name: body
          in: body
          required: true
          schema:
            $ref: '#/definitions/CreateClassifierRequest'
    parameters:
      - $ref: '#/parameters/Action'
      - $ref: '#/parameters/Version'
      - $ref: '#/parameters/X-Amz-Content-Sha256'
      - $ref: '#/parameters/X-Amz-Date'
      - $ref: '#/parameters/X-Amz-Algorithm'
      - $ref: '#/parameters/X-Amz-Credential'
      - $ref: '#/parameters/X-Amz-Security-Token'
      - $ref: '#/parameters/X-Amz-Signature'
      - $ref: '#/parameters/X-Amz-SignedHeaders'
  '/#CreateConnection':
    post:
      operationId: CreateConnection
      description: Creates a connection definition in the Data Catalog.
      responses:
        '200':
          description: Success
          schema:
            $ref: '#/definitions/CreateConnectionResponse'
        '480':
          description: AlreadyExistsException
          schema:
            $ref: '#/definitions/AlreadyExistsException'
        '481':
          description: InvalidInputException
          schema:
            $ref: '#/definitions/InvalidInputException'
        '482':
          description: OperationTimeoutException
          schema:
            $ref: '#/definitions/OperationTimeoutException'
        '483':
          description: ResourceNumberLimitExceededException
          schema:
            $ref: '#/definitions/ResourceNumberLimitExceededException'
      parameters:
        - name: body
          in: body
          required: true
          schema:
            $ref: '#/definitions/CreateConnectionRequest'
    parameters:
      - $ref: '#/parameters/Action'
      - $ref: '#/parameters/Version'
      - $ref: '#/parameters/X-Amz-Content-Sha256'
      - $ref: '#/parameters/X-Amz-Date'
      - $ref: '#/parameters/X-Amz-Algorithm'
      - $ref: '#/parameters/X-Amz-Credential'
      - $ref: '#/parameters/X-Amz-Security-Token'
      - $ref: '#/parameters/X-Amz-Signature'
      - $ref: '#/parameters/X-Amz-SignedHeaders'
  '/#CreateCrawler':
    post:
      operationId: CreateCrawler
      description: 'Creates a new crawler with specified targets, role, configuration, and optional schedule. At least one crawl target must be specified, in either the <i>s3Targets</i> or the <i>jdbcTargets</i> field.'
      responses:
        '200':
          description: Success
          schema:
            $ref: '#/definitions/CreateCrawlerResponse'
        '480':
          description: InvalidInputException
          schema:
            $ref: '#/definitions/InvalidInputException'
        '481':
          description: AlreadyExistsException
          schema:
            $ref: '#/definitions/AlreadyExistsException'
        '482':
          description: OperationTimeoutException
          schema:
            $ref: '#/definitions/OperationTimeoutException'
        '483':
          description: ResourceNumberLimitExceededException
          schema:
            $ref: '#/definitions/ResourceNumberLimitExceededException'
      parameters:
        - name: body
          in: body
          required: true
          schema:
            $ref: '#/definitions/CreateCrawlerRequest'
    parameters:
      - $ref: '#/parameters/Action'
      - $ref: '#/parameters/Version'
      - $ref: '#/parameters/X-Amz-Content-Sha256'
      - $ref: '#/parameters/X-Amz-Date'
      - $ref: '#/parameters/X-Amz-Algorithm'
      - $ref: '#/parameters/X-Amz-Credential'
      - $ref: '#/parameters/X-Amz-Security-Token'
      - $ref: '#/parameters/X-Amz-Signature'
      - $ref: '#/parameters/X-Amz-SignedHeaders'
  '/#CreateDatabase':
    post:
      operationId: CreateDatabase
      description: Creates a new database in a Data Catalog.
      responses:
        '200':
          description: Success
          schema:
            $ref: '#/definitions/CreateDatabaseResponse'
        '480':
          description: InvalidInputException
          schema:
            $ref: '#/definitions/InvalidInputException'
        '481':
          description: AlreadyExistsException
          schema:
            $ref: '#/definitions/AlreadyExistsException'
        '482':
          description: ResourceNumberLimitExceededException
          schema:
            $ref: '#/definitions/ResourceNumberLimitExceededException'
        '483':
          description: InternalServiceException
          schema:
            $ref: '#/definitions/InternalServiceException'
        '484':
          description: OperationTimeoutException
          schema:
            $ref: '#/definitions/OperationTimeoutException'
      parameters:
        - name: body
          in: body
          required: true
          schema:
            $ref: '#/definitions/CreateDatabaseRequest'
    parameters:
      - $ref: '#/parameters/Action'
      - $ref: '#/parameters/Version'
      - $ref: '#/parameters/X-Amz-Content-Sha256'
      - $ref: '#/parameters/X-Amz-Date'
      - $ref: '#/parameters/X-Amz-Algorithm'
      - $ref: '#/parameters/X-Amz-Credential'
      - $ref: '#/parameters/X-Amz-Security-Token'
      - $ref: '#/parameters/X-Amz-Signature'
      - $ref: '#/parameters/X-Amz-SignedHeaders'
  '/#CreateDevEndpoint':
    post:
      operationId: CreateDevEndpoint
      description: Creates a new DevEndpoint.
      responses:
        '200':
          description: Success
          schema:
            $ref: '#/definitions/CreateDevEndpointResponse'
        '480':
          description: AccessDeniedException
          schema:
            $ref: '#/definitions/AccessDeniedException'
        '481':
          description: AlreadyExistsException
          schema:
            $ref: '#/definitions/AlreadyExistsException'
        '482':
          description: IdempotentParameterMismatchException
          schema:
            $ref: '#/definitions/IdempotentParameterMismatchException'
        '483':
          description: InternalServiceException
          schema:
            $ref: '#/definitions/InternalServiceException'
        '484':
          description: OperationTimeoutException
          schema:
            $ref: '#/definitions/OperationTimeoutException'
        '485':
          description: InvalidInputException
          schema:
            $ref: '#/definitions/InvalidInputException'
        '486':
          description: ValidationException
          schema:
            $ref: '#/definitions/ValidationException'
        '487':
          description: ResourceNumberLimitExceededException
          schema:
            $ref: '#/definitions/ResourceNumberLimitExceededException'
      parameters:
        - name: body
          in: body
          required: true
          schema:
            $ref: '#/definitions/CreateDevEndpointRequest'
    parameters:
      - $ref: '#/parameters/Action'
      - $ref: '#/parameters/Version'
      - $ref: '#/parameters/X-Amz-Content-Sha256'
      - $ref: '#/parameters/X-Amz-Date'
      - $ref: '#/parameters/X-Amz-Algorithm'
      - $ref: '#/parameters/X-Amz-Credential'
      - $ref: '#/parameters/X-Amz-Security-Token'
      - $ref: '#/parameters/X-Amz-Signature'
      - $ref: '#/parameters/X-Amz-SignedHeaders'
  '/#CreateJob':
    post:
      operationId: CreateJob
      description: Creates a new job.
      responses:
        '200':
          description: Success
          schema:
            $ref: '#/definitions/CreateJobResponse'
        '480':
          description: InvalidInputException
          schema:
            $ref: '#/definitions/InvalidInputException'
        '481':
          description: IdempotentParameterMismatchException
          schema:
            $ref: '#/definitions/IdempotentParameterMismatchException'
        '482':
          description: AlreadyExistsException
          schema:
            $ref: '#/definitions/AlreadyExistsException'
        '483':
          description: InternalServiceException
          schema:
            $ref: '#/definitions/InternalServiceException'
        '484':
          description: OperationTimeoutException
          schema:
            $ref: '#/definitions/OperationTimeoutException'
        '485':
          description: ResourceNumberLimitExceededException
          schema:
            $ref: '#/definitions/ResourceNumberLimitExceededException'
        '486':
          description: ConcurrentModificationException
          schema:
            $ref: '#/definitions/ConcurrentModificationException'
      parameters:
        - name: body
          in: body
          required: true
          schema:
            $ref: '#/definitions/CreateJobRequest'
    parameters:
      - $ref: '#/parameters/Action'
      - $ref: '#/parameters/Version'
      - $ref: '#/parameters/X-Amz-Content-Sha256'
      - $ref: '#/parameters/X-Amz-Date'
      - $ref: '#/parameters/X-Amz-Algorithm'
      - $ref: '#/parameters/X-Amz-Credential'
      - $ref: '#/parameters/X-Amz-Security-Token'
      - $ref: '#/parameters/X-Amz-Signature'
      - $ref: '#/parameters/X-Amz-SignedHeaders'
  '/#CreatePartition':
    post:
      operationId: CreatePartition
      description: Creates a new partition.
      responses:
        '200':
          description: Success
          schema:
            $ref: '#/definitions/CreatePartitionResponse'
        '480':
          description: InvalidInputException
          schema:
            $ref: '#/definitions/InvalidInputException'
        '481':
          description: AlreadyExistsException
          schema:
            $ref: '#/definitions/AlreadyExistsException'
        '482':
          description: ResourceNumberLimitExceededException
          schema:
            $ref: '#/definitions/ResourceNumberLimitExceededException'
        '483':
          description: InternalServiceException
          schema:
            $ref: '#/definitions/InternalServiceException'
        '484':
          description: EntityNotFoundException
          schema:
            $ref: '#/definitions/EntityNotFoundException'
        '485':
          description: OperationTimeoutException
          schema:
            $ref: '#/definitions/OperationTimeoutException'
      parameters:
        - name: body
          in: body
          required: true
          schema:
            $ref: '#/definitions/CreatePartitionRequest'
    parameters:
      - $ref: '#/parameters/Action'
      - $ref: '#/parameters/Version'
      - $ref: '#/parameters/X-Amz-Content-Sha256'
      - $ref: '#/parameters/X-Amz-Date'
      - $ref: '#/parameters/X-Amz-Algorithm'
      - $ref: '#/parameters/X-Amz-Credential'
      - $ref: '#/parameters/X-Amz-Security-Token'
      - $ref: '#/parameters/X-Amz-Signature'
      - $ref: '#/parameters/X-Amz-SignedHeaders'
  '/#CreateScript':
    post:
      operationId: CreateScript
      description: Transforms a directed acyclic graph (DAG) into code.
      responses:
        '200':
          description: Success
          schema:
            $ref: '#/definitions/CreateScriptResponse'
        '480':
          description: InvalidInputException
          schema:
            $ref: '#/definitions/InvalidInputException'
        '481':
          description: InternalServiceException
          schema:
            $ref: '#/definitions/InternalServiceException'
        '482':
          description: OperationTimeoutException
          schema:
            $ref: '#/definitions/OperationTimeoutException'
      parameters:
        - name: body
          in: body
          required: true
          schema:
            $ref: '#/definitions/CreateScriptRequest'
    parameters:
      - $ref: '#/parameters/Action'
      - $ref: '#/parameters/Version'
      - $ref: '#/parameters/X-Amz-Content-Sha256'
      - $ref: '#/parameters/X-Amz-Date'
      - $ref: '#/parameters/X-Amz-Algorithm'
      - $ref: '#/parameters/X-Amz-Credential'
      - $ref: '#/parameters/X-Amz-Security-Token'
      - $ref: '#/parameters/X-Amz-Signature'
      - $ref: '#/parameters/X-Amz-SignedHeaders'
  '/#CreateTable':
    post:
      operationId: CreateTable
      description: Creates a new table definition in the Data Catalog.
      responses:
        '200':
          description: Success
          schema:
            $ref: '#/definitions/CreateTableResponse'
        '480':
          description: AlreadyExistsException
          schema:
            $ref: '#/definitions/AlreadyExistsException'
        '481':
          description: InvalidInputException
          schema:
            $ref: '#/definitions/InvalidInputException'
        '482':
          description: EntityNotFoundException
          schema:
            $ref: '#/definitions/EntityNotFoundException'
        '483':
          description: ResourceNumberLimitExceededException
          schema:
            $ref: '#/definitions/ResourceNumberLimitExceededException'
        '484':
          description: InternalServiceException
          schema:
            $ref: '#/definitions/InternalServiceException'
        '485':
          description: OperationTimeoutException
          schema:
            $ref: '#/definitions/OperationTimeoutException'
      parameters:
        - name: body
          in: body
          required: true
          schema:
            $ref: '#/definitions/CreateTableRequest'
    parameters:
      - $ref: '#/parameters/Action'
      - $ref: '#/parameters/Version'
      - $ref: '#/parameters/X-Amz-Content-Sha256'
      - $ref: '#/parameters/X-Amz-Date'
      - $ref: '#/parameters/X-Amz-Algorithm'
      - $ref: '#/parameters/X-Amz-Credential'
      - $ref: '#/parameters/X-Amz-Security-Token'
      - $ref: '#/parameters/X-Amz-Signature'
      - $ref: '#/parameters/X-Amz-SignedHeaders'
  '/#CreateTrigger':
    post:
      operationId: CreateTrigger
      description: Creates a new trigger.
      responses:
        '200':
          description: Success
          schema:
            $ref: '#/definitions/CreateTriggerResponse'
        '480':
          description: AlreadyExistsException
          schema:
            $ref: '#/definitions/AlreadyExistsException'
        '481':
          description: InvalidInputException
          schema:
            $ref: '#/definitions/InvalidInputException'
        '482':
          description: IdempotentParameterMismatchException
          schema:
            $ref: '#/definitions/IdempotentParameterMismatchException'
        '483':
          description: InternalServiceException
          schema:
            $ref: '#/definitions/InternalServiceException'
        '484':
          description: OperationTimeoutException
          schema:
            $ref: '#/definitions/OperationTimeoutException'
        '485':
          description: ResourceNumberLimitExceededException
          schema:
            $ref: '#/definitions/ResourceNumberLimitExceededException'
        '486':
          description: ConcurrentModificationException
          schema:
            $ref: '#/definitions/ConcurrentModificationException'
      parameters:
        - name: body
          in: body
          required: true
          schema:
            $ref: '#/definitions/CreateTriggerRequest'
    parameters:
      - $ref: '#/parameters/Action'
      - $ref: '#/parameters/Version'
      - $ref: '#/parameters/X-Amz-Content-Sha256'
      - $ref: '#/parameters/X-Amz-Date'
      - $ref: '#/parameters/X-Amz-Algorithm'
      - $ref: '#/parameters/X-Amz-Credential'
      - $ref: '#/parameters/X-Amz-Security-Token'
      - $ref: '#/parameters/X-Amz-Signature'
      - $ref: '#/parameters/X-Amz-SignedHeaders'
  '/#CreateUserDefinedFunction':
    post:
      operationId: CreateUserDefinedFunction
      description: Creates a new function definition in the Data Catalog.
      responses:
        '200':
          description: Success
          schema:
            $ref: '#/definitions/CreateUserDefinedFunctionResponse'
        '480':
          description: AlreadyExistsException
          schema:
            $ref: '#/definitions/AlreadyExistsException'
        '481':
          description: InvalidInputException
          schema:
            $ref: '#/definitions/InvalidInputException'
        '482':
          description: InternalServiceException
          schema:
            $ref: '#/definitions/InternalServiceException'
        '483':
          description: EntityNotFoundException
          schema:
            $ref: '#/definitions/EntityNotFoundException'
        '484':
          description: OperationTimeoutException
          schema:
            $ref: '#/definitions/OperationTimeoutException'
        '485':
          description: ResourceNumberLimitExceededException
          schema:
            $ref: '#/definitions/ResourceNumberLimitExceededException'
      parameters:
        - name: body
          in: body
          required: true
          schema:
            $ref: '#/definitions/CreateUserDefinedFunctionRequest'
    parameters:
      - $ref: '#/parameters/Action'
      - $ref: '#/parameters/Version'
      - $ref: '#/parameters/X-Amz-Content-Sha256'
      - $ref: '#/parameters/X-Amz-Date'
      - $ref: '#/parameters/X-Amz-Algorithm'
      - $ref: '#/parameters/X-Amz-Credential'
      - $ref: '#/parameters/X-Amz-Security-Token'
      - $ref: '#/parameters/X-Amz-Signature'
      - $ref: '#/parameters/X-Amz-SignedHeaders'
  '/#DeleteClassifier':
    post:
      operationId: DeleteClassifier
      description: Removes a classifier from the Data Catalog.
      responses:
        '200':
          description: Success
          schema:
            $ref: '#/definitions/DeleteClassifierResponse'
        '480':
          description: EntityNotFoundException
          schema:
            $ref: '#/definitions/EntityNotFoundException'
        '481':
          description: OperationTimeoutException
          schema:
            $ref: '#/definitions/OperationTimeoutException'
      parameters:
        - name: body
          in: body
          required: true
          schema:
            $ref: '#/definitions/DeleteClassifierRequest'
    parameters:
      - $ref: '#/parameters/Action'
      - $ref: '#/parameters/Version'
      - $ref: '#/parameters/X-Amz-Content-Sha256'
      - $ref: '#/parameters/X-Amz-Date'
      - $ref: '#/parameters/X-Amz-Algorithm'
      - $ref: '#/parameters/X-Amz-Credential'
      - $ref: '#/parameters/X-Amz-Security-Token'
      - $ref: '#/parameters/X-Amz-Signature'
      - $ref: '#/parameters/X-Amz-SignedHeaders'
  '/#DeleteConnection':
    post:
      operationId: DeleteConnection
      description: Deletes a connection from the Data Catalog.
      responses:
        '200':
          description: Success
          schema:
            $ref: '#/definitions/DeleteConnectionResponse'
        '480':
          description: EntityNotFoundException
          schema:
            $ref: '#/definitions/EntityNotFoundException'
        '481':
          description: OperationTimeoutException
          schema:
            $ref: '#/definitions/OperationTimeoutException'
      parameters:
        - name: body
          in: body
          required: true
          schema:
            $ref: '#/definitions/DeleteConnectionRequest'
    parameters:
      - $ref: '#/parameters/Action'
      - $ref: '#/parameters/Version'
      - $ref: '#/parameters/X-Amz-Content-Sha256'
      - $ref: '#/parameters/X-Amz-Date'
      - $ref: '#/parameters/X-Amz-Algorithm'
      - $ref: '#/parameters/X-Amz-Credential'
      - $ref: '#/parameters/X-Amz-Security-Token'
      - $ref: '#/parameters/X-Amz-Signature'
      - $ref: '#/parameters/X-Amz-SignedHeaders'
  '/#DeleteCrawler':
    post:
      operationId: DeleteCrawler
      description: 'Removes a specified crawler from the Data Catalog, unless the crawler state is <code>RUNNING</code>.'
      responses:
        '200':
          description: Success
          schema:
            $ref: '#/definitions/DeleteCrawlerResponse'
        '480':
          description: EntityNotFoundException
          schema:
            $ref: '#/definitions/EntityNotFoundException'
        '481':
          description: CrawlerRunningException
          schema:
            $ref: '#/definitions/CrawlerRunningException'
        '482':
          description: SchedulerTransitioningException
          schema:
            $ref: '#/definitions/SchedulerTransitioningException'
        '483':
          description: OperationTimeoutException
          schema:
            $ref: '#/definitions/OperationTimeoutException'
      parameters:
        - name: body
          in: body
          required: true
          schema:
            $ref: '#/definitions/DeleteCrawlerRequest'
    parameters:
      - $ref: '#/parameters/Action'
      - $ref: '#/parameters/Version'
      - $ref: '#/parameters/X-Amz-Content-Sha256'
      - $ref: '#/parameters/X-Amz-Date'
      - $ref: '#/parameters/X-Amz-Algorithm'
      - $ref: '#/parameters/X-Amz-Credential'
      - $ref: '#/parameters/X-Amz-Security-Token'
      - $ref: '#/parameters/X-Amz-Signature'
      - $ref: '#/parameters/X-Amz-SignedHeaders'
  '/#DeleteDatabase':
    post:
      operationId: DeleteDatabase
      description: Removes a specified Database from a Data Catalog.
      responses:
        '200':
          description: Success
          schema:
            $ref: '#/definitions/DeleteDatabaseResponse'
        '480':
          description: EntityNotFoundException
          schema:
            $ref: '#/definitions/EntityNotFoundException'
        '481':
          description: InvalidInputException
          schema:
            $ref: '#/definitions/InvalidInputException'
        '482':
          description: InternalServiceException
          schema:
            $ref: '#/definitions/InternalServiceException'
        '483':
          description: OperationTimeoutException
          schema:
            $ref: '#/definitions/OperationTimeoutException'
      parameters:
        - name: body
          in: body
          required: true
          schema:
            $ref: '#/definitions/DeleteDatabaseRequest'
    parameters:
      - $ref: '#/parameters/Action'
      - $ref: '#/parameters/Version'
      - $ref: '#/parameters/X-Amz-Content-Sha256'
      - $ref: '#/parameters/X-Amz-Date'
      - $ref: '#/parameters/X-Amz-Algorithm'
      - $ref: '#/parameters/X-Amz-Credential'
      - $ref: '#/parameters/X-Amz-Security-Token'
      - $ref: '#/parameters/X-Amz-Signature'
      - $ref: '#/parameters/X-Amz-SignedHeaders'
  '/#DeleteDevEndpoint':
    post:
      operationId: DeleteDevEndpoint
      description: Deletes a specified DevEndpoint.
      responses:
        '200':
          description: Success
          schema:
            $ref: '#/definitions/DeleteDevEndpointResponse'
        '480':
          description: EntityNotFoundException
          schema:
            $ref: '#/definitions/EntityNotFoundException'
        '481':
          description: InternalServiceException
          schema:
            $ref: '#/definitions/InternalServiceException'
        '482':
          description: OperationTimeoutException
          schema:
            $ref: '#/definitions/OperationTimeoutException'
        '483':
          description: InvalidInputException
          schema:
            $ref: '#/definitions/InvalidInputException'
      parameters:
        - name: body
          in: body
          required: true
          schema:
            $ref: '#/definitions/DeleteDevEndpointRequest'
    parameters:
      - $ref: '#/parameters/Action'
      - $ref: '#/parameters/Version'
      - $ref: '#/parameters/X-Amz-Content-Sha256'
      - $ref: '#/parameters/X-Amz-Date'
      - $ref: '#/parameters/X-Amz-Algorithm'
      - $ref: '#/parameters/X-Amz-Credential'
      - $ref: '#/parameters/X-Amz-Security-Token'
      - $ref: '#/parameters/X-Amz-Signature'
      - $ref: '#/parameters/X-Amz-SignedHeaders'
  '/#DeleteJob':
    post:
      operationId: DeleteJob
      description: 'Deletes a specified job. If the job is not found, no exception is thrown.'
      responses:
        '200':
          description: Success
          schema:
            $ref: '#/definitions/DeleteJobResponse'
        '480':
          description: InvalidInputException
          schema:
            $ref: '#/definitions/InvalidInputException'
        '481':
          description: InternalServiceException
          schema:
            $ref: '#/definitions/InternalServiceException'
        '482':
          description: OperationTimeoutException
          schema:
            $ref: '#/definitions/OperationTimeoutException'
      parameters:
        - name: body
          in: body
          required: true
          schema:
            $ref: '#/definitions/DeleteJobRequest'
    parameters:
      - $ref: '#/parameters/Action'
      - $ref: '#/parameters/Version'
      - $ref: '#/parameters/X-Amz-Content-Sha256'
      - $ref: '#/parameters/X-Amz-Date'
      - $ref: '#/parameters/X-Amz-Algorithm'
      - $ref: '#/parameters/X-Amz-Credential'
      - $ref: '#/parameters/X-Amz-Security-Token'
      - $ref: '#/parameters/X-Amz-Signature'
      - $ref: '#/parameters/X-Amz-SignedHeaders'
  '/#DeletePartition':
    post:
      operationId: DeletePartition
      description: Deletes a specified partition.
      responses:
        '200':
          description: Success
          schema:
            $ref: '#/definitions/DeletePartitionResponse'
        '480':
          description: EntityNotFoundException
          schema:
            $ref: '#/definitions/EntityNotFoundException'
        '481':
          description: InvalidInputException
          schema:
            $ref: '#/definitions/InvalidInputException'
        '482':
          description: InternalServiceException
          schema:
            $ref: '#/definitions/InternalServiceException'
        '483':
          description: OperationTimeoutException
          schema:
            $ref: '#/definitions/OperationTimeoutException'
      parameters:
        - name: body
          in: body
          required: true
          schema:
            $ref: '#/definitions/DeletePartitionRequest'
    parameters:
      - $ref: '#/parameters/Action'
      - $ref: '#/parameters/Version'
      - $ref: '#/parameters/X-Amz-Content-Sha256'
      - $ref: '#/parameters/X-Amz-Date'
      - $ref: '#/parameters/X-Amz-Algorithm'
      - $ref: '#/parameters/X-Amz-Credential'
      - $ref: '#/parameters/X-Amz-Security-Token'
      - $ref: '#/parameters/X-Amz-Signature'
      - $ref: '#/parameters/X-Amz-SignedHeaders'
  '/#DeleteTable':
    post:
      operationId: DeleteTable
      description: Removes a table definition from the Data Catalog.
      responses:
        '200':
          description: Success
          schema:
            $ref: '#/definitions/DeleteTableResponse'
        '480':
          description: EntityNotFoundException
          schema:
            $ref: '#/definitions/EntityNotFoundException'
        '481':
          description: InvalidInputException
          schema:
            $ref: '#/definitions/InvalidInputException'
        '482':
          description: InternalServiceException
          schema:
            $ref: '#/definitions/InternalServiceException'
        '483':
          description: OperationTimeoutException
          schema:
            $ref: '#/definitions/OperationTimeoutException'
      parameters:
        - name: body
          in: body
          required: true
          schema:
            $ref: '#/definitions/DeleteTableRequest'
    parameters:
      - $ref: '#/parameters/Action'
      - $ref: '#/parameters/Version'
      - $ref: '#/parameters/X-Amz-Content-Sha256'
      - $ref: '#/parameters/X-Amz-Date'
      - $ref: '#/parameters/X-Amz-Algorithm'
      - $ref: '#/parameters/X-Amz-Credential'
      - $ref: '#/parameters/X-Amz-Security-Token'
      - $ref: '#/parameters/X-Amz-Signature'
      - $ref: '#/parameters/X-Amz-SignedHeaders'
  '/#DeleteTableVersion':
    post:
      operationId: DeleteTableVersion
      description: Deletes a specified version of a table.
      responses:
        '200':
          description: Success
          schema:
            $ref: '#/definitions/DeleteTableVersionResponse'
        '480':
          description: EntityNotFoundException
          schema:
            $ref: '#/definitions/EntityNotFoundException'
        '481':
          description: InvalidInputException
          schema:
            $ref: '#/definitions/InvalidInputException'
        '482':
          description: InternalServiceException
          schema:
            $ref: '#/definitions/InternalServiceException'
        '483':
          description: OperationTimeoutException
          schema:
            $ref: '#/definitions/OperationTimeoutException'
      parameters:
        - name: body
          in: body
          required: true
          schema:
            $ref: '#/definitions/DeleteTableVersionRequest'
    parameters:
      - $ref: '#/parameters/Action'
      - $ref: '#/parameters/Version'
      - $ref: '#/parameters/X-Amz-Content-Sha256'
      - $ref: '#/parameters/X-Amz-Date'
      - $ref: '#/parameters/X-Amz-Algorithm'
      - $ref: '#/parameters/X-Amz-Credential'
      - $ref: '#/parameters/X-Amz-Security-Token'
      - $ref: '#/parameters/X-Amz-Signature'
      - $ref: '#/parameters/X-Amz-SignedHeaders'
  '/#DeleteTrigger':
    post:
      operationId: DeleteTrigger
      description: 'Deletes a specified trigger. If the trigger is not found, no exception is thrown.'
      responses:
        '200':
          description: Success
          schema:
            $ref: '#/definitions/DeleteTriggerResponse'
        '480':
          description: InvalidInputException
          schema:
            $ref: '#/definitions/InvalidInputException'
        '481':
          description: InternalServiceException
          schema:
            $ref: '#/definitions/InternalServiceException'
        '482':
          description: OperationTimeoutException
          schema:
            $ref: '#/definitions/OperationTimeoutException'
        '483':
          description: ConcurrentModificationException
          schema:
            $ref: '#/definitions/ConcurrentModificationException'
      parameters:
        - name: body
          in: body
          required: true
          schema:
            $ref: '#/definitions/DeleteTriggerRequest'
    parameters:
      - $ref: '#/parameters/Action'
      - $ref: '#/parameters/Version'
      - $ref: '#/parameters/X-Amz-Content-Sha256'
      - $ref: '#/parameters/X-Amz-Date'
      - $ref: '#/parameters/X-Amz-Algorithm'
      - $ref: '#/parameters/X-Amz-Credential'
      - $ref: '#/parameters/X-Amz-Security-Token'
      - $ref: '#/parameters/X-Amz-Signature'
      - $ref: '#/parameters/X-Amz-SignedHeaders'
  '/#DeleteUserDefinedFunction':
    post:
      operationId: DeleteUserDefinedFunction
      description: Deletes an existing function definition from the Data Catalog.
      responses:
        '200':
          description: Success
          schema:
            $ref: '#/definitions/DeleteUserDefinedFunctionResponse'
        '480':
          description: EntityNotFoundException
          schema:
            $ref: '#/definitions/EntityNotFoundException'
        '481':
          description: InvalidInputException
          schema:
            $ref: '#/definitions/InvalidInputException'
        '482':
          description: InternalServiceException
          schema:
            $ref: '#/definitions/InternalServiceException'
        '483':
          description: OperationTimeoutException
          schema:
            $ref: '#/definitions/OperationTimeoutException'
      parameters:
        - name: body
          in: body
          required: true
          schema:
            $ref: '#/definitions/DeleteUserDefinedFunctionRequest'
    parameters:
      - $ref: '#/parameters/Action'
      - $ref: '#/parameters/Version'
      - $ref: '#/parameters/X-Amz-Content-Sha256'
      - $ref: '#/parameters/X-Amz-Date'
      - $ref: '#/parameters/X-Amz-Algorithm'
      - $ref: '#/parameters/X-Amz-Credential'
      - $ref: '#/parameters/X-Amz-Security-Token'
      - $ref: '#/parameters/X-Amz-Signature'
      - $ref: '#/parameters/X-Amz-SignedHeaders'
  '/#GetCatalogImportStatus':
    post:
      operationId: GetCatalogImportStatus
      description: Retrieves the status of a migration operation.
      responses:
        '200':
          description: Success
          schema:
            $ref: '#/definitions/GetCatalogImportStatusResponse'
        '480':
          description: InternalServiceException
          schema:
            $ref: '#/definitions/InternalServiceException'
        '481':
          description: OperationTimeoutException
          schema:
            $ref: '#/definitions/OperationTimeoutException'
      parameters:
        - name: body
          in: body
          required: true
          schema:
            $ref: '#/definitions/GetCatalogImportStatusRequest'
    parameters:
      - $ref: '#/parameters/Action'
      - $ref: '#/parameters/Version'
      - $ref: '#/parameters/X-Amz-Content-Sha256'
      - $ref: '#/parameters/X-Amz-Date'
      - $ref: '#/parameters/X-Amz-Algorithm'
      - $ref: '#/parameters/X-Amz-Credential'
      - $ref: '#/parameters/X-Amz-Security-Token'
      - $ref: '#/parameters/X-Amz-Signature'
      - $ref: '#/parameters/X-Amz-SignedHeaders'
  '/#GetClassifier':
    post:
      operationId: GetClassifier
      description: Retrieve a classifier by name.
      responses:
        '200':
          description: Success
          schema:
            $ref: '#/definitions/GetClassifierResponse'
        '480':
          description: EntityNotFoundException
          schema:
            $ref: '#/definitions/EntityNotFoundException'
        '481':
          description: OperationTimeoutException
          schema:
            $ref: '#/definitions/OperationTimeoutException'
      parameters:
        - name: body
          in: body
          required: true
          schema:
            $ref: '#/definitions/GetClassifierRequest'
    parameters:
      - $ref: '#/parameters/Action'
      - $ref: '#/parameters/Version'
      - $ref: '#/parameters/X-Amz-Content-Sha256'
      - $ref: '#/parameters/X-Amz-Date'
      - $ref: '#/parameters/X-Amz-Algorithm'
      - $ref: '#/parameters/X-Amz-Credential'
      - $ref: '#/parameters/X-Amz-Security-Token'
      - $ref: '#/parameters/X-Amz-Signature'
      - $ref: '#/parameters/X-Amz-SignedHeaders'
  '/#GetClassifiers':
    post:
      operationId: GetClassifiers
      description: Lists all classifier objects in the Data Catalog.
      responses:
        '200':
          description: Success
          schema:
            $ref: '#/definitions/GetClassifiersResponse'
        '480':
          description: OperationTimeoutException
          schema:
            $ref: '#/definitions/OperationTimeoutException'
      parameters:
        - name: body
          in: body
          required: true
          schema:
            $ref: '#/definitions/GetClassifiersRequest'
        - name: MaxResults
          type: string
          in: query
          description: Pagination limit
          required: false
        - name: NextToken
          type: string
          in: query
          description: Pagination token
          required: false
    parameters:
      - $ref: '#/parameters/Action'
      - $ref: '#/parameters/Version'
      - $ref: '#/parameters/X-Amz-Content-Sha256'
      - $ref: '#/parameters/X-Amz-Date'
      - $ref: '#/parameters/X-Amz-Algorithm'
      - $ref: '#/parameters/X-Amz-Credential'
      - $ref: '#/parameters/X-Amz-Security-Token'
      - $ref: '#/parameters/X-Amz-Signature'
      - $ref: '#/parameters/X-Amz-SignedHeaders'
  '/#GetConnection':
    post:
      operationId: GetConnection
      description: Retrieves a connection definition from the Data Catalog.
      responses:
        '200':
          description: Success
          schema:
            $ref: '#/definitions/GetConnectionResponse'
        '480':
          description: EntityNotFoundException
          schema:
            $ref: '#/definitions/EntityNotFoundException'
        '481':
          description: OperationTimeoutException
          schema:
            $ref: '#/definitions/OperationTimeoutException'
      parameters:
        - name: body
          in: body
          required: true
          schema:
            $ref: '#/definitions/GetConnectionRequest'
    parameters:
      - $ref: '#/parameters/Action'
      - $ref: '#/parameters/Version'
      - $ref: '#/parameters/X-Amz-Content-Sha256'
      - $ref: '#/parameters/X-Amz-Date'
      - $ref: '#/parameters/X-Amz-Algorithm'
      - $ref: '#/parameters/X-Amz-Credential'
      - $ref: '#/parameters/X-Amz-Security-Token'
      - $ref: '#/parameters/X-Amz-Signature'
      - $ref: '#/parameters/X-Amz-SignedHeaders'
  '/#GetConnections':
    post:
      operationId: GetConnections
      description: Retrieves a list of connection definitions from the Data Catalog.
      responses:
        '200':
          description: Success
          schema:
            $ref: '#/definitions/GetConnectionsResponse'
        '480':
          description: EntityNotFoundException
          schema:
            $ref: '#/definitions/EntityNotFoundException'
        '481':
          description: OperationTimeoutException
          schema:
            $ref: '#/definitions/OperationTimeoutException'
      parameters:
        - name: body
          in: body
          required: true
          schema:
            $ref: '#/definitions/GetConnectionsRequest'
        - name: MaxResults
          type: string
          in: query
          description: Pagination limit
          required: false
        - name: NextToken
          type: string
          in: query
          description: Pagination token
          required: false
    parameters:
      - $ref: '#/parameters/Action'
      - $ref: '#/parameters/Version'
      - $ref: '#/parameters/X-Amz-Content-Sha256'
      - $ref: '#/parameters/X-Amz-Date'
      - $ref: '#/parameters/X-Amz-Algorithm'
      - $ref: '#/parameters/X-Amz-Credential'
      - $ref: '#/parameters/X-Amz-Security-Token'
      - $ref: '#/parameters/X-Amz-Signature'
      - $ref: '#/parameters/X-Amz-SignedHeaders'
  '/#GetCrawler':
    post:
      operationId: GetCrawler
      description: Retrieves metadata for a specified crawler.
      responses:
        '200':
          description: Success
          schema:
            $ref: '#/definitions/GetCrawlerResponse'
        '480':
          description: EntityNotFoundException
          schema:
            $ref: '#/definitions/EntityNotFoundException'
        '481':
          description: OperationTimeoutException
          schema:
            $ref: '#/definitions/OperationTimeoutException'
      parameters:
        - name: body
          in: body
          required: true
          schema:
            $ref: '#/definitions/GetCrawlerRequest'
    parameters:
      - $ref: '#/parameters/Action'
      - $ref: '#/parameters/Version'
      - $ref: '#/parameters/X-Amz-Content-Sha256'
      - $ref: '#/parameters/X-Amz-Date'
      - $ref: '#/parameters/X-Amz-Algorithm'
      - $ref: '#/parameters/X-Amz-Credential'
      - $ref: '#/parameters/X-Amz-Security-Token'
      - $ref: '#/parameters/X-Amz-Signature'
      - $ref: '#/parameters/X-Amz-SignedHeaders'
  '/#GetCrawlerMetrics':
    post:
      operationId: GetCrawlerMetrics
      description: Retrieves metrics about specified crawlers.
      responses:
        '200':
          description: Success
          schema:
            $ref: '#/definitions/GetCrawlerMetricsResponse'
        '480':
          description: OperationTimeoutException
          schema:
            $ref: '#/definitions/OperationTimeoutException'
      parameters:
        - name: body
          in: body
          required: true
          schema:
            $ref: '#/definitions/GetCrawlerMetricsRequest'
        - name: MaxResults
          type: string
          in: query
          description: Pagination limit
          required: false
        - name: NextToken
          type: string
          in: query
          description: Pagination token
          required: false
    parameters:
      - $ref: '#/parameters/Action'
      - $ref: '#/parameters/Version'
      - $ref: '#/parameters/X-Amz-Content-Sha256'
      - $ref: '#/parameters/X-Amz-Date'
      - $ref: '#/parameters/X-Amz-Algorithm'
      - $ref: '#/parameters/X-Amz-Credential'
      - $ref: '#/parameters/X-Amz-Security-Token'
      - $ref: '#/parameters/X-Amz-Signature'
      - $ref: '#/parameters/X-Amz-SignedHeaders'
  '/#GetCrawlers':
    post:
      operationId: GetCrawlers
      description: Retrieves metadata for all crawlers defined in the customer account.
      responses:
        '200':
          description: Success
          schema:
            $ref: '#/definitions/GetCrawlersResponse'
        '480':
          description: OperationTimeoutException
          schema:
            $ref: '#/definitions/OperationTimeoutException'
      parameters:
        - name: body
          in: body
          required: true
          schema:
            $ref: '#/definitions/GetCrawlersRequest'
        - name: MaxResults
          type: string
          in: query
          description: Pagination limit
          required: false
        - name: NextToken
          type: string
          in: query
          description: Pagination token
          required: false
    parameters:
      - $ref: '#/parameters/Action'
      - $ref: '#/parameters/Version'
      - $ref: '#/parameters/X-Amz-Content-Sha256'
      - $ref: '#/parameters/X-Amz-Date'
      - $ref: '#/parameters/X-Amz-Algorithm'
      - $ref: '#/parameters/X-Amz-Credential'
      - $ref: '#/parameters/X-Amz-Security-Token'
      - $ref: '#/parameters/X-Amz-Signature'
      - $ref: '#/parameters/X-Amz-SignedHeaders'
  '/#GetDatabase':
    post:
      operationId: GetDatabase
      description: Retrieves the definition of a specified database.
      responses:
        '200':
          description: Success
          schema:
            $ref: '#/definitions/GetDatabaseResponse'
        '480':
          description: InvalidInputException
          schema:
            $ref: '#/definitions/InvalidInputException'
        '481':
          description: EntityNotFoundException
          schema:
            $ref: '#/definitions/EntityNotFoundException'
        '482':
          description: InternalServiceException
          schema:
            $ref: '#/definitions/InternalServiceException'
        '483':
          description: OperationTimeoutException
          schema:
            $ref: '#/definitions/OperationTimeoutException'
      parameters:
        - name: body
          in: body
          required: true
          schema:
            $ref: '#/definitions/GetDatabaseRequest'
    parameters:
      - $ref: '#/parameters/Action'
      - $ref: '#/parameters/Version'
      - $ref: '#/parameters/X-Amz-Content-Sha256'
      - $ref: '#/parameters/X-Amz-Date'
      - $ref: '#/parameters/X-Amz-Algorithm'
      - $ref: '#/parameters/X-Amz-Credential'
      - $ref: '#/parameters/X-Amz-Security-Token'
      - $ref: '#/parameters/X-Amz-Signature'
      - $ref: '#/parameters/X-Amz-SignedHeaders'
  '/#GetDatabases':
    post:
      operationId: GetDatabases
      description: Retrieves all Databases defined in a given Data Catalog.
      responses:
        '200':
          description: Success
          schema:
            $ref: '#/definitions/GetDatabasesResponse'
        '480':
          description: InvalidInputException
          schema:
            $ref: '#/definitions/InvalidInputException'
        '481':
          description: InternalServiceException
          schema:
            $ref: '#/definitions/InternalServiceException'
        '482':
          description: OperationTimeoutException
          schema:
            $ref: '#/definitions/OperationTimeoutException'
      parameters:
        - name: body
          in: body
          required: true
          schema:
            $ref: '#/definitions/GetDatabasesRequest'
        - name: MaxResults
          type: string
          in: query
          description: Pagination limit
          required: false
        - name: NextToken
          type: string
          in: query
          description: Pagination token
          required: false
    parameters:
      - $ref: '#/parameters/Action'
      - $ref: '#/parameters/Version'
      - $ref: '#/parameters/X-Amz-Content-Sha256'
      - $ref: '#/parameters/X-Amz-Date'
      - $ref: '#/parameters/X-Amz-Algorithm'
      - $ref: '#/parameters/X-Amz-Credential'
      - $ref: '#/parameters/X-Amz-Security-Token'
      - $ref: '#/parameters/X-Amz-Signature'
      - $ref: '#/parameters/X-Amz-SignedHeaders'
  '/#GetDataflowGraph':
    post:
      operationId: GetDataflowGraph
      description: 'Transforms a Python script into a directed acyclic graph (DAG). '
      responses:
        '200':
          description: Success
          schema:
            $ref: '#/definitions/GetDataflowGraphResponse'
        '480':
          description: InvalidInputException
          schema:
            $ref: '#/definitions/InvalidInputException'
        '481':
          description: InternalServiceException
          schema:
            $ref: '#/definitions/InternalServiceException'
        '482':
          description: OperationTimeoutException
          schema:
            $ref: '#/definitions/OperationTimeoutException'
      parameters:
        - name: body
          in: body
          required: true
          schema:
            $ref: '#/definitions/GetDataflowGraphRequest'
    parameters:
      - $ref: '#/parameters/Action'
      - $ref: '#/parameters/Version'
      - $ref: '#/parameters/X-Amz-Content-Sha256'
      - $ref: '#/parameters/X-Amz-Date'
      - $ref: '#/parameters/X-Amz-Algorithm'
      - $ref: '#/parameters/X-Amz-Credential'
      - $ref: '#/parameters/X-Amz-Security-Token'
      - $ref: '#/parameters/X-Amz-Signature'
      - $ref: '#/parameters/X-Amz-SignedHeaders'
  '/#GetDevEndpoint':
    post:
      operationId: GetDevEndpoint
      description: Retrieves information about a specified DevEndpoint.
      responses:
        '200':
          description: Success
          schema:
            $ref: '#/definitions/GetDevEndpointResponse'
        '480':
          description: EntityNotFoundException
          schema:
            $ref: '#/definitions/EntityNotFoundException'
        '481':
          description: InternalServiceException
          schema:
            $ref: '#/definitions/InternalServiceException'
        '482':
          description: OperationTimeoutException
          schema:
            $ref: '#/definitions/OperationTimeoutException'
        '483':
          description: InvalidInputException
          schema:
            $ref: '#/definitions/InvalidInputException'
      parameters:
        - name: body
          in: body
          required: true
          schema:
            $ref: '#/definitions/GetDevEndpointRequest'
    parameters:
      - $ref: '#/parameters/Action'
      - $ref: '#/parameters/Version'
      - $ref: '#/parameters/X-Amz-Content-Sha256'
      - $ref: '#/parameters/X-Amz-Date'
      - $ref: '#/parameters/X-Amz-Algorithm'
      - $ref: '#/parameters/X-Amz-Credential'
      - $ref: '#/parameters/X-Amz-Security-Token'
      - $ref: '#/parameters/X-Amz-Signature'
      - $ref: '#/parameters/X-Amz-SignedHeaders'
  '/#GetDevEndpoints':
    post:
      operationId: GetDevEndpoints
      description: Retrieves all the DevEndpoints in this AWS account.
      responses:
        '200':
          description: Success
          schema:
            $ref: '#/definitions/GetDevEndpointsResponse'
        '480':
          description: EntityNotFoundException
          schema:
            $ref: '#/definitions/EntityNotFoundException'
        '481':
          description: InternalServiceException
          schema:
            $ref: '#/definitions/InternalServiceException'
        '482':
          description: OperationTimeoutException
          schema:
            $ref: '#/definitions/OperationTimeoutException'
        '483':
          description: InvalidInputException
          schema:
            $ref: '#/definitions/InvalidInputException'
      parameters:
        - name: body
          in: body
          required: true
          schema:
            $ref: '#/definitions/GetDevEndpointsRequest'
        - name: MaxResults
          type: string
          in: query
          description: Pagination limit
          required: false
        - name: NextToken
          type: string
          in: query
          description: Pagination token
          required: false
    parameters:
      - $ref: '#/parameters/Action'
      - $ref: '#/parameters/Version'
      - $ref: '#/parameters/X-Amz-Content-Sha256'
      - $ref: '#/parameters/X-Amz-Date'
      - $ref: '#/parameters/X-Amz-Algorithm'
      - $ref: '#/parameters/X-Amz-Credential'
      - $ref: '#/parameters/X-Amz-Security-Token'
      - $ref: '#/parameters/X-Amz-Signature'
      - $ref: '#/parameters/X-Amz-SignedHeaders'
  '/#GetJob':
    post:
      operationId: GetJob
      description: Retrieves an existing job definition.
      responses:
        '200':
          description: Success
          schema:
            $ref: '#/definitions/GetJobResponse'
        '480':
          description: InvalidInputException
          schema:
            $ref: '#/definitions/InvalidInputException'
        '481':
          description: EntityNotFoundException
          schema:
            $ref: '#/definitions/EntityNotFoundException'
        '482':
          description: InternalServiceException
          schema:
            $ref: '#/definitions/InternalServiceException'
        '483':
          description: OperationTimeoutException
          schema:
            $ref: '#/definitions/OperationTimeoutException'
      parameters:
        - name: body
          in: body
          required: true
          schema:
            $ref: '#/definitions/GetJobRequest'
    parameters:
      - $ref: '#/parameters/Action'
      - $ref: '#/parameters/Version'
      - $ref: '#/parameters/X-Amz-Content-Sha256'
      - $ref: '#/parameters/X-Amz-Date'
      - $ref: '#/parameters/X-Amz-Algorithm'
      - $ref: '#/parameters/X-Amz-Credential'
      - $ref: '#/parameters/X-Amz-Security-Token'
      - $ref: '#/parameters/X-Amz-Signature'
      - $ref: '#/parameters/X-Amz-SignedHeaders'
  '/#GetJobRun':
    post:
      operationId: GetJobRun
      description: Retrieves the metadata for a given job run.
      responses:
        '200':
          description: Success
          schema:
            $ref: '#/definitions/GetJobRunResponse'
        '480':
          description: InvalidInputException
          schema:
            $ref: '#/definitions/InvalidInputException'
        '481':
          description: EntityNotFoundException
          schema:
            $ref: '#/definitions/EntityNotFoundException'
        '482':
          description: InternalServiceException
          schema:
            $ref: '#/definitions/InternalServiceException'
        '483':
          description: OperationTimeoutException
          schema:
            $ref: '#/definitions/OperationTimeoutException'
      parameters:
        - name: body
          in: body
          required: true
          schema:
            $ref: '#/definitions/GetJobRunRequest'
    parameters:
      - $ref: '#/parameters/Action'
      - $ref: '#/parameters/Version'
      - $ref: '#/parameters/X-Amz-Content-Sha256'
      - $ref: '#/parameters/X-Amz-Date'
      - $ref: '#/parameters/X-Amz-Algorithm'
      - $ref: '#/parameters/X-Amz-Credential'
      - $ref: '#/parameters/X-Amz-Security-Token'
      - $ref: '#/parameters/X-Amz-Signature'
      - $ref: '#/parameters/X-Amz-SignedHeaders'
  '/#GetJobRuns':
    post:
      operationId: GetJobRuns
      description: Retrieves metadata for all runs of a given job.
      responses:
        '200':
          description: Success
          schema:
            $ref: '#/definitions/GetJobRunsResponse'
        '480':
          description: InvalidInputException
          schema:
            $ref: '#/definitions/InvalidInputException'
        '481':
          description: EntityNotFoundException
          schema:
            $ref: '#/definitions/EntityNotFoundException'
        '482':
          description: InternalServiceException
          schema:
            $ref: '#/definitions/InternalServiceException'
        '483':
          description: OperationTimeoutException
          schema:
            $ref: '#/definitions/OperationTimeoutException'
      parameters:
        - name: body
          in: body
          required: true
          schema:
            $ref: '#/definitions/GetJobRunsRequest'
        - name: MaxResults
          type: string
          in: query
          description: Pagination limit
          required: false
        - name: NextToken
          type: string
          in: query
          description: Pagination token
          required: false
    parameters:
      - $ref: '#/parameters/Action'
      - $ref: '#/parameters/Version'
      - $ref: '#/parameters/X-Amz-Content-Sha256'
      - $ref: '#/parameters/X-Amz-Date'
      - $ref: '#/parameters/X-Amz-Algorithm'
      - $ref: '#/parameters/X-Amz-Credential'
      - $ref: '#/parameters/X-Amz-Security-Token'
      - $ref: '#/parameters/X-Amz-Signature'
      - $ref: '#/parameters/X-Amz-SignedHeaders'
  '/#GetJobs':
    post:
      operationId: GetJobs
      description: Retrieves all current jobs.
      responses:
        '200':
          description: Success
          schema:
            $ref: '#/definitions/GetJobsResponse'
        '480':
          description: InvalidInputException
          schema:
            $ref: '#/definitions/InvalidInputException'
        '481':
          description: EntityNotFoundException
          schema:
            $ref: '#/definitions/EntityNotFoundException'
        '482':
          description: InternalServiceException
          schema:
            $ref: '#/definitions/InternalServiceException'
        '483':
          description: OperationTimeoutException
          schema:
            $ref: '#/definitions/OperationTimeoutException'
      parameters:
        - name: body
          in: body
          required: true
          schema:
            $ref: '#/definitions/GetJobsRequest'
        - name: MaxResults
          type: string
          in: query
          description: Pagination limit
          required: false
        - name: NextToken
          type: string
          in: query
          description: Pagination token
          required: false
    parameters:
      - $ref: '#/parameters/Action'
      - $ref: '#/parameters/Version'
      - $ref: '#/parameters/X-Amz-Content-Sha256'
      - $ref: '#/parameters/X-Amz-Date'
      - $ref: '#/parameters/X-Amz-Algorithm'
      - $ref: '#/parameters/X-Amz-Credential'
      - $ref: '#/parameters/X-Amz-Security-Token'
      - $ref: '#/parameters/X-Amz-Signature'
      - $ref: '#/parameters/X-Amz-SignedHeaders'
  '/#GetMapping':
    post:
      operationId: GetMapping
      description: Creates mappings.
      responses:
        '200':
          description: Success
          schema:
            $ref: '#/definitions/GetMappingResponse'
        '480':
          description: InvalidInputException
          schema:
            $ref: '#/definitions/InvalidInputException'
        '481':
          description: InternalServiceException
          schema:
            $ref: '#/definitions/InternalServiceException'
        '482':
          description: OperationTimeoutException
          schema:
            $ref: '#/definitions/OperationTimeoutException'
        '483':
          description: EntityNotFoundException
          schema:
            $ref: '#/definitions/EntityNotFoundException'
      parameters:
        - name: body
          in: body
          required: true
          schema:
            $ref: '#/definitions/GetMappingRequest'
    parameters:
      - $ref: '#/parameters/Action'
      - $ref: '#/parameters/Version'
      - $ref: '#/parameters/X-Amz-Content-Sha256'
      - $ref: '#/parameters/X-Amz-Date'
      - $ref: '#/parameters/X-Amz-Algorithm'
      - $ref: '#/parameters/X-Amz-Credential'
      - $ref: '#/parameters/X-Amz-Security-Token'
      - $ref: '#/parameters/X-Amz-Signature'
      - $ref: '#/parameters/X-Amz-SignedHeaders'
  '/#GetPartition':
    post:
      operationId: GetPartition
      description: Retrieves information about a specified partition.
      responses:
        '200':
          description: Success
          schema:
            $ref: '#/definitions/GetPartitionResponse'
        '480':
          description: EntityNotFoundException
          schema:
            $ref: '#/definitions/EntityNotFoundException'
        '481':
          description: InvalidInputException
          schema:
            $ref: '#/definitions/InvalidInputException'
        '482':
          description: InternalServiceException
          schema:
            $ref: '#/definitions/InternalServiceException'
        '483':
          description: OperationTimeoutException
          schema:
            $ref: '#/definitions/OperationTimeoutException'
      parameters:
        - name: body
          in: body
          required: true
          schema:
            $ref: '#/definitions/GetPartitionRequest'
    parameters:
      - $ref: '#/parameters/Action'
      - $ref: '#/parameters/Version'
      - $ref: '#/parameters/X-Amz-Content-Sha256'
      - $ref: '#/parameters/X-Amz-Date'
      - $ref: '#/parameters/X-Amz-Algorithm'
      - $ref: '#/parameters/X-Amz-Credential'
      - $ref: '#/parameters/X-Amz-Security-Token'
      - $ref: '#/parameters/X-Amz-Signature'
      - $ref: '#/parameters/X-Amz-SignedHeaders'
  '/#GetPartitions':
    post:
      operationId: GetPartitions
      description: Retrieves information about the partitions in a table.
      responses:
        '200':
          description: Success
          schema:
            $ref: '#/definitions/GetPartitionsResponse'
        '480':
          description: EntityNotFoundException
          schema:
            $ref: '#/definitions/EntityNotFoundException'
        '481':
          description: InvalidInputException
          schema:
            $ref: '#/definitions/InvalidInputException'
        '482':
          description: OperationTimeoutException
          schema:
            $ref: '#/definitions/OperationTimeoutException'
        '483':
          description: InternalServiceException
          schema:
            $ref: '#/definitions/InternalServiceException'
      parameters:
        - name: body
          in: body
          required: true
          schema:
            $ref: '#/definitions/GetPartitionsRequest'
        - name: MaxResults
          type: string
          in: query
          description: Pagination limit
          required: false
        - name: NextToken
          type: string
          in: query
          description: Pagination token
          required: false
    parameters:
      - $ref: '#/parameters/Action'
      - $ref: '#/parameters/Version'
      - $ref: '#/parameters/X-Amz-Content-Sha256'
      - $ref: '#/parameters/X-Amz-Date'
      - $ref: '#/parameters/X-Amz-Algorithm'
      - $ref: '#/parameters/X-Amz-Credential'
      - $ref: '#/parameters/X-Amz-Security-Token'
      - $ref: '#/parameters/X-Amz-Signature'
      - $ref: '#/parameters/X-Amz-SignedHeaders'
  '/#GetPlan':
    post:
      operationId: GetPlan
      description: Gets code to perform a specified mapping.
      responses:
        '200':
          description: Success
          schema:
            $ref: '#/definitions/GetPlanResponse'
        '480':
          description: InvalidInputException
          schema:
            $ref: '#/definitions/InvalidInputException'
        '481':
          description: InternalServiceException
          schema:
            $ref: '#/definitions/InternalServiceException'
        '482':
          description: OperationTimeoutException
          schema:
            $ref: '#/definitions/OperationTimeoutException'
      parameters:
        - name: body
          in: body
          required: true
          schema:
            $ref: '#/definitions/GetPlanRequest'
    parameters:
      - $ref: '#/parameters/Action'
      - $ref: '#/parameters/Version'
      - $ref: '#/parameters/X-Amz-Content-Sha256'
      - $ref: '#/parameters/X-Amz-Date'
      - $ref: '#/parameters/X-Amz-Algorithm'
      - $ref: '#/parameters/X-Amz-Credential'
      - $ref: '#/parameters/X-Amz-Security-Token'
      - $ref: '#/parameters/X-Amz-Signature'
      - $ref: '#/parameters/X-Amz-SignedHeaders'
  '/#GetTable':
    post:
      operationId: GetTable
      description: Retrieves the <code>Table</code> definition in a Data Catalog for a specified table.
      responses:
        '200':
          description: Success
          schema:
            $ref: '#/definitions/GetTableResponse'
        '480':
          description: EntityNotFoundException
          schema:
            $ref: '#/definitions/EntityNotFoundException'
        '481':
          description: InvalidInputException
          schema:
            $ref: '#/definitions/InvalidInputException'
        '482':
          description: InternalServiceException
          schema:
            $ref: '#/definitions/InternalServiceException'
        '483':
          description: OperationTimeoutException
          schema:
            $ref: '#/definitions/OperationTimeoutException'
      parameters:
        - name: body
          in: body
          required: true
          schema:
            $ref: '#/definitions/GetTableRequest'
    parameters:
      - $ref: '#/parameters/Action'
      - $ref: '#/parameters/Version'
      - $ref: '#/parameters/X-Amz-Content-Sha256'
      - $ref: '#/parameters/X-Amz-Date'
      - $ref: '#/parameters/X-Amz-Algorithm'
      - $ref: '#/parameters/X-Amz-Credential'
      - $ref: '#/parameters/X-Amz-Security-Token'
      - $ref: '#/parameters/X-Amz-Signature'
      - $ref: '#/parameters/X-Amz-SignedHeaders'
  '/#GetTableVersion':
    post:
      operationId: GetTableVersion
      description: Retrieves a specified version of a table.
      responses:
        '200':
          description: Success
          schema:
            $ref: '#/definitions/GetTableVersionResponse'
        '480':
          description: EntityNotFoundException
          schema:
            $ref: '#/definitions/EntityNotFoundException'
        '481':
          description: InvalidInputException
          schema:
            $ref: '#/definitions/InvalidInputException'
        '482':
          description: InternalServiceException
          schema:
            $ref: '#/definitions/InternalServiceException'
        '483':
          description: OperationTimeoutException
          schema:
            $ref: '#/definitions/OperationTimeoutException'
      parameters:
        - name: body
          in: body
          required: true
          schema:
            $ref: '#/definitions/GetTableVersionRequest'
    parameters:
      - $ref: '#/parameters/Action'
      - $ref: '#/parameters/Version'
      - $ref: '#/parameters/X-Amz-Content-Sha256'
      - $ref: '#/parameters/X-Amz-Date'
      - $ref: '#/parameters/X-Amz-Algorithm'
      - $ref: '#/parameters/X-Amz-Credential'
      - $ref: '#/parameters/X-Amz-Security-Token'
      - $ref: '#/parameters/X-Amz-Signature'
      - $ref: '#/parameters/X-Amz-SignedHeaders'
  '/#GetTableVersions':
    post:
      operationId: GetTableVersions
      description: Retrieves a list of strings that identify available versions of a specified table.
      responses:
        '200':
          description: Success
          schema:
            $ref: '#/definitions/GetTableVersionsResponse'
        '480':
          description: EntityNotFoundException
          schema:
            $ref: '#/definitions/EntityNotFoundException'
        '481':
          description: InvalidInputException
          schema:
            $ref: '#/definitions/InvalidInputException'
        '482':
          description: InternalServiceException
          schema:
            $ref: '#/definitions/InternalServiceException'
        '483':
          description: OperationTimeoutException
          schema:
            $ref: '#/definitions/OperationTimeoutException'
      parameters:
        - name: body
          in: body
          required: true
          schema:
            $ref: '#/definitions/GetTableVersionsRequest'
        - name: MaxResults
          type: string
          in: query
          description: Pagination limit
          required: false
        - name: NextToken
          type: string
          in: query
          description: Pagination token
          required: false
    parameters:
      - $ref: '#/parameters/Action'
      - $ref: '#/parameters/Version'
      - $ref: '#/parameters/X-Amz-Content-Sha256'
      - $ref: '#/parameters/X-Amz-Date'
      - $ref: '#/parameters/X-Amz-Algorithm'
      - $ref: '#/parameters/X-Amz-Credential'
      - $ref: '#/parameters/X-Amz-Security-Token'
      - $ref: '#/parameters/X-Amz-Signature'
      - $ref: '#/parameters/X-Amz-SignedHeaders'
  '/#GetTables':
    post:
      operationId: GetTables
      description: Retrieves the definitions of some or all of the tables in a given <code>Database</code>.
      responses:
        '200':
          description: Success
          schema:
            $ref: '#/definitions/GetTablesResponse'
        '480':
          description: EntityNotFoundException
          schema:
            $ref: '#/definitions/EntityNotFoundException'
        '481':
          description: InvalidInputException
          schema:
            $ref: '#/definitions/InvalidInputException'
        '482':
          description: OperationTimeoutException
          schema:
            $ref: '#/definitions/OperationTimeoutException'
        '483':
          description: InternalServiceException
          schema:
            $ref: '#/definitions/InternalServiceException'
      parameters:
        - name: body
          in: body
          required: true
          schema:
            $ref: '#/definitions/GetTablesRequest'
        - name: MaxResults
          type: string
          in: query
          description: Pagination limit
          required: false
        - name: NextToken
          type: string
          in: query
          description: Pagination token
          required: false
    parameters:
      - $ref: '#/parameters/Action'
      - $ref: '#/parameters/Version'
      - $ref: '#/parameters/X-Amz-Content-Sha256'
      - $ref: '#/parameters/X-Amz-Date'
      - $ref: '#/parameters/X-Amz-Algorithm'
      - $ref: '#/parameters/X-Amz-Credential'
      - $ref: '#/parameters/X-Amz-Security-Token'
      - $ref: '#/parameters/X-Amz-Signature'
      - $ref: '#/parameters/X-Amz-SignedHeaders'
  '/#GetTrigger':
    post:
      operationId: GetTrigger
      description: Retrieves the definition of a trigger.
      responses:
        '200':
          description: Success
          schema:
            $ref: '#/definitions/GetTriggerResponse'
        '480':
          description: EntityNotFoundException
          schema:
            $ref: '#/definitions/EntityNotFoundException'
        '481':
          description: InvalidInputException
          schema:
            $ref: '#/definitions/InvalidInputException'
        '482':
          description: InternalServiceException
          schema:
            $ref: '#/definitions/InternalServiceException'
        '483':
          description: OperationTimeoutException
          schema:
            $ref: '#/definitions/OperationTimeoutException'
      parameters:
        - name: body
          in: body
          required: true
          schema:
            $ref: '#/definitions/GetTriggerRequest'
    parameters:
      - $ref: '#/parameters/Action'
      - $ref: '#/parameters/Version'
      - $ref: '#/parameters/X-Amz-Content-Sha256'
      - $ref: '#/parameters/X-Amz-Date'
      - $ref: '#/parameters/X-Amz-Algorithm'
      - $ref: '#/parameters/X-Amz-Credential'
      - $ref: '#/parameters/X-Amz-Security-Token'
      - $ref: '#/parameters/X-Amz-Signature'
      - $ref: '#/parameters/X-Amz-SignedHeaders'
  '/#GetTriggers':
    post:
      operationId: GetTriggers
      description: Gets all the triggers associated with a job.
      responses:
        '200':
          description: Success
          schema:
            $ref: '#/definitions/GetTriggersResponse'
        '480':
          description: EntityNotFoundException
          schema:
            $ref: '#/definitions/EntityNotFoundException'
        '481':
          description: InvalidInputException
          schema:
            $ref: '#/definitions/InvalidInputException'
        '482':
          description: InternalServiceException
          schema:
            $ref: '#/definitions/InternalServiceException'
        '483':
          description: OperationTimeoutException
          schema:
            $ref: '#/definitions/OperationTimeoutException'
      parameters:
        - name: body
          in: body
          required: true
          schema:
            $ref: '#/definitions/GetTriggersRequest'
        - name: MaxResults
          type: string
          in: query
          description: Pagination limit
          required: false
        - name: NextToken
          type: string
          in: query
          description: Pagination token
          required: false
    parameters:
      - $ref: '#/parameters/Action'
      - $ref: '#/parameters/Version'
      - $ref: '#/parameters/X-Amz-Content-Sha256'
      - $ref: '#/parameters/X-Amz-Date'
      - $ref: '#/parameters/X-Amz-Algorithm'
      - $ref: '#/parameters/X-Amz-Credential'
      - $ref: '#/parameters/X-Amz-Security-Token'
      - $ref: '#/parameters/X-Amz-Signature'
      - $ref: '#/parameters/X-Amz-SignedHeaders'
  '/#GetUserDefinedFunction':
    post:
      operationId: GetUserDefinedFunction
      description: Retrieves a specified function definition from the Data Catalog.
      responses:
        '200':
          description: Success
          schema:
            $ref: '#/definitions/GetUserDefinedFunctionResponse'
        '480':
          description: EntityNotFoundException
          schema:
            $ref: '#/definitions/EntityNotFoundException'
        '481':
          description: InvalidInputException
          schema:
            $ref: '#/definitions/InvalidInputException'
        '482':
          description: InternalServiceException
          schema:
            $ref: '#/definitions/InternalServiceException'
        '483':
          description: OperationTimeoutException
          schema:
            $ref: '#/definitions/OperationTimeoutException'
      parameters:
        - name: body
          in: body
          required: true
          schema:
            $ref: '#/definitions/GetUserDefinedFunctionRequest'
    parameters:
      - $ref: '#/parameters/Action'
      - $ref: '#/parameters/Version'
      - $ref: '#/parameters/X-Amz-Content-Sha256'
      - $ref: '#/parameters/X-Amz-Date'
      - $ref: '#/parameters/X-Amz-Algorithm'
      - $ref: '#/parameters/X-Amz-Credential'
      - $ref: '#/parameters/X-Amz-Security-Token'
      - $ref: '#/parameters/X-Amz-Signature'
      - $ref: '#/parameters/X-Amz-SignedHeaders'
  '/#GetUserDefinedFunctions':
    post:
      operationId: GetUserDefinedFunctions
      description: Retrieves a multiple function definitions from the Data Catalog.
      responses:
        '200':
          description: Success
          schema:
            $ref: '#/definitions/GetUserDefinedFunctionsResponse'
        '480':
          description: EntityNotFoundException
          schema:
            $ref: '#/definitions/EntityNotFoundException'
        '481':
          description: InvalidInputException
          schema:
            $ref: '#/definitions/InvalidInputException'
        '482':
          description: OperationTimeoutException
          schema:
            $ref: '#/definitions/OperationTimeoutException'
        '483':
          description: InternalServiceException
          schema:
            $ref: '#/definitions/InternalServiceException'
      parameters:
        - name: body
          in: body
          required: true
          schema:
            $ref: '#/definitions/GetUserDefinedFunctionsRequest'
        - name: MaxResults
          type: string
          in: query
          description: Pagination limit
          required: false
        - name: NextToken
          type: string
          in: query
          description: Pagination token
          required: false
    parameters:
      - $ref: '#/parameters/Action'
      - $ref: '#/parameters/Version'
      - $ref: '#/parameters/X-Amz-Content-Sha256'
      - $ref: '#/parameters/X-Amz-Date'
      - $ref: '#/parameters/X-Amz-Algorithm'
      - $ref: '#/parameters/X-Amz-Credential'
      - $ref: '#/parameters/X-Amz-Security-Token'
      - $ref: '#/parameters/X-Amz-Signature'
      - $ref: '#/parameters/X-Amz-SignedHeaders'
  '/#ImportCatalogToGlue':
    post:
      operationId: ImportCatalogToGlue
      description: Imports an existing Athena Data Catalog to AWS Glue
      responses:
        '200':
          description: Success
          schema:
            $ref: '#/definitions/ImportCatalogToGlueResponse'
        '480':
          description: InternalServiceException
          schema:
            $ref: '#/definitions/InternalServiceException'
        '481':
          description: OperationTimeoutException
          schema:
            $ref: '#/definitions/OperationTimeoutException'
      parameters:
        - name: body
          in: body
          required: true
          schema:
            $ref: '#/definitions/ImportCatalogToGlueRequest'
    parameters:
      - $ref: '#/parameters/Action'
      - $ref: '#/parameters/Version'
      - $ref: '#/parameters/X-Amz-Content-Sha256'
      - $ref: '#/parameters/X-Amz-Date'
      - $ref: '#/parameters/X-Amz-Algorithm'
      - $ref: '#/parameters/X-Amz-Credential'
      - $ref: '#/parameters/X-Amz-Security-Token'
      - $ref: '#/parameters/X-Amz-Signature'
      - $ref: '#/parameters/X-Amz-SignedHeaders'
  '/#ResetJobBookmark':
    post:
      operationId: ResetJobBookmark
      description: Resets a bookmark entry.
      responses:
        '200':
          description: Success
          schema:
            $ref: '#/definitions/ResetJobBookmarkResponse'
        '480':
          description: EntityNotFoundException
          schema:
            $ref: '#/definitions/EntityNotFoundException'
        '481':
          description: InvalidInputException
          schema:
            $ref: '#/definitions/InvalidInputException'
        '482':
          description: InternalServiceException
          schema:
            $ref: '#/definitions/InternalServiceException'
        '483':
          description: OperationTimeoutException
          schema:
            $ref: '#/definitions/OperationTimeoutException'
      parameters:
        - name: body
          in: body
          required: true
          schema:
            $ref: '#/definitions/ResetJobBookmarkRequest'
    parameters:
      - $ref: '#/parameters/Action'
      - $ref: '#/parameters/Version'
      - $ref: '#/parameters/X-Amz-Content-Sha256'
      - $ref: '#/parameters/X-Amz-Date'
      - $ref: '#/parameters/X-Amz-Algorithm'
      - $ref: '#/parameters/X-Amz-Credential'
      - $ref: '#/parameters/X-Amz-Security-Token'
      - $ref: '#/parameters/X-Amz-Signature'
      - $ref: '#/parameters/X-Amz-SignedHeaders'
  '/#StartCrawler':
    post:
      operationId: StartCrawler
      description: 'Starts a crawl using the specified crawler, regardless of what is scheduled. If the crawler is already running, does nothing.'
      responses:
        '200':
          description: Success
          schema:
            $ref: '#/definitions/StartCrawlerResponse'
        '480':
          description: EntityNotFoundException
          schema:
            $ref: '#/definitions/EntityNotFoundException'
        '481':
          description: CrawlerRunningException
          schema:
            $ref: '#/definitions/CrawlerRunningException'
        '482':
          description: OperationTimeoutException
          schema:
            $ref: '#/definitions/OperationTimeoutException'
      parameters:
        - name: body
          in: body
          required: true
          schema:
            $ref: '#/definitions/StartCrawlerRequest'
    parameters:
      - $ref: '#/parameters/Action'
      - $ref: '#/parameters/Version'
      - $ref: '#/parameters/X-Amz-Content-Sha256'
      - $ref: '#/parameters/X-Amz-Date'
      - $ref: '#/parameters/X-Amz-Algorithm'
      - $ref: '#/parameters/X-Amz-Credential'
      - $ref: '#/parameters/X-Amz-Security-Token'
      - $ref: '#/parameters/X-Amz-Signature'
      - $ref: '#/parameters/X-Amz-SignedHeaders'
  '/#StartCrawlerSchedule':
    post:
      operationId: StartCrawlerSchedule
      description: 'Changes the schedule state of the specified crawler to <code>SCHEDULED</code>, unless the crawler is already running or the schedule state is already <code>SCHEDULED</code>.'
      responses:
        '200':
          description: Success
          schema:
            $ref: '#/definitions/StartCrawlerScheduleResponse'
        '480':
          description: EntityNotFoundException
          schema:
            $ref: '#/definitions/EntityNotFoundException'
        '481':
          description: SchedulerRunningException
          schema:
            $ref: '#/definitions/SchedulerRunningException'
        '482':
          description: SchedulerTransitioningException
          schema:
            $ref: '#/definitions/SchedulerTransitioningException'
        '483':
          description: NoScheduleException
          schema:
            $ref: '#/definitions/NoScheduleException'
        '484':
          description: OperationTimeoutException
          schema:
            $ref: '#/definitions/OperationTimeoutException'
      parameters:
        - name: body
          in: body
          required: true
          schema:
            $ref: '#/definitions/StartCrawlerScheduleRequest'
    parameters:
      - $ref: '#/parameters/Action'
      - $ref: '#/parameters/Version'
      - $ref: '#/parameters/X-Amz-Content-Sha256'
      - $ref: '#/parameters/X-Amz-Date'
      - $ref: '#/parameters/X-Amz-Algorithm'
      - $ref: '#/parameters/X-Amz-Credential'
      - $ref: '#/parameters/X-Amz-Security-Token'
      - $ref: '#/parameters/X-Amz-Signature'
      - $ref: '#/parameters/X-Amz-SignedHeaders'
  '/#StartJobRun':
    post:
      operationId: StartJobRun
      description: Runs a job.
      responses:
        '200':
          description: Success
          schema:
            $ref: '#/definitions/StartJobRunResponse'
        '480':
          description: InvalidInputException
          schema:
            $ref: '#/definitions/InvalidInputException'
        '481':
          description: EntityNotFoundException
          schema:
            $ref: '#/definitions/EntityNotFoundException'
        '482':
          description: InternalServiceException
          schema:
            $ref: '#/definitions/InternalServiceException'
        '483':
          description: OperationTimeoutException
          schema:
            $ref: '#/definitions/OperationTimeoutException'
        '484':
          description: ResourceNumberLimitExceededException
          schema:
            $ref: '#/definitions/ResourceNumberLimitExceededException'
        '485':
          description: ConcurrentRunsExceededException
          schema:
            $ref: '#/definitions/ConcurrentRunsExceededException'
      parameters:
        - name: body
          in: body
          required: true
          schema:
            $ref: '#/definitions/StartJobRunRequest'
    parameters:
      - $ref: '#/parameters/Action'
      - $ref: '#/parameters/Version'
      - $ref: '#/parameters/X-Amz-Content-Sha256'
      - $ref: '#/parameters/X-Amz-Date'
      - $ref: '#/parameters/X-Amz-Algorithm'
      - $ref: '#/parameters/X-Amz-Credential'
      - $ref: '#/parameters/X-Amz-Security-Token'
      - $ref: '#/parameters/X-Amz-Signature'
      - $ref: '#/parameters/X-Amz-SignedHeaders'
  '/#StartTrigger':
    post:
      operationId: StartTrigger
      description: 'Starts an existing trigger. See <a href="http://docs.aws.amazon.com/glue/latest/dg/trigger-job.html">Triggering Jobs</a> for information about how different types of trigger are started.'
      responses:
        '200':
          description: Success
          schema:
            $ref: '#/definitions/StartTriggerResponse'
        '480':
          description: InvalidInputException
          schema:
            $ref: '#/definitions/InvalidInputException'
        '481':
          description: InternalServiceException
          schema:
            $ref: '#/definitions/InternalServiceException'
        '482':
          description: EntityNotFoundException
          schema:
            $ref: '#/definitions/EntityNotFoundException'
        '483':
          description: OperationTimeoutException
          schema:
            $ref: '#/definitions/OperationTimeoutException'
        '484':
          description: ResourceNumberLimitExceededException
          schema:
            $ref: '#/definitions/ResourceNumberLimitExceededException'
        '485':
          description: ConcurrentRunsExceededException
          schema:
            $ref: '#/definitions/ConcurrentRunsExceededException'
      parameters:
        - name: body
          in: body
          required: true
          schema:
            $ref: '#/definitions/StartTriggerRequest'
    parameters:
      - $ref: '#/parameters/Action'
      - $ref: '#/parameters/Version'
      - $ref: '#/parameters/X-Amz-Content-Sha256'
      - $ref: '#/parameters/X-Amz-Date'
      - $ref: '#/parameters/X-Amz-Algorithm'
      - $ref: '#/parameters/X-Amz-Credential'
      - $ref: '#/parameters/X-Amz-Security-Token'
      - $ref: '#/parameters/X-Amz-Signature'
      - $ref: '#/parameters/X-Amz-SignedHeaders'
  '/#StopCrawler':
    post:
      operationId: StopCrawler
      description: 'If the specified crawler is running, stops the crawl.'
      responses:
        '200':
          description: Success
          schema:
            $ref: '#/definitions/StopCrawlerResponse'
        '480':
          description: EntityNotFoundException
          schema:
            $ref: '#/definitions/EntityNotFoundException'
        '481':
          description: CrawlerNotRunningException
          schema:
            $ref: '#/definitions/CrawlerNotRunningException'
        '482':
          description: CrawlerStoppingException
          schema:
            $ref: '#/definitions/CrawlerStoppingException'
        '483':
          description: OperationTimeoutException
          schema:
            $ref: '#/definitions/OperationTimeoutException'
      parameters:
        - name: body
          in: body
          required: true
          schema:
            $ref: '#/definitions/StopCrawlerRequest'
    parameters:
      - $ref: '#/parameters/Action'
      - $ref: '#/parameters/Version'
      - $ref: '#/parameters/X-Amz-Content-Sha256'
      - $ref: '#/parameters/X-Amz-Date'
      - $ref: '#/parameters/X-Amz-Algorithm'
      - $ref: '#/parameters/X-Amz-Credential'
      - $ref: '#/parameters/X-Amz-Security-Token'
      - $ref: '#/parameters/X-Amz-Signature'
      - $ref: '#/parameters/X-Amz-SignedHeaders'
  '/#StopCrawlerSchedule':
    post:
      operationId: StopCrawlerSchedule
      description: 'Sets the schedule state of the specified crawler to <code>NOT_SCHEDULED</code>, but does not stop the crawler if it is already running.'
      responses:
        '200':
          description: Success
          schema:
            $ref: '#/definitions/StopCrawlerScheduleResponse'
        '480':
          description: EntityNotFoundException
          schema:
            $ref: '#/definitions/EntityNotFoundException'
        '481':
          description: SchedulerNotRunningException
          schema:
            $ref: '#/definitions/SchedulerNotRunningException'
        '482':
          description: SchedulerTransitioningException
          schema:
            $ref: '#/definitions/SchedulerTransitioningException'
        '483':
          description: OperationTimeoutException
          schema:
            $ref: '#/definitions/OperationTimeoutException'
      parameters:
        - name: body
          in: body
          required: true
          schema:
            $ref: '#/definitions/StopCrawlerScheduleRequest'
    parameters:
      - $ref: '#/parameters/Action'
      - $ref: '#/parameters/Version'
      - $ref: '#/parameters/X-Amz-Content-Sha256'
      - $ref: '#/parameters/X-Amz-Date'
      - $ref: '#/parameters/X-Amz-Algorithm'
      - $ref: '#/parameters/X-Amz-Credential'
      - $ref: '#/parameters/X-Amz-Security-Token'
      - $ref: '#/parameters/X-Amz-Signature'
      - $ref: '#/parameters/X-Amz-SignedHeaders'
  '/#StopTrigger':
    post:
      operationId: StopTrigger
      description: Stops a specified trigger.
      responses:
        '200':
          description: Success
          schema:
            $ref: '#/definitions/StopTriggerResponse'
        '480':
          description: InvalidInputException
          schema:
            $ref: '#/definitions/InvalidInputException'
        '481':
          description: InternalServiceException
          schema:
            $ref: '#/definitions/InternalServiceException'
        '482':
          description: EntityNotFoundException
          schema:
            $ref: '#/definitions/EntityNotFoundException'
        '483':
          description: OperationTimeoutException
          schema:
            $ref: '#/definitions/OperationTimeoutException'
        '484':
          description: ConcurrentModificationException
          schema:
            $ref: '#/definitions/ConcurrentModificationException'
      parameters:
        - name: body
          in: body
          required: true
          schema:
            $ref: '#/definitions/StopTriggerRequest'
    parameters:
      - $ref: '#/parameters/Action'
      - $ref: '#/parameters/Version'
      - $ref: '#/parameters/X-Amz-Content-Sha256'
      - $ref: '#/parameters/X-Amz-Date'
      - $ref: '#/parameters/X-Amz-Algorithm'
      - $ref: '#/parameters/X-Amz-Credential'
      - $ref: '#/parameters/X-Amz-Security-Token'
      - $ref: '#/parameters/X-Amz-Signature'
      - $ref: '#/parameters/X-Amz-SignedHeaders'
  '/#UpdateClassifier':
    post:
      operationId: UpdateClassifier
      description: 'Modifies an existing classifier (a <code>GrokClassifier</code>, <code>XMLClassifier</code>, or <code>JsonClassifier</code>, depending on which field is present).'
      responses:
        '200':
          description: Success
          schema:
            $ref: '#/definitions/UpdateClassifierResponse'
        '480':
          description: InvalidInputException
          schema:
            $ref: '#/definitions/InvalidInputException'
        '481':
          description: VersionMismatchException
          schema:
            $ref: '#/definitions/VersionMismatchException'
        '482':
          description: EntityNotFoundException
          schema:
            $ref: '#/definitions/EntityNotFoundException'
        '483':
          description: OperationTimeoutException
          schema:
            $ref: '#/definitions/OperationTimeoutException'
      parameters:
        - name: body
          in: body
          required: true
          schema:
            $ref: '#/definitions/UpdateClassifierRequest'
    parameters:
      - $ref: '#/parameters/Action'
      - $ref: '#/parameters/Version'
      - $ref: '#/parameters/X-Amz-Content-Sha256'
      - $ref: '#/parameters/X-Amz-Date'
      - $ref: '#/parameters/X-Amz-Algorithm'
      - $ref: '#/parameters/X-Amz-Credential'
      - $ref: '#/parameters/X-Amz-Security-Token'
      - $ref: '#/parameters/X-Amz-Signature'
      - $ref: '#/parameters/X-Amz-SignedHeaders'
  '/#UpdateConnection':
    post:
      operationId: UpdateConnection
      description: Updates a connection definition in the Data Catalog.
      responses:
        '200':
          description: Success
          schema:
            $ref: '#/definitions/UpdateConnectionResponse'
        '480':
          description: InvalidInputException
          schema:
            $ref: '#/definitions/InvalidInputException'
        '481':
          description: EntityNotFoundException
          schema:
            $ref: '#/definitions/EntityNotFoundException'
        '482':
          description: OperationTimeoutException
          schema:
            $ref: '#/definitions/OperationTimeoutException'
      parameters:
        - name: body
          in: body
          required: true
          schema:
            $ref: '#/definitions/UpdateConnectionRequest'
    parameters:
      - $ref: '#/parameters/Action'
      - $ref: '#/parameters/Version'
      - $ref: '#/parameters/X-Amz-Content-Sha256'
      - $ref: '#/parameters/X-Amz-Date'
      - $ref: '#/parameters/X-Amz-Algorithm'
      - $ref: '#/parameters/X-Amz-Credential'
      - $ref: '#/parameters/X-Amz-Security-Token'
      - $ref: '#/parameters/X-Amz-Signature'
      - $ref: '#/parameters/X-Amz-SignedHeaders'
  '/#UpdateCrawler':
    post:
      operationId: UpdateCrawler
      description: 'Updates a crawler. If a crawler is running, you must stop it using <code>StopCrawler</code> before updating it.'
      responses:
        '200':
          description: Success
          schema:
            $ref: '#/definitions/UpdateCrawlerResponse'
        '480':
          description: InvalidInputException
          schema:
            $ref: '#/definitions/InvalidInputException'
        '481':
          description: VersionMismatchException
          schema:
            $ref: '#/definitions/VersionMismatchException'
        '482':
          description: EntityNotFoundException
          schema:
            $ref: '#/definitions/EntityNotFoundException'
        '483':
          description: CrawlerRunningException
          schema:
            $ref: '#/definitions/CrawlerRunningException'
        '484':
          description: OperationTimeoutException
          schema:
            $ref: '#/definitions/OperationTimeoutException'
      parameters:
        - name: body
          in: body
          required: true
          schema:
            $ref: '#/definitions/UpdateCrawlerRequest'
    parameters:
      - $ref: '#/parameters/Action'
      - $ref: '#/parameters/Version'
      - $ref: '#/parameters/X-Amz-Content-Sha256'
      - $ref: '#/parameters/X-Amz-Date'
      - $ref: '#/parameters/X-Amz-Algorithm'
      - $ref: '#/parameters/X-Amz-Credential'
      - $ref: '#/parameters/X-Amz-Security-Token'
      - $ref: '#/parameters/X-Amz-Signature'
      - $ref: '#/parameters/X-Amz-SignedHeaders'
  '/#UpdateCrawlerSchedule':
    post:
      operationId: UpdateCrawlerSchedule
      description: 'Updates the schedule of a crawler using a <code>cron</code> expression. '
      responses:
        '200':
          description: Success
          schema:
            $ref: '#/definitions/UpdateCrawlerScheduleResponse'
        '480':
          description: EntityNotFoundException
          schema:
            $ref: '#/definitions/EntityNotFoundException'
        '481':
          description: InvalidInputException
          schema:
            $ref: '#/definitions/InvalidInputException'
        '482':
          description: VersionMismatchException
          schema:
            $ref: '#/definitions/VersionMismatchException'
        '483':
          description: SchedulerTransitioningException
          schema:
            $ref: '#/definitions/SchedulerTransitioningException'
        '484':
          description: OperationTimeoutException
          schema:
            $ref: '#/definitions/OperationTimeoutException'
      parameters:
        - name: body
          in: body
          required: true
          schema:
            $ref: '#/definitions/UpdateCrawlerScheduleRequest'
    parameters:
      - $ref: '#/parameters/Action'
      - $ref: '#/parameters/Version'
      - $ref: '#/parameters/X-Amz-Content-Sha256'
      - $ref: '#/parameters/X-Amz-Date'
      - $ref: '#/parameters/X-Amz-Algorithm'
      - $ref: '#/parameters/X-Amz-Credential'
      - $ref: '#/parameters/X-Amz-Security-Token'
      - $ref: '#/parameters/X-Amz-Signature'
      - $ref: '#/parameters/X-Amz-SignedHeaders'
  '/#UpdateDatabase':
    post:
      operationId: UpdateDatabase
      description: Updates an existing database definition in a Data Catalog.
      responses:
        '200':
          description: Success
          schema:
            $ref: '#/definitions/UpdateDatabaseResponse'
        '480':
          description: EntityNotFoundException
          schema:
            $ref: '#/definitions/EntityNotFoundException'
        '481':
          description: InvalidInputException
          schema:
            $ref: '#/definitions/InvalidInputException'
        '482':
          description: InternalServiceException
          schema:
            $ref: '#/definitions/InternalServiceException'
        '483':
          description: OperationTimeoutException
          schema:
            $ref: '#/definitions/OperationTimeoutException'
      parameters:
        - name: body
          in: body
          required: true
          schema:
            $ref: '#/definitions/UpdateDatabaseRequest'
    parameters:
      - $ref: '#/parameters/Action'
      - $ref: '#/parameters/Version'
      - $ref: '#/parameters/X-Amz-Content-Sha256'
      - $ref: '#/parameters/X-Amz-Date'
      - $ref: '#/parameters/X-Amz-Algorithm'
      - $ref: '#/parameters/X-Amz-Credential'
      - $ref: '#/parameters/X-Amz-Security-Token'
      - $ref: '#/parameters/X-Amz-Signature'
      - $ref: '#/parameters/X-Amz-SignedHeaders'
  '/#UpdateDevEndpoint':
    post:
      operationId: UpdateDevEndpoint
      description: Updates a specified DevEndpoint.
      responses:
        '200':
          description: Success
          schema:
            $ref: '#/definitions/UpdateDevEndpointResponse'
        '480':
          description: EntityNotFoundException
          schema:
            $ref: '#/definitions/EntityNotFoundException'
        '481':
          description: InternalServiceException
          schema:
            $ref: '#/definitions/InternalServiceException'
        '482':
          description: OperationTimeoutException
          schema:
            $ref: '#/definitions/OperationTimeoutException'
        '483':
          description: InvalidInputException
          schema:
            $ref: '#/definitions/InvalidInputException'
        '484':
          description: ValidationException
          schema:
            $ref: '#/definitions/ValidationException'
      parameters:
        - name: body
          in: body
          required: true
          schema:
            $ref: '#/definitions/UpdateDevEndpointRequest'
    parameters:
      - $ref: '#/parameters/Action'
      - $ref: '#/parameters/Version'
      - $ref: '#/parameters/X-Amz-Content-Sha256'
      - $ref: '#/parameters/X-Amz-Date'
      - $ref: '#/parameters/X-Amz-Algorithm'
      - $ref: '#/parameters/X-Amz-Credential'
      - $ref: '#/parameters/X-Amz-Security-Token'
      - $ref: '#/parameters/X-Amz-Signature'
      - $ref: '#/parameters/X-Amz-SignedHeaders'
  '/#UpdateJob':
    post:
      operationId: UpdateJob
      description: Updates an existing job definition.
      responses:
        '200':
          description: Success
          schema:
            $ref: '#/definitions/UpdateJobResponse'
        '480':
          description: InvalidInputException
          schema:
            $ref: '#/definitions/InvalidInputException'
        '481':
          description: EntityNotFoundException
          schema:
            $ref: '#/definitions/EntityNotFoundException'
        '482':
          description: InternalServiceException
          schema:
            $ref: '#/definitions/InternalServiceException'
        '483':
          description: OperationTimeoutException
          schema:
            $ref: '#/definitions/OperationTimeoutException'
        '484':
          description: ConcurrentModificationException
          schema:
            $ref: '#/definitions/ConcurrentModificationException'
      parameters:
        - name: body
          in: body
          required: true
          schema:
            $ref: '#/definitions/UpdateJobRequest'
    parameters:
      - $ref: '#/parameters/Action'
      - $ref: '#/parameters/Version'
      - $ref: '#/parameters/X-Amz-Content-Sha256'
      - $ref: '#/parameters/X-Amz-Date'
      - $ref: '#/parameters/X-Amz-Algorithm'
      - $ref: '#/parameters/X-Amz-Credential'
      - $ref: '#/parameters/X-Amz-Security-Token'
      - $ref: '#/parameters/X-Amz-Signature'
      - $ref: '#/parameters/X-Amz-SignedHeaders'
  '/#UpdatePartition':
    post:
      operationId: UpdatePartition
      description: Updates a partition.
      responses:
        '200':
          description: Success
          schema:
            $ref: '#/definitions/UpdatePartitionResponse'
        '480':
          description: EntityNotFoundException
          schema:
            $ref: '#/definitions/EntityNotFoundException'
        '481':
          description: InvalidInputException
          schema:
            $ref: '#/definitions/InvalidInputException'
        '482':
          description: InternalServiceException
          schema:
            $ref: '#/definitions/InternalServiceException'
        '483':
          description: OperationTimeoutException
          schema:
            $ref: '#/definitions/OperationTimeoutException'
      parameters:
        - name: body
          in: body
          required: true
          schema:
            $ref: '#/definitions/UpdatePartitionRequest'
    parameters:
      - $ref: '#/parameters/Action'
      - $ref: '#/parameters/Version'
      - $ref: '#/parameters/X-Amz-Content-Sha256'
      - $ref: '#/parameters/X-Amz-Date'
      - $ref: '#/parameters/X-Amz-Algorithm'
      - $ref: '#/parameters/X-Amz-Credential'
      - $ref: '#/parameters/X-Amz-Security-Token'
      - $ref: '#/parameters/X-Amz-Signature'
      - $ref: '#/parameters/X-Amz-SignedHeaders'
  '/#UpdateTable':
    post:
      operationId: UpdateTable
      description: Updates a metadata table in the Data Catalog.
      responses:
        '200':
          description: Success
          schema:
            $ref: '#/definitions/UpdateTableResponse'
        '480':
          description: EntityNotFoundException
          schema:
            $ref: '#/definitions/EntityNotFoundException'
        '481':
          description: InvalidInputException
          schema:
            $ref: '#/definitions/InvalidInputException'
        '482':
          description: InternalServiceException
          schema:
            $ref: '#/definitions/InternalServiceException'
        '483':
          description: OperationTimeoutException
          schema:
            $ref: '#/definitions/OperationTimeoutException'
        '484':
          description: ConcurrentModificationException
          schema:
            $ref: '#/definitions/ConcurrentModificationException'
        '485':
          description: ResourceNumberLimitExceededException
          schema:
            $ref: '#/definitions/ResourceNumberLimitExceededException'
      parameters:
        - name: body
          in: body
          required: true
          schema:
            $ref: '#/definitions/UpdateTableRequest'
    parameters:
      - $ref: '#/parameters/Action'
      - $ref: '#/parameters/Version'
      - $ref: '#/parameters/X-Amz-Content-Sha256'
      - $ref: '#/parameters/X-Amz-Date'
      - $ref: '#/parameters/X-Amz-Algorithm'
      - $ref: '#/parameters/X-Amz-Credential'
      - $ref: '#/parameters/X-Amz-Security-Token'
      - $ref: '#/parameters/X-Amz-Signature'
      - $ref: '#/parameters/X-Amz-SignedHeaders'
  '/#UpdateTrigger':
    post:
      operationId: UpdateTrigger
      description: Updates a trigger definition.
      responses:
        '200':
          description: Success
          schema:
            $ref: '#/definitions/UpdateTriggerResponse'
        '480':
          description: InvalidInputException
          schema:
            $ref: '#/definitions/InvalidInputException'
        '481':
          description: InternalServiceException
          schema:
            $ref: '#/definitions/InternalServiceException'
        '482':
          description: EntityNotFoundException
          schema:
            $ref: '#/definitions/EntityNotFoundException'
        '483':
          description: OperationTimeoutException
          schema:
            $ref: '#/definitions/OperationTimeoutException'
        '484':
          description: ConcurrentModificationException
          schema:
            $ref: '#/definitions/ConcurrentModificationException'
      parameters:
        - name: body
          in: body
          required: true
          schema:
            $ref: '#/definitions/UpdateTriggerRequest'
    parameters:
      - $ref: '#/parameters/Action'
      - $ref: '#/parameters/Version'
      - $ref: '#/parameters/X-Amz-Content-Sha256'
      - $ref: '#/parameters/X-Amz-Date'
      - $ref: '#/parameters/X-Amz-Algorithm'
      - $ref: '#/parameters/X-Amz-Credential'
      - $ref: '#/parameters/X-Amz-Security-Token'
      - $ref: '#/parameters/X-Amz-Signature'
      - $ref: '#/parameters/X-Amz-SignedHeaders'
  '/#UpdateUserDefinedFunction':
    post:
      operationId: UpdateUserDefinedFunction
      description: Updates an existing function definition in the Data Catalog.
      responses:
        '200':
          description: Success
          schema:
            $ref: '#/definitions/UpdateUserDefinedFunctionResponse'
        '480':
          description: EntityNotFoundException
          schema:
            $ref: '#/definitions/EntityNotFoundException'
        '481':
          description: InvalidInputException
          schema:
            $ref: '#/definitions/InvalidInputException'
        '482':
          description: InternalServiceException
          schema:
            $ref: '#/definitions/InternalServiceException'
        '483':
          description: OperationTimeoutException
          schema:
            $ref: '#/definitions/OperationTimeoutException'
      parameters:
        - name: body
          in: body
          required: true
          schema:
            $ref: '#/definitions/UpdateUserDefinedFunctionRequest'
    parameters:
      - $ref: '#/parameters/Action'
      - $ref: '#/parameters/Version'
      - $ref: '#/parameters/X-Amz-Content-Sha256'
      - $ref: '#/parameters/X-Amz-Date'
      - $ref: '#/parameters/X-Amz-Algorithm'
      - $ref: '#/parameters/X-Amz-Credential'
      - $ref: '#/parameters/X-Amz-Security-Token'
      - $ref: '#/parameters/X-Amz-Signature'
      - $ref: '#/parameters/X-Amz-SignedHeaders'
definitions:
  AccessDeniedException:
    type: object
    properties:
      Message:
        $ref: '#/definitions/MessageString'
        description: A message describing the problem.
    description: Access to a resource was denied.
  Action:
    type: object
    properties:
      JobName:
        $ref: '#/definitions/NameString'
        description: The name of a job to be executed.
      Arguments:
        $ref: '#/definitions/GenericMap'
        description: '<p>Arguments to be passed to the job.</p> <p>You can specify arguments here that your own job-execution script consumes, as well as arguments that AWS Glue itself consumes.</p> <p>For information about how to specify and consume your own Job arguments, see the <a href="http://docs.aws.amazon.com/glue/latest/dg/aws-glue-programming-python-calling.html">Calling AWS Glue APIs in Python</a> topic in the developer guide.</p> <p>For information about the key-value pairs that AWS Glue consumes to set up your job, see the <a href="http://docs.aws.amazon.com/glue/latest/dg/aws-glue-programming-python-glue-arguments.html">Special Parameters Used by AWS Glue</a> topic in the developer guide.</p>'
    description: Defines an action to be initiated by a trigger.
  ActionList:
    type: array
    items:
      $ref: '#/definitions/Action'
  AlreadyExistsException:
    type: object
    properties:
      Message:
        $ref: '#/definitions/MessageString'
        description: A message describing the problem.
    description: A resource to be created or added already exists.
  AttemptCount:
    type: integer
  BatchCreatePartitionRequest:
    type: object
    required:
      - DatabaseName
      - TableName
      - PartitionInputList
    properties:
      CatalogId:
        $ref: '#/definitions/CatalogIdString'
        description: 'The ID of the catalog in which the partion is to be created. Currently, this should be the AWS account ID.'
      DatabaseName:
        $ref: '#/definitions/NameString'
        description: The name of the metadata database in which the partition is to be created.
      TableName:
        $ref: '#/definitions/NameString'
        description: The name of the metadata table in which the partition is to be created.
      PartitionInputList:
        $ref: '#/definitions/PartitionInputList'
        description: A list of <code>PartitionInput</code> structures that define the partitions to be created.
  BatchCreatePartitionResponse:
    type: object
    properties:
      Errors:
        $ref: '#/definitions/PartitionErrors'
        description: Errors encountered when trying to create the requested partitions.
  BatchDeleteConnectionRequest:
    type: object
    required:
      - ConnectionNameList
    properties:
      CatalogId:
        $ref: '#/definitions/CatalogIdString'
        description: 'The ID of the Data Catalog in which the connections reside. If none is supplied, the AWS account ID is used by default.'
      ConnectionNameList:
        $ref: '#/definitions/DeleteConnectionNameList'
        description: A list of names of the connections to delete.
  BatchDeleteConnectionResponse:
    type: object
    properties:
      Succeeded:
        $ref: '#/definitions/NameStringList'
        description: A list of names of the connection definitions that were successfully deleted.
      Errors:
        $ref: '#/definitions/ErrorByName'
        description: A map of the names of connections that were not successfully deleted to error details.
  BatchDeletePartitionRequest:
    type: object
    required:
      - DatabaseName
      - TableName
      - PartitionsToDelete
    properties:
      CatalogId:
        $ref: '#/definitions/CatalogIdString'
        description: 'The ID of the Data Catalog where the partition to be deleted resides. If none is supplied, the AWS account ID is used by default.'
      DatabaseName:
        $ref: '#/definitions/NameString'
        description: The name of the catalog database in which the table in question resides.
      TableName:
        $ref: '#/definitions/NameString'
        description: The name of the table where the partitions to be deleted is located.
      PartitionsToDelete:
        $ref: '#/definitions/BatchDeletePartitionValueList'
        description: A list of <code>PartitionInput</code> structures that define the partitions to be deleted.
  BatchDeletePartitionResponse:
    type: object
    properties:
      Errors:
        $ref: '#/definitions/PartitionErrors'
        description: Errors encountered when trying to delete the requested partitions.
  BatchDeletePartitionValueList:
    type: array
    items:
      $ref: '#/definitions/PartitionValueList'
    minItems: 0
    maxItems: 25
  BatchDeleteTableNameList:
    type: array
    items:
      $ref: '#/definitions/NameString'
    minItems: 0
    maxItems: 100
  BatchDeleteTableRequest:
    type: object
    required:
      - DatabaseName
      - TablesToDelete
    properties:
      CatalogId:
        $ref: '#/definitions/CatalogIdString'
        description: 'The ID of the Data Catalog where the table resides. If none is supplied, the AWS account ID is used by default.'
      DatabaseName:
        $ref: '#/definitions/NameString'
        description: 'The name of the catalog database where the tables to delete reside. For Hive compatibility, this name is entirely lowercase.'
      TablesToDelete:
        $ref: '#/definitions/BatchDeleteTableNameList'
        description: A list of the table to delete.
  BatchDeleteTableResponse:
    type: object
    properties:
      Errors:
        $ref: '#/definitions/TableErrors'
        description: A list of errors encountered in attempting to delete the specified tables.
  BatchDeleteTableVersionList:
    type: array
    items:
      $ref: '#/definitions/VersionString'
    minItems: 0
    maxItems: 100
  BatchDeleteTableVersionRequest:
    type: object
    required:
      - DatabaseName
      - TableName
      - VersionIds
    properties:
      CatalogId:
        $ref: '#/definitions/CatalogIdString'
        description: 'The ID of the Data Catalog where the tables reside. If none is supplied, the AWS account ID is used by default.'
      DatabaseName:
        $ref: '#/definitions/NameString'
        description: 'The database in the catalog in which the table resides. For Hive compatibility, this name is entirely lowercase.'
      TableName:
        $ref: '#/definitions/NameString'
        description: 'The name of the table. For Hive compatibility, this name is entirely lowercase.'
      VersionIds:
        $ref: '#/definitions/BatchDeleteTableVersionList'
        description: A list of the IDs of versions to be deleted.
  BatchDeleteTableVersionResponse:
    type: object
    properties:
      Errors:
        $ref: '#/definitions/TableVersionErrors'
        description: A list of errors encountered while trying to delete the specified table versions.
  BatchGetPartitionRequest:
    type: object
    required:
      - DatabaseName
      - TableName
      - PartitionsToGet
    properties:
      CatalogId:
        $ref: '#/definitions/CatalogIdString'
        description: 'The ID of the Data Catalog where the partitions in question reside. If none is supplied, the AWS account ID is used by default.'
      DatabaseName:
        $ref: '#/definitions/NameString'
        description: The name of the catalog database where the partitions reside.
      TableName:
        $ref: '#/definitions/NameString'
        description: The name of the partitions' table.
      PartitionsToGet:
        $ref: '#/definitions/BatchGetPartitionValueList'
        description: A list of partition values identifying the partitions to retrieve.
  BatchGetPartitionResponse:
    type: object
    properties:
      Partitions:
        $ref: '#/definitions/PartitionList'
        description: A list of the requested partitions.
      UnprocessedKeys:
        $ref: '#/definitions/BatchGetPartitionValueList'
        description: A list of the partition values in the request for which partions were not returned.
  BatchGetPartitionValueList:
    type: array
    items:
      $ref: '#/definitions/PartitionValueList'
    minItems: 0
    maxItems: 1000
  BatchStopJobRunError:
    type: object
    properties:
      JobName:
        $ref: '#/definitions/NameString'
        description: The name of the Job in question.
      JobRunId:
        $ref: '#/definitions/IdString'
        description: The JobRunId of the JobRun in question.
      ErrorDetail:
        $ref: '#/definitions/ErrorDetail'
        description: Specifies details about the error that was encountered.
    description: Records an error that occurred when attempting to stop a specified JobRun.
  BatchStopJobRunErrorList:
    type: array
    items:
      $ref: '#/definitions/BatchStopJobRunError'
  BatchStopJobRunJobRunIdList:
    type: array
    items:
      $ref: '#/definitions/IdString'
    minItems: 1
    maxItems: 25
  BatchStopJobRunRequest:
    type: object
    required:
      - JobName
      - JobRunIds
    properties:
      JobName:
        $ref: '#/definitions/NameString'
        description: The name of the Job in question.
      JobRunIds:
        $ref: '#/definitions/BatchStopJobRunJobRunIdList'
        description: A list of the JobRunIds that should be stopped for that Job.
  BatchStopJobRunResponse:
    type: object
    properties:
      SuccessfulSubmissions:
        $ref: '#/definitions/BatchStopJobRunSuccessfulSubmissionList'
        description: A list of the JobRuns that were successfully submitted for stopping.
      Errors:
        $ref: '#/definitions/BatchStopJobRunErrorList'
        description: 'A list of the errors that were encountered in tryng to stop JobRuns, including the JobRunId for which each error was encountered and details about the error.'
  BatchStopJobRunSuccessfulSubmission:
    type: object
    properties:
      JobName:
        $ref: '#/definitions/NameString'
        description: The Name of the Job in question.
      JobRunId:
        $ref: '#/definitions/IdString'
        description: The JobRunId of the JobRun in question.
    description: Records a successful request to stop a specified JobRun.
  BatchStopJobRunSuccessfulSubmissionList:
    type: array
    items:
      $ref: '#/definitions/BatchStopJobRunSuccessfulSubmission'
  Boolean:
    type: boolean
  BooleanNullable:
    type: boolean
  BooleanValue:
    type: boolean
  BoundedPartitionValueList:
    type: array
    items:
      $ref: '#/definitions/ValueString'
    minItems: 0
    maxItems: 100
  CatalogEntries:
    type: array
    items:
      $ref: '#/definitions/CatalogEntry'
  CatalogEntry:
    type: object
    required:
      - DatabaseName
      - TableName
    properties:
      DatabaseName:
        $ref: '#/definitions/NameString'
        description: The database in which the table metadata resides.
      TableName:
        $ref: '#/definitions/NameString'
        description: The name of the table in question.
    description: Specifies a table definition in the Data Catalog.
  CatalogIdString:
    type: string
    minLength: 1
    maxLength: 255
    x-pattern: '[\u0020-\uD7FF\uE000-\uFFFD\uD800\uDC00-\uDBFF\uDFFF\t]*'
  CatalogImportStatus:
    type: object
    properties:
      ImportCompleted:
        $ref: '#/definitions/Boolean'
        description: 'True if the migration has completed, or False otherwise.'
      ImportTime:
        $ref: '#/definitions/Timestamp'
        description: The time that the migration was started.
      ImportedBy:
        $ref: '#/definitions/NameString'
        description: The name of the person who initiated the migration.
    description: A structure containing migration status information.
  Classification:
    type: string
  Classifier:
    type: object
    properties:
      GrokClassifier:
        $ref: '#/definitions/GrokClassifier'
        description: A <code>GrokClassifier</code> object.
      XMLClassifier:
        $ref: '#/definitions/XMLClassifier'
        description: An <code>XMLClassifier</code> object.
      JsonClassifier:
        $ref: '#/definitions/JsonClassifier'
        description: A <code>JsonClassifier</code> object.
    description: '<p>Classifiers are written in Python and triggered during a crawl task. You can write your own classifiers to best categorize your data sources and specify the appropriate schemas to use for them. A classifier checks whether a given file is in a format it can handle, and if it is, the classifier creates a schema in the form of a <code>StructType</code> object that matches that data format.</p> <p>A classifier can be a <code>grok</code> classifier, an XML classifier, or a JSON classifier, asspecified in one of the fields in the <code>Classifier</code> object.</p>'
  ClassifierList:
    type: array
    items:
      $ref: '#/definitions/Classifier'
  ClassifierNameList:
    type: array
    items:
      $ref: '#/definitions/NameString'
  CodeGenArgName:
    type: string
  CodeGenArgValue:
    type: string
  CodeGenEdge:
    type: object
    required:
      - Source
      - Target
    properties:
      Source:
        $ref: '#/definitions/CodeGenIdentifier'
        description: The ID of the node at which the edge starts.
      Target:
        $ref: '#/definitions/CodeGenIdentifier'
        description: The ID of the node at which the edge ends.
      TargetParameter:
        $ref: '#/definitions/CodeGenArgName'
        description: The target of the edge.
    description: Represents a directional edge in a directed acyclic graph (DAG).
  CodeGenIdentifier:
    type: string
    pattern: '[A-Za-z_][A-Za-z0-9_]*'
    minLength: 1
    maxLength: 255
  CodeGenNode:
    type: object
    required:
      - Id
      - NodeType
      - Args
    properties:
      Id:
        $ref: '#/definitions/CodeGenIdentifier'
        description: A node identifier that is unique within the node's graph.
      NodeType:
        $ref: '#/definitions/CodeGenNodeType'
        description: The type of node this is.
      Args:
        $ref: '#/definitions/CodeGenNodeArgs'
        description: 'Properties of the node, in the form of name-value pairs.'
      LineNumber:
        $ref: '#/definitions/Integer'
        description: The line number of the node.
    description: Represents a node in a directed acyclic graph (DAG)
  CodeGenNodeArg:
    type: object
    required:
      - Name
      - Value
    properties:
      Name:
        $ref: '#/definitions/CodeGenArgName'
        description: The name of the argument or property.
      Value:
        $ref: '#/definitions/CodeGenArgValue'
        description: The value of the argument or property.
      Param:
        $ref: '#/definitions/Boolean'
        description: True if the value is used as a parameter.
    description: An argument or property of a node.
  CodeGenNodeArgs:
    type: array
    items:
      $ref: '#/definitions/CodeGenNodeArg'
    minItems: 0
    maxItems: 50
  CodeGenNodeType:
    type: string
  Column:
    type: object
    required:
      - Name
    properties:
      Name:
        $ref: '#/definitions/NameString'
        description: The name of the <code>Column</code>.
      Type:
        $ref: '#/definitions/ColumnTypeString'
        description: The datatype of data in the <code>Column</code>.
      Comment:
        $ref: '#/definitions/CommentString'
        description: Free-form text comment.
    description: A column in a <code>Table</code>.
  ColumnList:
    type: array
    items:
      $ref: '#/definitions/Column'
  ColumnTypeString:
    type: string
    minLength: 0
    maxLength: 131072
    x-pattern: '[\u0020-\uD7FF\uE000-\uFFFD\uD800\uDC00-\uDBFF\uDFFF\t]*'
  ColumnValueStringList:
    type: array
    items:
      $ref: '#/definitions/ColumnValuesString'
  ColumnValuesString:
    type: string
  CommentString:
    type: string
    minLength: 0
    maxLength: 255
    x-pattern: '[\u0020-\uD7FF\uE000-\uFFFD\uD800\uDC00-\uDBFF\uDFFF\t]*'
  ConcurrentModificationException:
    type: object
    properties:
      Message:
        $ref: '#/definitions/MessageString'
        description: A message describing the problem.
    description: Two processes are trying to modify a resource simultaneously.
  ConcurrentRunsExceededException:
    type: object
    properties:
      Message:
        $ref: '#/definitions/MessageString'
        description: A message describing the problem.
    description: Too many jobs are being run concurrently.
  Condition:
    type: object
    properties:
      LogicalOperator:
        $ref: '#/definitions/LogicalOperator'
        description: A logical operator.
      JobName:
        $ref: '#/definitions/NameString'
        description: The name of the Job to whose JobRuns this condition applies and on which this trigger waits.
      State:
        $ref: '#/definitions/JobRunState'
        description: 'The condition state. Currently, the values supported are SUCCEEDED, STOPPED and FAILED.'
    description: Defines a condition under which a trigger fires.
  ConditionList:
    type: array
    items:
      $ref: '#/definitions/Condition'
  Connection:
    type: object
    properties:
      Name:
        $ref: '#/definitions/NameString'
        description: The name of the connection definition.
      Description:
        $ref: '#/definitions/DescriptionString'
        description: Description of the connection.
      ConnectionType:
        $ref: '#/definitions/ConnectionType'
        description: 'The type of the connection. Currently, only JDBC is supported; SFTP is not supported.'
      MatchCriteria:
        $ref: '#/definitions/MatchCriteria'
        description: A list of criteria that can be used in selecting this connection.
      ConnectionProperties:
        $ref: '#/definitions/ConnectionProperties'
        description: A list of key-value pairs used as parameters for this connection.
      PhysicalConnectionRequirements:
        $ref: '#/definitions/PhysicalConnectionRequirements'
        description: 'A map of physical connection requirements, such as VPC and SecurityGroup, needed for making this connection successfully.'
      CreationTime:
        $ref: '#/definitions/Timestamp'
        description: The time this connection definition was created.
      LastUpdatedTime:
        $ref: '#/definitions/Timestamp'
        description: The last time this connection definition was updated.
      LastUpdatedBy:
        $ref: '#/definitions/NameString'
        description: 'The user, group or role that last updated this connection definition.'
    description: Defines a connection to a data source.
  ConnectionInput:
    type: object
    required:
      - Name
      - ConnectionType
      - ConnectionProperties
    properties:
      Name:
        $ref: '#/definitions/NameString'
        description: The name of the connection.
      Description:
        $ref: '#/definitions/DescriptionString'
        description: Description of the connection.
      ConnectionType:
        $ref: '#/definitions/ConnectionType'
        description: 'The type of the connection. Currently, only JDBC is supported; SFTP is not supported.'
      MatchCriteria:
        $ref: '#/definitions/MatchCriteria'
        description: A list of criteria that can be used in selecting this connection.
      ConnectionProperties:
        $ref: '#/definitions/ConnectionProperties'
        description: A list of key-value pairs used as parameters for this connection.
      PhysicalConnectionRequirements:
        $ref: '#/definitions/PhysicalConnectionRequirements'
        description: 'A map of physical connection requirements, such as VPC and SecurityGroup, needed for making this connection successfully.'
    description: A structure used to specify a connection to create or update.
  ConnectionList:
    type: array
    items:
      $ref: '#/definitions/Connection'
  ConnectionName:
    type: string
  ConnectionProperties:
    type: array
    minItems: 0
    maxItems: 100
    items:
      type: object
      properties:
        key:
          $ref: '#/definitions/ConnectionPropertyKey'
        value:
          $ref: '#/definitions/ValueString'
  ConnectionPropertyKey:
    type: string
    enum:
      - HOST
      - PORT
      - USERNAME
      - PASSWORD
      - JDBC_DRIVER_JAR_URI
      - JDBC_DRIVER_CLASS_NAME
      - JDBC_ENGINE
      - JDBC_ENGINE_VERSION
      - CONFIG_FILES
      - INSTANCE_ID
      - JDBC_CONNECTION_URL
  ConnectionType:
    type: string
    enum:
      - JDBC
      - SFTP
  ConnectionsList:
    type: object
    properties:
      Connections:
        $ref: '#/definitions/StringList'
        description: A list of connections used by the job.
    description: Specifies the connections used by a job.
  Crawler:
    type: object
    properties:
      Name:
        $ref: '#/definitions/NameString'
        description: The crawler name.
      Role:
        $ref: '#/definitions/Role'
        description: 'The IAM role (or ARN of an IAM role) used to access customer resources, such as data in Amazon S3.'
      Targets:
        $ref: '#/definitions/CrawlerTargets'
        description: A collection of targets to crawl.
      DatabaseName:
        $ref: '#/definitions/DatabaseName'
        description: The database where metadata is written by this crawler.
      Description:
        $ref: '#/definitions/DescriptionString'
        description: A description of the crawler.
      Classifiers:
        $ref: '#/definitions/ClassifierNameList'
        description: A list of custom classifiers associated with the crawler.
      SchemaChangePolicy:
        $ref: '#/definitions/SchemaChangePolicy'
        description: Sets the behavior when the crawler finds a changed or deleted object.
      State:
        $ref: '#/definitions/CrawlerState'
        description: 'Indicates whether the crawler is running, or whether a run is pending.'
      TablePrefix:
        $ref: '#/definitions/TablePrefix'
        description: The prefix added to the names of tables that are created.
      Schedule:
        $ref: '#/definitions/Schedule'
        description: 'For scheduled crawlers, the schedule when the crawler runs.'
      CrawlElapsedTime:
        $ref: '#/definitions/MillisecondsCount'
        description: 'If the crawler is running, contains the total time elapsed since the last crawl began.'
      CreationTime:
        $ref: '#/definitions/Timestamp'
        description: The time when the crawler was created.
      LastUpdated:
        $ref: '#/definitions/Timestamp'
        description: The time the crawler was last updated.
      LastCrawl:
        $ref: '#/definitions/LastCrawlInfo'
        description: 'The status of the last crawl, and potentially error information if an error occurred.'
      Version:
        $ref: '#/definitions/VersionId'
        description: The version of the crawler.
      Configuration:
        $ref: '#/definitions/CrawlerConfiguration'
        description: '<p>Crawler configuration information. This versioned JSON string allows users to specify aspects of a Crawler''s behavior.</p> <p>You can use this field to force partitions to inherit metadata such as classification, input format, output format, serde information, and schema from their parent table, rather than detect this information separately for each partition. Use the following JSON string to specify that behavior:</p> <p>Example: <code>''{ "Version": 1.0, "CrawlerOutput": { "Partitions": { "AddOrUpdateBehavior": "InheritFromTable" } } }''</code> </p>'
    description: 'Specifies a crawler program that examines a data source and uses classifiers to try to determine its schema. If successful, the crawler records metadata concerning the data source in the AWS Glue Data Catalog.'
  CrawlerConfiguration:
    type: string
  CrawlerList:
    type: array
    items:
      $ref: '#/definitions/Crawler'
  CrawlerMetrics:
    type: object
    properties:
      CrawlerName:
        $ref: '#/definitions/NameString'
        description: The name of the crawler.
      TimeLeftSeconds:
        $ref: '#/definitions/NonNegativeDouble'
        description: The estimated time left to complete a running crawl.
      StillEstimating:
        $ref: '#/definitions/Boolean'
        description: True if the crawler is still estimating how long it will take to complete this run.
      LastRuntimeSeconds:
        $ref: '#/definitions/NonNegativeDouble'
        description: 'The duration of the crawler''s most recent run, in seconds.'
      MedianRuntimeSeconds:
        $ref: '#/definitions/NonNegativeDouble'
        description: 'The median duration of this crawler''s runs, in seconds.'
      TablesCreated:
        $ref: '#/definitions/NonNegativeInteger'
        description: The number of tables created by this crawler.
      TablesUpdated:
        $ref: '#/definitions/NonNegativeInteger'
        description: The number of tables updated by this crawler.
      TablesDeleted:
        $ref: '#/definitions/NonNegativeInteger'
        description: The number of tables deleted by this crawler.
    description: Metrics for a specified crawler.
  CrawlerMetricsList:
    type: array
    items:
      $ref: '#/definitions/CrawlerMetrics'
  CrawlerNameList:
    type: array
    items:
      $ref: '#/definitions/NameString'
    minItems: 0
    maxItems: 100
  CrawlerNotRunningException:
    type: object
    properties:
      Message:
        $ref: '#/definitions/MessageString'
        description: A message describing the problem.
    description: The specified crawler is not running.
  CrawlerRunningException:
    type: object
    properties:
      Message:
        $ref: '#/definitions/MessageString'
        description: A message describing the problem.
    description: The operation cannot be performed because the crawler is already running.
  CrawlerState:
    type: string
    enum:
      - READY
      - RUNNING
      - STOPPING
  CrawlerStoppingException:
    type: object
    properties:
      Message:
        $ref: '#/definitions/MessageString'
        description: A message describing the problem.
    description: The specified crawler is stopping.
  CrawlerTargets:
    type: object
    properties:
      S3Targets:
        $ref: '#/definitions/S3TargetList'
        description: Specifies Amazon S3 targets.
      JdbcTargets:
        $ref: '#/definitions/JdbcTargetList'
        description: Specifies JDBC targets.
    description: Specifies data stores to crawl.
  CreateClassifierRequest:
    type: object
    properties:
      GrokClassifier:
        $ref: '#/definitions/CreateGrokClassifierRequest'
        description: A <code>GrokClassifier</code> object specifying the classifier to create.
      XMLClassifier:
        $ref: '#/definitions/CreateXMLClassifierRequest'
        description: An <code>XMLClassifier</code> object specifying the classifier to create.
      JsonClassifier:
        $ref: '#/definitions/CreateJsonClassifierRequest'
        description: A <code>JsonClassifier</code> object specifying the classifier to create.
  CreateClassifierResponse:
    type: object
    properties: {}
  CreateConnectionRequest:
    type: object
    required:
      - ConnectionInput
    properties:
      CatalogId:
        $ref: '#/definitions/CatalogIdString'
        description: 'The ID of the Data Catalog in which to create the connection. If none is supplied, the AWS account ID is used by default.'
      ConnectionInput:
        $ref: '#/definitions/ConnectionInput'
        description: A <code>ConnectionInput</code> object defining the connection to create.
  CreateConnectionResponse:
    type: object
    properties: {}
  CreateCrawlerRequest:
    type: object
    required:
      - Name
      - Role
      - DatabaseName
      - Targets
    properties:
      Name:
        $ref: '#/definitions/NameString'
        description: Name of the new crawler.
      Role:
        $ref: '#/definitions/Role'
        description: The IAM role (or ARN of an IAM role) used by the new crawler to access customer resources.
      DatabaseName:
        $ref: '#/definitions/DatabaseName'
        description: 'The AWS Glue database where results are written, such as: <code>arn:aws:daylight:us-east-1::database/sometable/*</code>.'
      Description:
        $ref: '#/definitions/DescriptionString'
        description: A description of the new crawler.
      Targets:
        $ref: '#/definitions/CrawlerTargets'
        description: A list of collection of targets to crawl.
      Schedule:
        $ref: '#/definitions/CronExpression'
        description: 'A <code>cron</code> expression used to specify the schedule (see <a href="http://docs.aws.amazon.com/glue/latest/dg/monitor-data-warehouse-schedule.html">Time-Based Schedules for Jobs and Crawlers</a>. For example, to run something every day at 12:15 UTC, you would specify: <code>cron(15 12 * * ? *)</code>.'
      Classifiers:
        $ref: '#/definitions/ClassifierNameList'
        description: 'A list of custom classifiers that the user has registered. By default, all AWS classifiers are included in a crawl, but these custom classifiers always override the default classifiers for a given classification.'
      TablePrefix:
        $ref: '#/definitions/TablePrefix'
        description: The table prefix used for catalog tables that are created.
      SchemaChangePolicy:
        $ref: '#/definitions/SchemaChangePolicy'
        description: Policy for the crawler's update and deletion behavior.
      Configuration:
        $ref: '#/definitions/CrawlerConfiguration'
        description: '<p>Crawler configuration information. This versioned JSON string allows users to specify aspects of a Crawler''s behavior.</p> <p>You can use this field to force partitions to inherit metadata such as classification, input format, output format, serde information, and schema from their parent table, rather than detect this information separately for each partition. Use the following JSON string to specify that behavior:</p> <p>Example: <code>''{ "Version": 1.0, "CrawlerOutput": { "Partitions": { "AddOrUpdateBehavior": "InheritFromTable" } } }''</code> </p>'
  CreateCrawlerResponse:
    type: object
    properties: {}
  CreateDatabaseRequest:
    type: object
    required:
      - DatabaseInput
    properties:
      CatalogId:
        $ref: '#/definitions/CatalogIdString'
        description: 'The ID of the Data Catalog in which to create the database. If none is supplied, the AWS account ID is used by default.'
      DatabaseInput:
        $ref: '#/definitions/DatabaseInput'
        description: A <code>DatabaseInput</code> object defining the metadata database to create in the catalog.
  CreateDatabaseResponse:
    type: object
    properties: {}
  CreateDevEndpointRequest:
    type: object
    required:
      - EndpointName
      - RoleArn
      - PublicKey
    properties:
      EndpointName:
        $ref: '#/definitions/GenericString'
        description: The name to be assigned to the new DevEndpoint.
      RoleArn:
        $ref: '#/definitions/RoleArn'
        description: The IAM role for the DevEndpoint.
      SecurityGroupIds:
        $ref: '#/definitions/StringList'
        description: Security group IDs for the security groups to be used by the new DevEndpoint.
      SubnetId:
        $ref: '#/definitions/GenericString'
        description: The subnet ID for the new DevEndpoint to use.
      PublicKey:
        $ref: '#/definitions/GenericString'
        description: The public key to use for authentication.
      NumberOfNodes:
        $ref: '#/definitions/IntegerValue'
        description: The number of AWS Glue Data Processing Units (DPUs) to allocate to this DevEndpoint.
      ExtraPythonLibsS3Path:
        $ref: '#/definitions/GenericString'
        description: '<p>Path(s) to one or more Python libraries in an S3 bucket that should be loaded in your DevEndpoint. Multiple values must be complete paths separated by a comma.</p> <p>Please note that only pure Python libraries can currently be used on a DevEndpoint. Libraries that rely on C extensions, such as the <a href="http://pandas.pydata.org/">pandas</a> Python data analysis library, are not yet supported.</p>'
      ExtraJarsS3Path:
        $ref: '#/definitions/GenericString'
        description: Path to one or more Java Jars in an S3 bucket that should be loaded in your DevEndpoint.
  CreateDevEndpointResponse:
    type: object
    properties:
      EndpointName:
        $ref: '#/definitions/GenericString'
        description: The name assigned to the new DevEndpoint.
      Status:
        $ref: '#/definitions/GenericString'
        description: The current status of the new DevEndpoint.
      SecurityGroupIds:
        $ref: '#/definitions/StringList'
        description: The security groups assigned to the new DevEndpoint.
      SubnetId:
        $ref: '#/definitions/GenericString'
        description: The subnet ID assigned to the new DevEndpoint.
      RoleArn:
        $ref: '#/definitions/RoleArn'
        description: The AWS ARN of the role assigned to the new DevEndpoint.
      YarnEndpointAddress:
        $ref: '#/definitions/GenericString'
        description: The address of the YARN endpoint used by this DevEndpoint.
      ZeppelinRemoteSparkInterpreterPort:
        $ref: '#/definitions/IntegerValue'
        description: The Apache Zeppelin port for the remote Apache Spark interpreter.
      NumberOfNodes:
        $ref: '#/definitions/IntegerValue'
        description: The number of AWS Glue Data Processing Units (DPUs) allocated to this DevEndpoint.
      AvailabilityZone:
        $ref: '#/definitions/GenericString'
        description: The AWS availability zone where this DevEndpoint is located.
      VpcId:
        $ref: '#/definitions/GenericString'
        description: The ID of the VPC used by this DevEndpoint.
      ExtraPythonLibsS3Path:
        $ref: '#/definitions/GenericString'
        description: Path(s) to one or more Python libraries in an S3 bucket that will be loaded in your DevEndpoint.
      ExtraJarsS3Path:
        $ref: '#/definitions/GenericString'
        description: Path to one or more Java Jars in an S3 bucket that will be loaded in your DevEndpoint.
      FailureReason:
        $ref: '#/definitions/GenericString'
        description: The reason for a current failure in this DevEndpoint.
      CreatedTimestamp:
        $ref: '#/definitions/TimestampValue'
        description: The point in time at which this DevEndpoint was created.
  CreateGrokClassifierRequest:
    type: object
    required:
      - Classification
      - Name
      - GrokPattern
    properties:
      Classification:
        $ref: '#/definitions/Classification'
        description: 'An identifier of the data format that the classifier matches, such as Twitter, JSON, Omniture logs, Amazon CloudWatch Logs, and so on.'
      Name:
        $ref: '#/definitions/NameString'
        description: The name of the new classifier.
      GrokPattern:
        $ref: '#/definitions/GrokPattern'
        description: The grok pattern used by this classifier.
      CustomPatterns:
        $ref: '#/definitions/CustomPatterns'
        description: Optional custom grok patterns used by this classifier.
    description: Specifies a <code>grok</code> classifier for <code>CreateClassifier</code> to create.
  CreateJobRequest:
    type: object
    required:
      - Name
      - Role
      - Command
    properties:
      Name:
        $ref: '#/definitions/NameString'
        description: The name you assign to this job. It must be unique in your account.
      Description:
        $ref: '#/definitions/DescriptionString'
        description: Description of the job.
      LogUri:
        $ref: '#/definitions/UriString'
        description: This field is reserved for future use.
      Role:
        $ref: '#/definitions/RoleString'
        description: The name of the IAM role associated with this job.
      ExecutionProperty:
        $ref: '#/definitions/ExecutionProperty'
        description: An ExecutionProperty specifying the maximum number of concurrent runs allowed for this job.
      Command:
        $ref: '#/definitions/JobCommand'
        description: The JobCommand that executes this job.
      DefaultArguments:
        $ref: '#/definitions/GenericMap'
        description: '<p>The default arguments for this job.</p> <p>You can specify arguments here that your own job-execution script consumes, as well as arguments that AWS Glue itself consumes.</p> <p>For information about how to specify and consume your own Job arguments, see the <a href="http://docs.aws.amazon.com/glue/latest/dg/aws-glue-programming-python-calling.html">Calling AWS Glue APIs in Python</a> topic in the developer guide.</p> <p>For information about the key-value pairs that AWS Glue consumes to set up your job, see the <a href="http://docs.aws.amazon.com/glue/latest/dg/aws-glue-programming-python-glue-arguments.html">Special Parameters Used by AWS Glue</a> topic in the developer guide.</p>'
      Connections:
        $ref: '#/definitions/ConnectionsList'
        description: The connections used for this job.
      MaxRetries:
        $ref: '#/definitions/MaxRetries'
        description: The maximum number of times to retry this job if it fails.
      AllocatedCapacity:
        $ref: '#/definitions/IntegerValue'
        description: 'The number of AWS Glue data processing units (DPUs) to allocate to this Job. From 2 to 100 DPUs can be allocated; the default is 10. A DPU is a relative measure of processing power that consists of 4 vCPUs of compute capacity and 16 GB of memory. For more information, see the <a href="https://aws.amazon.com/glue/pricing/">AWS Glue pricing page</a>.'
  CreateJobResponse:
    type: object
    properties:
      Name:
        $ref: '#/definitions/NameString'
        description: The unique name that was provided.
  CreateJsonClassifierRequest:
    type: object
    required:
      - Name
      - JsonPath
    properties:
      Name:
        $ref: '#/definitions/NameString'
        description: The name of the classifier.
      JsonPath:
        $ref: '#/definitions/JsonPath'
        description: 'A <code>JsonPath</code> string defining the JSON data for the classifier to classify. AWS Glue supports a subset of JsonPath, as described in <a href="https://docs.aws.amazon.com/glue/latest/dg/custom-classifier.html#custom-classifier-json">Writing JsonPath Custom Classifiers</a>.'
    description: Specifies a JSON classifier for <code>CreateClassifier</code> to create.
  CreatePartitionRequest:
    type: object
    required:
      - DatabaseName
      - TableName
      - PartitionInput
    properties:
      CatalogId:
        $ref: '#/definitions/CatalogIdString'
        description: 'The ID of the catalog in which the partion is to be created. Currently, this should be the AWS account ID.'
      DatabaseName:
        $ref: '#/definitions/NameString'
        description: The name of the metadata database in which the partition is to be created.
      TableName:
        $ref: '#/definitions/NameString'
        description: The name of the metadata table in which the partition is to be created.
      PartitionInput:
        $ref: '#/definitions/PartitionInput'
        description: A <code>PartitionInput</code> structure defining the partition to be created.
  CreatePartitionResponse:
    type: object
    properties: {}
  CreateScriptRequest:
    type: object
    properties:
      DagNodes:
        $ref: '#/definitions/DagNodes'
        description: A list of the nodes in the DAG.
      DagEdges:
        $ref: '#/definitions/DagEdges'
        description: A list of the edges in the DAG.
      Language:
        $ref: '#/definitions/Language'
        description: The programming language of the resulting code from the DAG.
  CreateScriptResponse:
    type: object
    properties:
      PythonScript:
        $ref: '#/definitions/PythonScript'
        description: The Python script generated from the DAG.
      ScalaCode:
        $ref: '#/definitions/ScalaCode'
        description: The Scala code generated from the DAG.
  CreateTableRequest:
    type: object
    required:
      - DatabaseName
      - TableInput
    properties:
      CatalogId:
        $ref: '#/definitions/CatalogIdString'
        description: 'The ID of the Data Catalog in which to create the <code>Table</code>. If none is supplied, the AWS account ID is used by default.'
      DatabaseName:
        $ref: '#/definitions/NameString'
        description: 'The catalog database in which to create the new table. For Hive compatibility, this name is entirely lowercase.'
      TableInput:
        $ref: '#/definitions/TableInput'
        description: The <code>TableInput</code> object that defines the metadata table to create in the catalog.
  CreateTableResponse:
    type: object
    properties: {}
  CreateTriggerRequest:
    type: object
    required:
      - Name
      - Type
      - Actions
    properties:
      Name:
        $ref: '#/definitions/NameString'
        description: The name of the trigger.
      Type:
        $ref: '#/definitions/TriggerType'
        description: The type of the new trigger.
      Schedule:
        $ref: '#/definitions/GenericString'
        description: '<p>A <code>cron</code> expression used to specify the schedule (see <a href="http://docs.aws.amazon.com/glue/latest/dg/monitor-data-warehouse-schedule.html">Time-Based Schedules for Jobs and Crawlers</a>. For example, to run something every day at 12:15 UTC, you would specify: <code>cron(15 12 * * ? *)</code>.</p> <p>This field is required when the trigger type is SCHEDULED.</p>'
      Predicate:
        $ref: '#/definitions/Predicate'
        description: <p>A predicate to specify when the new trigger should fire.</p> <p>This field is required when the trigger type is CONDITIONAL.</p>
      Actions:
        $ref: '#/definitions/ActionList'
        description: The actions initiated by this trigger when it fires.
      Description:
        $ref: '#/definitions/DescriptionString'
        description: A description of the new trigger.
  CreateTriggerResponse:
    type: object
    properties:
      Name:
        $ref: '#/definitions/NameString'
        description: The name of the trigger.
  CreateUserDefinedFunctionRequest:
    type: object
    required:
      - DatabaseName
      - FunctionInput
    properties:
      CatalogId:
        $ref: '#/definitions/CatalogIdString'
        description: 'The ID of the Data Catalog in which to create the function. If none is supplied, the AWS account ID is used by default.'
      DatabaseName:
        $ref: '#/definitions/NameString'
        description: The name of the catalog database in which to create the function.
      FunctionInput:
        $ref: '#/definitions/UserDefinedFunctionInput'
        description: A <code>FunctionInput</code> object that defines the function to create in the Data Catalog.
  CreateUserDefinedFunctionResponse:
    type: object
    properties: {}
  CreateXMLClassifierRequest:
    type: object
    required:
      - Classification
      - Name
    properties:
      Classification:
        $ref: '#/definitions/Classification'
        description: An identifier of the data format that the classifier matches.
      Name:
        $ref: '#/definitions/NameString'
        description: The name of the classifier.
      RowTag:
        $ref: '#/definitions/RowTag'
        description: 'The XML tag designating the element that contains each record in an XML document being parsed. Note that this cannot identify a self-closing element (closed by <code>/&gt;</code>). An empty row element that contains only attributes can be parsed as long as it ends with a closing tag (for example, <code>&lt;row item_a="A" item_b="B"&gt;&lt;/row&gt;</code> is okay, but <code>&lt;row item_a="A" item_b="B" /&gt;</code> is not).'
    description: Specifies an XML classifier for <code>CreateClassifier</code> to create.
  CronExpression:
    type: string
  CustomPatterns:
    type: string
    minLength: 0
    maxLength: 16000
    x-pattern: '[\u0020-\uD7FF\uE000-\uFFFD\uD800\uDC00-\uDBFF\uDFFF\r\n\t]*'
  DagEdges:
    type: array
    items:
      $ref: '#/definitions/CodeGenEdge'
  DagNodes:
    type: array
    items:
      $ref: '#/definitions/CodeGenNode'
  Database:
    type: object
    required:
      - Name
    properties:
      Name:
        $ref: '#/definitions/NameString'
        description: 'Name of the database. For Hive compatibility, this is folded to lowercase when it is stored.'
      Description:
        $ref: '#/definitions/DescriptionString'
        description: Description of the database.
      LocationUri:
        $ref: '#/definitions/URI'
        description: 'The location of the database (for example, an HDFS path).'
      Parameters:
        $ref: '#/definitions/ParametersMap'
        description: A list of key-value pairs that define parameters and properties of the database.
      CreateTime:
        $ref: '#/definitions/Timestamp'
        description: The time at which the metadata database was created in the catalog.
    description: The <code>Database</code> object represents a logical grouping of tables that may reside in a Hive metastore or an RDBMS.
  DatabaseInput:
    type: object
    required:
      - Name
    properties:
      Name:
        $ref: '#/definitions/NameString'
        description: 'Name of the database. For Hive compatibility, this is folded to lowercase when it is stored.'
      Description:
        $ref: '#/definitions/DescriptionString'
        description: Description of the database
      LocationUri:
        $ref: '#/definitions/URI'
        description: 'The location of the database (for example, an HDFS path).'
      Parameters:
        $ref: '#/definitions/ParametersMap'
        description: A list of key-value pairs that define parameters and properties of the database.
    description: The structure used to create or update a database.
  DatabaseList:
    type: array
    items:
      $ref: '#/definitions/Database'
  DatabaseName:
    type: string
  DeleteBehavior:
    type: string
    enum:
      - LOG
      - DELETE_FROM_DATABASE
      - DEPRECATE_IN_DATABASE
  DeleteClassifierRequest:
    type: object
    required:
      - Name
    properties:
      Name:
        $ref: '#/definitions/NameString'
        description: Name of the classifier to remove.
  DeleteClassifierResponse:
    type: object
    properties: {}
  DeleteConnectionNameList:
    type: array
    items:
      $ref: '#/definitions/NameString'
    minItems: 0
    maxItems: 25
  DeleteConnectionRequest:
    type: object
    required:
      - ConnectionName
    properties:
      CatalogId:
        $ref: '#/definitions/CatalogIdString'
        description: 'The ID of the Data Catalog in which the connection resides. If none is supplied, the AWS account ID is used by default.'
      ConnectionName:
        $ref: '#/definitions/NameString'
        description: The name of the connection to delete.
  DeleteConnectionResponse:
    type: object
    properties: {}
  DeleteCrawlerRequest:
    type: object
    required:
      - Name
    properties:
      Name:
        $ref: '#/definitions/NameString'
        description: Name of the crawler to remove.
  DeleteCrawlerResponse:
    type: object
    properties: {}
  DeleteDatabaseRequest:
    type: object
    required:
      - Name
    properties:
      CatalogId:
        $ref: '#/definitions/CatalogIdString'
        description: 'The ID of the Data Catalog in which the database resides. If none is supplied, the AWS account ID is used by default.'
      Name:
        $ref: '#/definitions/NameString'
        description: 'The name of the Database to delete. For Hive compatibility, this must be all lowercase.'
  DeleteDatabaseResponse:
    type: object
    properties: {}
  DeleteDevEndpointRequest:
    type: object
    required:
      - EndpointName
    properties:
      EndpointName:
        $ref: '#/definitions/GenericString'
        description: The name of the DevEndpoint.
  DeleteDevEndpointResponse:
    type: object
    properties: {}
  DeleteJobRequest:
    type: object
    required:
      - JobName
    properties:
      JobName:
        $ref: '#/definitions/NameString'
        description: The name of the job to delete.
  DeleteJobResponse:
    type: object
    properties:
      JobName:
        $ref: '#/definitions/NameString'
        description: The name of the job that was deleted.
  DeletePartitionRequest:
    type: object
    required:
      - DatabaseName
      - TableName
      - PartitionValues
    properties:
      CatalogId:
        $ref: '#/definitions/CatalogIdString'
        description: 'The ID of the Data Catalog where the partition to be deleted resides. If none is supplied, the AWS account ID is used by default.'
      DatabaseName:
        $ref: '#/definitions/NameString'
        description: The name of the catalog database in which the table in question resides.
      TableName:
        $ref: '#/definitions/NameString'
        description: The name of the table where the partition to be deleted is located.
      PartitionValues:
        $ref: '#/definitions/ValueStringList'
        description: The values that define the partition.
  DeletePartitionResponse:
    type: object
    properties: {}
  DeleteTableRequest:
    type: object
    required:
      - DatabaseName
      - Name
    properties:
      CatalogId:
        $ref: '#/definitions/CatalogIdString'
        description: 'The ID of the Data Catalog where the table resides. If none is supplied, the AWS account ID is used by default.'
      DatabaseName:
        $ref: '#/definitions/NameString'
        description: 'The name of the catalog database in which the table resides. For Hive compatibility, this name is entirely lowercase.'
      Name:
        $ref: '#/definitions/NameString'
        description: 'The name of the table to be deleted. For Hive compatibility, this name is entirely lowercase.'
  DeleteTableResponse:
    type: object
    properties: {}
  DeleteTableVersionRequest:
    type: object
    required:
      - DatabaseName
      - TableName
      - VersionId
    properties:
      CatalogId:
        $ref: '#/definitions/CatalogIdString'
        description: 'The ID of the Data Catalog where the tables reside. If none is supplied, the AWS account ID is used by default.'
      DatabaseName:
        $ref: '#/definitions/NameString'
        description: 'The database in the catalog in which the table resides. For Hive compatibility, this name is entirely lowercase.'
      TableName:
        $ref: '#/definitions/NameString'
        description: 'The name of the table. For Hive compatibility, this name is entirely lowercase.'
      VersionId:
        $ref: '#/definitions/VersionString'
        description: The ID of the table version to be deleted.
  DeleteTableVersionResponse:
    type: object
    properties: {}
  DeleteTriggerRequest:
    type: object
    required:
      - Name
    properties:
      Name:
        $ref: '#/definitions/NameString'
        description: The name of the trigger to delete.
  DeleteTriggerResponse:
    type: object
    properties:
      Name:
        $ref: '#/definitions/NameString'
        description: The name of the trigger that was deleted.
  DeleteUserDefinedFunctionRequest:
    type: object
    required:
      - DatabaseName
      - FunctionName
    properties:
      CatalogId:
        $ref: '#/definitions/CatalogIdString'
        description: 'The ID of the Data Catalog where the function to be deleted is located. If none is supplied, the AWS account ID is used by default.'
      DatabaseName:
        $ref: '#/definitions/NameString'
        description: The name of the catalog database where the function is located.
      FunctionName:
        $ref: '#/definitions/NameString'
        description: The name of the function definition to be deleted.
  DeleteUserDefinedFunctionResponse:
    type: object
    properties: {}
  DescriptionString:
    type: string
    minLength: 0
    maxLength: 2048
    x-pattern: '[\u0020-\uD7FF\uE000-\uFFFD\uD800\uDC00-\uDBFF\uDFFF\r\n\t]*'
  DescriptionStringRemovable:
    type: string
    minLength: 0
    maxLength: 2048
    x-pattern: '[\u0020-\uD7FF\uE000-\uFFFD\uD800\uDC00-\uDBFF\uDFFF\r\n\t]*'
  DevEndpoint:
    type: object
    properties:
      EndpointName:
        $ref: '#/definitions/GenericString'
        description: The name of the DevEndpoint.
      RoleArn:
        $ref: '#/definitions/RoleArn'
        description: The AWS ARN of the IAM role used in this DevEndpoint.
      SecurityGroupIds:
        $ref: '#/definitions/StringList'
        description: A list of security group identifiers used in this DevEndpoint.
      SubnetId:
        $ref: '#/definitions/GenericString'
        description: The subnet ID for this DevEndpoint.
      YarnEndpointAddress:
        $ref: '#/definitions/GenericString'
        description: The YARN endpoint address used by this DevEndpoint.
      ZeppelinRemoteSparkInterpreterPort:
        $ref: '#/definitions/IntegerValue'
        description: The Apache Zeppelin port for the remote Apache Spark interpreter.
      PublicAddress:
        $ref: '#/definitions/GenericString'
        description: The public address used by this DevEndpoint.
      Status:
        $ref: '#/definitions/GenericString'
        description: The current status of this DevEndpoint.
      NumberOfNodes:
        $ref: '#/definitions/IntegerValue'
        description: The number of AWS Glue Data Processing Units (DPUs) allocated to this DevEndpoint.
      AvailabilityZone:
        $ref: '#/definitions/GenericString'
        description: The AWS availability zone where this DevEndpoint is located.
      VpcId:
        $ref: '#/definitions/GenericString'
        description: The ID of the virtual private cloud (VPC) used by this DevEndpoint.
      ExtraPythonLibsS3Path:
        $ref: '#/definitions/GenericString'
        description: '<p>Path(s) to one or more Python libraries in an S3 bucket that should be loaded in your DevEndpoint. Multiple values must be complete paths separated by a comma.</p> <p>Please note that only pure Python libraries can currently be used on a DevEndpoint. Libraries that rely on C extensions, such as the <a href="http://pandas.pydata.org/">pandas</a> Python data analysis library, are not yet supported.</p>'
      ExtraJarsS3Path:
        $ref: '#/definitions/GenericString'
        description: <p>Path to one or more Java Jars in an S3 bucket that should be loaded in your DevEndpoint.</p> <p>Please note that only pure Java/Scala libraries can currently be used on a DevEndpoint.</p>
      FailureReason:
        $ref: '#/definitions/GenericString'
        description: The reason for a current failure in this DevEndpoint.
      LastUpdateStatus:
        $ref: '#/definitions/GenericString'
        description: The status of the last update.
      CreatedTimestamp:
        $ref: '#/definitions/TimestampValue'
        description: The point in time at which this DevEndpoint was created.
      LastModifiedTimestamp:
        $ref: '#/definitions/TimestampValue'
        description: The point in time at which this DevEndpoint was last modified.
      PublicKey:
        $ref: '#/definitions/GenericString'
        description: The public key to be used by this DevEndpoint for authentication.
    description: A development endpoint where a developer can remotely debug ETL scripts.
  DevEndpointCustomLibraries:
    type: object
    properties:
      ExtraPythonLibsS3Path:
        $ref: '#/definitions/GenericString'
        description: '<p>Path(s) to one or more Python libraries in an S3 bucket that should be loaded in your DevEndpoint. Multiple values must be complete paths separated by a comma.</p> <p>Please note that only pure Python libraries can currently be used on a DevEndpoint. Libraries that rely on C extensions, such as the <a href="http://pandas.pydata.org/">pandas</a> Python data analysis library, are not yet supported.</p>'
      ExtraJarsS3Path:
        $ref: '#/definitions/GenericString'
        description: <p>Path to one or more Java Jars in an S3 bucket that should be loaded in your DevEndpoint.</p> <p>Please note that only pure Java/Scala libraries can currently be used on a DevEndpoint.</p>
    description: Custom libraries to be loaded into a DevEndpoint.
  DevEndpointList:
    type: array
    items:
      $ref: '#/definitions/DevEndpoint'
  EntityNotFoundException:
    type: object
    properties:
      Message:
        $ref: '#/definitions/MessageString'
        description: A message describing the problem.
    description: A specified entity does not exist
  ErrorByName:
    type: array
    items:
      type: object
      properties:
        key:
          $ref: '#/definitions/NameString'
        value:
          $ref: '#/definitions/ErrorDetail'
  ErrorDetail:
    type: object
    properties:
      ErrorCode:
        $ref: '#/definitions/NameString'
        description: The code associated with this error.
      ErrorMessage:
        $ref: '#/definitions/DescriptionString'
        description: A message describing the error.
    description: Contains details about an error.
  ErrorString:
    type: string
  ExecutionProperty:
    type: object
    properties:
      MaxConcurrentRuns:
        $ref: '#/definitions/MaxConcurrentRuns'
        description: The maximum number of concurrent runs allowed for a job. The default is 1. An error is returned when this threshold is reached. The maximum value you can specify is controlled by a service limit.
    description: An execution property of a job.
  FieldType:
    type: string
  FilterString:
    type: string
    minLength: 0
    maxLength: 2048
    x-pattern: '[\u0020-\uD7FF\uE000-\uFFFD\uD800\uDC00-\uDBFF\uDFFF\t]*'
  FormatString:
    type: string
    maxLength: 128
    x-pattern: '[\u0020-\uD7FF\uE000-\uFFFD\uD800\uDC00-\uDBFF\uDFFF\t]*'
  GenericMap:
    type: array
    items:
      type: object
      properties:
        key:
          $ref: '#/definitions/GenericString'
        value:
          $ref: '#/definitions/GenericString'
  GenericString:
    type: string
  GetCatalogImportStatusRequest:
    type: object
    properties:
      CatalogId:
        $ref: '#/definitions/CatalogIdString'
        description: 'The ID of the catalog to migrate. Currently, this should be the AWS account ID.'
  GetCatalogImportStatusResponse:
    type: object
    properties:
      ImportStatus:
        $ref: '#/definitions/CatalogImportStatus'
        description: The status of the specified catalog migration.
  GetClassifierRequest:
    type: object
    required:
      - Name
    properties:
      Name:
        $ref: '#/definitions/NameString'
        description: Name of the classifier to retrieve.
  GetClassifierResponse:
    type: object
    properties:
      Classifier:
        $ref: '#/definitions/Classifier'
        description: The requested classifier.
  GetClassifiersRequest:
    type: object
    properties:
      MaxResults:
        $ref: '#/definitions/PageSize'
        description: Size of the list to return (optional).
      NextToken:
        $ref: '#/definitions/Token'
        description: An optional continuation token.
  GetClassifiersResponse:
    type: object
    properties:
      Classifiers:
        $ref: '#/definitions/ClassifierList'
        description: The requested list of classifier objects.
      NextToken:
        $ref: '#/definitions/Token'
        description: A continuation token.
  GetConnectionRequest:
    type: object
    required:
      - Name
    properties:
      CatalogId:
        $ref: '#/definitions/CatalogIdString'
        description: 'The ID of the Data Catalog in which the connection resides. If none is supplied, the AWS account ID is used by default.'
      Name:
        $ref: '#/definitions/NameString'
        description: The name of the connection definition to retrieve.
  GetConnectionResponse:
    type: object
    properties:
      Connection:
        $ref: '#/definitions/Connection'
        description: The requested connection definition.
  GetConnectionsFilter:
    type: object
    properties:
      MatchCriteria:
        $ref: '#/definitions/MatchCriteria'
        description: A criteria string that must match the criteria recorded in the connection definition for that connection definition to be returned.
      ConnectionType:
        $ref: '#/definitions/ConnectionType'
        description: 'The type of connections to return. Currently, only JDBC is supported; SFTP is not supported.'
    description: Filters the connection definitions returned by the <code>GetConnections</code> API.
  GetConnectionsRequest:
    type: object
    properties:
      CatalogId:
        $ref: '#/definitions/CatalogIdString'
        description: 'The ID of the Data Catalog in which the connections reside. If none is supplied, the AWS account ID is used by default.'
      Filter:
        $ref: '#/definitions/GetConnectionsFilter'
        description: A filter that controls which connections will be returned.
      NextToken:
        $ref: '#/definitions/Token'
        description: 'A continuation token, if this is a continuation call.'
      MaxResults:
        $ref: '#/definitions/PageSize'
        description: The maximum number of connections to return in one response.
  GetConnectionsResponse:
    type: object
    properties:
      ConnectionList:
        $ref: '#/definitions/ConnectionList'
        description: A list of requested connection definitions.
      NextToken:
        $ref: '#/definitions/Token'
        description: 'A continuation token, if the list of connections returned does not include the last of the filtered connections.'
  GetCrawlerMetricsRequest:
    type: object
    properties:
      CrawlerNameList:
        $ref: '#/definitions/CrawlerNameList'
        description: A list of the names of crawlers about which to retrieve metrics.
      MaxResults:
        $ref: '#/definitions/PageSize'
        description: The maximum size of a list to return.
      NextToken:
        $ref: '#/definitions/Token'
        description: 'A continuation token, if this is a continuation call.'
  GetCrawlerMetricsResponse:
    type: object
    properties:
      CrawlerMetricsList:
        $ref: '#/definitions/CrawlerMetricsList'
        description: A list of metrics for the specified crawler.
      NextToken:
        $ref: '#/definitions/Token'
        description: 'A continuation token, if the returned list does not contain the last metric available.'
  GetCrawlerRequest:
    type: object
    required:
      - Name
    properties:
      Name:
        $ref: '#/definitions/NameString'
        description: Name of the crawler to retrieve metadata for.
  GetCrawlerResponse:
    type: object
    properties:
      Crawler:
        $ref: '#/definitions/Crawler'
        description: The metadata for the specified crawler.
  GetCrawlersRequest:
    type: object
    properties:
      MaxResults:
        $ref: '#/definitions/PageSize'
        description: The number of crawlers to return on each call.
      NextToken:
        $ref: '#/definitions/Token'
        description: 'A continuation token, if this is a continuation request.'
  GetCrawlersResponse:
    type: object
    properties:
      Crawlers:
        $ref: '#/definitions/CrawlerList'
        description: A list of crawler metadata.
      NextToken:
        $ref: '#/definitions/Token'
        description: 'A continuation token, if the returned list has not reached the end of those defined in this customer account.'
  GetDatabaseRequest:
    type: object
    required:
      - Name
    properties:
      CatalogId:
        $ref: '#/definitions/CatalogIdString'
        description: 'The ID of the Data Catalog in which the database resides. If none is supplied, the AWS account ID is used by default.'
      Name:
        $ref: '#/definitions/NameString'
        description: 'The name of the database to retrieve. For Hive compatibility, this should be all lowercase.'
  GetDatabaseResponse:
    type: object
    properties:
      Database:
        $ref: '#/definitions/Database'
        description: The definition of the specified database in the catalog.
  GetDatabasesRequest:
    type: object
    properties:
      CatalogId:
        $ref: '#/definitions/CatalogIdString'
        description: 'The ID of the Data Catalog from which to retrieve <code>Databases</code>. If none is supplied, the AWS account ID is used by default.'
      NextToken:
        $ref: '#/definitions/Token'
        description: 'A continuation token, if this is a continuation call.'
      MaxResults:
        $ref: '#/definitions/PageSize'
        description: The maximum number of databases to return in one response.
  GetDatabasesResponse:
    type: object
    required:
      - DatabaseList
    properties:
      DatabaseList:
        $ref: '#/definitions/DatabaseList'
        description: A list of <code>Database</code> objects from the specified catalog.
      NextToken:
        $ref: '#/definitions/Token'
        description: 'A continuation token for paginating the returned list of tokens, returned if the current segment of the list is not the last.'
  GetDataflowGraphRequest:
    type: object
    properties:
      PythonScript:
        $ref: '#/definitions/PythonScript'
        description: The Python script to transform.
  GetDataflowGraphResponse:
    type: object
    properties:
      DagNodes:
        $ref: '#/definitions/DagNodes'
        description: A list of the nodes in the resulting DAG.
      DagEdges:
        $ref: '#/definitions/DagEdges'
        description: A list of the edges in the resulting DAG.
  GetDevEndpointRequest:
    type: object
    required:
      - EndpointName
    properties:
      EndpointName:
        $ref: '#/definitions/GenericString'
        description: Name of the DevEndpoint for which to retrieve information.
  GetDevEndpointResponse:
    type: object
    properties:
      DevEndpoint:
        $ref: '#/definitions/DevEndpoint'
        description: A DevEndpoint definition.
  GetDevEndpointsRequest:
    type: object
    properties:
      MaxResults:
        $ref: '#/definitions/PageSize'
        description: The maximum size of information to return.
      NextToken:
        $ref: '#/definitions/GenericString'
        description: 'A continuation token, if this is a continuation call.'
  GetDevEndpointsResponse:
    type: object
    properties:
      DevEndpoints:
        $ref: '#/definitions/DevEndpointList'
        description: A list of DevEndpoint definitions.
      NextToken:
        $ref: '#/definitions/GenericString'
        description: 'A continuation token, if not all DevEndpoint definitions have yet been returned.'
  GetJobRequest:
    type: object
    required:
      - JobName
    properties:
      JobName:
        $ref: '#/definitions/NameString'
        description: The name of the job to retrieve.
  GetJobResponse:
    type: object
    properties:
      Job:
        $ref: '#/definitions/Job'
        description: The requested job definition.
  GetJobRunRequest:
    type: object
    required:
      - JobName
      - RunId
    properties:
      JobName:
        $ref: '#/definitions/NameString'
        description: Name of the job being run.
      RunId:
        $ref: '#/definitions/IdString'
        description: The ID of the job run.
      PredecessorsIncluded:
        $ref: '#/definitions/BooleanValue'
        description: True if a list of predecessor runs should be returned.
  GetJobRunResponse:
    type: object
    properties:
      JobRun:
        $ref: '#/definitions/JobRun'
        description: The requested job-run metadata.
  GetJobRunsRequest:
    type: object
    required:
      - JobName
    properties:
      JobName:
        $ref: '#/definitions/NameString'
        description: The name of the job for which to retrieve all job runs.
      NextToken:
        $ref: '#/definitions/GenericString'
        description: 'A continuation token, if this is a continuation call.'
      MaxResults:
        $ref: '#/definitions/PageSize'
        description: The maximum size of the response.
  GetJobRunsResponse:
    type: object
    properties:
      JobRuns:
        $ref: '#/definitions/JobRunList'
        description: A list of job-run metatdata objects.
      NextToken:
        $ref: '#/definitions/GenericString'
        description: 'A continuation token, if not all reequested job runs have been returned.'
  GetJobsRequest:
    type: object
    properties:
      NextToken:
        $ref: '#/definitions/GenericString'
        description: 'A continuation token, if this is a continuation call.'
      MaxResults:
        $ref: '#/definitions/PageSize'
        description: The maximum size of the response.
  GetJobsResponse:
    type: object
    properties:
      Jobs:
        $ref: '#/definitions/JobList'
        description: A list of jobs.
      NextToken:
        $ref: '#/definitions/GenericString'
        description: 'A continuation token, if not all jobs have yet been returned.'
  GetMappingRequest:
    type: object
    required:
      - Source
    properties:
      Source:
        $ref: '#/definitions/CatalogEntry'
        description: Specifies the source table.
      Sinks:
        $ref: '#/definitions/CatalogEntries'
        description: A list of target tables.
      Location:
        $ref: '#/definitions/Location'
        description: Parameters for the mapping.
  GetMappingResponse:
    type: object
    required:
      - Mapping
    properties:
      Mapping:
        $ref: '#/definitions/MappingList'
        description: A list of mappings to the specified targets.
  GetPartitionRequest:
    type: object
    required:
      - DatabaseName
      - TableName
      - PartitionValues
    properties:
      CatalogId:
        $ref: '#/definitions/CatalogIdString'
        description: 'The ID of the Data Catalog where the partition in question resides. If none is supplied, the AWS account ID is used by default.'
      DatabaseName:
        $ref: '#/definitions/NameString'
        description: The name of the catalog database where the partition resides.
      TableName:
        $ref: '#/definitions/NameString'
        description: The name of the partition's table.
      PartitionValues:
        $ref: '#/definitions/ValueStringList'
        description: The values that define the partition.
  GetPartitionResponse:
    type: object
    properties:
      Partition:
        $ref: '#/definitions/Partition'
        description: 'The requested information, in the form of a <code>Partition</code> object.'
  GetPartitionsRequest:
    type: object
    required:
      - DatabaseName
      - TableName
    properties:
      CatalogId:
        $ref: '#/definitions/CatalogIdString'
        description: 'The ID of the Data Catalog where the partitions in question reside. If none is supplied, the AWS account ID is used by default.'
      DatabaseName:
        $ref: '#/definitions/NameString'
        description: The name of the catalog database where the partitions reside.
      TableName:
        $ref: '#/definitions/NameString'
        description: The name of the partitions' table.
      Expression:
        $ref: '#/definitions/PredicateString'
        description: An expression filtering the partitions to be returned.
      NextToken:
        $ref: '#/definitions/Token'
        description: 'A continuation token, if this is not the first call to retrieve these partitions.'
      Segment:
        $ref: '#/definitions/Segment'
        description: The segment of the table's partitions to scan in this request.
      MaxResults:
        $ref: '#/definitions/PageSize'
        description: The maximum number of partitions to return in a single response.
  GetPartitionsResponse:
    type: object
    properties:
      Partitions:
        $ref: '#/definitions/PartitionList'
        description: A list of requested partitions.
      NextToken:
        $ref: '#/definitions/Token'
        description: 'A continuation token, if the returned list of partitions does not does not include the last one.'
  GetPlanRequest:
    type: object
    required:
      - Mapping
      - Source
    properties:
      Mapping:
        $ref: '#/definitions/MappingList'
        description: The list of mappings from a source table to target tables.
      Source:
        $ref: '#/definitions/CatalogEntry'
        description: The source table.
      Sinks:
        $ref: '#/definitions/CatalogEntries'
        description: The target tables.
      Location:
        $ref: '#/definitions/Location'
        description: Parameters for the mapping.
      Language:
        $ref: '#/definitions/Language'
        description: The programming language of the code to perform the mapping.
  GetPlanResponse:
    type: object
    properties:
      PythonScript:
        $ref: '#/definitions/PythonScript'
        description: A Python script to perform the mapping.
      ScalaCode:
        $ref: '#/definitions/ScalaCode'
        description: Scala code to perform the mapping.
  GetTableRequest:
    type: object
    required:
      - DatabaseName
      - Name
    properties:
      CatalogId:
        $ref: '#/definitions/CatalogIdString'
        description: 'The ID of the Data Catalog where the table resides. If none is supplied, the AWS account ID is used by default.'
      DatabaseName:
        $ref: '#/definitions/NameString'
        description: 'The name of the database in the catalog in which the table resides. For Hive compatibility, this name is entirely lowercase.'
      Name:
        $ref: '#/definitions/NameString'
        description: 'The name of the table for which to retrieve the definition. For Hive compatibility, this name is entirely lowercase.'
  GetTableResponse:
    type: object
    properties:
      Table:
        $ref: '#/definitions/Table'
        description: The <code>Table</code> object that defines the specified table.
  GetTableVersionRequest:
    type: object
    required:
      - DatabaseName
      - TableName
    properties:
      CatalogId:
        $ref: '#/definitions/CatalogIdString'
        description: 'The ID of the Data Catalog where the tables reside. If none is supplied, the AWS account ID is used by default.'
      DatabaseName:
        $ref: '#/definitions/NameString'
        description: 'The database in the catalog in which the table resides. For Hive compatibility, this name is entirely lowercase.'
      TableName:
        $ref: '#/definitions/NameString'
        description: 'The name of the table. For Hive compatibility, this name is entirely lowercase.'
      VersionId:
        $ref: '#/definitions/VersionString'
        description: The ID value of the table version to be retrieved.
  GetTableVersionResponse:
    type: object
    properties:
      TableVersion:
        $ref: '#/definitions/TableVersion'
        description: The requested table version.
  GetTableVersionsList:
    type: array
    items:
      $ref: '#/definitions/TableVersion'
  GetTableVersionsRequest:
    type: object
    required:
      - DatabaseName
      - TableName
    properties:
      CatalogId:
        $ref: '#/definitions/CatalogIdString'
        description: 'The ID of the Data Catalog where the tables reside. If none is supplied, the AWS account ID is used by default.'
      DatabaseName:
        $ref: '#/definitions/NameString'
        description: 'The database in the catalog in which the table resides. For Hive compatibility, this name is entirely lowercase.'
      TableName:
        $ref: '#/definitions/NameString'
        description: 'The name of the table. For Hive compatibility, this name is entirely lowercase.'
      NextToken:
        $ref: '#/definitions/Token'
        description: 'A continuation token, if this is not the first call.'
      MaxResults:
        $ref: '#/definitions/PageSize'
        description: The maximum number of table versions to return in one response.
  GetTableVersionsResponse:
    type: object
    properties:
      TableVersions:
        $ref: '#/definitions/GetTableVersionsList'
        description: A list of strings identifying available versions of the specified table.
      NextToken:
        $ref: '#/definitions/Token'
        description: 'A continuation token, if the list of available versions does not include the last one.'
  GetTablesRequest:
    type: object
    required:
      - DatabaseName
    properties:
      CatalogId:
        $ref: '#/definitions/CatalogIdString'
        description: 'The ID of the Data Catalog where the tables reside. If none is supplied, the AWS account ID is used by default.'
      DatabaseName:
        $ref: '#/definitions/NameString'
        description: 'The database in the catalog whose tables to list. For Hive compatibility, this name is entirely lowercase.'
      Expression:
        $ref: '#/definitions/FilterString'
        description: 'A regular expression pattern. If present, only those tables whose names match the pattern are returned.'
      NextToken:
        $ref: '#/definitions/Token'
        description: 'A continuation token, included if this is a continuation call.'
      MaxResults:
        $ref: '#/definitions/PageSize'
        description: The maximum number of tables to return in a single response.
  GetTablesResponse:
    type: object
    properties:
      TableList:
        $ref: '#/definitions/TableList'
        description: A list of the requested <code>Table</code> objects.
      NextToken:
        $ref: '#/definitions/Token'
        description: 'A continuation token, present if the current list segment is not the last.'
  GetTriggerRequest:
    type: object
    required:
      - Name
    properties:
      Name:
        $ref: '#/definitions/NameString'
        description: The name of the trigger to retrieve.
  GetTriggerResponse:
    type: object
    properties:
      Trigger:
        $ref: '#/definitions/Trigger'
        description: The requested trigger definition.
  GetTriggersRequest:
    type: object
    properties:
      NextToken:
        $ref: '#/definitions/GenericString'
        description: 'A continuation token, if this is a continuation call.'
      DependentJobName:
        $ref: '#/definitions/NameString'
        description: 'The name of the job for which to retrieve triggers. The trigger that can start this job will be returned, and if there is no such trigger, all triggers will be returned.'
      MaxResults:
        $ref: '#/definitions/PageSize'
        description: The maximum size of the response.
  GetTriggersResponse:
    type: object
    properties:
      Triggers:
        $ref: '#/definitions/TriggerList'
        description: A list of triggers for the specified job.
      NextToken:
        $ref: '#/definitions/GenericString'
        description: 'A continuation token, if not all the requested triggers have yet been returned.'
  GetUserDefinedFunctionRequest:
    type: object
    required:
      - DatabaseName
      - FunctionName
    properties:
      CatalogId:
        $ref: '#/definitions/CatalogIdString'
        description: 'The ID of the Data Catalog where the function to be retrieved is located. If none is supplied, the AWS account ID is used by default.'
      DatabaseName:
        $ref: '#/definitions/NameString'
        description: The name of the catalog database where the function is located.
      FunctionName:
        $ref: '#/definitions/NameString'
        description: The name of the function.
  GetUserDefinedFunctionResponse:
    type: object
    properties:
      UserDefinedFunction:
        $ref: '#/definitions/UserDefinedFunction'
        description: The requested function definition.
  GetUserDefinedFunctionsRequest:
    type: object
    required:
      - DatabaseName
      - Pattern
    properties:
      CatalogId:
        $ref: '#/definitions/CatalogIdString'
        description: 'The ID of the Data Catalog where the functions to be retrieved are located. If none is supplied, the AWS account ID is used by default.'
      DatabaseName:
        $ref: '#/definitions/NameString'
        description: The name of the catalog database where the functions are located.
      Pattern:
        $ref: '#/definitions/NameString'
        description: An optional function-name pattern string that filters the function definitions returned.
      NextToken:
        $ref: '#/definitions/Token'
        description: 'A continuation token, if this is a continuation call.'
      MaxResults:
        $ref: '#/definitions/PageSize'
        description: The maximum number of functions to return in one response.
  GetUserDefinedFunctionsResponse:
    type: object
    properties:
      UserDefinedFunctions:
        $ref: '#/definitions/UserDefinedFunctionList'
        description: A list of requested function definitions.
      NextToken:
        $ref: '#/definitions/Token'
        description: 'A continuation token, if the list of functions returned does not include the last requested function.'
  GrokClassifier:
    type: object
    required:
      - Name
      - Classification
      - GrokPattern
    properties:
      Name:
        $ref: '#/definitions/NameString'
        description: The name of the classifier.
      Classification:
        $ref: '#/definitions/Classification'
        description: 'An identifier of the data format that the classifier matches, such as Twitter, JSON, Omniture logs, and so on.'
      CreationTime:
        $ref: '#/definitions/Timestamp'
        description: The time this classifier was registered.
      LastUpdated:
        $ref: '#/definitions/Timestamp'
        description: The time this classifier was last updated.
      Version:
        $ref: '#/definitions/VersionId'
        description: The version of this classifier.
      GrokPattern:
        $ref: '#/definitions/GrokPattern'
        description: 'The grok pattern applied to a data store by this classifier. For more information, see built-in patterns in <a href="http://docs.aws.amazon.com/glue/latest/dg/custom-classifier.html">Writing Custom Classifers</a>.'
      CustomPatterns:
        $ref: '#/definitions/CustomPatterns'
        description: 'Optional custom grok patterns defined by this classifier. For more information, see custom patterns in <a href="http://docs.aws.amazon.com/glue/latest/dg/custom-classifier.html">Writing Custom Classifers</a>.'
    description: A classifier that uses <code>grok</code> patterns.
  GrokPattern:
    type: string
    minLength: 1
    maxLength: 2048
    x-pattern: '[\u0020-\uD7FF\uE000-\uFFFD\uD800\uDC00-\uDBFF\uDFFF\r\t]*'
  IdString:
    type: string
    minLength: 1
    maxLength: 255
    x-pattern: '[\u0020-\uD7FF\uE000-\uFFFD\uD800\uDC00-\uDBFF\uDFFF\t]*'
  IdempotentParameterMismatchException:
    type: object
    properties:
      Message:
        $ref: '#/definitions/MessageString'
        description: A message describing the problem.
    description: The same unique identifier was associated with two different records.
  ImportCatalogToGlueRequest:
    type: object
    properties:
      CatalogId:
        $ref: '#/definitions/CatalogIdString'
        description: 'The ID of the catalog to import. Currently, this should be the AWS account ID.'
  ImportCatalogToGlueResponse:
    type: object
    properties: {}
  Integer:
    type: integer
  IntegerFlag:
    type: integer
    minimum: 0
    maximum: 1
  IntegerValue:
    type: integer
  InternalServiceException:
    type: object
    properties:
      Message:
        $ref: '#/definitions/MessageString'
        description: A message describing the problem.
    description: An internal service error occurred.
  InvalidInputException:
    type: object
    properties:
      Message:
        $ref: '#/definitions/MessageString'
        description: A message describing the problem.
    description: The input provided was not valid.
  JdbcTarget:
    type: object
    properties:
      ConnectionName:
        $ref: '#/definitions/ConnectionName'
        description: The name of the connection to use to connect to the JDBC target.
      Path:
        $ref: '#/definitions/Path'
        description: The path of the JDBC target.
      Exclusions:
        $ref: '#/definitions/PathList'
        description: 'A list of glob patterns used to exclude from the crawl. For more information, see <a href="http://docs.aws.amazon.com/glue/latest/dg/add-crawler.html">Catalog Tables with a Crawler</a>.'
    description: Specifies a JDBC data store to crawl.
  JdbcTargetList:
    type: array
    items:
      $ref: '#/definitions/JdbcTarget'
  Job:
    type: object
    properties:
      Name:
        $ref: '#/definitions/NameString'
        description: The name you assign to this job.
      Description:
        $ref: '#/definitions/DescriptionString'
        description: Description of this job.
      LogUri:
        $ref: '#/definitions/UriString'
        description: This field is reserved for future use.
      Role:
        $ref: '#/definitions/RoleString'
        description: The name of the IAM role associated with this job.
      CreatedOn:
        $ref: '#/definitions/TimestampValue'
        description: The time and date that this job specification was created.
      LastModifiedOn:
        $ref: '#/definitions/TimestampValue'
        description: The last point in time when this job specification was modified.
      ExecutionProperty:
        $ref: '#/definitions/ExecutionProperty'
        description: An ExecutionProperty specifying the maximum number of concurrent runs allowed for this job.
      Command:
        $ref: '#/definitions/JobCommand'
        description: The JobCommand that executes this job.
      DefaultArguments:
        $ref: '#/definitions/GenericMap'
        description: '<p>The default arguments for this job, specified as name-value pairs.</p> <p>You can specify arguments here that your own job-execution script consumes, as well as arguments that AWS Glue itself consumes.</p> <p>For information about how to specify and consume your own Job arguments, see the <a href="http://docs.aws.amazon.com/glue/latest/dg/aws-glue-programming-python-calling.html">Calling AWS Glue APIs in Python</a> topic in the developer guide.</p> <p>For information about the key-value pairs that AWS Glue consumes to set up your job, see the <a href="http://docs.aws.amazon.com/glue/latest/dg/aws-glue-programming-python-glue-arguments.html">Special Parameters Used by AWS Glue</a> topic in the developer guide.</p>'
      Connections:
        $ref: '#/definitions/ConnectionsList'
        description: The connections used for this job.
      MaxRetries:
        $ref: '#/definitions/MaxRetries'
        description: The maximum number of times to retry this job if it fails.
      AllocatedCapacity:
        $ref: '#/definitions/IntegerValue'
        description: 'The number of AWS Glue data processing units (DPUs) allocated to this Job. From 2 to 100 DPUs can be allocated; the default is 10. A DPU is a relative measure of processing power that consists of 4 vCPUs of compute capacity and 16 GB of memory. For more information, see the <a href="https://aws.amazon.com/glue/pricing/">AWS Glue pricing page</a>.'
    description: Specifies a job.
  JobBookmarkEntry:
    type: object
    properties:
      JobName:
        $ref: '#/definitions/JobName'
        description: Name of the job in question.
      Version:
        $ref: '#/definitions/IntegerValue'
        description: Version of the job.
      Run:
        $ref: '#/definitions/IntegerValue'
        description: The run ID number.
      Attempt:
        $ref: '#/definitions/IntegerValue'
        description: The attempt ID number.
      JobBookmark:
        $ref: '#/definitions/JsonValue'
        description: The bookmark itself.
    description: Defines a point which a job can resume processing.
  JobCommand:
    type: object
    properties:
      Name:
        $ref: '#/definitions/GenericString'
        description: 'The name of the job command: this must be <code>glueetl</code>.'
      ScriptLocation:
        $ref: '#/definitions/ScriptLocationString'
        description: Specifies the S3 path to a script that executes a job (required).
    description: Specifies code that executes a job.
  JobList:
    type: array
    items:
      $ref: '#/definitions/Job'
  JobName:
    type: string
  JobRun:
    type: object
    properties:
      Id:
        $ref: '#/definitions/IdString'
        description: The ID of this job run.
      Attempt:
        $ref: '#/definitions/AttemptCount'
        description: The number of the attempt to run this job.
      PreviousRunId:
        $ref: '#/definitions/IdString'
        description: 'The ID of the previous run of this job. For example, the JobRunId specified in the StartJobRun action.'
      TriggerName:
        $ref: '#/definitions/NameString'
        description: The name of the trigger that started this job run.
      JobName:
        $ref: '#/definitions/NameString'
        description: The name of the job being run.
      StartedOn:
        $ref: '#/definitions/TimestampValue'
        description: The date and time at which this job run was started.
      LastModifiedOn:
        $ref: '#/definitions/TimestampValue'
        description: The last time this job run was modified.
      CompletedOn:
        $ref: '#/definitions/TimestampValue'
        description: The date and time this job run completed.
      JobRunState:
        $ref: '#/definitions/JobRunState'
        description: The current state of the job run.
      Arguments:
        $ref: '#/definitions/GenericMap'
        description: '<p>The job arguments associated with this run. These override equivalent default arguments set for the job.</p> <p>You can specify arguments here that your own job-execution script consumes, as well as arguments that AWS Glue itself consumes.</p> <p>For information about how to specify and consume your own job arguments, see the <a href="http://docs.aws.amazon.com/glue/latest/dg/aws-glue-programming-python-calling.html">Calling AWS Glue APIs in Python</a> topic in the developer guide.</p> <p>For information about the key-value pairs that AWS Glue consumes to set up your job, see the <a href="http://docs.aws.amazon.com/glue/latest/dg/aws-glue-programming-python-glue-arguments.html">Special Parameters Used by AWS Glue</a> topic in the developer guide.</p>'
      ErrorMessage:
        $ref: '#/definitions/ErrorString'
        description: An error message associated with this job run.
      PredecessorRuns:
        $ref: '#/definitions/PredecessorList'
        description: A list of predecessors to this job run.
      AllocatedCapacity:
        $ref: '#/definitions/IntegerValue'
        description: 'The number of AWS Glue data processing units (DPUs) allocated to this JobRun. From 2 to 100 DPUs can be allocated; the default is 10. A DPU is a relative measure of processing power that consists of 4 vCPUs of compute capacity and 16 GB of memory. For more information, see the <a href="https://aws.amazon.com/glue/pricing/">AWS Glue pricing page</a>.'
    description: Contains information about a job run.
  JobRunList:
    type: array
    items:
      $ref: '#/definitions/JobRun'
  JobRunState:
    type: string
    enum:
      - STARTING
      - RUNNING
      - STOPPING
      - STOPPED
      - SUCCEEDED
      - FAILED
  JobUpdate:
    type: object
    properties:
      Description:
        $ref: '#/definitions/DescriptionString'
        description: Description of the job.
      LogUri:
        $ref: '#/definitions/UriString'
        description: This field is reserved for future use.
      Role:
        $ref: '#/definitions/RoleString'
        description: The name of the IAM role associated with this job (required).
      ExecutionProperty:
        $ref: '#/definitions/ExecutionProperty'
        description: An ExecutionProperty specifying the maximum number of concurrent runs allowed for this job.
      Command:
        $ref: '#/definitions/JobCommand'
        description: The JobCommand that executes this job (required).
      DefaultArguments:
        $ref: '#/definitions/GenericMap'
        description: '<p>The default arguments for this job.</p> <p>You can specify arguments here that your own job-execution script consumes, as well as arguments that AWS Glue itself consumes.</p> <p>For information about how to specify and consume your own Job arguments, see the <a href="http://docs.aws.amazon.com/glue/latest/dg/aws-glue-programming-python-calling.html">Calling AWS Glue APIs in Python</a> topic in the developer guide.</p> <p>For information about the key-value pairs that AWS Glue consumes to set up your job, see the <a href="http://docs.aws.amazon.com/glue/latest/dg/aws-glue-programming-python-glue-arguments.html">Special Parameters Used by AWS Glue</a> topic in the developer guide.</p>'
      Connections:
        $ref: '#/definitions/ConnectionsList'
        description: The connections used for this job.
      MaxRetries:
        $ref: '#/definitions/MaxRetries'
        description: The maximum number of times to retry this job if it fails.
      AllocatedCapacity:
        $ref: '#/definitions/IntegerValue'
        description: 'The number of AWS Glue data processing units (DPUs) to allocate to this Job. From 2 to 100 DPUs can be allocated; the default is 10. A DPU is a relative measure of processing power that consists of 4 vCPUs of compute capacity and 16 GB of memory. For more information, see the <a href="https://aws.amazon.com/glue/pricing/">AWS Glue pricing page</a>.'
    description: Specifies information used to update an existing job. Note that the previous job definition will be completely overwritten by this information.
  JsonClassifier:
    type: object
    required:
      - Name
      - JsonPath
    properties:
      Name:
        $ref: '#/definitions/NameString'
        description: The name of the classifier.
      CreationTime:
        $ref: '#/definitions/Timestamp'
        description: The time this classifier was registered.
      LastUpdated:
        $ref: '#/definitions/Timestamp'
        description: The time this classifier was last updated.
      Version:
        $ref: '#/definitions/VersionId'
        description: The version of this classifier.
      JsonPath:
        $ref: '#/definitions/JsonPath'
        description: 'A <code>JsonPath</code> string defining the JSON data for the classifier to classify. AWS Glue supports a subset of JsonPath, as described in <a href="https://docs.aws.amazon.com/glue/latest/dg/custom-classifier.html#custom-classifier-json">Writing JsonPath Custom Classifiers</a>.'
    description: A classifier for <code>JSON</code> content.
  JsonPath:
    type: string
  JsonValue:
    type: string
  KeyString:
    type: string
    minLength: 1
    maxLength: 255
    x-pattern: '[\u0020-\uD7FF\uE000-\uFFFD\uD800\uDC00-\uDBFF\uDFFF\t]*'
  Language:
    type: string
    enum:
      - PYTHON
      - SCALA
  LastCrawlInfo:
    type: object
    properties:
      Status:
        $ref: '#/definitions/LastCrawlStatus'
        description: Status of the last crawl.
      ErrorMessage:
        $ref: '#/definitions/DescriptionString'
        description: 'If an error occurred, the error information about the last crawl.'
      LogGroup:
        $ref: '#/definitions/LogGroup'
        description: The log group for the last crawl.
      LogStream:
        $ref: '#/definitions/LogStream'
        description: The log stream for the last crawl.
      MessagePrefix:
        $ref: '#/definitions/MessagePrefix'
        description: The prefix for a message about this crawl.
      StartTime:
        $ref: '#/definitions/Timestamp'
        description: The time at which the crawl started.
    description: Status and error information about the most recent crawl.
  LastCrawlStatus:
    type: string
    enum:
      - SUCCEEDED
      - CANCELLED
      - FAILED
  Location:
    type: object
    properties:
      Jdbc:
        $ref: '#/definitions/CodeGenNodeArgs'
        description: A JDBC location.
      S3:
        $ref: '#/definitions/CodeGenNodeArgs'
        description: An Amazon S3 location.
    description: The location of resources.
  LocationMap:
    type: array
    items:
      type: object
      properties:
        key:
          $ref: '#/definitions/ColumnValuesString'
        value:
          $ref: '#/definitions/ColumnValuesString'
  LocationString:
    type: string
    maxLength: 2056
    x-pattern: '[\u0020-\uD7FF\uE000-\uFFFD\uD800\uDC00-\uDBFF\uDFFF\r\n\t]*'
  LogGroup:
    type: string
    pattern: '[\.\-_/#A-Za-z0-9]+'
    minLength: 1
    maxLength: 512
  LogStream:
    type: string
    pattern: '[^:*]*'
    minLength: 1
    maxLength: 512
  Logical:
    type: string
    enum:
      - AND
      - ANY
  LogicalOperator:
    type: string
    enum:
      - EQUALS
  MappingEntry:
    type: object
    properties:
      SourceTable:
        $ref: '#/definitions/TableName'
        description: The name of the source table.
      SourcePath:
        $ref: '#/definitions/SchemaPathString'
        description: The source path.
      SourceType:
        $ref: '#/definitions/FieldType'
        description: The source type.
      TargetTable:
        $ref: '#/definitions/TableName'
        description: The target table.
      TargetPath:
        $ref: '#/definitions/SchemaPathString'
        description: The target path.
      TargetType:
        $ref: '#/definitions/FieldType'
        description: The target type.
    description: Defines a mapping.
  MappingList:
    type: array
    items:
      $ref: '#/definitions/MappingEntry'
  MatchCriteria:
    type: array
    items:
      $ref: '#/definitions/NameString'
    minItems: 0
    maxItems: 10
  MaxConcurrentRuns:
    type: integer
  MaxRetries:
    type: integer
  MessagePrefix:
    type: string
    minLength: 1
    maxLength: 255
    x-pattern: '[\u0020-\uD7FF\uE000-\uFFFD\uD800\uDC00-\uDBFF\uDFFF\t]*'
  MessageString:
    type: string
  MillisecondsCount:
    type: integer
  NameString:
    type: string
    minLength: 1
    maxLength: 255
    x-pattern: '[\u0020-\uD7FF\uE000-\uFFFD\uD800\uDC00-\uDBFF\uDFFF\t]*'
  NameStringList:
    type: array
    items:
      $ref: '#/definitions/NameString'
  NoScheduleException:
    type: object
    properties:
      Message:
        $ref: '#/definitions/MessageString'
        description: A message describing the problem.
    description: There is no applicable schedule.
  NonNegativeDouble:
    type: number
    format: double
    minimum: 0
  NonNegativeInteger:
    type: integer
    minimum: 0
  OperationTimeoutException:
    type: object
    properties:
      Message:
        $ref: '#/definitions/MessageString'
        description: A message describing the problem.
    description: The operation timed out.
  Order:
    type: object
    required:
      - Column
      - SortOrder
    properties:
      Column:
        $ref: '#/definitions/NameString'
        description: The name of the column.
      SortOrder:
        $ref: '#/definitions/IntegerFlag'
        description: 'Indicates that the column is sorted in ascending order (<code>== 1</code>), or in descending order (<code>==0</code>).'
    description: Specifies the sort order of a sorted column.
  OrderList:
    type: array
    items:
      $ref: '#/definitions/Order'
  PageSize:
    type: integer
    minimum: 1
    maximum: 1000
  ParametersMap:
    type: array
    items:
      type: object
      properties:
        key:
          $ref: '#/definitions/KeyString'
        value:
          $ref: '#/definitions/ParametersMapValue'
  ParametersMapValue:
    type: string
    maxLength: 512000
  Partition:
    type: object
    properties:
      Values:
        $ref: '#/definitions/ValueStringList'
        description: The values of the partition.
      DatabaseName:
        $ref: '#/definitions/NameString'
        description: The name of the catalog database where the table in question is located.
      TableName:
        $ref: '#/definitions/NameString'
        description: The name of the table in question.
      CreationTime:
        $ref: '#/definitions/Timestamp'
        description: The time at which the partition was created.
      LastAccessTime:
        $ref: '#/definitions/Timestamp'
        description: The last time at which the partition was accessed.
      StorageDescriptor:
        $ref: '#/definitions/StorageDescriptor'
        description: Provides information about the physical location where the partition is stored.
      Parameters:
        $ref: '#/definitions/ParametersMap'
        description: 'Partition parameters, in the form of a list of key-value pairs.'
      LastAnalyzedTime:
        $ref: '#/definitions/Timestamp'
        description: The last time at which column statistics were computed for this partition.
    description: Represents a slice of table data.
  PartitionError:
    type: object
    properties:
      PartitionValues:
        $ref: '#/definitions/ValueStringList'
        description: The values that define the partition.
      ErrorDetail:
        $ref: '#/definitions/ErrorDetail'
        description: Details about the partition error.
    description: Contains information about a partition error.
  PartitionErrors:
    type: array
    items:
      $ref: '#/definitions/PartitionError'
  PartitionInput:
    type: object
    properties:
      Values:
        $ref: '#/definitions/ValueStringList'
        description: The values of the partition.
      LastAccessTime:
        $ref: '#/definitions/Timestamp'
        description: The last time at which the partition was accessed.
      StorageDescriptor:
        $ref: '#/definitions/StorageDescriptor'
        description: Provides information about the physical location where the partition is stored.
      Parameters:
        $ref: '#/definitions/ParametersMap'
        description: 'Partition parameters, in the form of a list of key-value pairs.'
      LastAnalyzedTime:
        $ref: '#/definitions/Timestamp'
        description: The last time at which column statistics were computed for this partition.
    description: The structure used to create and update a partion.
  PartitionInputList:
    type: array
    items:
      $ref: '#/definitions/PartitionInput'
    minItems: 0
    maxItems: 100
  PartitionList:
    type: array
    items:
      $ref: '#/definitions/Partition'
  PartitionValueList:
    type: object
    required:
      - Values
    properties:
      Values:
        $ref: '#/definitions/ValueStringList'
        description: The list of values.
    description: Contains a list of values defining partitions.
  Path:
    type: string
  PathList:
    type: array
    items:
      $ref: '#/definitions/Path'
  PhysicalConnectionRequirements:
    type: object
    properties:
      SubnetId:
        $ref: '#/definitions/NameString'
        description: The subnet ID used by the connection.
      SecurityGroupIdList:
        $ref: '#/definitions/SecurityGroupIdList'
        description: The security group ID list used by the connection.
      AvailabilityZone:
        $ref: '#/definitions/NameString'
        description: The connection's availability zone. This field is deprecated and has no effect.
    description: Specifies the physical requirements for a connection.
  Predecessor:
    type: object
    properties:
      JobName:
        $ref: '#/definitions/NameString'
        description: The name of the predecessor job.
      RunId:
        $ref: '#/definitions/IdString'
        description: The job-run ID of the predecessor job run.
    description: A job run that was used in the predicate of a conditional trigger that triggered this job run.
  PredecessorList:
    type: array
    items:
      $ref: '#/definitions/Predecessor'
  Predicate:
    type: object
    properties:
      Logical:
        $ref: '#/definitions/Logical'
        description: Currently "OR" is not supported.
      Conditions:
        $ref: '#/definitions/ConditionList'
        description: A list of the conditions that determine when the trigger will fire.
    description: 'Defines the predicate of the trigger, which determines when it fires.'
  PredicateString:
    type: string
    minLength: 0
    maxLength: 2048
    x-pattern: '[\u0020-\uD7FF\uE000-\uFFFD\uD800\uDC00-\uDBFF\uDFFF\r\n\t]*'
  PrincipalType:
    type: string
    enum:
      - USER
      - ROLE
      - GROUP
  PythonScript:
    type: string
  ResetJobBookmarkRequest:
    type: object
    required:
      - JobName
    properties:
      JobName:
        $ref: '#/definitions/JobName'
        description: The name of the job in question.
  ResetJobBookmarkResponse:
    type: object
    properties:
      JobBookmarkEntry:
        $ref: '#/definitions/JobBookmarkEntry'
        description: The reset bookmark entry.
  ResourceNumberLimitExceededException:
    type: object
    properties:
      Message:
        $ref: '#/definitions/MessageString'
        description: A message describing the problem.
    description: A resource numerical limit was exceeded.
  ResourceType:
    type: string
    enum:
      - JAR
      - FILE
      - ARCHIVE
  ResourceUri:
    type: object
    properties:
      ResourceType:
        $ref: '#/definitions/ResourceType'
        description: The type of the resource.
      Uri:
        $ref: '#/definitions/URI'
        description: The URI for accessing the resource.
    description: URIs for function resources.
  ResourceUriList:
    type: array
    items:
      $ref: '#/definitions/ResourceUri'
    minItems: 0
    maxItems: 1000
  Role:
    type: string
  RoleArn:
    type: string
    pattern: 'arn:aws:iam::\d{12}:role/.*'
  RoleString:
    type: string
  RowTag:
    type: string
  S3Target:
    type: object
    properties:
      Path:
        $ref: '#/definitions/Path'
        description: The path to the Amazon S3 target.
      Exclusions:
        $ref: '#/definitions/PathList'
        description: 'A list of glob patterns used to exclude from the crawl. For more information, see <a href="http://docs.aws.amazon.com/glue/latest/dg/add-crawler.html">Catalog Tables with a Crawler</a>.'
    description: Specifies a data store in Amazon S3.
  S3TargetList:
    type: array
    items:
      $ref: '#/definitions/S3Target'
  ScalaCode:
    type: string
  Schedule:
    type: object
    properties:
      ScheduleExpression:
        $ref: '#/definitions/CronExpression'
        description: 'A <code>cron</code> expression used to specify the schedule (see <a href="http://docs.aws.amazon.com/glue/latest/dg/monitor-data-warehouse-schedule.html">Time-Based Schedules for Jobs and Crawlers</a>. For example, to run something every day at 12:15 UTC, you would specify: <code>cron(15 12 * * ? *)</code>.'
      State:
        $ref: '#/definitions/ScheduleState'
        description: The state of the schedule.
    description: A scheduling object using a <code>cron</code> statement to schedule an event.
  ScheduleState:
    type: string
    enum:
      - SCHEDULED
      - NOT_SCHEDULED
      - TRANSITIONING
  SchedulerNotRunningException:
    type: object
    properties:
      Message:
        $ref: '#/definitions/MessageString'
        description: A message describing the problem.
    description: The specified scheduler is not running.
  SchedulerRunningException:
    type: object
    properties:
      Message:
        $ref: '#/definitions/MessageString'
        description: A message describing the problem.
    description: The specified scheduler is already running.
  SchedulerTransitioningException:
    type: object
    properties:
      Message:
        $ref: '#/definitions/MessageString'
        description: A message describing the problem.
    description: The specified scheduler is transitioning.
  SchemaChangePolicy:
    type: object
    properties:
      UpdateBehavior:
        $ref: '#/definitions/UpdateBehavior'
        description: The update behavior when the crawler finds a changed schema.
      DeleteBehavior:
        $ref: '#/definitions/DeleteBehavior'
        description: The deletion behavior when the crawler finds a deleted object.
    description: Crawler policy for update and deletion behavior.
  SchemaPathString:
    type: string
  ScriptLocationString:
    type: string
  SecurityGroupIdList:
    type: array
    items:
      $ref: '#/definitions/NameString'
    minItems: 0
    maxItems: 50
  Segment:
    type: object
    required:
      - SegmentNumber
      - TotalSegments
    properties:
      SegmentNumber:
        $ref: '#/definitions/NonNegativeInteger'
        description: 'The zero-based index number of the this segment. For example, if the total number of segments is 4, SegmentNumber values will range from zero through three.'
      TotalSegments:
        $ref: '#/definitions/TotalSegmentsInteger'
        description: The total numer of segments.
    description: 'Defines a non-overlapping region of a table''s partitions, allowing multiple requests to be executed in parallel.'
  SerDeInfo:
    type: object
    properties:
      Name:
        $ref: '#/definitions/NameString'
        description: Name of the SerDe.
      SerializationLibrary:
        $ref: '#/definitions/NameString'
        description: 'Usually the class that implements the SerDe. An example is: <code>org.apache.hadoop.hive.serde2.columnar.ColumnarSerDe</code>.'
      Parameters:
        $ref: '#/definitions/ParametersMap'
        description: 'A list of initialization parameters for the SerDe, in key-value form.'
    description: Information about a serialization/deserialization program (SerDe) which serves as an extractor and loader.
  SkewedInfo:
    type: object
    properties:
      SkewedColumnNames:
        $ref: '#/definitions/NameStringList'
        description: A list of names of columns that contain skewed values.
      SkewedColumnValues:
        $ref: '#/definitions/ColumnValueStringList'
        description: A list of values that appear so frequently as to be considered skewed.
      SkewedColumnValueLocationMaps:
        $ref: '#/definitions/LocationMap'
        description: A mapping of skewed values to the columns that contain them.
    description: Specifies skewed values in a table. Skewed are ones that occur with very high frequency.
  StartCrawlerRequest:
    type: object
    required:
      - Name
    properties:
      Name:
        $ref: '#/definitions/NameString'
        description: Name of the crawler to start.
  StartCrawlerResponse:
    type: object
    properties: {}
  StartCrawlerScheduleRequest:
    type: object
    required:
      - CrawlerName
    properties:
      CrawlerName:
        $ref: '#/definitions/NameString'
        description: Name of the crawler to schedule.
  StartCrawlerScheduleResponse:
    type: object
    properties: {}
  StartJobRunRequest:
    type: object
    required:
      - JobName
    properties:
      JobName:
        $ref: '#/definitions/NameString'
        description: The name of the job to start.
      JobRunId:
        $ref: '#/definitions/IdString'
        description: The ID of a previous JobRun to retry.
      Arguments:
        $ref: '#/definitions/GenericMap'
        description: '<p>The job arguments specifically for this run. They override the equivalent default arguments set for the job itself.</p> <p>You can specify arguments here that your own job-execution script consumes, as well as arguments that AWS Glue itself consumes.</p> <p>For information about how to specify and consume your own Job arguments, see the <a href="http://docs.aws.amazon.com/glue/latest/dg/aws-glue-programming-python-calling.html">Calling AWS Glue APIs in Python</a> topic in the developer guide.</p> <p>For information about the key-value pairs that AWS Glue consumes to set up your job, see the <a href="http://docs.aws.amazon.com/glue/latest/dg/aws-glue-programming-python-glue-arguments.html">Special Parameters Used by AWS Glue</a> topic in the developer guide.</p>'
      AllocatedCapacity:
        $ref: '#/definitions/IntegerValue'
        description: 'The number of AWS Glue data processing units (DPUs) to allocate to this JobRun. From 2 to 100 DPUs can be allocated; the default is 10. A DPU is a relative measure of processing power that consists of 4 vCPUs of compute capacity and 16 GB of memory. For more information, see the <a href="https://aws.amazon.com/glue/pricing/">AWS Glue pricing page</a>.'
  StartJobRunResponse:
    type: object
    properties:
      JobRunId:
        $ref: '#/definitions/IdString'
        description: The ID assigned to this job run.
  StartTriggerRequest:
    type: object
    required:
      - Name
    properties:
      Name:
        $ref: '#/definitions/NameString'
        description: The name of the trigger to start.
  StartTriggerResponse:
    type: object
    properties:
      Name:
        $ref: '#/definitions/NameString'
        description: The name of the trigger that was started.
  StopCrawlerRequest:
    type: object
    required:
      - Name
    properties:
      Name:
        $ref: '#/definitions/NameString'
        description: Name of the crawler to stop.
  StopCrawlerResponse:
    type: object
    properties: {}
  StopCrawlerScheduleRequest:
    type: object
    required:
      - CrawlerName
    properties:
      CrawlerName:
        $ref: '#/definitions/NameString'
        description: Name of the crawler whose schedule state to set.
  StopCrawlerScheduleResponse:
    type: object
    properties: {}
  StopTriggerRequest:
    type: object
    required:
      - Name
    properties:
      Name:
        $ref: '#/definitions/NameString'
        description: The name of the trigger to stop.
  StopTriggerResponse:
    type: object
    properties:
      Name:
        $ref: '#/definitions/NameString'
        description: The name of the trigger that was stopped.
  StorageDescriptor:
    type: object
    properties:
      Columns:
        $ref: '#/definitions/ColumnList'
        description: A list of the <code>Columns</code> in the table.
      Location:
        $ref: '#/definitions/LocationString'
        description: 'The physical location of the table. By default this takes the form of the warehouse location, followed by the database location in the warehouse, followed by the table name.'
      InputFormat:
        $ref: '#/definitions/FormatString'
        description: 'The input format: <code>SequenceFileInputFormat</code> (binary), or <code>TextInputFormat</code>, or a custom format.'
      OutputFormat:
        $ref: '#/definitions/FormatString'
        description: 'The output format: <code>SequenceFileOutputFormat</code> (binary), or <code>IgnoreKeyTextOutputFormat</code>, or a custom format.'
      Compressed:
        $ref: '#/definitions/Boolean'
        description: 'True if the data in the table is compressed, or False if not.'
      NumberOfBuckets:
        $ref: '#/definitions/Integer'
        description: Must be specified if the table contains any dimension columns.
      SerdeInfo:
        $ref: '#/definitions/SerDeInfo'
        description: Serialization/deserialization (SerDe) information.
      BucketColumns:
        $ref: '#/definitions/NameStringList'
        description: 'A list of reducer grouping columns, clustering columns, and bucketing columns in the table.'
      SortColumns:
        $ref: '#/definitions/OrderList'
        description: A list specifying the sort order of each bucket in the table.
      Parameters:
        $ref: '#/definitions/ParametersMap'
        description: User-supplied properties in key-value form.
      SkewedInfo:
        $ref: '#/definitions/SkewedInfo'
        description: Information about values that appear very frequently in a column (skewed values).
      StoredAsSubDirectories:
        $ref: '#/definitions/Boolean'
        description: 'True if the table data is stored in subdirectories, or False if not.'
    description: Describes the physical storage of table data.
  StringList:
    type: array
    items:
      $ref: '#/definitions/GenericString'
  Table:
    type: object
    required:
      - Name
    properties:
      Name:
        $ref: '#/definitions/NameString'
        description: 'Name of the table. For Hive compatibility, this must be entirely lowercase.'
      DatabaseName:
        $ref: '#/definitions/NameString'
        description: 'Name of the metadata database where the table metadata resides. For Hive compatibility, this must be all lowercase.'
      Description:
        $ref: '#/definitions/DescriptionString'
        description: Description of the table.
      Owner:
        $ref: '#/definitions/NameString'
        description: Owner of the table.
      CreateTime:
        $ref: '#/definitions/Timestamp'
        description: Time when the table definition was created in the Data Catalog.
      UpdateTime:
        $ref: '#/definitions/Timestamp'
        description: Last time the table was updated.
      LastAccessTime:
        $ref: '#/definitions/Timestamp'
        description: 'Last time the table was accessed. This is usually taken from HDFS, and may not be reliable.'
      LastAnalyzedTime:
        $ref: '#/definitions/Timestamp'
        description: Last time column statistics were computed for this table.
      Retention:
        $ref: '#/definitions/NonNegativeInteger'
        description: Retention time for this table.
      StorageDescriptor:
        $ref: '#/definitions/StorageDescriptor'
        description: A storage descriptor containing information about the physical storage of this table.
      PartitionKeys:
        $ref: '#/definitions/ColumnList'
        description: A list of columns by which the table is partitioned. Only primitive types are supported as partition keys.
      ViewOriginalText:
        $ref: '#/definitions/ViewTextString'
        description: 'If the table is a view, the original text of the view; otherwise <code>null</code>.'
      ViewExpandedText:
        $ref: '#/definitions/ViewTextString'
        description: 'If the table is a view, the expanded text of the view; otherwise <code>null</code>.'
      TableType:
        $ref: '#/definitions/TableTypeString'
        description: 'The type of this table (<code>EXTERNAL_TABLE</code>, <code>VIRTUAL_VIEW</code>, etc.).'
      Parameters:
        $ref: '#/definitions/ParametersMap'
        description: 'Properties associated with this table, as a list of key-value pairs.'
      CreatedBy:
        $ref: '#/definitions/NameString'
        description: Person or entity who created the table.
    description: Represents a collection of related data organized in columns and rows.
  TableError:
    type: object
    properties:
      TableName:
        $ref: '#/definitions/NameString'
        description: 'Name of the table. For Hive compatibility, this must be entirely lowercase.'
      ErrorDetail:
        $ref: '#/definitions/ErrorDetail'
        description: Detail about the error.
    description: An error record for table operations.
  TableErrors:
    type: array
    items:
      $ref: '#/definitions/TableError'
  TableInput:
    type: object
    required:
      - Name
    properties:
      Name:
        $ref: '#/definitions/NameString'
        description: 'Name of the table. For Hive compatibility, this is folded to lowercase when it is stored.'
      Description:
        $ref: '#/definitions/DescriptionString'
        description: Description of the table.
      Owner:
        $ref: '#/definitions/NameString'
        description: Owner of the table.
      LastAccessTime:
        $ref: '#/definitions/Timestamp'
        description: Last time the table was accessed.
      LastAnalyzedTime:
        $ref: '#/definitions/Timestamp'
        description: Last time column statistics were computed for this table.
      Retention:
        $ref: '#/definitions/NonNegativeInteger'
        description: Retention time for this table.
      StorageDescriptor:
        $ref: '#/definitions/StorageDescriptor'
        description: A storage descriptor containing information about the physical storage of this table.
      PartitionKeys:
        $ref: '#/definitions/ColumnList'
        description: A list of columns by which the table is partitioned. Only primitive types are supported as partition keys.
      ViewOriginalText:
        $ref: '#/definitions/ViewTextString'
        description: 'If the table is a view, the original text of the view; otherwise <code>null</code>.'
      ViewExpandedText:
        $ref: '#/definitions/ViewTextString'
        description: 'If the table is a view, the expanded text of the view; otherwise <code>null</code>.'
      TableType:
        $ref: '#/definitions/TableTypeString'
        description: 'The type of this table (<code>EXTERNAL_TABLE</code>, <code>VIRTUAL_VIEW</code>, etc.).'
      Parameters:
        $ref: '#/definitions/ParametersMap'
        description: 'Properties associated with this table, as a list of key-value pairs.'
    description: Structure used to create or update the table.
  TableList:
    type: array
    items:
      $ref: '#/definitions/Table'
  TableName:
    type: string
  TablePrefix:
    type: string
    minLength: 0
    maxLength: 128
  TableTypeString:
    type: string
    maxLength: 255
  TableVersion:
    type: object
    properties:
      Table:
        $ref: '#/definitions/Table'
        description: The table in question
      VersionId:
        $ref: '#/definitions/VersionString'
        description: The ID value that identifies this table version.
    description: Specifies a version of a table.
  TableVersionError:
    type: object
    properties:
      TableName:
        $ref: '#/definitions/NameString'
        description: The name of the table in question.
      VersionId:
        $ref: '#/definitions/VersionString'
        description: The ID value of the version in question.
      ErrorDetail:
        $ref: '#/definitions/ErrorDetail'
        description: Detail about the error.
    description: An error record for table-version operations.
  TableVersionErrors:
    type: array
    items:
      $ref: '#/definitions/TableVersionError'
  Timestamp:
    type: string
    format: date-time
  TimestampValue:
    type: string
    format: date-time
  Token:
    type: string
  TotalSegmentsInteger:
    type: integer
    minimum: 1
    maximum: 10
  Trigger:
    type: object
    properties:
      Name:
        $ref: '#/definitions/NameString'
        description: Name of the trigger.
      Id:
        $ref: '#/definitions/IdString'
        description: Reserved for future use.
      Type:
        $ref: '#/definitions/TriggerType'
        description: The type of trigger that this is.
      State:
        $ref: '#/definitions/TriggerState'
        description: The current state of the trigger.
      Description:
        $ref: '#/definitions/DescriptionString'
        description: A description of this trigger.
      Schedule:
        $ref: '#/definitions/GenericString'
        description: 'A <code>cron</code> expression used to specify the schedule (see <a href="http://docs.aws.amazon.com/glue/latest/dg/monitor-data-warehouse-schedule.html">Time-Based Schedules for Jobs and Crawlers</a>. For example, to run something every day at 12:15 UTC, you would specify: <code>cron(15 12 * * ? *)</code>.'
      Actions:
        $ref: '#/definitions/ActionList'
        description: The actions initiated by this trigger.
      Predicate:
        $ref: '#/definitions/Predicate'
        description: 'The predicate of this trigger, which defines when it will fire.'
    description: Information about a specific trigger.
  TriggerList:
    type: array
    items:
      $ref: '#/definitions/Trigger'
  TriggerState:
    type: string
    enum:
      - CREATING
      - CREATED
      - ACTIVATING
      - ACTIVATED
      - DEACTIVATING
      - DEACTIVATED
      - DELETING
      - UPDATING
  TriggerType:
    type: string
    enum:
      - SCHEDULED
      - CONDITIONAL
      - ON_DEMAND
  TriggerUpdate:
    type: object
    properties:
      Name:
        $ref: '#/definitions/NameString'
        description: Reserved for future use.
      Description:
        $ref: '#/definitions/DescriptionString'
        description: A description of this trigger.
      Schedule:
        $ref: '#/definitions/GenericString'
        description: 'A <code>cron</code> expression used to specify the schedule (see <a href="http://docs.aws.amazon.com/glue/latest/dg/monitor-data-warehouse-schedule.html">Time-Based Schedules for Jobs and Crawlers</a>. For example, to run something every day at 12:15 UTC, you would specify: <code>cron(15 12 * * ? *)</code>.'
      Actions:
        $ref: '#/definitions/ActionList'
        description: The actions initiated by this trigger.
      Predicate:
        $ref: '#/definitions/Predicate'
        description: 'The predicate of this trigger, which defines when it will fire.'
    description: A structure used to provide information used to update a trigger. This object will update the the previous trigger definition by overwriting it completely.
  URI:
    type: string
    minLength: 1
    maxLength: 1024
    x-pattern: '[\u0020-\uD7FF\uE000-\uFFFD\uD800\uDC00-\uDBFF\uDFFF\r\n\t]*'
  UpdateBehavior:
    type: string
    enum:
      - LOG
      - UPDATE_IN_DATABASE
  UpdateClassifierRequest:
    type: object
    properties:
      GrokClassifier:
        $ref: '#/definitions/UpdateGrokClassifierRequest'
        description: A <code>GrokClassifier</code> object with updated fields.
      XMLClassifier:
        $ref: '#/definitions/UpdateXMLClassifierRequest'
        description: An <code>XMLClassifier</code> object with updated fields.
      JsonClassifier:
        $ref: '#/definitions/UpdateJsonClassifierRequest'
        description: A <code>JsonClassifier</code> object with updated fields.
  UpdateClassifierResponse:
    type: object
    properties: {}
  UpdateConnectionRequest:
    type: object
    required:
      - Name
      - ConnectionInput
    properties:
      CatalogId:
        $ref: '#/definitions/CatalogIdString'
        description: 'The ID of the Data Catalog in which the connection resides. If none is supplied, the AWS account ID is used by default.'
      Name:
        $ref: '#/definitions/NameString'
        description: The name of the connection definition to update.
      ConnectionInput:
        $ref: '#/definitions/ConnectionInput'
        description: A <code>ConnectionInput</code> object that redefines the connection in question.
  UpdateConnectionResponse:
    type: object
    properties: {}
  UpdateCrawlerRequest:
    type: object
    required:
      - Name
    properties:
      Name:
        $ref: '#/definitions/NameString'
        description: Name of the new crawler.
      Role:
        $ref: '#/definitions/Role'
        description: The IAM role (or ARN of an IAM role) used by the new crawler to access customer resources.
      DatabaseName:
        $ref: '#/definitions/DatabaseName'
        description: 'The AWS Glue database where results are stored, such as: <code>arn:aws:daylight:us-east-1::database/sometable/*</code>.'
      Description:
        $ref: '#/definitions/DescriptionStringRemovable'
        description: A description of the new crawler.
      Targets:
        $ref: '#/definitions/CrawlerTargets'
        description: A list of targets to crawl.
      Schedule:
        $ref: '#/definitions/CronExpression'
        description: 'A <code>cron</code> expression used to specify the schedule (see <a href="http://docs.aws.amazon.com/glue/latest/dg/monitor-data-warehouse-schedule.html">Time-Based Schedules for Jobs and Crawlers</a>. For example, to run something every day at 12:15 UTC, you would specify: <code>cron(15 12 * * ? *)</code>.'
      Classifiers:
        $ref: '#/definitions/ClassifierNameList'
        description: 'A list of custom classifiers that the user has registered. By default, all classifiers are included in a crawl, but these custom classifiers always override the default classifiers for a given classification.'
      TablePrefix:
        $ref: '#/definitions/TablePrefix'
        description: The table prefix used for catalog tables that are created.
      SchemaChangePolicy:
        $ref: '#/definitions/SchemaChangePolicy'
        description: Policy for the crawler's update and deletion behavior.
      Configuration:
        $ref: '#/definitions/CrawlerConfiguration'
        description: '<p>Crawler configuration information. This versioned JSON string allows users to specify aspects of a Crawler''s behavior.</p> <p>You can use this field to force partitions to inherit metadata such as classification, input format, output format, serde information, and schema from their parent table, rather than detect this information separately for each partition. Use the following JSON string to specify that behavior:</p> <p>Example: <code>''{ "Version": 1.0, "CrawlerOutput": { "Partitions": { "AddOrUpdateBehavior": "InheritFromTable" } } }''</code> </p>'
  UpdateCrawlerResponse:
    type: object
    properties: {}
  UpdateCrawlerScheduleRequest:
    type: object
    required:
      - CrawlerName
    properties:
      CrawlerName:
        $ref: '#/definitions/NameString'
        description: Name of the crawler whose schedule to update.
      Schedule:
        $ref: '#/definitions/CronExpression'
        description: 'The updated <code>cron</code> expression used to specify the schedule (see <a href="http://docs.aws.amazon.com/glue/latest/dg/monitor-data-warehouse-schedule.html">Time-Based Schedules for Jobs and Crawlers</a>. For example, to run something every day at 12:15 UTC, you would specify: <code>cron(15 12 * * ? *)</code>.'
  UpdateCrawlerScheduleResponse:
    type: object
    properties: {}
  UpdateDatabaseRequest:
    type: object
    required:
      - Name
      - DatabaseInput
    properties:
      CatalogId:
        $ref: '#/definitions/CatalogIdString'
        description: 'The ID of the Data Catalog in which the metadata database resides. If none is supplied, the AWS account ID is used by default.'
      Name:
        $ref: '#/definitions/NameString'
        description: 'The name of the database to update in the catalog. For Hive compatibility, this is folded to lowercase.'
      DatabaseInput:
        $ref: '#/definitions/DatabaseInput'
        description: A <code>DatabaseInput</code> object specifying the new definition of the metadata database in the catalog.
  UpdateDatabaseResponse:
    type: object
    properties: {}
  UpdateDevEndpointRequest:
    type: object
    required:
      - EndpointName
    properties:
      EndpointName:
        $ref: '#/definitions/GenericString'
        description: The name of the DevEndpoint to be updated.
      PublicKey:
        $ref: '#/definitions/GenericString'
        description: The public key for the DevEndpoint to use.
      CustomLibraries:
        $ref: '#/definitions/DevEndpointCustomLibraries'
        description: Custom Python or Java libraries to be loaded in the DevEndpoint.
      UpdateEtlLibraries:
        $ref: '#/definitions/BooleanValue'
        description: 'True if the list of custom libraries to be loaded in the development endpoint needs to be updated, or False otherwise.'
  UpdateDevEndpointResponse:
    type: object
    properties: {}
  UpdateGrokClassifierRequest:
    type: object
    required:
      - Name
    properties:
      Name:
        $ref: '#/definitions/NameString'
        description: The name of the <code>GrokClassifier</code>.
      Classification:
        $ref: '#/definitions/Classification'
        description: 'An identifier of the data format that the classifier matches, such as Twitter, JSON, Omniture logs, Amazon CloudWatch Logs, and so on.'
      GrokPattern:
        $ref: '#/definitions/GrokPattern'
        description: The grok pattern used by this classifier.
      CustomPatterns:
        $ref: '#/definitions/CustomPatterns'
        description: Optional custom grok patterns used by this classifier.
    description: Specifies a grok classifier to update when passed to <code>UpdateClassifier</code>.
  UpdateJobRequest:
    type: object
    required:
      - JobName
      - JobUpdate
    properties:
      JobName:
        $ref: '#/definitions/NameString'
        description: Name of the job definition to update.
      JobUpdate:
        $ref: '#/definitions/JobUpdate'
        description: Specifies the values with which to update the job.
  UpdateJobResponse:
    type: object
    properties:
      JobName:
        $ref: '#/definitions/NameString'
        description: Returns the name of the updated job.
  UpdateJsonClassifierRequest:
    type: object
    required:
      - Name
    properties:
      Name:
        $ref: '#/definitions/NameString'
        description: The name of the classifier.
      JsonPath:
        $ref: '#/definitions/JsonPath'
        description: 'A <code>JsonPath</code> string defining the JSON data for the classifier to classify. AWS Glue supports a subset of JsonPath, as described in <a href="https://docs.aws.amazon.com/glue/latest/dg/custom-classifier.html#custom-classifier-json">Writing JsonPath Custom Classifiers</a>.'
    description: Specifies a JSON classifier to be updated.
  UpdatePartitionRequest:
    type: object
    required:
      - DatabaseName
      - TableName
      - PartitionValueList
      - PartitionInput
    properties:
      CatalogId:
        $ref: '#/definitions/CatalogIdString'
        description: 'The ID of the Data Catalog where the partition to be updated resides. If none is supplied, the AWS account ID is used by default.'
      DatabaseName:
        $ref: '#/definitions/NameString'
        description: The name of the catalog database in which the table in question resides.
      TableName:
        $ref: '#/definitions/NameString'
        description: The name of the table where the partition to be updated is located.
      PartitionValueList:
        $ref: '#/definitions/BoundedPartitionValueList'
        description: A list of the values defining the partition.
      PartitionInput:
        $ref: '#/definitions/PartitionInput'
        description: The new partition object to which to update the partition.
  UpdatePartitionResponse:
    type: object
    properties: {}
  UpdateTableRequest:
    type: object
    required:
      - DatabaseName
      - TableInput
    properties:
      CatalogId:
        $ref: '#/definitions/CatalogIdString'
        description: 'The ID of the Data Catalog where the table resides. If none is supplied, the AWS account ID is used by default.'
      DatabaseName:
        $ref: '#/definitions/NameString'
        description: 'The name of the catalog database in which the table resides. For Hive compatibility, this name is entirely lowercase.'
      TableInput:
        $ref: '#/definitions/TableInput'
        description: An updated <code>TableInput</code> object to define the metadata table in the catalog.
      SkipArchive:
        $ref: '#/definitions/BooleanNullable'
        description: 'By default, <code>UpdateTable</code> always creates an archived version of the table before updating it. If <code>skipArchive</code> is set to true, however, <code>UpdateTable</code> does not create the archived version.'
  UpdateTableResponse:
    type: object
    properties: {}
  UpdateTriggerRequest:
    type: object
    required:
      - Name
      - TriggerUpdate
    properties:
      Name:
        $ref: '#/definitions/NameString'
        description: The name of the trigger to update.
      TriggerUpdate:
        $ref: '#/definitions/TriggerUpdate'
        description: The new values with which to update the trigger.
  UpdateTriggerResponse:
    type: object
    properties:
      Trigger:
        $ref: '#/definitions/Trigger'
        description: The resulting trigger definition.
  UpdateUserDefinedFunctionRequest:
    type: object
    required:
      - DatabaseName
      - FunctionName
      - FunctionInput
    properties:
      CatalogId:
        $ref: '#/definitions/CatalogIdString'
        description: 'The ID of the Data Catalog where the function to be updated is located. If none is supplied, the AWS account ID is used by default.'
      DatabaseName:
        $ref: '#/definitions/NameString'
        description: The name of the catalog database where the function to be updated is located.
      FunctionName:
        $ref: '#/definitions/NameString'
        description: The name of the function.
      FunctionInput:
        $ref: '#/definitions/UserDefinedFunctionInput'
        description: A <code>FunctionInput</code> object that re-defines the function in the Data Catalog.
  UpdateUserDefinedFunctionResponse:
    type: object
    properties: {}
  UpdateXMLClassifierRequest:
    type: object
    required:
      - Name
    properties:
      Name:
        $ref: '#/definitions/NameString'
        description: The name of the classifier.
      Classification:
        $ref: '#/definitions/Classification'
        description: An identifier of the data format that the classifier matches.
      RowTag:
        $ref: '#/definitions/RowTag'
        description: 'The XML tag designating the element that contains each record in an XML document being parsed. Note that this cannot identify a self-closing element (closed by <code>/&gt;</code>). An empty row element that contains only attributes can be parsed as long as it ends with a closing tag (for example, <code>&lt;row item_a="A" item_b="B"&gt;&lt;/row&gt;</code> is okay, but <code>&lt;row item_a="A" item_b="B" /&gt;</code> is not).'
    description: Specifies an XML classifier to be updated.
  UriString:
    type: string
  UserDefinedFunction:
    type: object
    properties:
      FunctionName:
        $ref: '#/definitions/NameString'
        description: The name of the function.
      ClassName:
        $ref: '#/definitions/NameString'
        description: The Java class that contains the function code.
      OwnerName:
        $ref: '#/definitions/NameString'
        description: The owner of the function.
      OwnerType:
        $ref: '#/definitions/PrincipalType'
        description: The owner type.
      CreateTime:
        $ref: '#/definitions/Timestamp'
        description: The time at which the function was created.
      ResourceUris:
        $ref: '#/definitions/ResourceUriList'
        description: The resource URIs for the function.
    description: Represents the equivalent of a Hive user-defined function (<code>UDF</code>) definition.
  UserDefinedFunctionInput:
    type: object
    properties:
      FunctionName:
        $ref: '#/definitions/NameString'
        description: The name of the function.
      ClassName:
        $ref: '#/definitions/NameString'
        description: The Java class that contains the function code.
      OwnerName:
        $ref: '#/definitions/NameString'
        description: The owner of the function.
      OwnerType:
        $ref: '#/definitions/PrincipalType'
        description: The owner type.
      ResourceUris:
        $ref: '#/definitions/ResourceUriList'
        description: The resource URIs for the function.
    description: A structure used to create or updata a user-defined function.
  UserDefinedFunctionList:
    type: array
    items:
      $ref: '#/definitions/UserDefinedFunction'
  ValidationException:
    type: object
    properties:
      Message:
        $ref: '#/definitions/MessageString'
        description: A message describing the problem.
    description: A value could not be validated.
  ValueString:
    type: string
    maxLength: 1024
  ValueStringList:
    type: array
    items:
      $ref: '#/definitions/ValueString'
  VersionId:
    type: integer
  VersionMismatchException:
    type: object
    properties:
      Message:
        $ref: '#/definitions/MessageString'
        description: A message describing the problem.
    description: There was a version conflict.
  VersionString:
    type: string
    minLength: 1
    maxLength: 255
    x-pattern: '[\u0020-\uD7FF\uE000-\uFFFD\uD800\uDC00-\uDBFF\uDFFF\t]*'
  ViewTextString:
    type: string
    maxLength: 409600
  XMLClassifier:
    type: object
    required:
      - Name
      - Classification
    properties:
      Name:
        $ref: '#/definitions/NameString'
        description: The name of the classifier.
      Classification:
        $ref: '#/definitions/Classification'
        description: An identifier of the data format that the classifier matches.
      CreationTime:
        $ref: '#/definitions/Timestamp'
        description: The time this classifier was registered.
      LastUpdated:
        $ref: '#/definitions/Timestamp'
        description: The time this classifier was last updated.
      Version:
        $ref: '#/definitions/VersionId'
        description: The version of this classifier.
      RowTag:
        $ref: '#/definitions/RowTag'
        description: 'The XML tag designating the element that contains each record in an XML document being parsed. Note that this cannot identify a self-closing element (closed by <code>/&gt;</code>). An empty row element that contains only attributes can be parsed as long as it ends with a closing tag (for example, <code>&lt;row item_a="A" item_b="B"&gt;&lt;/row&gt;</code> is okay, but <code>&lt;row item_a="A" item_b="B" /&gt;</code> is not).'
    description: A classifier for <code>XML</code> content.
