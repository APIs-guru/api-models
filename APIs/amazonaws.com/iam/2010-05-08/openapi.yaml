openapi: 3.0.0
servers:
  - url: 'http://iam.amazonaws.com/'
info:
  version: '2010-05-08'
  x-release: v4
  title: AWS Identity and Access Management
  description: '<fullname>AWS Identity and Access Management</fullname> <p>AWS Identity and Access Management (IAM) is a web service that you can use to manage users and user permissions under your AWS account. This guide provides descriptions of IAM actions that you can call programmatically. For general information about IAM, see <a href="http://aws.amazon.com/iam/">AWS Identity and Access Management (IAM)</a>. For the user guide for IAM, see <a href="http://docs.aws.amazon.com/IAM/latest/UserGuide/">Using IAM</a>. </p> <note> <p>AWS provides SDKs that consist of libraries and sample code for various programming languages and platforms (Java, Ruby, .NET, iOS, Android, etc.). The SDKs provide a convenient way to create programmatic access to IAM and AWS. For example, the SDKs take care of tasks such as cryptographically signing requests (see below), managing errors, and retrying requests automatically. For information about the AWS SDKs, including how to download and install them, see the <a href="http://aws.amazon.com/tools/">Tools for Amazon Web Services</a> page. </p> </note> <p>We recommend that you use the AWS SDKs to make programmatic API calls to IAM. However, you can also use the IAM Query API to make direct calls to the IAM web service. To learn more about the IAM Query API, see <a href="http://docs.aws.amazon.com/IAM/latest/UserGuide/IAM_UsingQueryAPI.html">Making Query Requests</a> in the <i>Using IAM</i> guide. IAM supports GET and POST requests for all actions. That is, the API does not require you to use GET for some actions and POST for others. However, GET requests are subject to the limitation size of a URL. Therefore, for operations that require larger sizes, use a POST request. </p> <p> <b>Signing Requests</b> </p> <p>Requests must be signed using an access key ID and a secret access key. We strongly recommend that you do not use your AWS account access key ID and secret access key for everyday work with IAM. You can use the access key ID and secret access key for an IAM user or you can use the AWS Security Token Service to generate temporary security credentials and use those to sign requests.</p> <p>To sign requests, we recommend that you use <a href="http://docs.aws.amazon.com/general/latest/gr/signature-version-4.html">Signature Version 4</a>. If you have an existing application that uses Signature Version 2, you do not have to update it to use Signature Version 4. However, some operations now require Signature Version 4. The documentation for operations that require version 4 indicate this requirement. </p> <p> <b>Additional Resources</b> </p> <p>For more information, see the following:</p> <ul> <li> <p> <a href="http://docs.aws.amazon.com/general/latest/gr/aws-security-credentials.html">AWS Security Credentials</a>. This topic provides general information about the types of credentials used for accessing AWS. </p> </li> <li> <p> <a href="http://docs.aws.amazon.com/IAM/latest/UserGuide/IAMBestPractices.html">IAM Best Practices</a>. This topic presents a list of suggestions for using the IAM service to help secure your AWS resources. </p> </li> <li> <p> <a href="http://docs.aws.amazon.com/general/latest/gr/signing_aws_api_requests.html">Signing AWS API Requests</a>. This set of topics walk you through the process of signing a request using an access key ID and secret access key. </p> </li> </ul>'
  x-logo:
    url: 'https://media.amazonwebservices.com/blog/2007/big_pbaws_logo_300px.jpg'
    backgroundColor: '#FFFFFF'
  termsOfService: 'https://aws.amazon.com/service-terms/'
  contact:
    name: Mike Ralphson
    email: mike.ralphson@gmail.com
    url: 'https://github.com/mermade/aws2openapi'
  license:
    name: Apache 2.0 License
    url: 'http://www.apache.org/licenses/'
  x-providerName: amazonaws.com
  x-serviceName: iam
  x-origin:
    - contentType: application/json
      url: 'https://raw.githubusercontent.com/aws/aws-sdk-js/master/apis/iam-2010-05-08.normal.json'
      converter:
        url: 'https://github.com/mermade/aws2openapi'
        version: 1.0.0
      x-apisguru-direct: true
  x-apiClientRegistration:
    url: 'https://portal.aws.amazon.com/gp/aws/developer/registration/index.html?nc2=h_ct'
  x-apisguru-categories:
    - cloud
  x-preferred: true
externalDocs:
  description: Amazon Web Services documentation
  url: 'https://aws.amazon.com/iam/'
x-hasEquivalentPaths: true
security:
  - hmac: []
paths:
  /:
    post:
      operationId: AddClientIDToOpenIDConnectProvider
      description: <p>Adds a new client ID (also known as audience) to the list of client IDs already registered for the specified IAM OpenID Connect (OIDC) provider resource.</p> <p>This action is idempotent; it does not fail or return an error if you add an existing client ID to the provider.</p>
      responses:
        '200':
          description: Success
        '480':
          description: InvalidInputException
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/InvalidInputException'
        '481':
          description: NoSuchEntityException
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/NoSuchEntityException'
        '482':
          description: LimitExceededException
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/LimitExceededException'
        '483':
          description: ServiceFailureException
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ServiceFailureException'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AddClientIDToOpenIDConnectProviderRequest'
        required: true
    parameters:
      - $ref: '#/components/parameters/Action'
      - $ref: '#/components/parameters/Version'
      - $ref: '#/components/parameters/X-Amz-Content-Sha256'
      - $ref: '#/components/parameters/X-Amz-Date'
      - $ref: '#/components/parameters/X-Amz-Algorithm'
      - $ref: '#/components/parameters/X-Amz-Credential'
      - $ref: '#/components/parameters/X-Amz-Security-Token'
      - $ref: '#/components/parameters/X-Amz-Signature'
      - $ref: '#/components/parameters/X-Amz-SignedHeaders'
  '/#AddRoleToInstanceProfile':
    post:
      operationId: AddRoleToInstanceProfile
      description: '<p>Adds the specified IAM role to the specified instance profile. An instance profile can contain only one role, and this limit cannot be increased.</p> <note> <p>The caller of this API must be granted the <code>PassRole</code> permission on the IAM role by a permission policy.</p> </note> <p>For more information about roles, go to <a href="http://docs.aws.amazon.com/IAM/latest/UserGuide/WorkingWithRoles.html">Working with Roles</a>. For more information about instance profiles, go to <a href="http://docs.aws.amazon.com/IAM/latest/UserGuide/AboutInstanceProfiles.html">About Instance Profiles</a>.</p>'
      responses:
        '200':
          description: Success
        '480':
          description: NoSuchEntityException
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/NoSuchEntityException'
        '481':
          description: EntityAlreadyExistsException
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/EntityAlreadyExistsException'
        '482':
          description: LimitExceededException
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/LimitExceededException'
        '483':
          description: UnmodifiableEntityException
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/UnmodifiableEntityException'
        '484':
          description: ServiceFailureException
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ServiceFailureException'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AddRoleToInstanceProfileRequest'
        required: true
    parameters:
      - $ref: '#/components/parameters/Action'
      - $ref: '#/components/parameters/Version'
      - $ref: '#/components/parameters/X-Amz-Content-Sha256'
      - $ref: '#/components/parameters/X-Amz-Date'
      - $ref: '#/components/parameters/X-Amz-Algorithm'
      - $ref: '#/components/parameters/X-Amz-Credential'
      - $ref: '#/components/parameters/X-Amz-Security-Token'
      - $ref: '#/components/parameters/X-Amz-Signature'
      - $ref: '#/components/parameters/X-Amz-SignedHeaders'
  '/#AddUserToGroup':
    post:
      operationId: AddUserToGroup
      description: Adds the specified user to the specified group.
      responses:
        '200':
          description: Success
        '480':
          description: NoSuchEntityException
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/NoSuchEntityException'
        '481':
          description: LimitExceededException
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/LimitExceededException'
        '482':
          description: ServiceFailureException
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ServiceFailureException'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AddUserToGroupRequest'
        required: true
    parameters:
      - $ref: '#/components/parameters/Action'
      - $ref: '#/components/parameters/Version'
      - $ref: '#/components/parameters/X-Amz-Content-Sha256'
      - $ref: '#/components/parameters/X-Amz-Date'
      - $ref: '#/components/parameters/X-Amz-Algorithm'
      - $ref: '#/components/parameters/X-Amz-Credential'
      - $ref: '#/components/parameters/X-Amz-Security-Token'
      - $ref: '#/components/parameters/X-Amz-Signature'
      - $ref: '#/components/parameters/X-Amz-SignedHeaders'
  '/#AttachGroupPolicy':
    post:
      operationId: AttachGroupPolicy
      description: '<p>Attaches the specified managed policy to the specified IAM group.</p> <p>You use this API to attach a managed policy to a group. To embed an inline policy in a group, use <a>PutGroupPolicy</a>.</p> <p>For more information about policies, see <a href="http://docs.aws.amazon.com/IAM/latest/UserGuide/policies-managed-vs-inline.html">Managed Policies and Inline Policies</a> in the <i>IAM User Guide</i>.</p>'
      responses:
        '200':
          description: Success
        '480':
          description: NoSuchEntityException
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/NoSuchEntityException'
        '481':
          description: LimitExceededException
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/LimitExceededException'
        '482':
          description: InvalidInputException
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/InvalidInputException'
        '483':
          description: ServiceFailureException
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ServiceFailureException'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AttachGroupPolicyRequest'
        required: true
    parameters:
      - $ref: '#/components/parameters/Action'
      - $ref: '#/components/parameters/Version'
      - $ref: '#/components/parameters/X-Amz-Content-Sha256'
      - $ref: '#/components/parameters/X-Amz-Date'
      - $ref: '#/components/parameters/X-Amz-Algorithm'
      - $ref: '#/components/parameters/X-Amz-Credential'
      - $ref: '#/components/parameters/X-Amz-Security-Token'
      - $ref: '#/components/parameters/X-Amz-Signature'
      - $ref: '#/components/parameters/X-Amz-SignedHeaders'
  '/#AttachRolePolicy':
    post:
      operationId: AttachRolePolicy
      description: '<p>Attaches the specified managed policy to the specified IAM role. When you attach a managed policy to a role, the managed policy becomes part of the role''s permission (access) policy.</p> <note> <p>You cannot use a managed policy as the role''s trust policy. The role''s trust policy is created at the same time as the role, using <a>CreateRole</a>. You can update a role''s trust policy using <a>UpdateAssumeRolePolicy</a>.</p> </note> <p>Use this API to attach a <i>managed</i> policy to a role. To embed an inline policy in a role, use <a>PutRolePolicy</a>. For more information about policies, see <a href="http://docs.aws.amazon.com/IAM/latest/UserGuide/policies-managed-vs-inline.html">Managed Policies and Inline Policies</a> in the <i>IAM User Guide</i>.</p>'
      responses:
        '200':
          description: Success
        '480':
          description: NoSuchEntityException
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/NoSuchEntityException'
        '481':
          description: LimitExceededException
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/LimitExceededException'
        '482':
          description: InvalidInputException
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/InvalidInputException'
        '483':
          description: UnmodifiableEntityException
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/UnmodifiableEntityException'
        '484':
          description: ServiceFailureException
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ServiceFailureException'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AttachRolePolicyRequest'
        required: true
    parameters:
      - $ref: '#/components/parameters/Action'
      - $ref: '#/components/parameters/Version'
      - $ref: '#/components/parameters/X-Amz-Content-Sha256'
      - $ref: '#/components/parameters/X-Amz-Date'
      - $ref: '#/components/parameters/X-Amz-Algorithm'
      - $ref: '#/components/parameters/X-Amz-Credential'
      - $ref: '#/components/parameters/X-Amz-Security-Token'
      - $ref: '#/components/parameters/X-Amz-Signature'
      - $ref: '#/components/parameters/X-Amz-SignedHeaders'
  '/#AttachUserPolicy':
    post:
      operationId: AttachUserPolicy
      description: '<p>Attaches the specified managed policy to the specified user.</p> <p>You use this API to attach a <i>managed</i> policy to a user. To embed an inline policy in a user, use <a>PutUserPolicy</a>.</p> <p>For more information about policies, see <a href="http://docs.aws.amazon.com/IAM/latest/UserGuide/policies-managed-vs-inline.html">Managed Policies and Inline Policies</a> in the <i>IAM User Guide</i>.</p>'
      responses:
        '200':
          description: Success
        '480':
          description: NoSuchEntityException
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/NoSuchEntityException'
        '481':
          description: LimitExceededException
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/LimitExceededException'
        '482':
          description: InvalidInputException
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/InvalidInputException'
        '483':
          description: ServiceFailureException
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ServiceFailureException'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AttachUserPolicyRequest'
        required: true
    parameters:
      - $ref: '#/components/parameters/Action'
      - $ref: '#/components/parameters/Version'
      - $ref: '#/components/parameters/X-Amz-Content-Sha256'
      - $ref: '#/components/parameters/X-Amz-Date'
      - $ref: '#/components/parameters/X-Amz-Algorithm'
      - $ref: '#/components/parameters/X-Amz-Credential'
      - $ref: '#/components/parameters/X-Amz-Security-Token'
      - $ref: '#/components/parameters/X-Amz-Signature'
      - $ref: '#/components/parameters/X-Amz-SignedHeaders'
  '/#ChangePassword':
    post:
      operationId: ChangePassword
      description: '<p>Changes the password of the IAM user who is calling this action. The root account password is not affected by this action.</p> <p>To change the password for a different user, see <a>UpdateLoginProfile</a>. For more information about modifying passwords, see <a href="http://docs.aws.amazon.com/IAM/latest/UserGuide/Using_ManagingLogins.html">Managing Passwords</a> in the <i>IAM User Guide</i>.</p>'
      responses:
        '200':
          description: Success
        '480':
          description: NoSuchEntityException
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/NoSuchEntityException'
        '481':
          description: InvalidUserTypeException
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/InvalidUserTypeException'
        '482':
          description: LimitExceededException
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/LimitExceededException'
        '483':
          description: EntityTemporarilyUnmodifiableException
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/EntityTemporarilyUnmodifiableException'
        '484':
          description: PasswordPolicyViolationException
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/PasswordPolicyViolationException'
        '485':
          description: ServiceFailureException
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ServiceFailureException'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ChangePasswordRequest'
        required: true
    parameters:
      - $ref: '#/components/parameters/Action'
      - $ref: '#/components/parameters/Version'
      - $ref: '#/components/parameters/X-Amz-Content-Sha256'
      - $ref: '#/components/parameters/X-Amz-Date'
      - $ref: '#/components/parameters/X-Amz-Algorithm'
      - $ref: '#/components/parameters/X-Amz-Credential'
      - $ref: '#/components/parameters/X-Amz-Security-Token'
      - $ref: '#/components/parameters/X-Amz-Signature'
      - $ref: '#/components/parameters/X-Amz-SignedHeaders'
  '/#CreateAccessKey':
    post:
      operationId: CreateAccessKey
      description: '<p> Creates a new AWS secret access key and corresponding AWS access key ID for the specified user. The default status for new keys is <code>Active</code>.</p> <p>If you do not specify a user name, IAM determines the user name implicitly based on the AWS access key ID signing the request. Because this action works for access keys under the AWS account, you can use this action to manage root credentials even if the AWS account has no associated users.</p> <p> For information about limits on the number of keys you can create, see <a href="http://docs.aws.amazon.com/IAM/latest/UserGuide/LimitationsOnEntities.html">Limitations on IAM Entities</a> in the <i>IAM User Guide</i>.</p> <important> <p>To ensure the security of your AWS account, the secret access key is accessible only during key and user creation. You must save the key (for example, in a text file) if you want to be able to access it again. If a secret key is lost, you can delete the access keys for the associated user and then create new keys.</p> </important>'
      responses:
        '200':
          description: Success
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/CreateAccessKeyResponse'
        '480':
          description: NoSuchEntityException
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/NoSuchEntityException'
        '481':
          description: LimitExceededException
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/LimitExceededException'
        '482':
          description: ServiceFailureException
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ServiceFailureException'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateAccessKeyRequest'
        required: true
    parameters:
      - $ref: '#/components/parameters/Action'
      - $ref: '#/components/parameters/Version'
      - $ref: '#/components/parameters/X-Amz-Content-Sha256'
      - $ref: '#/components/parameters/X-Amz-Date'
      - $ref: '#/components/parameters/X-Amz-Algorithm'
      - $ref: '#/components/parameters/X-Amz-Credential'
      - $ref: '#/components/parameters/X-Amz-Security-Token'
      - $ref: '#/components/parameters/X-Amz-Signature'
      - $ref: '#/components/parameters/X-Amz-SignedHeaders'
  '/#CreateAccountAlias':
    post:
      operationId: CreateAccountAlias
      description: 'Creates an alias for your AWS account. For information about using an AWS account alias, see <a href="http://docs.aws.amazon.com/IAM/latest/UserGuide/AccountAlias.html">Using an Alias for Your AWS Account ID</a> in the <i>IAM User Guide</i>.'
      responses:
        '200':
          description: Success
        '480':
          description: EntityAlreadyExistsException
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/EntityAlreadyExistsException'
        '481':
          description: LimitExceededException
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/LimitExceededException'
        '482':
          description: ServiceFailureException
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ServiceFailureException'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateAccountAliasRequest'
        required: true
    parameters:
      - $ref: '#/components/parameters/Action'
      - $ref: '#/components/parameters/Version'
      - $ref: '#/components/parameters/X-Amz-Content-Sha256'
      - $ref: '#/components/parameters/X-Amz-Date'
      - $ref: '#/components/parameters/X-Amz-Algorithm'
      - $ref: '#/components/parameters/X-Amz-Credential'
      - $ref: '#/components/parameters/X-Amz-Security-Token'
      - $ref: '#/components/parameters/X-Amz-Signature'
      - $ref: '#/components/parameters/X-Amz-SignedHeaders'
  '/#CreateGroup':
    post:
      operationId: CreateGroup
      description: '<p>Creates a new group.</p> <p> For information about the number of groups you can create, see <a href="http://docs.aws.amazon.com/IAM/latest/UserGuide/LimitationsOnEntities.html">Limitations on IAM Entities</a> in the <i>IAM User Guide</i>.</p>'
      responses:
        '200':
          description: Success
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/CreateGroupResponse'
        '480':
          description: LimitExceededException
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/LimitExceededException'
        '481':
          description: EntityAlreadyExistsException
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/EntityAlreadyExistsException'
        '482':
          description: NoSuchEntityException
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/NoSuchEntityException'
        '483':
          description: ServiceFailureException
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ServiceFailureException'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateGroupRequest'
        required: true
    parameters:
      - $ref: '#/components/parameters/Action'
      - $ref: '#/components/parameters/Version'
      - $ref: '#/components/parameters/X-Amz-Content-Sha256'
      - $ref: '#/components/parameters/X-Amz-Date'
      - $ref: '#/components/parameters/X-Amz-Algorithm'
      - $ref: '#/components/parameters/X-Amz-Credential'
      - $ref: '#/components/parameters/X-Amz-Security-Token'
      - $ref: '#/components/parameters/X-Amz-Signature'
      - $ref: '#/components/parameters/X-Amz-SignedHeaders'
  '/#CreateInstanceProfile':
    post:
      operationId: CreateInstanceProfile
      description: '<p> Creates a new instance profile. For information about instance profiles, go to <a href="http://docs.aws.amazon.com/IAM/latest/UserGuide/AboutInstanceProfiles.html">About Instance Profiles</a>.</p> <p> For information about the number of instance profiles you can create, see <a href="http://docs.aws.amazon.com/IAM/latest/UserGuide/LimitationsOnEntities.html">Limitations on IAM Entities</a> in the <i>IAM User Guide</i>.</p>'
      responses:
        '200':
          description: Success
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/CreateInstanceProfileResponse'
        '480':
          description: EntityAlreadyExistsException
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/EntityAlreadyExistsException'
        '481':
          description: LimitExceededException
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/LimitExceededException'
        '482':
          description: ServiceFailureException
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ServiceFailureException'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateInstanceProfileRequest'
        required: true
    parameters:
      - $ref: '#/components/parameters/Action'
      - $ref: '#/components/parameters/Version'
      - $ref: '#/components/parameters/X-Amz-Content-Sha256'
      - $ref: '#/components/parameters/X-Amz-Date'
      - $ref: '#/components/parameters/X-Amz-Algorithm'
      - $ref: '#/components/parameters/X-Amz-Credential'
      - $ref: '#/components/parameters/X-Amz-Security-Token'
      - $ref: '#/components/parameters/X-Amz-Signature'
      - $ref: '#/components/parameters/X-Amz-SignedHeaders'
  '/#CreateLoginProfile':
    post:
      operationId: CreateLoginProfile
      description: ' Creates a password for the specified user, giving the user the ability to access AWS services through the AWS Management Console. For more information about managing passwords, see <a href="http://docs.aws.amazon.com/IAM/latest/UserGuide/Using_ManagingLogins.html">Managing Passwords</a> in the <i>IAM User Guide</i>.'
      responses:
        '200':
          description: Success
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/CreateLoginProfileResponse'
        '480':
          description: EntityAlreadyExistsException
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/EntityAlreadyExistsException'
        '481':
          description: NoSuchEntityException
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/NoSuchEntityException'
        '482':
          description: PasswordPolicyViolationException
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/PasswordPolicyViolationException'
        '483':
          description: LimitExceededException
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/LimitExceededException'
        '484':
          description: ServiceFailureException
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ServiceFailureException'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateLoginProfileRequest'
        required: true
    parameters:
      - $ref: '#/components/parameters/Action'
      - $ref: '#/components/parameters/Version'
      - $ref: '#/components/parameters/X-Amz-Content-Sha256'
      - $ref: '#/components/parameters/X-Amz-Date'
      - $ref: '#/components/parameters/X-Amz-Algorithm'
      - $ref: '#/components/parameters/X-Amz-Credential'
      - $ref: '#/components/parameters/X-Amz-Security-Token'
      - $ref: '#/components/parameters/X-Amz-Signature'
      - $ref: '#/components/parameters/X-Amz-SignedHeaders'
  '/#CreateOpenIDConnectProvider':
    post:
      operationId: CreateOpenIDConnectProvider
      description: '<p>Creates an IAM entity to describe an identity provider (IdP) that supports <a href="http://openid.net/connect/">OpenID Connect (OIDC)</a>.</p> <p>The OIDC provider that you create with this operation can be used as a principal in a role''s trust policy to establish a trust relationship between AWS and the OIDC provider.</p> <p>When you create the IAM OIDC provider, you specify the URL of the OIDC identity provider (IdP) to trust, a list of client IDs (also known as audiences) that identify the application or applications that are allowed to authenticate using the OIDC provider, and a list of thumbprints of the server certificate(s) that the IdP uses. You get all of this information from the OIDC IdP that you want to use for access to AWS.</p> <note> <p>Because trust for the OIDC provider is ultimately derived from the IAM provider that this action creates, it is a best practice to limit access to the <a>CreateOpenIDConnectProvider</a> action to highly-privileged users.</p> </note>'
      responses:
        '200':
          description: Success
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/CreateOpenIDConnectProviderResponse'
        '480':
          description: InvalidInputException
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/InvalidInputException'
        '481':
          description: EntityAlreadyExistsException
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/EntityAlreadyExistsException'
        '482':
          description: LimitExceededException
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/LimitExceededException'
        '483':
          description: ServiceFailureException
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ServiceFailureException'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateOpenIDConnectProviderRequest'
        required: true
    parameters:
      - $ref: '#/components/parameters/Action'
      - $ref: '#/components/parameters/Version'
      - $ref: '#/components/parameters/X-Amz-Content-Sha256'
      - $ref: '#/components/parameters/X-Amz-Date'
      - $ref: '#/components/parameters/X-Amz-Algorithm'
      - $ref: '#/components/parameters/X-Amz-Credential'
      - $ref: '#/components/parameters/X-Amz-Security-Token'
      - $ref: '#/components/parameters/X-Amz-Signature'
      - $ref: '#/components/parameters/X-Amz-SignedHeaders'
  '/#CreatePolicy':
    post:
      operationId: CreatePolicy
      description: '<p>Creates a new managed policy for your AWS account.</p> <p>This operation creates a policy version with a version identifier of <code>v1</code> and sets v1 as the policy''s default version. For more information about policy versions, see <a href="http://docs.aws.amazon.com/IAM/latest/UserGuide/policies-managed-versions.html">Versioning for Managed Policies</a> in the <i>IAM User Guide</i>.</p> <p>For more information about managed policies in general, see <a href="http://docs.aws.amazon.com/IAM/latest/UserGuide/policies-managed-vs-inline.html">Managed Policies and Inline Policies</a> in the <i>IAM User Guide</i>.</p>'
      responses:
        '200':
          description: Success
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/CreatePolicyResponse'
        '480':
          description: InvalidInputException
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/InvalidInputException'
        '481':
          description: LimitExceededException
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/LimitExceededException'
        '482':
          description: EntityAlreadyExistsException
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/EntityAlreadyExistsException'
        '483':
          description: MalformedPolicyDocumentException
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/MalformedPolicyDocumentException'
        '484':
          description: ServiceFailureException
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ServiceFailureException'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreatePolicyRequest'
        required: true
    parameters:
      - $ref: '#/components/parameters/Action'
      - $ref: '#/components/parameters/Version'
      - $ref: '#/components/parameters/X-Amz-Content-Sha256'
      - $ref: '#/components/parameters/X-Amz-Date'
      - $ref: '#/components/parameters/X-Amz-Algorithm'
      - $ref: '#/components/parameters/X-Amz-Credential'
      - $ref: '#/components/parameters/X-Amz-Security-Token'
      - $ref: '#/components/parameters/X-Amz-Signature'
      - $ref: '#/components/parameters/X-Amz-SignedHeaders'
  '/#CreatePolicyVersion':
    post:
      operationId: CreatePolicyVersion
      description: '<p>Creates a new version of the specified managed policy. To update a managed policy, you create a new policy version. A managed policy can have up to five versions. If the policy has five versions, you must delete an existing version using <a>DeletePolicyVersion</a> before you create a new version.</p> <p>Optionally, you can set the new version as the policy''s default version. The default version is the version that is in effect for the IAM users, groups, and roles to which the policy is attached.</p> <p>For more information about managed policy versions, see <a href="http://docs.aws.amazon.com/IAM/latest/UserGuide/policies-managed-versions.html">Versioning for Managed Policies</a> in the <i>IAM User Guide</i>.</p>'
      responses:
        '200':
          description: Success
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/CreatePolicyVersionResponse'
        '480':
          description: NoSuchEntityException
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/NoSuchEntityException'
        '481':
          description: MalformedPolicyDocumentException
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/MalformedPolicyDocumentException'
        '482':
          description: InvalidInputException
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/InvalidInputException'
        '483':
          description: LimitExceededException
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/LimitExceededException'
        '484':
          description: ServiceFailureException
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ServiceFailureException'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreatePolicyVersionRequest'
        required: true
    parameters:
      - $ref: '#/components/parameters/Action'
      - $ref: '#/components/parameters/Version'
      - $ref: '#/components/parameters/X-Amz-Content-Sha256'
      - $ref: '#/components/parameters/X-Amz-Date'
      - $ref: '#/components/parameters/X-Amz-Algorithm'
      - $ref: '#/components/parameters/X-Amz-Credential'
      - $ref: '#/components/parameters/X-Amz-Security-Token'
      - $ref: '#/components/parameters/X-Amz-Signature'
      - $ref: '#/components/parameters/X-Amz-SignedHeaders'
  '/#CreateRole':
    post:
      operationId: CreateRole
      description: 'Creates a new role for your AWS account. For more information about roles, go to <a href="http://docs.aws.amazon.com/IAM/latest/UserGuide/WorkingWithRoles.html">Working with Roles</a>. For information about limitations on role names and the number of roles you can create, go to <a href="http://docs.aws.amazon.com/IAM/latest/UserGuide/LimitationsOnEntities.html">Limitations on IAM Entities</a> in the <i>IAM User Guide</i>.'
      responses:
        '200':
          description: Success
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/CreateRoleResponse'
        '480':
          description: LimitExceededException
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/LimitExceededException'
        '481':
          description: InvalidInputException
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/InvalidInputException'
        '482':
          description: EntityAlreadyExistsException
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/EntityAlreadyExistsException'
        '483':
          description: MalformedPolicyDocumentException
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/MalformedPolicyDocumentException'
        '484':
          description: ServiceFailureException
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ServiceFailureException'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateRoleRequest'
        required: true
    parameters:
      - $ref: '#/components/parameters/Action'
      - $ref: '#/components/parameters/Version'
      - $ref: '#/components/parameters/X-Amz-Content-Sha256'
      - $ref: '#/components/parameters/X-Amz-Date'
      - $ref: '#/components/parameters/X-Amz-Algorithm'
      - $ref: '#/components/parameters/X-Amz-Credential'
      - $ref: '#/components/parameters/X-Amz-Security-Token'
      - $ref: '#/components/parameters/X-Amz-Signature'
      - $ref: '#/components/parameters/X-Amz-SignedHeaders'
  '/#CreateSAMLProvider':
    post:
      operationId: CreateSAMLProvider
      description: '<p>Creates an IAM resource that describes an identity provider (IdP) that supports SAML 2.0.</p> <p>The SAML provider resource that you create with this operation can be used as a principal in an IAM role''s trust policy to enable federated users who sign-in using the SAML IdP to assume the role. You can create an IAM role that supports Web-based single sign-on (SSO) to the AWS Management Console or one that supports API access to AWS.</p> <p>When you create the SAML provider resource, you upload an a SAML metadata document that you get from your IdP and that includes the issuer''s name, expiration information, and keys that can be used to validate the SAML authentication response (assertions) that the IdP sends. You must generate the metadata document using the identity management software that is used as your organization''s IdP.</p> <note> <p> This operation requires <a href="http://docs.aws.amazon.com/general/latest/gr/signature-version-4.html">Signature Version 4</a>.</p> </note> <p> For more information, see <a href="http://docs.aws.amazon.com/IAM/latest/UserGuide/id_roles_providers_enable-console-saml.html">Enabling SAML 2.0 Federated Users to Access the AWS Management Console</a> and <a href="http://docs.aws.amazon.com/IAM/latest/UserGuide/id_roles_providers_saml.html">About SAML 2.0-based Federation</a> in the <i>IAM User Guide</i>.</p>'
      responses:
        '200':
          description: Success
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/CreateSAMLProviderResponse'
        '480':
          description: InvalidInputException
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/InvalidInputException'
        '481':
          description: EntityAlreadyExistsException
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/EntityAlreadyExistsException'
        '482':
          description: LimitExceededException
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/LimitExceededException'
        '483':
          description: ServiceFailureException
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ServiceFailureException'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateSAMLProviderRequest'
        required: true
    parameters:
      - $ref: '#/components/parameters/Action'
      - $ref: '#/components/parameters/Version'
      - $ref: '#/components/parameters/X-Amz-Content-Sha256'
      - $ref: '#/components/parameters/X-Amz-Date'
      - $ref: '#/components/parameters/X-Amz-Algorithm'
      - $ref: '#/components/parameters/X-Amz-Credential'
      - $ref: '#/components/parameters/X-Amz-Security-Token'
      - $ref: '#/components/parameters/X-Amz-Signature'
      - $ref: '#/components/parameters/X-Amz-SignedHeaders'
  '/#CreateServiceLinkedRole':
    post:
      operationId: CreateServiceLinkedRole
      description: '<p>Creates an IAM role that is linked to a specific AWS service. The service controls the attached policies and when the role can be deleted. This helps ensure that the service is not broken by an unexpectedly changed or deleted role, which could put your AWS resources into an unknown state. Allowing the service to control the role helps improve service stability and proper cleanup when a service and its role are no longer needed.</p> <p>The name of the role is autogenerated by combining the string that you specify for the <code>AWSServiceName</code> parameter with the string that you specify for the <code>CustomSuffix</code> parameter. The resulting name must be unique in your account or the request fails.</p> <p>To attach a policy to this service-linked role, you must make the request using the AWS service that depends on this role.</p>'
      responses:
        '200':
          description: Success
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/CreateServiceLinkedRoleResponse'
        '480':
          description: InvalidInputException
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/InvalidInputException'
        '481':
          description: LimitExceededException
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/LimitExceededException'
        '482':
          description: NoSuchEntityException
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/NoSuchEntityException'
        '483':
          description: ServiceFailureException
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ServiceFailureException'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateServiceLinkedRoleRequest'
        required: true
    parameters:
      - $ref: '#/components/parameters/Action'
      - $ref: '#/components/parameters/Version'
      - $ref: '#/components/parameters/X-Amz-Content-Sha256'
      - $ref: '#/components/parameters/X-Amz-Date'
      - $ref: '#/components/parameters/X-Amz-Algorithm'
      - $ref: '#/components/parameters/X-Amz-Credential'
      - $ref: '#/components/parameters/X-Amz-Security-Token'
      - $ref: '#/components/parameters/X-Amz-Signature'
      - $ref: '#/components/parameters/X-Amz-SignedHeaders'
  '/#CreateServiceSpecificCredential':
    post:
      operationId: CreateServiceSpecificCredential
      description: '<p>Generates a set of credentials consisting of a user name and password that can be used to access the service specified in the request. These credentials are generated by IAM, and can be used only for the specified service. </p> <p>You can have a maximum of two sets of service-specific credentials for each supported service per user.</p> <p>The only supported service at this time is AWS CodeCommit.</p> <p>You can reset the password to a new service-generated value by calling <a>ResetServiceSpecificCredential</a>.</p> <p>For more information about service-specific credentials, see <a href="http://docs.aws.amazon.com/IAM/latest/UserGuide/id_credentials_ssh-keys.html">Using IAM with AWS CodeCommit: Git Credentials, SSH Keys, and AWS Access Keys</a> in the <i>IAM User Guide</i>.</p>'
      responses:
        '200':
          description: Success
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/CreateServiceSpecificCredentialResponse'
        '480':
          description: LimitExceededException
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/LimitExceededException'
        '481':
          description: NoSuchEntityException
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/NoSuchEntityException'
        '482':
          description: ServiceNotSupportedException
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ServiceNotSupportedException'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateServiceSpecificCredentialRequest'
        required: true
    parameters:
      - $ref: '#/components/parameters/Action'
      - $ref: '#/components/parameters/Version'
      - $ref: '#/components/parameters/X-Amz-Content-Sha256'
      - $ref: '#/components/parameters/X-Amz-Date'
      - $ref: '#/components/parameters/X-Amz-Algorithm'
      - $ref: '#/components/parameters/X-Amz-Credential'
      - $ref: '#/components/parameters/X-Amz-Security-Token'
      - $ref: '#/components/parameters/X-Amz-Signature'
      - $ref: '#/components/parameters/X-Amz-SignedHeaders'
  '/#CreateUser':
    post:
      operationId: CreateUser
      description: '<p>Creates a new IAM user for your AWS account.</p> <p> For information about limitations on the number of IAM users you can create, see <a href="http://docs.aws.amazon.com/IAM/latest/UserGuide/LimitationsOnEntities.html">Limitations on IAM Entities</a> in the <i>IAM User Guide</i>.</p>'
      responses:
        '200':
          description: Success
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/CreateUserResponse'
        '480':
          description: LimitExceededException
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/LimitExceededException'
        '481':
          description: EntityAlreadyExistsException
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/EntityAlreadyExistsException'
        '482':
          description: NoSuchEntityException
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/NoSuchEntityException'
        '483':
          description: ServiceFailureException
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ServiceFailureException'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateUserRequest'
        required: true
    parameters:
      - $ref: '#/components/parameters/Action'
      - $ref: '#/components/parameters/Version'
      - $ref: '#/components/parameters/X-Amz-Content-Sha256'
      - $ref: '#/components/parameters/X-Amz-Date'
      - $ref: '#/components/parameters/X-Amz-Algorithm'
      - $ref: '#/components/parameters/X-Amz-Credential'
      - $ref: '#/components/parameters/X-Amz-Security-Token'
      - $ref: '#/components/parameters/X-Amz-Signature'
      - $ref: '#/components/parameters/X-Amz-SignedHeaders'
  '/#CreateVirtualMFADevice':
    post:
      operationId: CreateVirtualMFADevice
      description: '<p>Creates a new virtual MFA device for the AWS account. After creating the virtual MFA, use <a>EnableMFADevice</a> to attach the MFA device to an IAM user. For more information about creating and working with virtual MFA devices, go to <a href="http://docs.aws.amazon.com/IAM/latest/UserGuide/Using_VirtualMFA.html">Using a Virtual MFA Device</a> in the <i>IAM User Guide</i>.</p> <p>For information about limits on the number of MFA devices you can create, see <a href="http://docs.aws.amazon.com/IAM/latest/UserGuide/LimitationsOnEntities.html">Limitations on Entities</a> in the <i>IAM User Guide</i>.</p> <important> <p>The seed information contained in the QR code and the Base32 string should be treated like any other secret access information, such as your AWS access keys or your passwords. After you provision your virtual device, you should ensure that the information is destroyed following secure procedures.</p> </important>'
      responses:
        '200':
          description: Success
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/CreateVirtualMFADeviceResponse'
        '480':
          description: LimitExceededException
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/LimitExceededException'
        '481':
          description: EntityAlreadyExistsException
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/EntityAlreadyExistsException'
        '482':
          description: ServiceFailureException
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ServiceFailureException'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateVirtualMFADeviceRequest'
        required: true
    parameters:
      - $ref: '#/components/parameters/Action'
      - $ref: '#/components/parameters/Version'
      - $ref: '#/components/parameters/X-Amz-Content-Sha256'
      - $ref: '#/components/parameters/X-Amz-Date'
      - $ref: '#/components/parameters/X-Amz-Algorithm'
      - $ref: '#/components/parameters/X-Amz-Credential'
      - $ref: '#/components/parameters/X-Amz-Security-Token'
      - $ref: '#/components/parameters/X-Amz-Signature'
      - $ref: '#/components/parameters/X-Amz-SignedHeaders'
  '/#DeactivateMFADevice':
    post:
      operationId: DeactivateMFADevice
      description: '<p>Deactivates the specified MFA device and removes it from association with the user name for which it was originally enabled.</p> <p>For more information about creating and working with virtual MFA devices, go to <a href="http://docs.aws.amazon.com/IAM/latest/UserGuide/Using_VirtualMFA.html">Using a Virtual MFA Device</a> in the <i>IAM User Guide</i>.</p>'
      responses:
        '200':
          description: Success
        '480':
          description: EntityTemporarilyUnmodifiableException
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/EntityTemporarilyUnmodifiableException'
        '481':
          description: NoSuchEntityException
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/NoSuchEntityException'
        '482':
          description: LimitExceededException
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/LimitExceededException'
        '483':
          description: ServiceFailureException
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ServiceFailureException'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/DeactivateMFADeviceRequest'
        required: true
    parameters:
      - $ref: '#/components/parameters/Action'
      - $ref: '#/components/parameters/Version'
      - $ref: '#/components/parameters/X-Amz-Content-Sha256'
      - $ref: '#/components/parameters/X-Amz-Date'
      - $ref: '#/components/parameters/X-Amz-Algorithm'
      - $ref: '#/components/parameters/X-Amz-Credential'
      - $ref: '#/components/parameters/X-Amz-Security-Token'
      - $ref: '#/components/parameters/X-Amz-Signature'
      - $ref: '#/components/parameters/X-Amz-SignedHeaders'
  '/#DeleteAccessKey':
    post:
      operationId: DeleteAccessKey
      description: '<p>Deletes the access key pair associated with the specified IAM user.</p> <p>If you do not specify a user name, IAM determines the user name implicitly based on the AWS access key ID signing the request. Because this action works for access keys under the AWS account, you can use this action to manage root credentials even if the AWS account has no associated users.</p>'
      responses:
        '200':
          description: Success
        '480':
          description: NoSuchEntityException
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/NoSuchEntityException'
        '481':
          description: LimitExceededException
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/LimitExceededException'
        '482':
          description: ServiceFailureException
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ServiceFailureException'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/DeleteAccessKeyRequest'
        required: true
    parameters:
      - $ref: '#/components/parameters/Action'
      - $ref: '#/components/parameters/Version'
      - $ref: '#/components/parameters/X-Amz-Content-Sha256'
      - $ref: '#/components/parameters/X-Amz-Date'
      - $ref: '#/components/parameters/X-Amz-Algorithm'
      - $ref: '#/components/parameters/X-Amz-Credential'
      - $ref: '#/components/parameters/X-Amz-Security-Token'
      - $ref: '#/components/parameters/X-Amz-Signature'
      - $ref: '#/components/parameters/X-Amz-SignedHeaders'
  '/#DeleteAccountAlias':
    post:
      operationId: DeleteAccountAlias
      description: ' Deletes the specified AWS account alias. For information about using an AWS account alias, see <a href="http://docs.aws.amazon.com/IAM/latest/UserGuide/AccountAlias.html">Using an Alias for Your AWS Account ID</a> in the <i>IAM User Guide</i>.'
      responses:
        '200':
          description: Success
        '480':
          description: NoSuchEntityException
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/NoSuchEntityException'
        '481':
          description: LimitExceededException
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/LimitExceededException'
        '482':
          description: ServiceFailureException
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ServiceFailureException'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/DeleteAccountAliasRequest'
        required: true
    parameters:
      - $ref: '#/components/parameters/Action'
      - $ref: '#/components/parameters/Version'
      - $ref: '#/components/parameters/X-Amz-Content-Sha256'
      - $ref: '#/components/parameters/X-Amz-Date'
      - $ref: '#/components/parameters/X-Amz-Algorithm'
      - $ref: '#/components/parameters/X-Amz-Credential'
      - $ref: '#/components/parameters/X-Amz-Security-Token'
      - $ref: '#/components/parameters/X-Amz-Signature'
      - $ref: '#/components/parameters/X-Amz-SignedHeaders'
  '/#DeleteAccountPasswordPolicy':
    post:
      operationId: DeleteAccountPasswordPolicy
      description: Deletes the password policy for the AWS account. There are no parameters.
      responses:
        '200':
          description: Success
        '480':
          description: NoSuchEntityException
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/NoSuchEntityException'
        '481':
          description: LimitExceededException
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/LimitExceededException'
        '482':
          description: ServiceFailureException
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ServiceFailureException'
    parameters:
      - $ref: '#/components/parameters/Action'
      - $ref: '#/components/parameters/Version'
      - $ref: '#/components/parameters/X-Amz-Content-Sha256'
      - $ref: '#/components/parameters/X-Amz-Date'
      - $ref: '#/components/parameters/X-Amz-Algorithm'
      - $ref: '#/components/parameters/X-Amz-Credential'
      - $ref: '#/components/parameters/X-Amz-Security-Token'
      - $ref: '#/components/parameters/X-Amz-Signature'
      - $ref: '#/components/parameters/X-Amz-SignedHeaders'
  '/#DeleteGroup':
    post:
      operationId: DeleteGroup
      description: Deletes the specified IAM group. The group must not contain any users or have any attached policies.
      responses:
        '200':
          description: Success
        '480':
          description: NoSuchEntityException
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/NoSuchEntityException'
        '481':
          description: DeleteConflictException
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/DeleteConflictException'
        '482':
          description: LimitExceededException
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/LimitExceededException'
        '483':
          description: ServiceFailureException
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ServiceFailureException'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/DeleteGroupRequest'
        required: true
    parameters:
      - $ref: '#/components/parameters/Action'
      - $ref: '#/components/parameters/Version'
      - $ref: '#/components/parameters/X-Amz-Content-Sha256'
      - $ref: '#/components/parameters/X-Amz-Date'
      - $ref: '#/components/parameters/X-Amz-Algorithm'
      - $ref: '#/components/parameters/X-Amz-Credential'
      - $ref: '#/components/parameters/X-Amz-Security-Token'
      - $ref: '#/components/parameters/X-Amz-Signature'
      - $ref: '#/components/parameters/X-Amz-SignedHeaders'
  '/#DeleteGroupPolicy':
    post:
      operationId: DeleteGroupPolicy
      description: '<p>Deletes the specified inline policy that is embedded in the specified IAM group.</p> <p>A group can also have managed policies attached to it. To detach a managed policy from a group, use <a>DetachGroupPolicy</a>. For more information about policies, refer to <a href="http://docs.aws.amazon.com/IAM/latest/UserGuide/policies-managed-vs-inline.html">Managed Policies and Inline Policies</a> in the <i>IAM User Guide</i>.</p>'
      responses:
        '200':
          description: Success
        '480':
          description: NoSuchEntityException
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/NoSuchEntityException'
        '481':
          description: LimitExceededException
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/LimitExceededException'
        '482':
          description: ServiceFailureException
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ServiceFailureException'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/DeleteGroupPolicyRequest'
        required: true
    parameters:
      - $ref: '#/components/parameters/Action'
      - $ref: '#/components/parameters/Version'
      - $ref: '#/components/parameters/X-Amz-Content-Sha256'
      - $ref: '#/components/parameters/X-Amz-Date'
      - $ref: '#/components/parameters/X-Amz-Algorithm'
      - $ref: '#/components/parameters/X-Amz-Credential'
      - $ref: '#/components/parameters/X-Amz-Security-Token'
      - $ref: '#/components/parameters/X-Amz-Signature'
      - $ref: '#/components/parameters/X-Amz-SignedHeaders'
  '/#DeleteInstanceProfile':
    post:
      operationId: DeleteInstanceProfile
      description: '<p>Deletes the specified instance profile. The instance profile must not have an associated role.</p> <important> <p>Make sure you do not have any Amazon EC2 instances running with the instance profile you are about to delete. Deleting a role or instance profile that is associated with a running instance will break any applications running on the instance.</p> </important> <p>For more information about instance profiles, go to <a href="http://docs.aws.amazon.com/IAM/latest/UserGuide/AboutInstanceProfiles.html">About Instance Profiles</a>.</p>'
      responses:
        '200':
          description: Success
        '480':
          description: NoSuchEntityException
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/NoSuchEntityException'
        '481':
          description: DeleteConflictException
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/DeleteConflictException'
        '482':
          description: LimitExceededException
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/LimitExceededException'
        '483':
          description: ServiceFailureException
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ServiceFailureException'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/DeleteInstanceProfileRequest'
        required: true
    parameters:
      - $ref: '#/components/parameters/Action'
      - $ref: '#/components/parameters/Version'
      - $ref: '#/components/parameters/X-Amz-Content-Sha256'
      - $ref: '#/components/parameters/X-Amz-Date'
      - $ref: '#/components/parameters/X-Amz-Algorithm'
      - $ref: '#/components/parameters/X-Amz-Credential'
      - $ref: '#/components/parameters/X-Amz-Security-Token'
      - $ref: '#/components/parameters/X-Amz-Signature'
      - $ref: '#/components/parameters/X-Amz-SignedHeaders'
  '/#DeleteLoginProfile':
    post:
      operationId: DeleteLoginProfile
      description: '<p>Deletes the password for the specified IAM user, which terminates the user''s ability to access AWS services through the AWS Management Console.</p> <important> <p> Deleting a user''s password does not prevent a user from accessing AWS through the command line interface or the API. To prevent all user access you must also either make any access keys inactive or delete them. For more information about making keys inactive or deleting them, see <a>UpdateAccessKey</a> and <a>DeleteAccessKey</a>. </p> </important>'
      responses:
        '200':
          description: Success
        '480':
          description: EntityTemporarilyUnmodifiableException
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/EntityTemporarilyUnmodifiableException'
        '481':
          description: NoSuchEntityException
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/NoSuchEntityException'
        '482':
          description: LimitExceededException
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/LimitExceededException'
        '483':
          description: ServiceFailureException
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ServiceFailureException'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/DeleteLoginProfileRequest'
        required: true
    parameters:
      - $ref: '#/components/parameters/Action'
      - $ref: '#/components/parameters/Version'
      - $ref: '#/components/parameters/X-Amz-Content-Sha256'
      - $ref: '#/components/parameters/X-Amz-Date'
      - $ref: '#/components/parameters/X-Amz-Algorithm'
      - $ref: '#/components/parameters/X-Amz-Credential'
      - $ref: '#/components/parameters/X-Amz-Security-Token'
      - $ref: '#/components/parameters/X-Amz-Signature'
      - $ref: '#/components/parameters/X-Amz-SignedHeaders'
  '/#DeleteOpenIDConnectProvider':
    post:
      operationId: DeleteOpenIDConnectProvider
      description: <p>Deletes an OpenID Connect identity provider (IdP) resource object in IAM.</p> <p>Deleting an IAM OIDC provider resource does not update any roles that reference the provider as a principal in their trust policies. Any attempt to assume a role that references a deleted provider fails.</p> <p>This action is idempotent; it does not fail or return an error if you call the action for a provider that does not exist.</p>
      responses:
        '200':
          description: Success
        '480':
          description: InvalidInputException
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/InvalidInputException'
        '481':
          description: NoSuchEntityException
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/NoSuchEntityException'
        '482':
          description: ServiceFailureException
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ServiceFailureException'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/DeleteOpenIDConnectProviderRequest'
        required: true
    parameters:
      - $ref: '#/components/parameters/Action'
      - $ref: '#/components/parameters/Version'
      - $ref: '#/components/parameters/X-Amz-Content-Sha256'
      - $ref: '#/components/parameters/X-Amz-Date'
      - $ref: '#/components/parameters/X-Amz-Algorithm'
      - $ref: '#/components/parameters/X-Amz-Credential'
      - $ref: '#/components/parameters/X-Amz-Security-Token'
      - $ref: '#/components/parameters/X-Amz-Signature'
      - $ref: '#/components/parameters/X-Amz-SignedHeaders'
  '/#DeletePolicy':
    post:
      operationId: DeletePolicy
      description: '<p>Deletes the specified managed policy.</p> <p>Before you can delete a managed policy, you must first detach the policy from all users, groups, and roles that it is attached to, and you must delete all of the policy''s versions. The following steps describe the process for deleting a managed policy:</p> <ul> <li> <p>Detach the policy from all users, groups, and roles that the policy is attached to, using the <a>DetachUserPolicy</a>, <a>DetachGroupPolicy</a>, or <a>DetachRolePolicy</a> APIs. To list all the users, groups, and roles that a policy is attached to, use <a>ListEntitiesForPolicy</a>.</p> </li> <li> <p>Delete all versions of the policy using <a>DeletePolicyVersion</a>. To list the policy''s versions, use <a>ListPolicyVersions</a>. You cannot use <a>DeletePolicyVersion</a> to delete the version that is marked as the default version. You delete the policy''s default version in the next step of the process.</p> </li> <li> <p>Delete the policy (this automatically deletes the policy''s default version) using this API.</p> </li> </ul> <p>For information about managed policies, see <a href="http://docs.aws.amazon.com/IAM/latest/UserGuide/policies-managed-vs-inline.html">Managed Policies and Inline Policies</a> in the <i>IAM User Guide</i>.</p>'
      responses:
        '200':
          description: Success
        '480':
          description: NoSuchEntityException
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/NoSuchEntityException'
        '481':
          description: LimitExceededException
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/LimitExceededException'
        '482':
          description: InvalidInputException
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/InvalidInputException'
        '483':
          description: DeleteConflictException
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/DeleteConflictException'
        '484':
          description: ServiceFailureException
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ServiceFailureException'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/DeletePolicyRequest'
        required: true
    parameters:
      - $ref: '#/components/parameters/Action'
      - $ref: '#/components/parameters/Version'
      - $ref: '#/components/parameters/X-Amz-Content-Sha256'
      - $ref: '#/components/parameters/X-Amz-Date'
      - $ref: '#/components/parameters/X-Amz-Algorithm'
      - $ref: '#/components/parameters/X-Amz-Credential'
      - $ref: '#/components/parameters/X-Amz-Security-Token'
      - $ref: '#/components/parameters/X-Amz-Signature'
      - $ref: '#/components/parameters/X-Amz-SignedHeaders'
  '/#DeletePolicyVersion':
    post:
      operationId: DeletePolicyVersion
      description: '<p>Deletes the specified version from the specified managed policy.</p> <p>You cannot delete the default version from a policy using this API. To delete the default version from a policy, use <a>DeletePolicy</a>. To find out which version of a policy is marked as the default version, use <a>ListPolicyVersions</a>.</p> <p>For information about versions for managed policies, see <a href="http://docs.aws.amazon.com/IAM/latest/UserGuide/policies-managed-versions.html">Versioning for Managed Policies</a> in the <i>IAM User Guide</i>.</p>'
      responses:
        '200':
          description: Success
        '480':
          description: NoSuchEntityException
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/NoSuchEntityException'
        '481':
          description: LimitExceededException
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/LimitExceededException'
        '482':
          description: InvalidInputException
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/InvalidInputException'
        '483':
          description: DeleteConflictException
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/DeleteConflictException'
        '484':
          description: ServiceFailureException
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ServiceFailureException'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/DeletePolicyVersionRequest'
        required: true
    parameters:
      - $ref: '#/components/parameters/Action'
      - $ref: '#/components/parameters/Version'
      - $ref: '#/components/parameters/X-Amz-Content-Sha256'
      - $ref: '#/components/parameters/X-Amz-Date'
      - $ref: '#/components/parameters/X-Amz-Algorithm'
      - $ref: '#/components/parameters/X-Amz-Credential'
      - $ref: '#/components/parameters/X-Amz-Security-Token'
      - $ref: '#/components/parameters/X-Amz-Signature'
      - $ref: '#/components/parameters/X-Amz-SignedHeaders'
  '/#DeleteRole':
    post:
      operationId: DeleteRole
      description: '<p>Deletes the specified role. The role must not have any policies attached. For more information about roles, go to <a href="http://docs.aws.amazon.com/IAM/latest/UserGuide/WorkingWithRoles.html">Working with Roles</a>.</p> <important> <p>Make sure you do not have any Amazon EC2 instances running with the role you are about to delete. Deleting a role or instance profile that is associated with a running instance will break any applications running on the instance.</p> </important>'
      responses:
        '200':
          description: Success
        '480':
          description: NoSuchEntityException
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/NoSuchEntityException'
        '481':
          description: DeleteConflictException
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/DeleteConflictException'
        '482':
          description: LimitExceededException
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/LimitExceededException'
        '483':
          description: UnmodifiableEntityException
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/UnmodifiableEntityException'
        '484':
          description: ServiceFailureException
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ServiceFailureException'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/DeleteRoleRequest'
        required: true
    parameters:
      - $ref: '#/components/parameters/Action'
      - $ref: '#/components/parameters/Version'
      - $ref: '#/components/parameters/X-Amz-Content-Sha256'
      - $ref: '#/components/parameters/X-Amz-Date'
      - $ref: '#/components/parameters/X-Amz-Algorithm'
      - $ref: '#/components/parameters/X-Amz-Credential'
      - $ref: '#/components/parameters/X-Amz-Security-Token'
      - $ref: '#/components/parameters/X-Amz-Signature'
      - $ref: '#/components/parameters/X-Amz-SignedHeaders'
  '/#DeleteRolePolicy':
    post:
      operationId: DeleteRolePolicy
      description: '<p>Deletes the specified inline policy that is embedded in the specified IAM role.</p> <p>A role can also have managed policies attached to it. To detach a managed policy from a role, use <a>DetachRolePolicy</a>. For more information about policies, refer to <a href="http://docs.aws.amazon.com/IAM/latest/UserGuide/policies-managed-vs-inline.html">Managed Policies and Inline Policies</a> in the <i>IAM User Guide</i>.</p>'
      responses:
        '200':
          description: Success
        '480':
          description: NoSuchEntityException
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/NoSuchEntityException'
        '481':
          description: LimitExceededException
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/LimitExceededException'
        '482':
          description: UnmodifiableEntityException
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/UnmodifiableEntityException'
        '483':
          description: ServiceFailureException
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ServiceFailureException'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/DeleteRolePolicyRequest'
        required: true
    parameters:
      - $ref: '#/components/parameters/Action'
      - $ref: '#/components/parameters/Version'
      - $ref: '#/components/parameters/X-Amz-Content-Sha256'
      - $ref: '#/components/parameters/X-Amz-Date'
      - $ref: '#/components/parameters/X-Amz-Algorithm'
      - $ref: '#/components/parameters/X-Amz-Credential'
      - $ref: '#/components/parameters/X-Amz-Security-Token'
      - $ref: '#/components/parameters/X-Amz-Signature'
      - $ref: '#/components/parameters/X-Amz-SignedHeaders'
  '/#DeleteSAMLProvider':
    post:
      operationId: DeleteSAMLProvider
      description: '<p>Deletes a SAML provider resource in IAM.</p> <p>Deleting the provider resource from IAM does not update any roles that reference the SAML provider resource''s ARN as a principal in their trust policies. Any attempt to assume a role that references a non-existent provider resource ARN fails.</p> <note> <p> This operation requires <a href="http://docs.aws.amazon.com/general/latest/gr/signature-version-4.html">Signature Version 4</a>.</p> </note>'
      responses:
        '200':
          description: Success
        '480':
          description: InvalidInputException
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/InvalidInputException'
        '481':
          description: LimitExceededException
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/LimitExceededException'
        '482':
          description: NoSuchEntityException
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/NoSuchEntityException'
        '483':
          description: ServiceFailureException
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ServiceFailureException'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/DeleteSAMLProviderRequest'
        required: true
    parameters:
      - $ref: '#/components/parameters/Action'
      - $ref: '#/components/parameters/Version'
      - $ref: '#/components/parameters/X-Amz-Content-Sha256'
      - $ref: '#/components/parameters/X-Amz-Date'
      - $ref: '#/components/parameters/X-Amz-Algorithm'
      - $ref: '#/components/parameters/X-Amz-Credential'
      - $ref: '#/components/parameters/X-Amz-Security-Token'
      - $ref: '#/components/parameters/X-Amz-Signature'
      - $ref: '#/components/parameters/X-Amz-SignedHeaders'
  '/#DeleteSSHPublicKey':
    post:
      operationId: DeleteSSHPublicKey
      description: '<p>Deletes the specified SSH public key.</p> <p>The SSH public key deleted by this action is used only for authenticating the associated IAM user to an AWS CodeCommit repository. For more information about using SSH keys to authenticate to an AWS CodeCommit repository, see <a href="http://docs.aws.amazon.com/codecommit/latest/userguide/setting-up-credentials-ssh.html">Set up AWS CodeCommit for SSH Connections</a> in the <i>AWS CodeCommit User Guide</i>.</p>'
      responses:
        '200':
          description: Success
        '480':
          description: NoSuchEntityException
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/NoSuchEntityException'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/DeleteSSHPublicKeyRequest'
        required: true
    parameters:
      - $ref: '#/components/parameters/Action'
      - $ref: '#/components/parameters/Version'
      - $ref: '#/components/parameters/X-Amz-Content-Sha256'
      - $ref: '#/components/parameters/X-Amz-Date'
      - $ref: '#/components/parameters/X-Amz-Algorithm'
      - $ref: '#/components/parameters/X-Amz-Credential'
      - $ref: '#/components/parameters/X-Amz-Security-Token'
      - $ref: '#/components/parameters/X-Amz-Signature'
      - $ref: '#/components/parameters/X-Amz-SignedHeaders'
  '/#DeleteServerCertificate':
    post:
      operationId: DeleteServerCertificate
      description: '<p>Deletes the specified server certificate.</p> <p>For more information about working with server certificates, including a list of AWS services that can use the server certificates that you manage with IAM, go to <a href="http://docs.aws.amazon.com/IAM/latest/UserGuide/id_credentials_server-certs.html">Working with Server Certificates</a> in the <i>IAM User Guide</i>.</p> <important> <p> If you are using a server certificate with Elastic Load Balancing, deleting the certificate could have implications for your application. If Elastic Load Balancing doesn''t detect the deletion of bound certificates, it may continue to use the certificates. This could cause Elastic Load Balancing to stop accepting traffic. We recommend that you remove the reference to the certificate from Elastic Load Balancing before using this command to delete the certificate. For more information, go to <a href="http://docs.aws.amazon.com/ElasticLoadBalancing/latest/APIReference/API_DeleteLoadBalancerListeners.html">DeleteLoadBalancerListeners</a> in the <i>Elastic Load Balancing API Reference</i>.</p> </important>'
      responses:
        '200':
          description: Success
        '480':
          description: NoSuchEntityException
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/NoSuchEntityException'
        '481':
          description: DeleteConflictException
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/DeleteConflictException'
        '482':
          description: LimitExceededException
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/LimitExceededException'
        '483':
          description: ServiceFailureException
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ServiceFailureException'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/DeleteServerCertificateRequest'
        required: true
    parameters:
      - $ref: '#/components/parameters/Action'
      - $ref: '#/components/parameters/Version'
      - $ref: '#/components/parameters/X-Amz-Content-Sha256'
      - $ref: '#/components/parameters/X-Amz-Date'
      - $ref: '#/components/parameters/X-Amz-Algorithm'
      - $ref: '#/components/parameters/X-Amz-Credential'
      - $ref: '#/components/parameters/X-Amz-Security-Token'
      - $ref: '#/components/parameters/X-Amz-Signature'
      - $ref: '#/components/parameters/X-Amz-SignedHeaders'
  '/#DeleteServiceSpecificCredential':
    post:
      operationId: DeleteServiceSpecificCredential
      description: Deletes the specified service-specific credential.
      responses:
        '200':
          description: Success
        '480':
          description: NoSuchEntityException
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/NoSuchEntityException'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/DeleteServiceSpecificCredentialRequest'
        required: true
    parameters:
      - $ref: '#/components/parameters/Action'
      - $ref: '#/components/parameters/Version'
      - $ref: '#/components/parameters/X-Amz-Content-Sha256'
      - $ref: '#/components/parameters/X-Amz-Date'
      - $ref: '#/components/parameters/X-Amz-Algorithm'
      - $ref: '#/components/parameters/X-Amz-Credential'
      - $ref: '#/components/parameters/X-Amz-Security-Token'
      - $ref: '#/components/parameters/X-Amz-Signature'
      - $ref: '#/components/parameters/X-Amz-SignedHeaders'
  '/#DeleteSigningCertificate':
    post:
      operationId: DeleteSigningCertificate
      description: '<p>Deletes a signing certificate associated with the specified IAM user.</p> <p>If you do not specify a user name, IAM determines the user name implicitly based on the AWS access key ID signing the request. Because this action works for access keys under the AWS account, you can use this action to manage root credentials even if the AWS account has no associated IAM users.</p>'
      responses:
        '200':
          description: Success
        '480':
          description: NoSuchEntityException
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/NoSuchEntityException'
        '481':
          description: LimitExceededException
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/LimitExceededException'
        '482':
          description: ServiceFailureException
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ServiceFailureException'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/DeleteSigningCertificateRequest'
        required: true
    parameters:
      - $ref: '#/components/parameters/Action'
      - $ref: '#/components/parameters/Version'
      - $ref: '#/components/parameters/X-Amz-Content-Sha256'
      - $ref: '#/components/parameters/X-Amz-Date'
      - $ref: '#/components/parameters/X-Amz-Algorithm'
      - $ref: '#/components/parameters/X-Amz-Credential'
      - $ref: '#/components/parameters/X-Amz-Security-Token'
      - $ref: '#/components/parameters/X-Amz-Signature'
      - $ref: '#/components/parameters/X-Amz-SignedHeaders'
  '/#DeleteUser':
    post:
      operationId: DeleteUser
      description: 'Deletes the specified IAM user. The user must not belong to any groups or have any access keys, signing certificates, or attached policies.'
      responses:
        '200':
          description: Success
        '480':
          description: LimitExceededException
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/LimitExceededException'
        '481':
          description: NoSuchEntityException
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/NoSuchEntityException'
        '482':
          description: DeleteConflictException
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/DeleteConflictException'
        '483':
          description: ServiceFailureException
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ServiceFailureException'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/DeleteUserRequest'
        required: true
    parameters:
      - $ref: '#/components/parameters/Action'
      - $ref: '#/components/parameters/Version'
      - $ref: '#/components/parameters/X-Amz-Content-Sha256'
      - $ref: '#/components/parameters/X-Amz-Date'
      - $ref: '#/components/parameters/X-Amz-Algorithm'
      - $ref: '#/components/parameters/X-Amz-Credential'
      - $ref: '#/components/parameters/X-Amz-Security-Token'
      - $ref: '#/components/parameters/X-Amz-Signature'
      - $ref: '#/components/parameters/X-Amz-SignedHeaders'
  '/#DeleteUserPolicy':
    post:
      operationId: DeleteUserPolicy
      description: '<p>Deletes the specified inline policy that is embedded in the specified IAM user.</p> <p>A user can also have managed policies attached to it. To detach a managed policy from a user, use <a>DetachUserPolicy</a>. For more information about policies, refer to <a href="http://docs.aws.amazon.com/IAM/latest/UserGuide/policies-managed-vs-inline.html">Managed Policies and Inline Policies</a> in the <i>IAM User Guide</i>.</p>'
      responses:
        '200':
          description: Success
        '480':
          description: NoSuchEntityException
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/NoSuchEntityException'
        '481':
          description: LimitExceededException
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/LimitExceededException'
        '482':
          description: ServiceFailureException
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ServiceFailureException'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/DeleteUserPolicyRequest'
        required: true
    parameters:
      - $ref: '#/components/parameters/Action'
      - $ref: '#/components/parameters/Version'
      - $ref: '#/components/parameters/X-Amz-Content-Sha256'
      - $ref: '#/components/parameters/X-Amz-Date'
      - $ref: '#/components/parameters/X-Amz-Algorithm'
      - $ref: '#/components/parameters/X-Amz-Credential'
      - $ref: '#/components/parameters/X-Amz-Security-Token'
      - $ref: '#/components/parameters/X-Amz-Signature'
      - $ref: '#/components/parameters/X-Amz-SignedHeaders'
  '/#DeleteVirtualMFADevice':
    post:
      operationId: DeleteVirtualMFADevice
      description: '<p>Deletes a virtual MFA device.</p> <note> <p> You must deactivate a user''s virtual MFA device before you can delete it. For information about deactivating MFA devices, see <a>DeactivateMFADevice</a>. </p> </note>'
      responses:
        '200':
          description: Success
        '480':
          description: NoSuchEntityException
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/NoSuchEntityException'
        '481':
          description: DeleteConflictException
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/DeleteConflictException'
        '482':
          description: LimitExceededException
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/LimitExceededException'
        '483':
          description: ServiceFailureException
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ServiceFailureException'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/DeleteVirtualMFADeviceRequest'
        required: true
    parameters:
      - $ref: '#/components/parameters/Action'
      - $ref: '#/components/parameters/Version'
      - $ref: '#/components/parameters/X-Amz-Content-Sha256'
      - $ref: '#/components/parameters/X-Amz-Date'
      - $ref: '#/components/parameters/X-Amz-Algorithm'
      - $ref: '#/components/parameters/X-Amz-Credential'
      - $ref: '#/components/parameters/X-Amz-Security-Token'
      - $ref: '#/components/parameters/X-Amz-Signature'
      - $ref: '#/components/parameters/X-Amz-SignedHeaders'
  '/#DetachGroupPolicy':
    post:
      operationId: DetachGroupPolicy
      description: '<p>Removes the specified managed policy from the specified IAM group.</p> <p>A group can also have inline policies embedded with it. To delete an inline policy, use the <a>DeleteGroupPolicy</a> API. For information about policies, see <a href="http://docs.aws.amazon.com/IAM/latest/UserGuide/policies-managed-vs-inline.html">Managed Policies and Inline Policies</a> in the <i>IAM User Guide</i>.</p>'
      responses:
        '200':
          description: Success
        '480':
          description: NoSuchEntityException
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/NoSuchEntityException'
        '481':
          description: LimitExceededException
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/LimitExceededException'
        '482':
          description: InvalidInputException
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/InvalidInputException'
        '483':
          description: ServiceFailureException
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ServiceFailureException'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/DetachGroupPolicyRequest'
        required: true
    parameters:
      - $ref: '#/components/parameters/Action'
      - $ref: '#/components/parameters/Version'
      - $ref: '#/components/parameters/X-Amz-Content-Sha256'
      - $ref: '#/components/parameters/X-Amz-Date'
      - $ref: '#/components/parameters/X-Amz-Algorithm'
      - $ref: '#/components/parameters/X-Amz-Credential'
      - $ref: '#/components/parameters/X-Amz-Security-Token'
      - $ref: '#/components/parameters/X-Amz-Signature'
      - $ref: '#/components/parameters/X-Amz-SignedHeaders'
  '/#DetachRolePolicy':
    post:
      operationId: DetachRolePolicy
      description: '<p>Removes the specified managed policy from the specified role.</p> <p>A role can also have inline policies embedded with it. To delete an inline policy, use the <a>DeleteRolePolicy</a> API. For information about policies, see <a href="http://docs.aws.amazon.com/IAM/latest/UserGuide/policies-managed-vs-inline.html">Managed Policies and Inline Policies</a> in the <i>IAM User Guide</i>.</p>'
      responses:
        '200':
          description: Success
        '480':
          description: NoSuchEntityException
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/NoSuchEntityException'
        '481':
          description: LimitExceededException
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/LimitExceededException'
        '482':
          description: InvalidInputException
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/InvalidInputException'
        '483':
          description: UnmodifiableEntityException
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/UnmodifiableEntityException'
        '484':
          description: ServiceFailureException
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ServiceFailureException'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/DetachRolePolicyRequest'
        required: true
    parameters:
      - $ref: '#/components/parameters/Action'
      - $ref: '#/components/parameters/Version'
      - $ref: '#/components/parameters/X-Amz-Content-Sha256'
      - $ref: '#/components/parameters/X-Amz-Date'
      - $ref: '#/components/parameters/X-Amz-Algorithm'
      - $ref: '#/components/parameters/X-Amz-Credential'
      - $ref: '#/components/parameters/X-Amz-Security-Token'
      - $ref: '#/components/parameters/X-Amz-Signature'
      - $ref: '#/components/parameters/X-Amz-SignedHeaders'
  '/#DetachUserPolicy':
    post:
      operationId: DetachUserPolicy
      description: '<p>Removes the specified managed policy from the specified user.</p> <p>A user can also have inline policies embedded with it. To delete an inline policy, use the <a>DeleteUserPolicy</a> API. For information about policies, see <a href="http://docs.aws.amazon.com/IAM/latest/UserGuide/policies-managed-vs-inline.html">Managed Policies and Inline Policies</a> in the <i>IAM User Guide</i>.</p>'
      responses:
        '200':
          description: Success
        '480':
          description: NoSuchEntityException
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/NoSuchEntityException'
        '481':
          description: LimitExceededException
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/LimitExceededException'
        '482':
          description: InvalidInputException
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/InvalidInputException'
        '483':
          description: ServiceFailureException
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ServiceFailureException'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/DetachUserPolicyRequest'
        required: true
    parameters:
      - $ref: '#/components/parameters/Action'
      - $ref: '#/components/parameters/Version'
      - $ref: '#/components/parameters/X-Amz-Content-Sha256'
      - $ref: '#/components/parameters/X-Amz-Date'
      - $ref: '#/components/parameters/X-Amz-Algorithm'
      - $ref: '#/components/parameters/X-Amz-Credential'
      - $ref: '#/components/parameters/X-Amz-Security-Token'
      - $ref: '#/components/parameters/X-Amz-Signature'
      - $ref: '#/components/parameters/X-Amz-SignedHeaders'
  '/#EnableMFADevice':
    post:
      operationId: EnableMFADevice
      description: 'Enables the specified MFA device and associates it with the specified IAM user. When enabled, the MFA device is required for every subsequent login by the IAM user associated with the device.'
      responses:
        '200':
          description: Success
        '480':
          description: EntityAlreadyExistsException
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/EntityAlreadyExistsException'
        '481':
          description: EntityTemporarilyUnmodifiableException
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/EntityTemporarilyUnmodifiableException'
        '482':
          description: InvalidAuthenticationCodeException
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/InvalidAuthenticationCodeException'
        '483':
          description: LimitExceededException
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/LimitExceededException'
        '484':
          description: NoSuchEntityException
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/NoSuchEntityException'
        '485':
          description: ServiceFailureException
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ServiceFailureException'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/EnableMFADeviceRequest'
        required: true
    parameters:
      - $ref: '#/components/parameters/Action'
      - $ref: '#/components/parameters/Version'
      - $ref: '#/components/parameters/X-Amz-Content-Sha256'
      - $ref: '#/components/parameters/X-Amz-Date'
      - $ref: '#/components/parameters/X-Amz-Algorithm'
      - $ref: '#/components/parameters/X-Amz-Credential'
      - $ref: '#/components/parameters/X-Amz-Security-Token'
      - $ref: '#/components/parameters/X-Amz-Signature'
      - $ref: '#/components/parameters/X-Amz-SignedHeaders'
  '/#GenerateCredentialReport':
    post:
      operationId: GenerateCredentialReport
      description: ' Generates a credential report for the AWS account. For more information about the credential report, see <a href="http://docs.aws.amazon.com/IAM/latest/UserGuide/credential-reports.html">Getting Credential Reports</a> in the <i>IAM User Guide</i>.'
      responses:
        '200':
          description: Success
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/GenerateCredentialReportResponse'
        '480':
          description: LimitExceededException
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/LimitExceededException'
        '481':
          description: ServiceFailureException
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ServiceFailureException'
    parameters:
      - $ref: '#/components/parameters/Action'
      - $ref: '#/components/parameters/Version'
      - $ref: '#/components/parameters/X-Amz-Content-Sha256'
      - $ref: '#/components/parameters/X-Amz-Date'
      - $ref: '#/components/parameters/X-Amz-Algorithm'
      - $ref: '#/components/parameters/X-Amz-Credential'
      - $ref: '#/components/parameters/X-Amz-Security-Token'
      - $ref: '#/components/parameters/X-Amz-Signature'
      - $ref: '#/components/parameters/X-Amz-SignedHeaders'
  '/#GetAccessKeyLastUsed':
    post:
      operationId: GetAccessKeyLastUsed
      description: 'Retrieves information about when the specified access key was last used. The information includes the date and time of last use, along with the AWS service and region that were specified in the last request made with that key.'
      responses:
        '200':
          description: Success
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/GetAccessKeyLastUsedResponse'
        '480':
          description: NoSuchEntityException
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/NoSuchEntityException'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/GetAccessKeyLastUsedRequest'
        required: true
    parameters:
      - $ref: '#/components/parameters/Action'
      - $ref: '#/components/parameters/Version'
      - $ref: '#/components/parameters/X-Amz-Content-Sha256'
      - $ref: '#/components/parameters/X-Amz-Date'
      - $ref: '#/components/parameters/X-Amz-Algorithm'
      - $ref: '#/components/parameters/X-Amz-Credential'
      - $ref: '#/components/parameters/X-Amz-Security-Token'
      - $ref: '#/components/parameters/X-Amz-Signature'
      - $ref: '#/components/parameters/X-Amz-SignedHeaders'
  '/#GetAccountAuthorizationDetails':
    post:
      operationId: GetAccountAuthorizationDetails
      description: '<p>Retrieves information about all IAM users, groups, roles, and policies in your AWS account, including their relationships to one another. Use this API to obtain a snapshot of the configuration of IAM permissions (users, groups, roles, and policies) in your account.</p> <p>You can optionally filter the results using the <code>Filter</code> parameter. You can paginate the results using the <code>MaxItems</code> and <code>Marker</code> parameters.</p>'
      responses:
        '200':
          description: Success
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/GetAccountAuthorizationDetailsResponse'
        '480':
          description: ServiceFailureException
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ServiceFailureException'
      parameters:
        - name: MaxItems
          in: query
          description: Pagination limit
          required: false
          schema:
            type: string
        - name: Marker
          in: query
          description: Pagination token
          required: false
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/GetAccountAuthorizationDetailsRequest'
        required: true
    parameters:
      - $ref: '#/components/parameters/Action'
      - $ref: '#/components/parameters/Version'
      - $ref: '#/components/parameters/X-Amz-Content-Sha256'
      - $ref: '#/components/parameters/X-Amz-Date'
      - $ref: '#/components/parameters/X-Amz-Algorithm'
      - $ref: '#/components/parameters/X-Amz-Credential'
      - $ref: '#/components/parameters/X-Amz-Security-Token'
      - $ref: '#/components/parameters/X-Amz-Signature'
      - $ref: '#/components/parameters/X-Amz-SignedHeaders'
  '/#GetAccountPasswordPolicy':
    post:
      operationId: GetAccountPasswordPolicy
      description: 'Retrieves the password policy for the AWS account. For more information about using a password policy, go to <a href="http://docs.aws.amazon.com/IAM/latest/UserGuide/Using_ManagingPasswordPolicies.html">Managing an IAM Password Policy</a>.'
      responses:
        '200':
          description: Success
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/GetAccountPasswordPolicyResponse'
        '480':
          description: NoSuchEntityException
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/NoSuchEntityException'
        '481':
          description: ServiceFailureException
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ServiceFailureException'
    parameters:
      - $ref: '#/components/parameters/Action'
      - $ref: '#/components/parameters/Version'
      - $ref: '#/components/parameters/X-Amz-Content-Sha256'
      - $ref: '#/components/parameters/X-Amz-Date'
      - $ref: '#/components/parameters/X-Amz-Algorithm'
      - $ref: '#/components/parameters/X-Amz-Credential'
      - $ref: '#/components/parameters/X-Amz-Security-Token'
      - $ref: '#/components/parameters/X-Amz-Signature'
      - $ref: '#/components/parameters/X-Amz-SignedHeaders'
  '/#GetAccountSummary':
    post:
      operationId: GetAccountSummary
      description: '<p>Retrieves information about IAM entity usage and IAM quotas in the AWS account.</p> <p> For information about limitations on IAM entities, see <a href="http://docs.aws.amazon.com/IAM/latest/UserGuide/LimitationsOnEntities.html">Limitations on IAM Entities</a> in the <i>IAM User Guide</i>.</p>'
      responses:
        '200':
          description: Success
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/GetAccountSummaryResponse'
        '480':
          description: ServiceFailureException
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ServiceFailureException'
    parameters:
      - $ref: '#/components/parameters/Action'
      - $ref: '#/components/parameters/Version'
      - $ref: '#/components/parameters/X-Amz-Content-Sha256'
      - $ref: '#/components/parameters/X-Amz-Date'
      - $ref: '#/components/parameters/X-Amz-Algorithm'
      - $ref: '#/components/parameters/X-Amz-Credential'
      - $ref: '#/components/parameters/X-Amz-Security-Token'
      - $ref: '#/components/parameters/X-Amz-Signature'
      - $ref: '#/components/parameters/X-Amz-SignedHeaders'
  '/#GetContextKeysForCustomPolicy':
    post:
      operationId: GetContextKeysForCustomPolicy
      description: '<p>Gets a list of all of the context keys referenced in the input policies. The policies are supplied as a list of one or more strings. To get the context keys from policies associated with an IAM user, group, or role, use <a>GetContextKeysForPrincipalPolicy</a>.</p> <p>Context keys are variables maintained by AWS and its services that provide details about the context of an API query request, and can be evaluated by testing against a value specified in an IAM policy. Use GetContextKeysForCustomPolicy to understand what key names and values you must supply when you call <a>SimulateCustomPolicy</a>. Note that all parameters are shown in unencoded form here for clarity, but must be URL encoded to be included as a part of a real HTML request.</p>'
      responses:
        '200':
          description: Success
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/GetContextKeysForPolicyResponse'
        '480':
          description: InvalidInputException
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/InvalidInputException'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/GetContextKeysForCustomPolicyRequest'
        required: true
    parameters:
      - $ref: '#/components/parameters/Action'
      - $ref: '#/components/parameters/Version'
      - $ref: '#/components/parameters/X-Amz-Content-Sha256'
      - $ref: '#/components/parameters/X-Amz-Date'
      - $ref: '#/components/parameters/X-Amz-Algorithm'
      - $ref: '#/components/parameters/X-Amz-Credential'
      - $ref: '#/components/parameters/X-Amz-Security-Token'
      - $ref: '#/components/parameters/X-Amz-Signature'
      - $ref: '#/components/parameters/X-Amz-SignedHeaders'
  '/#GetContextKeysForPrincipalPolicy':
    post:
      operationId: GetContextKeysForPrincipalPolicy
      description: '<p>Gets a list of all of the context keys referenced in all of the IAM policies attached to the specified IAM entity. The entity can be an IAM user, group, or role. If you specify a user, then the request also includes all of the policies attached to groups that the user is a member of.</p> <p>You can optionally include a list of one or more additional policies, specified as strings. If you want to include <i>only</i> a list of policies by string, use <a>GetContextKeysForCustomPolicy</a> instead.</p> <p> <b>Note:</b> This API discloses information about the permissions granted to other users. If you do not want users to see other user''s permissions, then consider allowing them to use <a>GetContextKeysForCustomPolicy</a> instead.</p> <p>Context keys are variables maintained by AWS and its services that provide details about the context of an API query request, and can be evaluated by testing against a value in an IAM policy. Use <a>GetContextKeysForPrincipalPolicy</a> to understand what key names and values you must supply when you call <a>SimulatePrincipalPolicy</a>.</p>'
      responses:
        '200':
          description: Success
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/GetContextKeysForPolicyResponse'
        '480':
          description: NoSuchEntityException
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/NoSuchEntityException'
        '481':
          description: InvalidInputException
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/InvalidInputException'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/GetContextKeysForPrincipalPolicyRequest'
        required: true
    parameters:
      - $ref: '#/components/parameters/Action'
      - $ref: '#/components/parameters/Version'
      - $ref: '#/components/parameters/X-Amz-Content-Sha256'
      - $ref: '#/components/parameters/X-Amz-Date'
      - $ref: '#/components/parameters/X-Amz-Algorithm'
      - $ref: '#/components/parameters/X-Amz-Credential'
      - $ref: '#/components/parameters/X-Amz-Security-Token'
      - $ref: '#/components/parameters/X-Amz-Signature'
      - $ref: '#/components/parameters/X-Amz-SignedHeaders'
  '/#GetCredentialReport':
    post:
      operationId: GetCredentialReport
      description: ' Retrieves a credential report for the AWS account. For more information about the credential report, see <a href="http://docs.aws.amazon.com/IAM/latest/UserGuide/credential-reports.html">Getting Credential Reports</a> in the <i>IAM User Guide</i>.'
      responses:
        '200':
          description: Success
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/GetCredentialReportResponse'
        '480':
          description: CredentialReportNotPresentException
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/CredentialReportNotPresentException'
        '481':
          description: CredentialReportExpiredException
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/CredentialReportExpiredException'
        '482':
          description: CredentialReportNotReadyException
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/CredentialReportNotReadyException'
        '483':
          description: ServiceFailureException
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ServiceFailureException'
    parameters:
      - $ref: '#/components/parameters/Action'
      - $ref: '#/components/parameters/Version'
      - $ref: '#/components/parameters/X-Amz-Content-Sha256'
      - $ref: '#/components/parameters/X-Amz-Date'
      - $ref: '#/components/parameters/X-Amz-Algorithm'
      - $ref: '#/components/parameters/X-Amz-Credential'
      - $ref: '#/components/parameters/X-Amz-Security-Token'
      - $ref: '#/components/parameters/X-Amz-Signature'
      - $ref: '#/components/parameters/X-Amz-SignedHeaders'
  '/#GetGroup':
    post:
      operationId: GetGroup
      description: ' Returns a list of IAM users that are in the specified IAM group. You can paginate the results using the <code>MaxItems</code> and <code>Marker</code> parameters.'
      responses:
        '200':
          description: Success
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/GetGroupResponse'
        '480':
          description: NoSuchEntityException
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/NoSuchEntityException'
        '481':
          description: ServiceFailureException
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ServiceFailureException'
      parameters:
        - name: MaxItems
          in: query
          description: Pagination limit
          required: false
          schema:
            type: string
        - name: Marker
          in: query
          description: Pagination token
          required: false
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/GetGroupRequest'
        required: true
    parameters:
      - $ref: '#/components/parameters/Action'
      - $ref: '#/components/parameters/Version'
      - $ref: '#/components/parameters/X-Amz-Content-Sha256'
      - $ref: '#/components/parameters/X-Amz-Date'
      - $ref: '#/components/parameters/X-Amz-Algorithm'
      - $ref: '#/components/parameters/X-Amz-Credential'
      - $ref: '#/components/parameters/X-Amz-Security-Token'
      - $ref: '#/components/parameters/X-Amz-Signature'
      - $ref: '#/components/parameters/X-Amz-SignedHeaders'
  '/#GetGroupPolicy':
    post:
      operationId: GetGroupPolicy
      description: '<p>Retrieves the specified inline policy document that is embedded in the specified IAM group.</p> <note> <p>Policies returned by this API are URL-encoded compliant with <a href="https://tools.ietf.org/html/rfc3986">RFC 3986</a>. You can use a URL decoding method to convert the policy back to plain JSON text. For example, if you use Java, you can use the <code>decode</code> method of the <code>java.net.URLDecoder</code> utility class in the Java SDK. Other languages and SDKs provide similar functionality.</p> </note> <p>An IAM group can also have managed policies attached to it. To retrieve a managed policy document that is attached to a group, use <a>GetPolicy</a> to determine the policy''s default version, then use <a>GetPolicyVersion</a> to retrieve the policy document.</p> <p>For more information about policies, see <a href="http://docs.aws.amazon.com/IAM/latest/UserGuide/policies-managed-vs-inline.html">Managed Policies and Inline Policies</a> in the <i>IAM User Guide</i>.</p>'
      responses:
        '200':
          description: Success
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/GetGroupPolicyResponse'
        '480':
          description: NoSuchEntityException
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/NoSuchEntityException'
        '481':
          description: ServiceFailureException
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ServiceFailureException'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/GetGroupPolicyRequest'
        required: true
    parameters:
      - $ref: '#/components/parameters/Action'
      - $ref: '#/components/parameters/Version'
      - $ref: '#/components/parameters/X-Amz-Content-Sha256'
      - $ref: '#/components/parameters/X-Amz-Date'
      - $ref: '#/components/parameters/X-Amz-Algorithm'
      - $ref: '#/components/parameters/X-Amz-Credential'
      - $ref: '#/components/parameters/X-Amz-Security-Token'
      - $ref: '#/components/parameters/X-Amz-Signature'
      - $ref: '#/components/parameters/X-Amz-SignedHeaders'
  '/#GetInstanceProfile':
    post:
      operationId: GetInstanceProfile
      description: ' Retrieves information about the specified instance profile, including the instance profile''s path, GUID, ARN, and role. For more information about instance profiles, see <a href="http://docs.aws.amazon.com/IAM/latest/UserGuide/AboutInstanceProfiles.html">About Instance Profiles</a> in the <i>IAM User Guide</i>.'
      responses:
        '200':
          description: Success
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/GetInstanceProfileResponse'
        '480':
          description: NoSuchEntityException
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/NoSuchEntityException'
        '481':
          description: ServiceFailureException
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ServiceFailureException'
      x-waiters:
        - delay: 1
          operation: GetInstanceProfile
          maxAttempts: 40
          acceptors:
            - expected: 200
              matcher: status
              state: success
            - state: retry
              matcher: status
              expected: 404
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/GetInstanceProfileRequest'
        required: true
    parameters:
      - $ref: '#/components/parameters/Action'
      - $ref: '#/components/parameters/Version'
      - $ref: '#/components/parameters/X-Amz-Content-Sha256'
      - $ref: '#/components/parameters/X-Amz-Date'
      - $ref: '#/components/parameters/X-Amz-Algorithm'
      - $ref: '#/components/parameters/X-Amz-Credential'
      - $ref: '#/components/parameters/X-Amz-Security-Token'
      - $ref: '#/components/parameters/X-Amz-Signature'
      - $ref: '#/components/parameters/X-Amz-SignedHeaders'
  '/#GetLoginProfile':
    post:
      operationId: GetLoginProfile
      description: 'Retrieves the user name and password-creation date for the specified IAM user. If the user has not been assigned a password, the action returns a 404 (<code>NoSuchEntity</code>) error.'
      responses:
        '200':
          description: Success
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/GetLoginProfileResponse'
        '480':
          description: NoSuchEntityException
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/NoSuchEntityException'
        '481':
          description: ServiceFailureException
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ServiceFailureException'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/GetLoginProfileRequest'
        required: true
    parameters:
      - $ref: '#/components/parameters/Action'
      - $ref: '#/components/parameters/Version'
      - $ref: '#/components/parameters/X-Amz-Content-Sha256'
      - $ref: '#/components/parameters/X-Amz-Date'
      - $ref: '#/components/parameters/X-Amz-Algorithm'
      - $ref: '#/components/parameters/X-Amz-Credential'
      - $ref: '#/components/parameters/X-Amz-Security-Token'
      - $ref: '#/components/parameters/X-Amz-Signature'
      - $ref: '#/components/parameters/X-Amz-SignedHeaders'
  '/#GetOpenIDConnectProvider':
    post:
      operationId: GetOpenIDConnectProvider
      description: Returns information about the specified OpenID Connect (OIDC) provider resource object in IAM.
      responses:
        '200':
          description: Success
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/GetOpenIDConnectProviderResponse'
        '480':
          description: InvalidInputException
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/InvalidInputException'
        '481':
          description: NoSuchEntityException
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/NoSuchEntityException'
        '482':
          description: ServiceFailureException
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ServiceFailureException'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/GetOpenIDConnectProviderRequest'
        required: true
    parameters:
      - $ref: '#/components/parameters/Action'
      - $ref: '#/components/parameters/Version'
      - $ref: '#/components/parameters/X-Amz-Content-Sha256'
      - $ref: '#/components/parameters/X-Amz-Date'
      - $ref: '#/components/parameters/X-Amz-Algorithm'
      - $ref: '#/components/parameters/X-Amz-Credential'
      - $ref: '#/components/parameters/X-Amz-Security-Token'
      - $ref: '#/components/parameters/X-Amz-Signature'
      - $ref: '#/components/parameters/X-Amz-SignedHeaders'
  '/#GetPolicy':
    post:
      operationId: GetPolicy
      description: '<p>Retrieves information about the specified managed policy, including the policy''s default version and the total number of IAM users, groups, and roles to which the policy is attached. To retrieve the list of the specific users, groups, and roles that the policy is attached to, use the <a>ListEntitiesForPolicy</a> API. This API returns metadata about the policy. To retrieve the actual policy document for a specific version of the policy, use <a>GetPolicyVersion</a>.</p> <p>This API retrieves information about managed policies. To retrieve information about an inline policy that is embedded with an IAM user, group, or role, use the <a>GetUserPolicy</a>, <a>GetGroupPolicy</a>, or <a>GetRolePolicy</a> API.</p> <p>For more information about policies, see <a href="http://docs.aws.amazon.com/IAM/latest/UserGuide/policies-managed-vs-inline.html">Managed Policies and Inline Policies</a> in the <i>IAM User Guide</i>.</p>'
      responses:
        '200':
          description: Success
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/GetPolicyResponse'
        '480':
          description: NoSuchEntityException
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/NoSuchEntityException'
        '481':
          description: InvalidInputException
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/InvalidInputException'
        '482':
          description: ServiceFailureException
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ServiceFailureException'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/GetPolicyRequest'
        required: true
    parameters:
      - $ref: '#/components/parameters/Action'
      - $ref: '#/components/parameters/Version'
      - $ref: '#/components/parameters/X-Amz-Content-Sha256'
      - $ref: '#/components/parameters/X-Amz-Date'
      - $ref: '#/components/parameters/X-Amz-Algorithm'
      - $ref: '#/components/parameters/X-Amz-Credential'
      - $ref: '#/components/parameters/X-Amz-Security-Token'
      - $ref: '#/components/parameters/X-Amz-Signature'
      - $ref: '#/components/parameters/X-Amz-SignedHeaders'
  '/#GetPolicyVersion':
    post:
      operationId: GetPolicyVersion
      description: '<p>Retrieves information about the specified version of the specified managed policy, including the policy document.</p> <note> <p>Policies returned by this API are URL-encoded compliant with <a href="https://tools.ietf.org/html/rfc3986">RFC 3986</a>. You can use a URL decoding method to convert the policy back to plain JSON text. For example, if you use Java, you can use the <code>decode</code> method of the <code>java.net.URLDecoder</code> utility class in the Java SDK. Other languages and SDKs provide similar functionality.</p> </note> <p>To list the available versions for a policy, use <a>ListPolicyVersions</a>.</p> <p>This API retrieves information about managed policies. To retrieve information about an inline policy that is embedded in a user, group, or role, use the <a>GetUserPolicy</a>, <a>GetGroupPolicy</a>, or <a>GetRolePolicy</a> API.</p> <p>For more information about the types of policies, see <a href="http://docs.aws.amazon.com/IAM/latest/UserGuide/policies-managed-vs-inline.html">Managed Policies and Inline Policies</a> in the <i>IAM User Guide</i>.</p> <p>For more information about managed policy versions, see <a href="http://docs.aws.amazon.com/IAM/latest/UserGuide/policies-managed-versions.html">Versioning for Managed Policies</a> in the <i>IAM User Guide</i>.</p>'
      responses:
        '200':
          description: Success
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/GetPolicyVersionResponse'
        '480':
          description: NoSuchEntityException
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/NoSuchEntityException'
        '481':
          description: InvalidInputException
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/InvalidInputException'
        '482':
          description: ServiceFailureException
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ServiceFailureException'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/GetPolicyVersionRequest'
        required: true
    parameters:
      - $ref: '#/components/parameters/Action'
      - $ref: '#/components/parameters/Version'
      - $ref: '#/components/parameters/X-Amz-Content-Sha256'
      - $ref: '#/components/parameters/X-Amz-Date'
      - $ref: '#/components/parameters/X-Amz-Algorithm'
      - $ref: '#/components/parameters/X-Amz-Credential'
      - $ref: '#/components/parameters/X-Amz-Security-Token'
      - $ref: '#/components/parameters/X-Amz-Signature'
      - $ref: '#/components/parameters/X-Amz-SignedHeaders'
  '/#GetRole':
    post:
      operationId: GetRole
      description: '<p>Retrieves information about the specified role, including the role''s path, GUID, ARN, and the role''s trust policy that grants permission to assume the role. For more information about roles, see <a href="http://docs.aws.amazon.com/IAM/latest/UserGuide/WorkingWithRoles.html">Working with Roles</a>.</p> <note> <p>Policies returned by this API are URL-encoded compliant with <a href="https://tools.ietf.org/html/rfc3986">RFC 3986</a>. You can use a URL decoding method to convert the policy back to plain JSON text. For example, if you use Java, you can use the <code>decode</code> method of the <code>java.net.URLDecoder</code> utility class in the Java SDK. Other languages and SDKs provide similar functionality.</p> </note>'
      responses:
        '200':
          description: Success
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/GetRoleResponse'
        '480':
          description: NoSuchEntityException
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/NoSuchEntityException'
        '481':
          description: ServiceFailureException
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ServiceFailureException'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/GetRoleRequest'
        required: true
    parameters:
      - $ref: '#/components/parameters/Action'
      - $ref: '#/components/parameters/Version'
      - $ref: '#/components/parameters/X-Amz-Content-Sha256'
      - $ref: '#/components/parameters/X-Amz-Date'
      - $ref: '#/components/parameters/X-Amz-Algorithm'
      - $ref: '#/components/parameters/X-Amz-Credential'
      - $ref: '#/components/parameters/X-Amz-Security-Token'
      - $ref: '#/components/parameters/X-Amz-Signature'
      - $ref: '#/components/parameters/X-Amz-SignedHeaders'
  '/#GetRolePolicy':
    post:
      operationId: GetRolePolicy
      description: '<p>Retrieves the specified inline policy document that is embedded with the specified IAM role.</p> <note> <p>Policies returned by this API are URL-encoded compliant with <a href="https://tools.ietf.org/html/rfc3986">RFC 3986</a>. You can use a URL decoding method to convert the policy back to plain JSON text. For example, if you use Java, you can use the <code>decode</code> method of the <code>java.net.URLDecoder</code> utility class in the Java SDK. Other languages and SDKs provide similar functionality.</p> </note> <p>An IAM role can also have managed policies attached to it. To retrieve a managed policy document that is attached to a role, use <a>GetPolicy</a> to determine the policy''s default version, then use <a>GetPolicyVersion</a> to retrieve the policy document.</p> <p>For more information about policies, see <a href="http://docs.aws.amazon.com/IAM/latest/UserGuide/policies-managed-vs-inline.html">Managed Policies and Inline Policies</a> in the <i>IAM User Guide</i>.</p> <p>For more information about roles, see <a href="http://docs.aws.amazon.com/IAM/latest/UserGuide/roles-toplevel.html">Using Roles to Delegate Permissions and Federate Identities</a>.</p>'
      responses:
        '200':
          description: Success
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/GetRolePolicyResponse'
        '480':
          description: NoSuchEntityException
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/NoSuchEntityException'
        '481':
          description: ServiceFailureException
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ServiceFailureException'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/GetRolePolicyRequest'
        required: true
    parameters:
      - $ref: '#/components/parameters/Action'
      - $ref: '#/components/parameters/Version'
      - $ref: '#/components/parameters/X-Amz-Content-Sha256'
      - $ref: '#/components/parameters/X-Amz-Date'
      - $ref: '#/components/parameters/X-Amz-Algorithm'
      - $ref: '#/components/parameters/X-Amz-Credential'
      - $ref: '#/components/parameters/X-Amz-Security-Token'
      - $ref: '#/components/parameters/X-Amz-Signature'
      - $ref: '#/components/parameters/X-Amz-SignedHeaders'
  '/#GetSAMLProvider':
    post:
      operationId: GetSAMLProvider
      description: '<p>Returns the SAML provider metadocument that was uploaded when the IAM SAML provider resource object was created or updated.</p> <note> <p>This operation requires <a href="http://docs.aws.amazon.com/general/latest/gr/signature-version-4.html">Signature Version 4</a>.</p> </note>'
      responses:
        '200':
          description: Success
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/GetSAMLProviderResponse'
        '480':
          description: NoSuchEntityException
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/NoSuchEntityException'
        '481':
          description: InvalidInputException
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/InvalidInputException'
        '482':
          description: ServiceFailureException
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ServiceFailureException'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/GetSAMLProviderRequest'
        required: true
    parameters:
      - $ref: '#/components/parameters/Action'
      - $ref: '#/components/parameters/Version'
      - $ref: '#/components/parameters/X-Amz-Content-Sha256'
      - $ref: '#/components/parameters/X-Amz-Date'
      - $ref: '#/components/parameters/X-Amz-Algorithm'
      - $ref: '#/components/parameters/X-Amz-Credential'
      - $ref: '#/components/parameters/X-Amz-Security-Token'
      - $ref: '#/components/parameters/X-Amz-Signature'
      - $ref: '#/components/parameters/X-Amz-SignedHeaders'
  '/#GetSSHPublicKey':
    post:
      operationId: GetSSHPublicKey
      description: '<p>Retrieves the specified SSH public key, including metadata about the key.</p> <p>The SSH public key retrieved by this action is used only for authenticating the associated IAM user to an AWS CodeCommit repository. For more information about using SSH keys to authenticate to an AWS CodeCommit repository, see <a href="http://docs.aws.amazon.com/codecommit/latest/userguide/setting-up-credentials-ssh.html">Set up AWS CodeCommit for SSH Connections</a> in the <i>AWS CodeCommit User Guide</i>.</p>'
      responses:
        '200':
          description: Success
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/GetSSHPublicKeyResponse'
        '480':
          description: NoSuchEntityException
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/NoSuchEntityException'
        '481':
          description: UnrecognizedPublicKeyEncodingException
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/UnrecognizedPublicKeyEncodingException'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/GetSSHPublicKeyRequest'
        required: true
    parameters:
      - $ref: '#/components/parameters/Action'
      - $ref: '#/components/parameters/Version'
      - $ref: '#/components/parameters/X-Amz-Content-Sha256'
      - $ref: '#/components/parameters/X-Amz-Date'
      - $ref: '#/components/parameters/X-Amz-Algorithm'
      - $ref: '#/components/parameters/X-Amz-Credential'
      - $ref: '#/components/parameters/X-Amz-Security-Token'
      - $ref: '#/components/parameters/X-Amz-Signature'
      - $ref: '#/components/parameters/X-Amz-SignedHeaders'
  '/#GetServerCertificate':
    post:
      operationId: GetServerCertificate
      description: '<p>Retrieves information about the specified server certificate stored in IAM.</p> <p>For more information about working with server certificates, including a list of AWS services that can use the server certificates that you manage with IAM, go to <a href="http://docs.aws.amazon.com/IAM/latest/UserGuide/id_credentials_server-certs.html">Working with Server Certificates</a> in the <i>IAM User Guide</i>.</p>'
      responses:
        '200':
          description: Success
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/GetServerCertificateResponse'
        '480':
          description: NoSuchEntityException
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/NoSuchEntityException'
        '481':
          description: ServiceFailureException
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ServiceFailureException'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/GetServerCertificateRequest'
        required: true
    parameters:
      - $ref: '#/components/parameters/Action'
      - $ref: '#/components/parameters/Version'
      - $ref: '#/components/parameters/X-Amz-Content-Sha256'
      - $ref: '#/components/parameters/X-Amz-Date'
      - $ref: '#/components/parameters/X-Amz-Algorithm'
      - $ref: '#/components/parameters/X-Amz-Credential'
      - $ref: '#/components/parameters/X-Amz-Security-Token'
      - $ref: '#/components/parameters/X-Amz-Signature'
      - $ref: '#/components/parameters/X-Amz-SignedHeaders'
  '/#GetUser':
    post:
      operationId: GetUser
      description: '<p>Retrieves information about the specified IAM user, including the user''s creation date, path, unique ID, and ARN.</p> <p>If you do not specify a user name, IAM determines the user name implicitly based on the AWS access key ID used to sign the request to this API.</p>'
      responses:
        '200':
          description: Success
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/GetUserResponse'
        '480':
          description: NoSuchEntityException
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/NoSuchEntityException'
        '481':
          description: ServiceFailureException
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ServiceFailureException'
      x-waiters:
        - delay: 1
          operation: GetUser
          maxAttempts: 20
          acceptors:
            - state: success
              matcher: status
              expected: 200
            - state: retry
              matcher: error
              expected: NoSuchEntity
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/GetUserRequest'
        required: true
    parameters:
      - $ref: '#/components/parameters/Action'
      - $ref: '#/components/parameters/Version'
      - $ref: '#/components/parameters/X-Amz-Content-Sha256'
      - $ref: '#/components/parameters/X-Amz-Date'
      - $ref: '#/components/parameters/X-Amz-Algorithm'
      - $ref: '#/components/parameters/X-Amz-Credential'
      - $ref: '#/components/parameters/X-Amz-Security-Token'
      - $ref: '#/components/parameters/X-Amz-Signature'
      - $ref: '#/components/parameters/X-Amz-SignedHeaders'
  '/#GetUserPolicy':
    post:
      operationId: GetUserPolicy
      description: '<p>Retrieves the specified inline policy document that is embedded in the specified IAM user.</p> <note> <p>Policies returned by this API are URL-encoded compliant with <a href="https://tools.ietf.org/html/rfc3986">RFC 3986</a>. You can use a URL decoding method to convert the policy back to plain JSON text. For example, if you use Java, you can use the <code>decode</code> method of the <code>java.net.URLDecoder</code> utility class in the Java SDK. Other languages and SDKs provide similar functionality.</p> </note> <p>An IAM user can also have managed policies attached to it. To retrieve a managed policy document that is attached to a user, use <a>GetPolicy</a> to determine the policy''s default version, then use <a>GetPolicyVersion</a> to retrieve the policy document.</p> <p>For more information about policies, see <a href="http://docs.aws.amazon.com/IAM/latest/UserGuide/policies-managed-vs-inline.html">Managed Policies and Inline Policies</a> in the <i>IAM User Guide</i>.</p>'
      responses:
        '200':
          description: Success
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/GetUserPolicyResponse'
        '480':
          description: NoSuchEntityException
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/NoSuchEntityException'
        '481':
          description: ServiceFailureException
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ServiceFailureException'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/GetUserPolicyRequest'
        required: true
    parameters:
      - $ref: '#/components/parameters/Action'
      - $ref: '#/components/parameters/Version'
      - $ref: '#/components/parameters/X-Amz-Content-Sha256'
      - $ref: '#/components/parameters/X-Amz-Date'
      - $ref: '#/components/parameters/X-Amz-Algorithm'
      - $ref: '#/components/parameters/X-Amz-Credential'
      - $ref: '#/components/parameters/X-Amz-Security-Token'
      - $ref: '#/components/parameters/X-Amz-Signature'
      - $ref: '#/components/parameters/X-Amz-SignedHeaders'
  '/#ListAccessKeys':
    post:
      operationId: ListAccessKeys
      description: '<p>Returns information about the access key IDs associated with the specified IAM user. If there are none, the action returns an empty list.</p> <p>Although each user is limited to a small number of keys, you can still paginate the results using the <code>MaxItems</code> and <code>Marker</code> parameters.</p> <p>If the <code>UserName</code> field is not specified, the UserName is determined implicitly based on the AWS access key ID used to sign the request. Because this action works for access keys under the AWS account, you can use this action to manage root credentials even if the AWS account has no associated users.</p> <note> <p>To ensure the security of your AWS account, the secret access key is accessible only during key and user creation.</p> </note>'
      responses:
        '200':
          description: Success
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ListAccessKeysResponse'
        '480':
          description: NoSuchEntityException
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/NoSuchEntityException'
        '481':
          description: ServiceFailureException
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ServiceFailureException'
      parameters:
        - name: MaxItems
          in: query
          description: Pagination limit
          required: false
          schema:
            type: string
        - name: Marker
          in: query
          description: Pagination token
          required: false
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ListAccessKeysRequest'
        required: true
    parameters:
      - $ref: '#/components/parameters/Action'
      - $ref: '#/components/parameters/Version'
      - $ref: '#/components/parameters/X-Amz-Content-Sha256'
      - $ref: '#/components/parameters/X-Amz-Date'
      - $ref: '#/components/parameters/X-Amz-Algorithm'
      - $ref: '#/components/parameters/X-Amz-Credential'
      - $ref: '#/components/parameters/X-Amz-Security-Token'
      - $ref: '#/components/parameters/X-Amz-Signature'
      - $ref: '#/components/parameters/X-Amz-SignedHeaders'
  '/#ListAccountAliases':
    post:
      operationId: ListAccountAliases
      description: 'Lists the account alias associated with the AWS account (Note: you can have only one). For information about using an AWS account alias, see <a href="http://docs.aws.amazon.com/IAM/latest/UserGuide/AccountAlias.html">Using an Alias for Your AWS Account ID</a> in the <i>IAM User Guide</i>.'
      responses:
        '200':
          description: Success
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ListAccountAliasesResponse'
        '480':
          description: ServiceFailureException
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ServiceFailureException'
      parameters:
        - name: MaxItems
          in: query
          description: Pagination limit
          required: false
          schema:
            type: string
        - name: Marker
          in: query
          description: Pagination token
          required: false
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ListAccountAliasesRequest'
        required: true
    parameters:
      - $ref: '#/components/parameters/Action'
      - $ref: '#/components/parameters/Version'
      - $ref: '#/components/parameters/X-Amz-Content-Sha256'
      - $ref: '#/components/parameters/X-Amz-Date'
      - $ref: '#/components/parameters/X-Amz-Algorithm'
      - $ref: '#/components/parameters/X-Amz-Credential'
      - $ref: '#/components/parameters/X-Amz-Security-Token'
      - $ref: '#/components/parameters/X-Amz-Signature'
      - $ref: '#/components/parameters/X-Amz-SignedHeaders'
  '/#ListAttachedGroupPolicies':
    post:
      operationId: ListAttachedGroupPolicies
      description: '<p>Lists all managed policies that are attached to the specified IAM group.</p> <p>An IAM group can also have inline policies embedded with it. To list the inline policies for a group, use the <a>ListGroupPolicies</a> API. For information about policies, see <a href="http://docs.aws.amazon.com/IAM/latest/UserGuide/policies-managed-vs-inline.html">Managed Policies and Inline Policies</a> in the <i>IAM User Guide</i>.</p> <p>You can paginate the results using the <code>MaxItems</code> and <code>Marker</code> parameters. You can use the <code>PathPrefix</code> parameter to limit the list of policies to only those matching the specified path prefix. If there are no policies attached to the specified group (or none that match the specified path prefix), the action returns an empty list.</p>'
      responses:
        '200':
          description: Success
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ListAttachedGroupPoliciesResponse'
        '480':
          description: NoSuchEntityException
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/NoSuchEntityException'
        '481':
          description: InvalidInputException
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/InvalidInputException'
        '482':
          description: ServiceFailureException
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ServiceFailureException'
      parameters:
        - name: MaxItems
          in: query
          description: Pagination limit
          required: false
          schema:
            type: string
        - name: Marker
          in: query
          description: Pagination token
          required: false
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ListAttachedGroupPoliciesRequest'
        required: true
    parameters:
      - $ref: '#/components/parameters/Action'
      - $ref: '#/components/parameters/Version'
      - $ref: '#/components/parameters/X-Amz-Content-Sha256'
      - $ref: '#/components/parameters/X-Amz-Date'
      - $ref: '#/components/parameters/X-Amz-Algorithm'
      - $ref: '#/components/parameters/X-Amz-Credential'
      - $ref: '#/components/parameters/X-Amz-Security-Token'
      - $ref: '#/components/parameters/X-Amz-Signature'
      - $ref: '#/components/parameters/X-Amz-SignedHeaders'
  '/#ListAttachedRolePolicies':
    post:
      operationId: ListAttachedRolePolicies
      description: '<p>Lists all managed policies that are attached to the specified IAM role.</p> <p>An IAM role can also have inline policies embedded with it. To list the inline policies for a role, use the <a>ListRolePolicies</a> API. For information about policies, see <a href="http://docs.aws.amazon.com/IAM/latest/UserGuide/policies-managed-vs-inline.html">Managed Policies and Inline Policies</a> in the <i>IAM User Guide</i>.</p> <p>You can paginate the results using the <code>MaxItems</code> and <code>Marker</code> parameters. You can use the <code>PathPrefix</code> parameter to limit the list of policies to only those matching the specified path prefix. If there are no policies attached to the specified role (or none that match the specified path prefix), the action returns an empty list.</p>'
      responses:
        '200':
          description: Success
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ListAttachedRolePoliciesResponse'
        '480':
          description: NoSuchEntityException
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/NoSuchEntityException'
        '481':
          description: InvalidInputException
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/InvalidInputException'
        '482':
          description: ServiceFailureException
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ServiceFailureException'
      parameters:
        - name: MaxItems
          in: query
          description: Pagination limit
          required: false
          schema:
            type: string
        - name: Marker
          in: query
          description: Pagination token
          required: false
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ListAttachedRolePoliciesRequest'
        required: true
    parameters:
      - $ref: '#/components/parameters/Action'
      - $ref: '#/components/parameters/Version'
      - $ref: '#/components/parameters/X-Amz-Content-Sha256'
      - $ref: '#/components/parameters/X-Amz-Date'
      - $ref: '#/components/parameters/X-Amz-Algorithm'
      - $ref: '#/components/parameters/X-Amz-Credential'
      - $ref: '#/components/parameters/X-Amz-Security-Token'
      - $ref: '#/components/parameters/X-Amz-Signature'
      - $ref: '#/components/parameters/X-Amz-SignedHeaders'
  '/#ListAttachedUserPolicies':
    post:
      operationId: ListAttachedUserPolicies
      description: '<p>Lists all managed policies that are attached to the specified IAM user.</p> <p>An IAM user can also have inline policies embedded with it. To list the inline policies for a user, use the <a>ListUserPolicies</a> API. For information about policies, see <a href="http://docs.aws.amazon.com/IAM/latest/UserGuide/policies-managed-vs-inline.html">Managed Policies and Inline Policies</a> in the <i>IAM User Guide</i>.</p> <p>You can paginate the results using the <code>MaxItems</code> and <code>Marker</code> parameters. You can use the <code>PathPrefix</code> parameter to limit the list of policies to only those matching the specified path prefix. If there are no policies attached to the specified group (or none that match the specified path prefix), the action returns an empty list.</p>'
      responses:
        '200':
          description: Success
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ListAttachedUserPoliciesResponse'
        '480':
          description: NoSuchEntityException
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/NoSuchEntityException'
        '481':
          description: InvalidInputException
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/InvalidInputException'
        '482':
          description: ServiceFailureException
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ServiceFailureException'
      parameters:
        - name: MaxItems
          in: query
          description: Pagination limit
          required: false
          schema:
            type: string
        - name: Marker
          in: query
          description: Pagination token
          required: false
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ListAttachedUserPoliciesRequest'
        required: true
    parameters:
      - $ref: '#/components/parameters/Action'
      - $ref: '#/components/parameters/Version'
      - $ref: '#/components/parameters/X-Amz-Content-Sha256'
      - $ref: '#/components/parameters/X-Amz-Date'
      - $ref: '#/components/parameters/X-Amz-Algorithm'
      - $ref: '#/components/parameters/X-Amz-Credential'
      - $ref: '#/components/parameters/X-Amz-Security-Token'
      - $ref: '#/components/parameters/X-Amz-Signature'
      - $ref: '#/components/parameters/X-Amz-SignedHeaders'
  '/#ListEntitiesForPolicy':
    post:
      operationId: ListEntitiesForPolicy
      description: '<p>Lists all IAM users, groups, and roles that the specified managed policy is attached to.</p> <p>You can use the optional <code>EntityFilter</code> parameter to limit the results to a particular type of entity (users, groups, or roles). For example, to list only the roles that are attached to the specified policy, set <code>EntityFilter</code> to <code>Role</code>.</p> <p>You can paginate the results using the <code>MaxItems</code> and <code>Marker</code> parameters.</p>'
      responses:
        '200':
          description: Success
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ListEntitiesForPolicyResponse'
        '480':
          description: NoSuchEntityException
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/NoSuchEntityException'
        '481':
          description: InvalidInputException
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/InvalidInputException'
        '482':
          description: ServiceFailureException
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ServiceFailureException'
      parameters:
        - name: MaxItems
          in: query
          description: Pagination limit
          required: false
          schema:
            type: string
        - name: Marker
          in: query
          description: Pagination token
          required: false
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ListEntitiesForPolicyRequest'
        required: true
    parameters:
      - $ref: '#/components/parameters/Action'
      - $ref: '#/components/parameters/Version'
      - $ref: '#/components/parameters/X-Amz-Content-Sha256'
      - $ref: '#/components/parameters/X-Amz-Date'
      - $ref: '#/components/parameters/X-Amz-Algorithm'
      - $ref: '#/components/parameters/X-Amz-Credential'
      - $ref: '#/components/parameters/X-Amz-Security-Token'
      - $ref: '#/components/parameters/X-Amz-Signature'
      - $ref: '#/components/parameters/X-Amz-SignedHeaders'
  '/#ListGroupPolicies':
    post:
      operationId: ListGroupPolicies
      description: '<p>Lists the names of the inline policies that are embedded in the specified IAM group.</p> <p>An IAM group can also have managed policies attached to it. To list the managed policies that are attached to a group, use <a>ListAttachedGroupPolicies</a>. For more information about policies, see <a href="http://docs.aws.amazon.com/IAM/latest/UserGuide/policies-managed-vs-inline.html">Managed Policies and Inline Policies</a> in the <i>IAM User Guide</i>.</p> <p>You can paginate the results using the <code>MaxItems</code> and <code>Marker</code> parameters. If there are no inline policies embedded with the specified group, the action returns an empty list.</p>'
      responses:
        '200':
          description: Success
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ListGroupPoliciesResponse'
        '480':
          description: NoSuchEntityException
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/NoSuchEntityException'
        '481':
          description: ServiceFailureException
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ServiceFailureException'
      parameters:
        - name: MaxItems
          in: query
          description: Pagination limit
          required: false
          schema:
            type: string
        - name: Marker
          in: query
          description: Pagination token
          required: false
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ListGroupPoliciesRequest'
        required: true
    parameters:
      - $ref: '#/components/parameters/Action'
      - $ref: '#/components/parameters/Version'
      - $ref: '#/components/parameters/X-Amz-Content-Sha256'
      - $ref: '#/components/parameters/X-Amz-Date'
      - $ref: '#/components/parameters/X-Amz-Algorithm'
      - $ref: '#/components/parameters/X-Amz-Credential'
      - $ref: '#/components/parameters/X-Amz-Security-Token'
      - $ref: '#/components/parameters/X-Amz-Signature'
      - $ref: '#/components/parameters/X-Amz-SignedHeaders'
  '/#ListGroups':
    post:
      operationId: ListGroups
      description: <p>Lists the IAM groups that have the specified path prefix.</p> <p> You can paginate the results using the <code>MaxItems</code> and <code>Marker</code> parameters.</p>
      responses:
        '200':
          description: Success
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ListGroupsResponse'
        '480':
          description: ServiceFailureException
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ServiceFailureException'
      parameters:
        - name: MaxItems
          in: query
          description: Pagination limit
          required: false
          schema:
            type: string
        - name: Marker
          in: query
          description: Pagination token
          required: false
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ListGroupsRequest'
        required: true
    parameters:
      - $ref: '#/components/parameters/Action'
      - $ref: '#/components/parameters/Version'
      - $ref: '#/components/parameters/X-Amz-Content-Sha256'
      - $ref: '#/components/parameters/X-Amz-Date'
      - $ref: '#/components/parameters/X-Amz-Algorithm'
      - $ref: '#/components/parameters/X-Amz-Credential'
      - $ref: '#/components/parameters/X-Amz-Security-Token'
      - $ref: '#/components/parameters/X-Amz-Signature'
      - $ref: '#/components/parameters/X-Amz-SignedHeaders'
  '/#ListGroupsForUser':
    post:
      operationId: ListGroupsForUser
      description: <p>Lists the IAM groups that the specified IAM user belongs to.</p> <p>You can paginate the results using the <code>MaxItems</code> and <code>Marker</code> parameters.</p>
      responses:
        '200':
          description: Success
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ListGroupsForUserResponse'
        '480':
          description: NoSuchEntityException
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/NoSuchEntityException'
        '481':
          description: ServiceFailureException
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ServiceFailureException'
      parameters:
        - name: MaxItems
          in: query
          description: Pagination limit
          required: false
          schema:
            type: string
        - name: Marker
          in: query
          description: Pagination token
          required: false
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ListGroupsForUserRequest'
        required: true
    parameters:
      - $ref: '#/components/parameters/Action'
      - $ref: '#/components/parameters/Version'
      - $ref: '#/components/parameters/X-Amz-Content-Sha256'
      - $ref: '#/components/parameters/X-Amz-Date'
      - $ref: '#/components/parameters/X-Amz-Algorithm'
      - $ref: '#/components/parameters/X-Amz-Credential'
      - $ref: '#/components/parameters/X-Amz-Security-Token'
      - $ref: '#/components/parameters/X-Amz-Signature'
      - $ref: '#/components/parameters/X-Amz-SignedHeaders'
  '/#ListInstanceProfiles':
    post:
      operationId: ListInstanceProfiles
      description: '<p>Lists the instance profiles that have the specified path prefix. If there are none, the action returns an empty list. For more information about instance profiles, go to <a href="http://docs.aws.amazon.com/IAM/latest/UserGuide/AboutInstanceProfiles.html">About Instance Profiles</a>.</p> <p>You can paginate the results using the <code>MaxItems</code> and <code>Marker</code> parameters.</p>'
      responses:
        '200':
          description: Success
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ListInstanceProfilesResponse'
        '480':
          description: ServiceFailureException
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ServiceFailureException'
      parameters:
        - name: MaxItems
          in: query
          description: Pagination limit
          required: false
          schema:
            type: string
        - name: Marker
          in: query
          description: Pagination token
          required: false
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ListInstanceProfilesRequest'
        required: true
    parameters:
      - $ref: '#/components/parameters/Action'
      - $ref: '#/components/parameters/Version'
      - $ref: '#/components/parameters/X-Amz-Content-Sha256'
      - $ref: '#/components/parameters/X-Amz-Date'
      - $ref: '#/components/parameters/X-Amz-Algorithm'
      - $ref: '#/components/parameters/X-Amz-Credential'
      - $ref: '#/components/parameters/X-Amz-Security-Token'
      - $ref: '#/components/parameters/X-Amz-Signature'
      - $ref: '#/components/parameters/X-Amz-SignedHeaders'
  '/#ListInstanceProfilesForRole':
    post:
      operationId: ListInstanceProfilesForRole
      description: '<p>Lists the instance profiles that have the specified associated IAM role. If there are none, the action returns an empty list. For more information about instance profiles, go to <a href="http://docs.aws.amazon.com/IAM/latest/UserGuide/AboutInstanceProfiles.html">About Instance Profiles</a>.</p> <p>You can paginate the results using the <code>MaxItems</code> and <code>Marker</code> parameters.</p>'
      responses:
        '200':
          description: Success
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ListInstanceProfilesForRoleResponse'
        '480':
          description: NoSuchEntityException
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/NoSuchEntityException'
        '481':
          description: ServiceFailureException
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ServiceFailureException'
      parameters:
        - name: MaxItems
          in: query
          description: Pagination limit
          required: false
          schema:
            type: string
        - name: Marker
          in: query
          description: Pagination token
          required: false
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ListInstanceProfilesForRoleRequest'
        required: true
    parameters:
      - $ref: '#/components/parameters/Action'
      - $ref: '#/components/parameters/Version'
      - $ref: '#/components/parameters/X-Amz-Content-Sha256'
      - $ref: '#/components/parameters/X-Amz-Date'
      - $ref: '#/components/parameters/X-Amz-Algorithm'
      - $ref: '#/components/parameters/X-Amz-Credential'
      - $ref: '#/components/parameters/X-Amz-Security-Token'
      - $ref: '#/components/parameters/X-Amz-Signature'
      - $ref: '#/components/parameters/X-Amz-SignedHeaders'
  '/#ListMFADevices':
    post:
      operationId: ListMFADevices
      description: '<p>Lists the MFA devices for an IAM user. If the request includes a IAM user name, then this action lists all the MFA devices associated with the specified user. If you do not specify a user name, IAM determines the user name implicitly based on the AWS access key ID signing the request for this API.</p> <p>You can paginate the results using the <code>MaxItems</code> and <code>Marker</code> parameters.</p>'
      responses:
        '200':
          description: Success
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ListMFADevicesResponse'
        '480':
          description: NoSuchEntityException
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/NoSuchEntityException'
        '481':
          description: ServiceFailureException
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ServiceFailureException'
      parameters:
        - name: MaxItems
          in: query
          description: Pagination limit
          required: false
          schema:
            type: string
        - name: Marker
          in: query
          description: Pagination token
          required: false
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ListMFADevicesRequest'
        required: true
    parameters:
      - $ref: '#/components/parameters/Action'
      - $ref: '#/components/parameters/Version'
      - $ref: '#/components/parameters/X-Amz-Content-Sha256'
      - $ref: '#/components/parameters/X-Amz-Date'
      - $ref: '#/components/parameters/X-Amz-Algorithm'
      - $ref: '#/components/parameters/X-Amz-Credential'
      - $ref: '#/components/parameters/X-Amz-Security-Token'
      - $ref: '#/components/parameters/X-Amz-Signature'
      - $ref: '#/components/parameters/X-Amz-SignedHeaders'
  '/#ListOpenIDConnectProviders':
    post:
      operationId: ListOpenIDConnectProviders
      description: Lists information about the IAM OpenID Connect (OIDC) provider resource objects defined in the AWS account.
      responses:
        '200':
          description: Success
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ListOpenIDConnectProvidersResponse'
        '480':
          description: ServiceFailureException
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ServiceFailureException'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ListOpenIDConnectProvidersRequest'
        required: true
    parameters:
      - $ref: '#/components/parameters/Action'
      - $ref: '#/components/parameters/Version'
      - $ref: '#/components/parameters/X-Amz-Content-Sha256'
      - $ref: '#/components/parameters/X-Amz-Date'
      - $ref: '#/components/parameters/X-Amz-Algorithm'
      - $ref: '#/components/parameters/X-Amz-Credential'
      - $ref: '#/components/parameters/X-Amz-Security-Token'
      - $ref: '#/components/parameters/X-Amz-Signature'
      - $ref: '#/components/parameters/X-Amz-SignedHeaders'
  '/#ListPolicies':
    post:
      operationId: ListPolicies
      description: '<p>Lists all the managed policies that are available in your AWS account, including your own customer-defined managed policies and all AWS managed policies.</p> <p>You can filter the list of policies that is returned using the optional <code>OnlyAttached</code>, <code>Scope</code>, and <code>PathPrefix</code> parameters. For example, to list only the customer managed policies in your AWS account, set <code>Scope</code> to <code>Local</code>. To list only AWS managed policies, set <code>Scope</code> to <code>AWS</code>.</p> <p>You can paginate the results using the <code>MaxItems</code> and <code>Marker</code> parameters.</p> <p>For more information about managed policies, see <a href="http://docs.aws.amazon.com/IAM/latest/UserGuide/policies-managed-vs-inline.html">Managed Policies and Inline Policies</a> in the <i>IAM User Guide</i>.</p>'
      responses:
        '200':
          description: Success
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ListPoliciesResponse'
        '480':
          description: ServiceFailureException
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ServiceFailureException'
      parameters:
        - name: MaxItems
          in: query
          description: Pagination limit
          required: false
          schema:
            type: string
        - name: Marker
          in: query
          description: Pagination token
          required: false
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ListPoliciesRequest'
        required: true
    parameters:
      - $ref: '#/components/parameters/Action'
      - $ref: '#/components/parameters/Version'
      - $ref: '#/components/parameters/X-Amz-Content-Sha256'
      - $ref: '#/components/parameters/X-Amz-Date'
      - $ref: '#/components/parameters/X-Amz-Algorithm'
      - $ref: '#/components/parameters/X-Amz-Credential'
      - $ref: '#/components/parameters/X-Amz-Security-Token'
      - $ref: '#/components/parameters/X-Amz-Signature'
      - $ref: '#/components/parameters/X-Amz-SignedHeaders'
  '/#ListPolicyVersions':
    post:
      operationId: ListPolicyVersions
      description: '<p>Lists information about the versions of the specified managed policy, including the version that is currently set as the policy''s default version.</p> <p>For more information about managed policies, see <a href="http://docs.aws.amazon.com/IAM/latest/UserGuide/policies-managed-vs-inline.html">Managed Policies and Inline Policies</a> in the <i>IAM User Guide</i>.</p>'
      responses:
        '200':
          description: Success
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ListPolicyVersionsResponse'
        '480':
          description: NoSuchEntityException
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/NoSuchEntityException'
        '481':
          description: InvalidInputException
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/InvalidInputException'
        '482':
          description: ServiceFailureException
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ServiceFailureException'
      parameters:
        - name: MaxItems
          in: query
          description: Pagination limit
          required: false
          schema:
            type: string
        - name: Marker
          in: query
          description: Pagination token
          required: false
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ListPolicyVersionsRequest'
        required: true
    parameters:
      - $ref: '#/components/parameters/Action'
      - $ref: '#/components/parameters/Version'
      - $ref: '#/components/parameters/X-Amz-Content-Sha256'
      - $ref: '#/components/parameters/X-Amz-Date'
      - $ref: '#/components/parameters/X-Amz-Algorithm'
      - $ref: '#/components/parameters/X-Amz-Credential'
      - $ref: '#/components/parameters/X-Amz-Security-Token'
      - $ref: '#/components/parameters/X-Amz-Signature'
      - $ref: '#/components/parameters/X-Amz-SignedHeaders'
  '/#ListRolePolicies':
    post:
      operationId: ListRolePolicies
      description: '<p>Lists the names of the inline policies that are embedded in the specified IAM role.</p> <p>An IAM role can also have managed policies attached to it. To list the managed policies that are attached to a role, use <a>ListAttachedRolePolicies</a>. For more information about policies, see <a href="http://docs.aws.amazon.com/IAM/latest/UserGuide/policies-managed-vs-inline.html">Managed Policies and Inline Policies</a> in the <i>IAM User Guide</i>.</p> <p>You can paginate the results using the <code>MaxItems</code> and <code>Marker</code> parameters. If there are no inline policies embedded with the specified role, the action returns an empty list.</p>'
      responses:
        '200':
          description: Success
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ListRolePoliciesResponse'
        '480':
          description: NoSuchEntityException
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/NoSuchEntityException'
        '481':
          description: ServiceFailureException
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ServiceFailureException'
      parameters:
        - name: MaxItems
          in: query
          description: Pagination limit
          required: false
          schema:
            type: string
        - name: Marker
          in: query
          description: Pagination token
          required: false
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ListRolePoliciesRequest'
        required: true
    parameters:
      - $ref: '#/components/parameters/Action'
      - $ref: '#/components/parameters/Version'
      - $ref: '#/components/parameters/X-Amz-Content-Sha256'
      - $ref: '#/components/parameters/X-Amz-Date'
      - $ref: '#/components/parameters/X-Amz-Algorithm'
      - $ref: '#/components/parameters/X-Amz-Credential'
      - $ref: '#/components/parameters/X-Amz-Security-Token'
      - $ref: '#/components/parameters/X-Amz-Signature'
      - $ref: '#/components/parameters/X-Amz-SignedHeaders'
  '/#ListRoles':
    post:
      operationId: ListRoles
      description: '<p>Lists the IAM roles that have the specified path prefix. If there are none, the action returns an empty list. For more information about roles, go to <a href="http://docs.aws.amazon.com/IAM/latest/UserGuide/WorkingWithRoles.html">Working with Roles</a>.</p> <p>You can paginate the results using the <code>MaxItems</code> and <code>Marker</code> parameters.</p>'
      responses:
        '200':
          description: Success
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ListRolesResponse'
        '480':
          description: ServiceFailureException
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ServiceFailureException'
      parameters:
        - name: MaxItems
          in: query
          description: Pagination limit
          required: false
          schema:
            type: string
        - name: Marker
          in: query
          description: Pagination token
          required: false
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ListRolesRequest'
        required: true
    parameters:
      - $ref: '#/components/parameters/Action'
      - $ref: '#/components/parameters/Version'
      - $ref: '#/components/parameters/X-Amz-Content-Sha256'
      - $ref: '#/components/parameters/X-Amz-Date'
      - $ref: '#/components/parameters/X-Amz-Algorithm'
      - $ref: '#/components/parameters/X-Amz-Credential'
      - $ref: '#/components/parameters/X-Amz-Security-Token'
      - $ref: '#/components/parameters/X-Amz-Signature'
      - $ref: '#/components/parameters/X-Amz-SignedHeaders'
  '/#ListSAMLProviders':
    post:
      operationId: ListSAMLProviders
      description: '<p>Lists the SAML provider resource objects defined in IAM in the account.</p> <note> <p> This operation requires <a href="http://docs.aws.amazon.com/general/latest/gr/signature-version-4.html">Signature Version 4</a>.</p> </note>'
      responses:
        '200':
          description: Success
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ListSAMLProvidersResponse'
        '480':
          description: ServiceFailureException
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ServiceFailureException'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ListSAMLProvidersRequest'
        required: true
    parameters:
      - $ref: '#/components/parameters/Action'
      - $ref: '#/components/parameters/Version'
      - $ref: '#/components/parameters/X-Amz-Content-Sha256'
      - $ref: '#/components/parameters/X-Amz-Date'
      - $ref: '#/components/parameters/X-Amz-Algorithm'
      - $ref: '#/components/parameters/X-Amz-Credential'
      - $ref: '#/components/parameters/X-Amz-Security-Token'
      - $ref: '#/components/parameters/X-Amz-Signature'
      - $ref: '#/components/parameters/X-Amz-SignedHeaders'
  '/#ListSSHPublicKeys':
    post:
      operationId: ListSSHPublicKeys
      description: '<p>Returns information about the SSH public keys associated with the specified IAM user. If there are none, the action returns an empty list.</p> <p>The SSH public keys returned by this action are used only for authenticating the IAM user to an AWS CodeCommit repository. For more information about using SSH keys to authenticate to an AWS CodeCommit repository, see <a href="http://docs.aws.amazon.com/codecommit/latest/userguide/setting-up-credentials-ssh.html">Set up AWS CodeCommit for SSH Connections</a> in the <i>AWS CodeCommit User Guide</i>.</p> <p>Although each user is limited to a small number of keys, you can still paginate the results using the <code>MaxItems</code> and <code>Marker</code> parameters.</p>'
      responses:
        '200':
          description: Success
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ListSSHPublicKeysResponse'
        '480':
          description: NoSuchEntityException
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/NoSuchEntityException'
      parameters:
        - name: MaxItems
          in: query
          description: Pagination limit
          required: false
          schema:
            type: string
        - name: Marker
          in: query
          description: Pagination token
          required: false
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ListSSHPublicKeysRequest'
        required: true
    parameters:
      - $ref: '#/components/parameters/Action'
      - $ref: '#/components/parameters/Version'
      - $ref: '#/components/parameters/X-Amz-Content-Sha256'
      - $ref: '#/components/parameters/X-Amz-Date'
      - $ref: '#/components/parameters/X-Amz-Algorithm'
      - $ref: '#/components/parameters/X-Amz-Credential'
      - $ref: '#/components/parameters/X-Amz-Security-Token'
      - $ref: '#/components/parameters/X-Amz-Signature'
      - $ref: '#/components/parameters/X-Amz-SignedHeaders'
  '/#ListServerCertificates':
    post:
      operationId: ListServerCertificates
      description: '<p>Lists the server certificates stored in IAM that have the specified path prefix. If none exist, the action returns an empty list.</p> <p> You can paginate the results using the <code>MaxItems</code> and <code>Marker</code> parameters.</p> <p>For more information about working with server certificates, including a list of AWS services that can use the server certificates that you manage with IAM, go to <a href="http://docs.aws.amazon.com/IAM/latest/UserGuide/id_credentials_server-certs.html">Working with Server Certificates</a> in the <i>IAM User Guide</i>.</p>'
      responses:
        '200':
          description: Success
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ListServerCertificatesResponse'
        '480':
          description: ServiceFailureException
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ServiceFailureException'
      parameters:
        - name: MaxItems
          in: query
          description: Pagination limit
          required: false
          schema:
            type: string
        - name: Marker
          in: query
          description: Pagination token
          required: false
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ListServerCertificatesRequest'
        required: true
    parameters:
      - $ref: '#/components/parameters/Action'
      - $ref: '#/components/parameters/Version'
      - $ref: '#/components/parameters/X-Amz-Content-Sha256'
      - $ref: '#/components/parameters/X-Amz-Date'
      - $ref: '#/components/parameters/X-Amz-Algorithm'
      - $ref: '#/components/parameters/X-Amz-Credential'
      - $ref: '#/components/parameters/X-Amz-Security-Token'
      - $ref: '#/components/parameters/X-Amz-Signature'
      - $ref: '#/components/parameters/X-Amz-SignedHeaders'
  '/#ListServiceSpecificCredentials':
    post:
      operationId: ListServiceSpecificCredentials
      description: 'Returns information about the service-specific credentials associated with the specified IAM user. If there are none, the action returns an empty list. The service-specific credentials returned by this action are used only for authenticating the IAM user to a specific service. For more information about using service-specific credentials to authenticate to an AWS service, see <a href="http://docs.aws.amazon.com/codecommit/latest/userguide/setting-up-gc.html">Set Up service-specific credentials</a> in the AWS CodeCommit User Guide.'
      responses:
        '200':
          description: Success
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ListServiceSpecificCredentialsResponse'
        '480':
          description: NoSuchEntityException
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/NoSuchEntityException'
        '481':
          description: ServiceNotSupportedException
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ServiceNotSupportedException'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ListServiceSpecificCredentialsRequest'
        required: true
    parameters:
      - $ref: '#/components/parameters/Action'
      - $ref: '#/components/parameters/Version'
      - $ref: '#/components/parameters/X-Amz-Content-Sha256'
      - $ref: '#/components/parameters/X-Amz-Date'
      - $ref: '#/components/parameters/X-Amz-Algorithm'
      - $ref: '#/components/parameters/X-Amz-Credential'
      - $ref: '#/components/parameters/X-Amz-Security-Token'
      - $ref: '#/components/parameters/X-Amz-Signature'
      - $ref: '#/components/parameters/X-Amz-SignedHeaders'
  '/#ListSigningCertificates':
    post:
      operationId: ListSigningCertificates
      description: '<p>Returns information about the signing certificates associated with the specified IAM user. If there are none, the action returns an empty list.</p> <p>Although each user is limited to a small number of signing certificates, you can still paginate the results using the <code>MaxItems</code> and <code>Marker</code> parameters.</p> <p>If the <code>UserName</code> field is not specified, the user name is determined implicitly based on the AWS access key ID used to sign the request for this API. Because this action works for access keys under the AWS account, you can use this action to manage root credentials even if the AWS account has no associated users.</p>'
      responses:
        '200':
          description: Success
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ListSigningCertificatesResponse'
        '480':
          description: NoSuchEntityException
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/NoSuchEntityException'
        '481':
          description: ServiceFailureException
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ServiceFailureException'
      parameters:
        - name: MaxItems
          in: query
          description: Pagination limit
          required: false
          schema:
            type: string
        - name: Marker
          in: query
          description: Pagination token
          required: false
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ListSigningCertificatesRequest'
        required: true
    parameters:
      - $ref: '#/components/parameters/Action'
      - $ref: '#/components/parameters/Version'
      - $ref: '#/components/parameters/X-Amz-Content-Sha256'
      - $ref: '#/components/parameters/X-Amz-Date'
      - $ref: '#/components/parameters/X-Amz-Algorithm'
      - $ref: '#/components/parameters/X-Amz-Credential'
      - $ref: '#/components/parameters/X-Amz-Security-Token'
      - $ref: '#/components/parameters/X-Amz-Signature'
      - $ref: '#/components/parameters/X-Amz-SignedHeaders'
  '/#ListUserPolicies':
    post:
      operationId: ListUserPolicies
      description: '<p>Lists the names of the inline policies embedded in the specified IAM user.</p> <p>An IAM user can also have managed policies attached to it. To list the managed policies that are attached to a user, use <a>ListAttachedUserPolicies</a>. For more information about policies, see <a href="http://docs.aws.amazon.com/IAM/latest/UserGuide/policies-managed-vs-inline.html">Managed Policies and Inline Policies</a> in the <i>IAM User Guide</i>.</p> <p>You can paginate the results using the <code>MaxItems</code> and <code>Marker</code> parameters. If there are no inline policies embedded with the specified user, the action returns an empty list.</p>'
      responses:
        '200':
          description: Success
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ListUserPoliciesResponse'
        '480':
          description: NoSuchEntityException
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/NoSuchEntityException'
        '481':
          description: ServiceFailureException
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ServiceFailureException'
      parameters:
        - name: MaxItems
          in: query
          description: Pagination limit
          required: false
          schema:
            type: string
        - name: Marker
          in: query
          description: Pagination token
          required: false
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ListUserPoliciesRequest'
        required: true
    parameters:
      - $ref: '#/components/parameters/Action'
      - $ref: '#/components/parameters/Version'
      - $ref: '#/components/parameters/X-Amz-Content-Sha256'
      - $ref: '#/components/parameters/X-Amz-Date'
      - $ref: '#/components/parameters/X-Amz-Algorithm'
      - $ref: '#/components/parameters/X-Amz-Credential'
      - $ref: '#/components/parameters/X-Amz-Security-Token'
      - $ref: '#/components/parameters/X-Amz-Signature'
      - $ref: '#/components/parameters/X-Amz-SignedHeaders'
  '/#ListUsers':
    post:
      operationId: ListUsers
      description: '<p>Lists the IAM users that have the specified path prefix. If no path prefix is specified, the action returns all users in the AWS account. If there are none, the action returns an empty list.</p> <p>You can paginate the results using the <code>MaxItems</code> and <code>Marker</code> parameters.</p>'
      responses:
        '200':
          description: Success
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ListUsersResponse'
        '480':
          description: ServiceFailureException
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ServiceFailureException'
      parameters:
        - name: MaxItems
          in: query
          description: Pagination limit
          required: false
          schema:
            type: string
        - name: Marker
          in: query
          description: Pagination token
          required: false
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ListUsersRequest'
        required: true
    parameters:
      - $ref: '#/components/parameters/Action'
      - $ref: '#/components/parameters/Version'
      - $ref: '#/components/parameters/X-Amz-Content-Sha256'
      - $ref: '#/components/parameters/X-Amz-Date'
      - $ref: '#/components/parameters/X-Amz-Algorithm'
      - $ref: '#/components/parameters/X-Amz-Credential'
      - $ref: '#/components/parameters/X-Amz-Security-Token'
      - $ref: '#/components/parameters/X-Amz-Signature'
      - $ref: '#/components/parameters/X-Amz-SignedHeaders'
  '/#ListVirtualMFADevices':
    post:
      operationId: ListVirtualMFADevices
      description: '<p>Lists the virtual MFA devices defined in the AWS account by assignment status. If you do not specify an assignment status, the action returns a list of all virtual MFA devices. Assignment status can be <code>Assigned</code>, <code>Unassigned</code>, or <code>Any</code>.</p> <p>You can paginate the results using the <code>MaxItems</code> and <code>Marker</code> parameters.</p>'
      responses:
        '200':
          description: Success
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ListVirtualMFADevicesResponse'
      parameters:
        - name: MaxItems
          in: query
          description: Pagination limit
          required: false
          schema:
            type: string
        - name: Marker
          in: query
          description: Pagination token
          required: false
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ListVirtualMFADevicesRequest'
        required: true
    parameters:
      - $ref: '#/components/parameters/Action'
      - $ref: '#/components/parameters/Version'
      - $ref: '#/components/parameters/X-Amz-Content-Sha256'
      - $ref: '#/components/parameters/X-Amz-Date'
      - $ref: '#/components/parameters/X-Amz-Algorithm'
      - $ref: '#/components/parameters/X-Amz-Credential'
      - $ref: '#/components/parameters/X-Amz-Security-Token'
      - $ref: '#/components/parameters/X-Amz-Signature'
      - $ref: '#/components/parameters/X-Amz-SignedHeaders'
  '/#PutGroupPolicy':
    post:
      operationId: PutGroupPolicy
      description: '<p>Adds or updates an inline policy document that is embedded in the specified IAM group.</p> <p>A user can also have managed policies attached to it. To attach a managed policy to a group, use <a>AttachGroupPolicy</a>. To create a new managed policy, use <a>CreatePolicy</a>. For information about policies, see <a href="http://docs.aws.amazon.com/IAM/latest/UserGuide/policies-managed-vs-inline.html">Managed Policies and Inline Policies</a> in the <i>IAM User Guide</i>.</p> <p>For information about limits on the number of inline policies that you can embed in a group, see <a href="http://docs.aws.amazon.com/IAM/latest/UserGuide/LimitationsOnEntities.html">Limitations on IAM Entities</a> in the <i>IAM User Guide</i>.</p> <note> <p>Because policy documents can be large, you should use POST rather than GET when calling <code>PutGroupPolicy</code>. For general information about using the Query API with IAM, go to <a href="http://docs.aws.amazon.com/IAM/latest/UserGuide/IAM_UsingQueryAPI.html">Making Query Requests</a> in the <i>IAM User Guide</i>.</p> </note>'
      responses:
        '200':
          description: Success
        '480':
          description: LimitExceededException
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/LimitExceededException'
        '481':
          description: MalformedPolicyDocumentException
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/MalformedPolicyDocumentException'
        '482':
          description: NoSuchEntityException
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/NoSuchEntityException'
        '483':
          description: ServiceFailureException
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ServiceFailureException'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PutGroupPolicyRequest'
        required: true
    parameters:
      - $ref: '#/components/parameters/Action'
      - $ref: '#/components/parameters/Version'
      - $ref: '#/components/parameters/X-Amz-Content-Sha256'
      - $ref: '#/components/parameters/X-Amz-Date'
      - $ref: '#/components/parameters/X-Amz-Algorithm'
      - $ref: '#/components/parameters/X-Amz-Credential'
      - $ref: '#/components/parameters/X-Amz-Security-Token'
      - $ref: '#/components/parameters/X-Amz-Signature'
      - $ref: '#/components/parameters/X-Amz-SignedHeaders'
  '/#PutRolePolicy':
    post:
      operationId: PutRolePolicy
      description: '<p>Adds or updates an inline policy document that is embedded in the specified IAM role.</p> <p>When you embed an inline policy in a role, the inline policy is used as part of the role''s access (permissions) policy. The role''s trust policy is created at the same time as the role, using <a>CreateRole</a>. You can update a role''s trust policy using <a>UpdateAssumeRolePolicy</a>. For more information about IAM roles, go to <a href="http://docs.aws.amazon.com/IAM/latest/UserGuide/roles-toplevel.html">Using Roles to Delegate Permissions and Federate Identities</a>.</p> <p>A role can also have a managed policy attached to it. To attach a managed policy to a role, use <a>AttachRolePolicy</a>. To create a new managed policy, use <a>CreatePolicy</a>. For information about policies, see <a href="http://docs.aws.amazon.com/IAM/latest/UserGuide/policies-managed-vs-inline.html">Managed Policies and Inline Policies</a> in the <i>IAM User Guide</i>.</p> <p>For information about limits on the number of inline policies that you can embed with a role, see <a href="http://docs.aws.amazon.com/IAM/latest/UserGuide/LimitationsOnEntities.html">Limitations on IAM Entities</a> in the <i>IAM User Guide</i>.</p> <note> <p>Because policy documents can be large, you should use POST rather than GET when calling <code>PutRolePolicy</code>. For general information about using the Query API with IAM, go to <a href="http://docs.aws.amazon.com/IAM/latest/UserGuide/IAM_UsingQueryAPI.html">Making Query Requests</a> in the <i>IAM User Guide</i>.</p> </note>'
      responses:
        '200':
          description: Success
        '480':
          description: LimitExceededException
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/LimitExceededException'
        '481':
          description: MalformedPolicyDocumentException
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/MalformedPolicyDocumentException'
        '482':
          description: NoSuchEntityException
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/NoSuchEntityException'
        '483':
          description: UnmodifiableEntityException
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/UnmodifiableEntityException'
        '484':
          description: ServiceFailureException
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ServiceFailureException'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PutRolePolicyRequest'
        required: true
    parameters:
      - $ref: '#/components/parameters/Action'
      - $ref: '#/components/parameters/Version'
      - $ref: '#/components/parameters/X-Amz-Content-Sha256'
      - $ref: '#/components/parameters/X-Amz-Date'
      - $ref: '#/components/parameters/X-Amz-Algorithm'
      - $ref: '#/components/parameters/X-Amz-Credential'
      - $ref: '#/components/parameters/X-Amz-Security-Token'
      - $ref: '#/components/parameters/X-Amz-Signature'
      - $ref: '#/components/parameters/X-Amz-SignedHeaders'
  '/#PutUserPolicy':
    post:
      operationId: PutUserPolicy
      description: '<p>Adds or updates an inline policy document that is embedded in the specified IAM user.</p> <p>An IAM user can also have a managed policy attached to it. To attach a managed policy to a user, use <a>AttachUserPolicy</a>. To create a new managed policy, use <a>CreatePolicy</a>. For information about policies, see <a href="http://docs.aws.amazon.com/IAM/latest/UserGuide/policies-managed-vs-inline.html">Managed Policies and Inline Policies</a> in the <i>IAM User Guide</i>.</p> <p>For information about limits on the number of inline policies that you can embed in a user, see <a href="http://docs.aws.amazon.com/IAM/latest/UserGuide/LimitationsOnEntities.html">Limitations on IAM Entities</a> in the <i>IAM User Guide</i>.</p> <note> <p>Because policy documents can be large, you should use POST rather than GET when calling <code>PutUserPolicy</code>. For general information about using the Query API with IAM, go to <a href="http://docs.aws.amazon.com/IAM/latest/UserGuide/IAM_UsingQueryAPI.html">Making Query Requests</a> in the <i>IAM User Guide</i>.</p> </note>'
      responses:
        '200':
          description: Success
        '480':
          description: LimitExceededException
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/LimitExceededException'
        '481':
          description: MalformedPolicyDocumentException
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/MalformedPolicyDocumentException'
        '482':
          description: NoSuchEntityException
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/NoSuchEntityException'
        '483':
          description: ServiceFailureException
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ServiceFailureException'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PutUserPolicyRequest'
        required: true
    parameters:
      - $ref: '#/components/parameters/Action'
      - $ref: '#/components/parameters/Version'
      - $ref: '#/components/parameters/X-Amz-Content-Sha256'
      - $ref: '#/components/parameters/X-Amz-Date'
      - $ref: '#/components/parameters/X-Amz-Algorithm'
      - $ref: '#/components/parameters/X-Amz-Credential'
      - $ref: '#/components/parameters/X-Amz-Security-Token'
      - $ref: '#/components/parameters/X-Amz-Signature'
      - $ref: '#/components/parameters/X-Amz-SignedHeaders'
  '/#RemoveClientIDFromOpenIDConnectProvider':
    post:
      operationId: RemoveClientIDFromOpenIDConnectProvider
      description: <p>Removes the specified client ID (also known as audience) from the list of client IDs registered for the specified IAM OpenID Connect (OIDC) provider resource object.</p> <p>This action is idempotent; it does not fail or return an error if you try to remove a client ID that does not exist.</p>
      responses:
        '200':
          description: Success
        '480':
          description: InvalidInputException
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/InvalidInputException'
        '481':
          description: NoSuchEntityException
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/NoSuchEntityException'
        '482':
          description: ServiceFailureException
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ServiceFailureException'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RemoveClientIDFromOpenIDConnectProviderRequest'
        required: true
    parameters:
      - $ref: '#/components/parameters/Action'
      - $ref: '#/components/parameters/Version'
      - $ref: '#/components/parameters/X-Amz-Content-Sha256'
      - $ref: '#/components/parameters/X-Amz-Date'
      - $ref: '#/components/parameters/X-Amz-Algorithm'
      - $ref: '#/components/parameters/X-Amz-Credential'
      - $ref: '#/components/parameters/X-Amz-Security-Token'
      - $ref: '#/components/parameters/X-Amz-Signature'
      - $ref: '#/components/parameters/X-Amz-SignedHeaders'
  '/#RemoveRoleFromInstanceProfile':
    post:
      operationId: RemoveRoleFromInstanceProfile
      description: '<p>Removes the specified IAM role from the specified EC2 instance profile.</p> <important> <p>Make sure you do not have any Amazon EC2 instances running with the role you are about to remove from the instance profile. Removing a role from an instance profile that is associated with a running instance might break any applications running on the instance.</p> </important> <p> For more information about IAM roles, go to <a href="http://docs.aws.amazon.com/IAM/latest/UserGuide/WorkingWithRoles.html">Working with Roles</a>. For more information about instance profiles, go to <a href="http://docs.aws.amazon.com/IAM/latest/UserGuide/AboutInstanceProfiles.html">About Instance Profiles</a>.</p>'
      responses:
        '200':
          description: Success
        '480':
          description: NoSuchEntityException
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/NoSuchEntityException'
        '481':
          description: LimitExceededException
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/LimitExceededException'
        '482':
          description: UnmodifiableEntityException
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/UnmodifiableEntityException'
        '483':
          description: ServiceFailureException
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ServiceFailureException'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RemoveRoleFromInstanceProfileRequest'
        required: true
    parameters:
      - $ref: '#/components/parameters/Action'
      - $ref: '#/components/parameters/Version'
      - $ref: '#/components/parameters/X-Amz-Content-Sha256'
      - $ref: '#/components/parameters/X-Amz-Date'
      - $ref: '#/components/parameters/X-Amz-Algorithm'
      - $ref: '#/components/parameters/X-Amz-Credential'
      - $ref: '#/components/parameters/X-Amz-Security-Token'
      - $ref: '#/components/parameters/X-Amz-Signature'
      - $ref: '#/components/parameters/X-Amz-SignedHeaders'
  '/#RemoveUserFromGroup':
    post:
      operationId: RemoveUserFromGroup
      description: Removes the specified user from the specified group.
      responses:
        '200':
          description: Success
        '480':
          description: NoSuchEntityException
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/NoSuchEntityException'
        '481':
          description: LimitExceededException
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/LimitExceededException'
        '482':
          description: ServiceFailureException
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ServiceFailureException'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RemoveUserFromGroupRequest'
        required: true
    parameters:
      - $ref: '#/components/parameters/Action'
      - $ref: '#/components/parameters/Version'
      - $ref: '#/components/parameters/X-Amz-Content-Sha256'
      - $ref: '#/components/parameters/X-Amz-Date'
      - $ref: '#/components/parameters/X-Amz-Algorithm'
      - $ref: '#/components/parameters/X-Amz-Credential'
      - $ref: '#/components/parameters/X-Amz-Security-Token'
      - $ref: '#/components/parameters/X-Amz-Signature'
      - $ref: '#/components/parameters/X-Amz-SignedHeaders'
  '/#ResetServiceSpecificCredential':
    post:
      operationId: ResetServiceSpecificCredential
      description: Resets the password for a service-specific credential. The new password is AWS generated and cryptographically strong. It cannot be configured by the user. Resetting the password immediately invalidates the previous password associated with this user.
      responses:
        '200':
          description: Success
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ResetServiceSpecificCredentialResponse'
        '480':
          description: NoSuchEntityException
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/NoSuchEntityException'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ResetServiceSpecificCredentialRequest'
        required: true
    parameters:
      - $ref: '#/components/parameters/Action'
      - $ref: '#/components/parameters/Version'
      - $ref: '#/components/parameters/X-Amz-Content-Sha256'
      - $ref: '#/components/parameters/X-Amz-Date'
      - $ref: '#/components/parameters/X-Amz-Algorithm'
      - $ref: '#/components/parameters/X-Amz-Credential'
      - $ref: '#/components/parameters/X-Amz-Security-Token'
      - $ref: '#/components/parameters/X-Amz-Signature'
      - $ref: '#/components/parameters/X-Amz-SignedHeaders'
  '/#ResyncMFADevice':
    post:
      operationId: ResyncMFADevice
      description: '<p>Synchronizes the specified MFA device with its IAM resource object on the AWS servers.</p> <p>For more information about creating and working with virtual MFA devices, go to <a href="http://docs.aws.amazon.com/IAM/latest/UserGuide/Using_VirtualMFA.html">Using a Virtual MFA Device</a> in the <i>IAM User Guide</i>.</p>'
      responses:
        '200':
          description: Success
        '480':
          description: InvalidAuthenticationCodeException
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/InvalidAuthenticationCodeException'
        '481':
          description: NoSuchEntityException
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/NoSuchEntityException'
        '482':
          description: LimitExceededException
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/LimitExceededException'
        '483':
          description: ServiceFailureException
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ServiceFailureException'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ResyncMFADeviceRequest'
        required: true
    parameters:
      - $ref: '#/components/parameters/Action'
      - $ref: '#/components/parameters/Version'
      - $ref: '#/components/parameters/X-Amz-Content-Sha256'
      - $ref: '#/components/parameters/X-Amz-Date'
      - $ref: '#/components/parameters/X-Amz-Algorithm'
      - $ref: '#/components/parameters/X-Amz-Credential'
      - $ref: '#/components/parameters/X-Amz-Security-Token'
      - $ref: '#/components/parameters/X-Amz-Signature'
      - $ref: '#/components/parameters/X-Amz-SignedHeaders'
  '/#SetDefaultPolicyVersion':
    post:
      operationId: SetDefaultPolicyVersion
      description: '<p>Sets the specified version of the specified policy as the policy''s default (operative) version.</p> <p>This action affects all users, groups, and roles that the policy is attached to. To list the users, groups, and roles that the policy is attached to, use the <a>ListEntitiesForPolicy</a> API.</p> <p>For information about managed policies, see <a href="http://docs.aws.amazon.com/IAM/latest/UserGuide/policies-managed-vs-inline.html">Managed Policies and Inline Policies</a> in the <i>IAM User Guide</i>.</p>'
      responses:
        '200':
          description: Success
        '480':
          description: NoSuchEntityException
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/NoSuchEntityException'
        '481':
          description: InvalidInputException
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/InvalidInputException'
        '482':
          description: LimitExceededException
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/LimitExceededException'
        '483':
          description: ServiceFailureException
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ServiceFailureException'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SetDefaultPolicyVersionRequest'
        required: true
    parameters:
      - $ref: '#/components/parameters/Action'
      - $ref: '#/components/parameters/Version'
      - $ref: '#/components/parameters/X-Amz-Content-Sha256'
      - $ref: '#/components/parameters/X-Amz-Date'
      - $ref: '#/components/parameters/X-Amz-Algorithm'
      - $ref: '#/components/parameters/X-Amz-Credential'
      - $ref: '#/components/parameters/X-Amz-Security-Token'
      - $ref: '#/components/parameters/X-Amz-Signature'
      - $ref: '#/components/parameters/X-Amz-SignedHeaders'
  '/#SimulateCustomPolicy':
    post:
      operationId: SimulateCustomPolicy
      description: '<p>Simulate how a set of IAM policies and optionally a resource-based policy works with a list of API actions and AWS resources to determine the policies'' effective permissions. The policies are provided as strings.</p> <p>The simulation does not perform the API actions; it only checks the authorization to determine if the simulated policies allow or deny the actions.</p> <p>If you want to simulate existing policies attached to an IAM user, group, or role, use <a>SimulatePrincipalPolicy</a> instead.</p> <p>Context keys are variables maintained by AWS and its services that provide details about the context of an API query request. You can use the <code>Condition</code> element of an IAM policy to evaluate context keys. To get the list of context keys that the policies require for correct simulation, use <a>GetContextKeysForCustomPolicy</a>.</p> <p>If the output is long, you can use <code>MaxItems</code> and <code>Marker</code> parameters to paginate the results.</p>'
      responses:
        '200':
          description: Success
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/SimulatePolicyResponse'
        '480':
          description: InvalidInputException
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/InvalidInputException'
        '481':
          description: PolicyEvaluationException
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/PolicyEvaluationException'
      parameters:
        - name: MaxItems
          in: query
          description: Pagination limit
          required: false
          schema:
            type: string
        - name: Marker
          in: query
          description: Pagination token
          required: false
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SimulateCustomPolicyRequest'
        required: true
    parameters:
      - $ref: '#/components/parameters/Action'
      - $ref: '#/components/parameters/Version'
      - $ref: '#/components/parameters/X-Amz-Content-Sha256'
      - $ref: '#/components/parameters/X-Amz-Date'
      - $ref: '#/components/parameters/X-Amz-Algorithm'
      - $ref: '#/components/parameters/X-Amz-Credential'
      - $ref: '#/components/parameters/X-Amz-Security-Token'
      - $ref: '#/components/parameters/X-Amz-Signature'
      - $ref: '#/components/parameters/X-Amz-SignedHeaders'
  '/#SimulatePrincipalPolicy':
    post:
      operationId: SimulatePrincipalPolicy
      description: '<p>Simulate how a set of IAM policies attached to an IAM entity works with a list of API actions and AWS resources to determine the policies'' effective permissions. The entity can be an IAM user, group, or role. If you specify a user, then the simulation also includes all of the policies that are attached to groups that the user belongs to .</p> <p>You can optionally include a list of one or more additional policies specified as strings to include in the simulation. If you want to simulate only policies specified as strings, use <a>SimulateCustomPolicy</a> instead.</p> <p>You can also optionally include one resource-based policy to be evaluated with each of the resources included in the simulation.</p> <p>The simulation does not perform the API actions, it only checks the authorization to determine if the simulated policies allow or deny the actions.</p> <p> <b>Note:</b> This API discloses information about the permissions granted to other users. If you do not want users to see other user''s permissions, then consider allowing them to use <a>SimulateCustomPolicy</a> instead.</p> <p>Context keys are variables maintained by AWS and its services that provide details about the context of an API query request. You can use the <code>Condition</code> element of an IAM policy to evaluate context keys. To get the list of context keys that the policies require for correct simulation, use <a>GetContextKeysForPrincipalPolicy</a>.</p> <p>If the output is long, you can use the <code>MaxItems</code> and <code>Marker</code> parameters to paginate the results.</p>'
      responses:
        '200':
          description: Success
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/SimulatePolicyResponse'
        '480':
          description: NoSuchEntityException
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/NoSuchEntityException'
        '481':
          description: InvalidInputException
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/InvalidInputException'
        '482':
          description: PolicyEvaluationException
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/PolicyEvaluationException'
      parameters:
        - name: MaxItems
          in: query
          description: Pagination limit
          required: false
          schema:
            type: string
        - name: Marker
          in: query
          description: Pagination token
          required: false
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SimulatePrincipalPolicyRequest'
        required: true
    parameters:
      - $ref: '#/components/parameters/Action'
      - $ref: '#/components/parameters/Version'
      - $ref: '#/components/parameters/X-Amz-Content-Sha256'
      - $ref: '#/components/parameters/X-Amz-Date'
      - $ref: '#/components/parameters/X-Amz-Algorithm'
      - $ref: '#/components/parameters/X-Amz-Credential'
      - $ref: '#/components/parameters/X-Amz-Security-Token'
      - $ref: '#/components/parameters/X-Amz-Signature'
      - $ref: '#/components/parameters/X-Amz-SignedHeaders'
  '/#UpdateAccessKey':
    post:
      operationId: UpdateAccessKey
      description: '<p>Changes the status of the specified access key from Active to Inactive, or vice versa. This action can be used to disable a user''s key as part of a key rotation work flow.</p> <p>If the <code>UserName</code> field is not specified, the UserName is determined implicitly based on the AWS access key ID used to sign the request. Because this action works for access keys under the AWS account, you can use this action to manage root credentials even if the AWS account has no associated users.</p> <p>For information about rotating keys, see <a href="http://docs.aws.amazon.com/IAM/latest/UserGuide/ManagingCredentials.html">Managing Keys and Certificates</a> in the <i>IAM User Guide</i>.</p>'
      responses:
        '200':
          description: Success
        '480':
          description: NoSuchEntityException
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/NoSuchEntityException'
        '481':
          description: LimitExceededException
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/LimitExceededException'
        '482':
          description: ServiceFailureException
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ServiceFailureException'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateAccessKeyRequest'
        required: true
    parameters:
      - $ref: '#/components/parameters/Action'
      - $ref: '#/components/parameters/Version'
      - $ref: '#/components/parameters/X-Amz-Content-Sha256'
      - $ref: '#/components/parameters/X-Amz-Date'
      - $ref: '#/components/parameters/X-Amz-Algorithm'
      - $ref: '#/components/parameters/X-Amz-Credential'
      - $ref: '#/components/parameters/X-Amz-Security-Token'
      - $ref: '#/components/parameters/X-Amz-Signature'
      - $ref: '#/components/parameters/X-Amz-SignedHeaders'
  '/#UpdateAccountPasswordPolicy':
    post:
      operationId: UpdateAccountPasswordPolicy
      description: '<p>Updates the password policy settings for the AWS account.</p> <note> <p>This action does not support partial updates. No parameters are required, but if you do not specify a parameter, that parameter''s value reverts to its default value. See the <b>Request Parameters</b> section for each parameter''s default value.</p> </note> <p> For more information about using a password policy, see <a href="http://docs.aws.amazon.com/IAM/latest/UserGuide/Using_ManagingPasswordPolicies.html">Managing an IAM Password Policy</a> in the <i>IAM User Guide</i>.</p>'
      responses:
        '200':
          description: Success
        '480':
          description: NoSuchEntityException
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/NoSuchEntityException'
        '481':
          description: MalformedPolicyDocumentException
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/MalformedPolicyDocumentException'
        '482':
          description: LimitExceededException
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/LimitExceededException'
        '483':
          description: ServiceFailureException
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ServiceFailureException'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateAccountPasswordPolicyRequest'
        required: true
    parameters:
      - $ref: '#/components/parameters/Action'
      - $ref: '#/components/parameters/Version'
      - $ref: '#/components/parameters/X-Amz-Content-Sha256'
      - $ref: '#/components/parameters/X-Amz-Date'
      - $ref: '#/components/parameters/X-Amz-Algorithm'
      - $ref: '#/components/parameters/X-Amz-Credential'
      - $ref: '#/components/parameters/X-Amz-Security-Token'
      - $ref: '#/components/parameters/X-Amz-Signature'
      - $ref: '#/components/parameters/X-Amz-SignedHeaders'
  '/#UpdateAssumeRolePolicy':
    post:
      operationId: UpdateAssumeRolePolicy
      description: 'Updates the policy that grants an IAM entity permission to assume a role. This is typically referred to as the "role trust policy". For more information about roles, go to <a href="http://docs.aws.amazon.com/IAM/latest/UserGuide/roles-toplevel.html">Using Roles to Delegate Permissions and Federate Identities</a>.'
      responses:
        '200':
          description: Success
        '480':
          description: NoSuchEntityException
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/NoSuchEntityException'
        '481':
          description: MalformedPolicyDocumentException
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/MalformedPolicyDocumentException'
        '482':
          description: LimitExceededException
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/LimitExceededException'
        '483':
          description: UnmodifiableEntityException
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/UnmodifiableEntityException'
        '484':
          description: ServiceFailureException
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ServiceFailureException'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateAssumeRolePolicyRequest'
        required: true
    parameters:
      - $ref: '#/components/parameters/Action'
      - $ref: '#/components/parameters/Version'
      - $ref: '#/components/parameters/X-Amz-Content-Sha256'
      - $ref: '#/components/parameters/X-Amz-Date'
      - $ref: '#/components/parameters/X-Amz-Algorithm'
      - $ref: '#/components/parameters/X-Amz-Credential'
      - $ref: '#/components/parameters/X-Amz-Security-Token'
      - $ref: '#/components/parameters/X-Amz-Signature'
      - $ref: '#/components/parameters/X-Amz-SignedHeaders'
  '/#UpdateGroup':
    post:
      operationId: UpdateGroup
      description: '<p>Updates the name and/or the path of the specified IAM group.</p> <important> <p> You should understand the implications of changing a group''s path or name. For more information, see <a href="http://docs.aws.amazon.com/IAM/latest/UserGuide/Using_WorkingWithGroupsAndUsers.html">Renaming Users and Groups</a> in the <i>IAM User Guide</i>.</p> </important> <note> <p>To change an IAM group name the requester must have appropriate permissions on both the source object and the target object. For example, to change "Managers" to "MGRs", the entity making the request must have permission on both "Managers" and "MGRs", or must have permission on all (*). For more information about permissions, see <a href="http://docs.aws.amazon.com/IAM/latest/UserGuide/PermissionsAndPolicies.html">Permissions and Policies</a>. </p> </note>'
      responses:
        '200':
          description: Success
        '480':
          description: NoSuchEntityException
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/NoSuchEntityException'
        '481':
          description: EntityAlreadyExistsException
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/EntityAlreadyExistsException'
        '482':
          description: LimitExceededException
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/LimitExceededException'
        '483':
          description: ServiceFailureException
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ServiceFailureException'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateGroupRequest'
        required: true
    parameters:
      - $ref: '#/components/parameters/Action'
      - $ref: '#/components/parameters/Version'
      - $ref: '#/components/parameters/X-Amz-Content-Sha256'
      - $ref: '#/components/parameters/X-Amz-Date'
      - $ref: '#/components/parameters/X-Amz-Algorithm'
      - $ref: '#/components/parameters/X-Amz-Credential'
      - $ref: '#/components/parameters/X-Amz-Security-Token'
      - $ref: '#/components/parameters/X-Amz-Signature'
      - $ref: '#/components/parameters/X-Amz-SignedHeaders'
  '/#UpdateLoginProfile':
    post:
      operationId: UpdateLoginProfile
      description: '<p>Changes the password for the specified IAM user.</p> <p>IAM users can change their own passwords by calling <a>ChangePassword</a>. For more information about modifying passwords, see <a href="http://docs.aws.amazon.com/IAM/latest/UserGuide/Using_ManagingLogins.html">Managing Passwords</a> in the <i>IAM User Guide</i>.</p>'
      responses:
        '200':
          description: Success
        '480':
          description: EntityTemporarilyUnmodifiableException
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/EntityTemporarilyUnmodifiableException'
        '481':
          description: NoSuchEntityException
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/NoSuchEntityException'
        '482':
          description: PasswordPolicyViolationException
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/PasswordPolicyViolationException'
        '483':
          description: LimitExceededException
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/LimitExceededException'
        '484':
          description: ServiceFailureException
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ServiceFailureException'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateLoginProfileRequest'
        required: true
    parameters:
      - $ref: '#/components/parameters/Action'
      - $ref: '#/components/parameters/Version'
      - $ref: '#/components/parameters/X-Amz-Content-Sha256'
      - $ref: '#/components/parameters/X-Amz-Date'
      - $ref: '#/components/parameters/X-Amz-Algorithm'
      - $ref: '#/components/parameters/X-Amz-Credential'
      - $ref: '#/components/parameters/X-Amz-Security-Token'
      - $ref: '#/components/parameters/X-Amz-Signature'
      - $ref: '#/components/parameters/X-Amz-SignedHeaders'
  '/#UpdateOpenIDConnectProviderThumbprint':
    post:
      operationId: UpdateOpenIDConnectProviderThumbprint
      description: '<p>Replaces the existing list of server certificate thumbprints associated with an OpenID Connect (OIDC) provider resource object with a new list of thumbprints.</p> <p>The list that you pass with this action completely replaces the existing list of thumbprints. (The lists are not merged.)</p> <p>Typically, you need to update a thumbprint only when the identity provider''s certificate changes, which occurs rarely. However, if the provider''s certificate <i>does</i> change, any attempt to assume an IAM role that specifies the OIDC provider as a principal fails until the certificate thumbprint is updated.</p> <note> <p>Because trust for the OIDC provider is ultimately derived from the provider''s certificate and is validated by the thumbprint, it is a best practice to limit access to the <code>UpdateOpenIDConnectProviderThumbprint</code> action to highly-privileged users.</p> </note>'
      responses:
        '200':
          description: Success
        '480':
          description: InvalidInputException
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/InvalidInputException'
        '481':
          description: NoSuchEntityException
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/NoSuchEntityException'
        '482':
          description: ServiceFailureException
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ServiceFailureException'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateOpenIDConnectProviderThumbprintRequest'
        required: true
    parameters:
      - $ref: '#/components/parameters/Action'
      - $ref: '#/components/parameters/Version'
      - $ref: '#/components/parameters/X-Amz-Content-Sha256'
      - $ref: '#/components/parameters/X-Amz-Date'
      - $ref: '#/components/parameters/X-Amz-Algorithm'
      - $ref: '#/components/parameters/X-Amz-Credential'
      - $ref: '#/components/parameters/X-Amz-Security-Token'
      - $ref: '#/components/parameters/X-Amz-Signature'
      - $ref: '#/components/parameters/X-Amz-SignedHeaders'
  '/#UpdateRoleDescription':
    post:
      operationId: UpdateRoleDescription
      description: Modifies the description of a role.
      responses:
        '200':
          description: Success
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/UpdateRoleDescriptionResponse'
        '480':
          description: NoSuchEntityException
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/NoSuchEntityException'
        '481':
          description: UnmodifiableEntityException
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/UnmodifiableEntityException'
        '482':
          description: ServiceFailureException
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ServiceFailureException'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateRoleDescriptionRequest'
        required: true
    parameters:
      - $ref: '#/components/parameters/Action'
      - $ref: '#/components/parameters/Version'
      - $ref: '#/components/parameters/X-Amz-Content-Sha256'
      - $ref: '#/components/parameters/X-Amz-Date'
      - $ref: '#/components/parameters/X-Amz-Algorithm'
      - $ref: '#/components/parameters/X-Amz-Credential'
      - $ref: '#/components/parameters/X-Amz-Security-Token'
      - $ref: '#/components/parameters/X-Amz-Signature'
      - $ref: '#/components/parameters/X-Amz-SignedHeaders'
  '/#UpdateSAMLProvider':
    post:
      operationId: UpdateSAMLProvider
      description: '<p>Updates the metadata document for an existing SAML provider resource object.</p> <note> <p>This operation requires <a href="http://docs.aws.amazon.com/general/latest/gr/signature-version-4.html">Signature Version 4</a>.</p> </note>'
      responses:
        '200':
          description: Success
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/UpdateSAMLProviderResponse'
        '480':
          description: NoSuchEntityException
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/NoSuchEntityException'
        '481':
          description: InvalidInputException
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/InvalidInputException'
        '482':
          description: LimitExceededException
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/LimitExceededException'
        '483':
          description: ServiceFailureException
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ServiceFailureException'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateSAMLProviderRequest'
        required: true
    parameters:
      - $ref: '#/components/parameters/Action'
      - $ref: '#/components/parameters/Version'
      - $ref: '#/components/parameters/X-Amz-Content-Sha256'
      - $ref: '#/components/parameters/X-Amz-Date'
      - $ref: '#/components/parameters/X-Amz-Algorithm'
      - $ref: '#/components/parameters/X-Amz-Credential'
      - $ref: '#/components/parameters/X-Amz-Security-Token'
      - $ref: '#/components/parameters/X-Amz-Signature'
      - $ref: '#/components/parameters/X-Amz-SignedHeaders'
  '/#UpdateSSHPublicKey':
    post:
      operationId: UpdateSSHPublicKey
      description: '<p>Sets the status of an IAM user''s SSH public key to active or inactive. SSH public keys that are inactive cannot be used for authentication. This action can be used to disable a user''s SSH public key as part of a key rotation work flow.</p> <p>The SSH public key affected by this action is used only for authenticating the associated IAM user to an AWS CodeCommit repository. For more information about using SSH keys to authenticate to an AWS CodeCommit repository, see <a href="http://docs.aws.amazon.com/codecommit/latest/userguide/setting-up-credentials-ssh.html">Set up AWS CodeCommit for SSH Connections</a> in the <i>AWS CodeCommit User Guide</i>.</p>'
      responses:
        '200':
          description: Success
        '480':
          description: NoSuchEntityException
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/NoSuchEntityException'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateSSHPublicKeyRequest'
        required: true
    parameters:
      - $ref: '#/components/parameters/Action'
      - $ref: '#/components/parameters/Version'
      - $ref: '#/components/parameters/X-Amz-Content-Sha256'
      - $ref: '#/components/parameters/X-Amz-Date'
      - $ref: '#/components/parameters/X-Amz-Algorithm'
      - $ref: '#/components/parameters/X-Amz-Credential'
      - $ref: '#/components/parameters/X-Amz-Security-Token'
      - $ref: '#/components/parameters/X-Amz-Signature'
      - $ref: '#/components/parameters/X-Amz-SignedHeaders'
  '/#UpdateServerCertificate':
    post:
      operationId: UpdateServerCertificate
      description: '<p>Updates the name and/or the path of the specified server certificate stored in IAM.</p> <p>For more information about working with server certificates, including a list of AWS services that can use the server certificates that you manage with IAM, go to <a href="http://docs.aws.amazon.com/IAM/latest/UserGuide/id_credentials_server-certs.html">Working with Server Certificates</a> in the <i>IAM User Guide</i>.</p> <important> <p>You should understand the implications of changing a server certificate''s path or name. For more information, see <a href="http://docs.aws.amazon.com/IAM/latest/UserGuide/id_credentials_server-certs_manage.html#RenamingServerCerts">Renaming a Server Certificate</a> in the <i>IAM User Guide</i>.</p> </important> <note> <p>To change a server certificate name the requester must have appropriate permissions on both the source object and the target object. For example, to change the name from "ProductionCert" to "ProdCert", the entity making the request must have permission on "ProductionCert" and "ProdCert", or must have permission on all (*). For more information about permissions, see <a href="http://docs.aws.amazon.com/IAM/latest/UserGuide/access.html">Access Management</a> in the <i>IAM User Guide</i>.</p> </note>'
      responses:
        '200':
          description: Success
        '480':
          description: NoSuchEntityException
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/NoSuchEntityException'
        '481':
          description: EntityAlreadyExistsException
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/EntityAlreadyExistsException'
        '482':
          description: LimitExceededException
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/LimitExceededException'
        '483':
          description: ServiceFailureException
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ServiceFailureException'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateServerCertificateRequest'
        required: true
    parameters:
      - $ref: '#/components/parameters/Action'
      - $ref: '#/components/parameters/Version'
      - $ref: '#/components/parameters/X-Amz-Content-Sha256'
      - $ref: '#/components/parameters/X-Amz-Date'
      - $ref: '#/components/parameters/X-Amz-Algorithm'
      - $ref: '#/components/parameters/X-Amz-Credential'
      - $ref: '#/components/parameters/X-Amz-Security-Token'
      - $ref: '#/components/parameters/X-Amz-Signature'
      - $ref: '#/components/parameters/X-Amz-SignedHeaders'
  '/#UpdateServiceSpecificCredential':
    post:
      operationId: UpdateServiceSpecificCredential
      description: Sets the status of a service-specific credential to <code>Active</code> or <code>Inactive</code>. Service-specific credentials that are inactive cannot be used for authentication to the service. This action can be used to disable a user’s service-specific credential as part of a credential rotation work flow.
      responses:
        '200':
          description: Success
        '480':
          description: NoSuchEntityException
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/NoSuchEntityException'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateServiceSpecificCredentialRequest'
        required: true
    parameters:
      - $ref: '#/components/parameters/Action'
      - $ref: '#/components/parameters/Version'
      - $ref: '#/components/parameters/X-Amz-Content-Sha256'
      - $ref: '#/components/parameters/X-Amz-Date'
      - $ref: '#/components/parameters/X-Amz-Algorithm'
      - $ref: '#/components/parameters/X-Amz-Credential'
      - $ref: '#/components/parameters/X-Amz-Security-Token'
      - $ref: '#/components/parameters/X-Amz-Signature'
      - $ref: '#/components/parameters/X-Amz-SignedHeaders'
  '/#UpdateSigningCertificate':
    post:
      operationId: UpdateSigningCertificate
      description: '<p>Changes the status of the specified user signing certificate from active to disabled, or vice versa. This action can be used to disable an IAM user''s signing certificate as part of a certificate rotation work flow.</p> <p>If the <code>UserName</code> field is not specified, the UserName is determined implicitly based on the AWS access key ID used to sign the request. Because this action works for access keys under the AWS account, you can use this action to manage root credentials even if the AWS account has no associated users.</p>'
      responses:
        '200':
          description: Success
        '480':
          description: NoSuchEntityException
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/NoSuchEntityException'
        '481':
          description: LimitExceededException
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/LimitExceededException'
        '482':
          description: ServiceFailureException
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ServiceFailureException'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateSigningCertificateRequest'
        required: true
    parameters:
      - $ref: '#/components/parameters/Action'
      - $ref: '#/components/parameters/Version'
      - $ref: '#/components/parameters/X-Amz-Content-Sha256'
      - $ref: '#/components/parameters/X-Amz-Date'
      - $ref: '#/components/parameters/X-Amz-Algorithm'
      - $ref: '#/components/parameters/X-Amz-Credential'
      - $ref: '#/components/parameters/X-Amz-Security-Token'
      - $ref: '#/components/parameters/X-Amz-Signature'
      - $ref: '#/components/parameters/X-Amz-SignedHeaders'
  '/#UpdateUser':
    post:
      operationId: UpdateUser
      description: '<p>Updates the name and/or the path of the specified IAM user.</p> <important> <p> You should understand the implications of changing an IAM user''s path or name. For more information, see <a href="http://docs.aws.amazon.com/IAM/latest/UserGuide/id_users_manage.html#id_users_renaming">Renaming an IAM User</a> and <a href="http://docs.aws.amazon.com/IAM/latest/UserGuide/id_groups_manage_rename.html">Renaming an IAM Group</a> in the <i>IAM User Guide</i>.</p> </important> <note> <p> To change a user name the requester must have appropriate permissions on both the source object and the target object. For example, to change Bob to Robert, the entity making the request must have permission on Bob and Robert, or must have permission on all (*). For more information about permissions, see <a href="http://docs.aws.amazon.com/IAM/latest/UserGuide/PermissionsAndPolicies.html">Permissions and Policies</a>. </p> </note>'
      responses:
        '200':
          description: Success
        '480':
          description: NoSuchEntityException
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/NoSuchEntityException'
        '481':
          description: LimitExceededException
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/LimitExceededException'
        '482':
          description: EntityAlreadyExistsException
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/EntityAlreadyExistsException'
        '483':
          description: EntityTemporarilyUnmodifiableException
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/EntityTemporarilyUnmodifiableException'
        '484':
          description: ServiceFailureException
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ServiceFailureException'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateUserRequest'
        required: true
    parameters:
      - $ref: '#/components/parameters/Action'
      - $ref: '#/components/parameters/Version'
      - $ref: '#/components/parameters/X-Amz-Content-Sha256'
      - $ref: '#/components/parameters/X-Amz-Date'
      - $ref: '#/components/parameters/X-Amz-Algorithm'
      - $ref: '#/components/parameters/X-Amz-Credential'
      - $ref: '#/components/parameters/X-Amz-Security-Token'
      - $ref: '#/components/parameters/X-Amz-Signature'
      - $ref: '#/components/parameters/X-Amz-SignedHeaders'
  '/#UploadSSHPublicKey':
    post:
      operationId: UploadSSHPublicKey
      description: '<p>Uploads an SSH public key and associates it with the specified IAM user.</p> <p>The SSH public key uploaded by this action can be used only for authenticating the associated IAM user to an AWS CodeCommit repository. For more information about using SSH keys to authenticate to an AWS CodeCommit repository, see <a href="http://docs.aws.amazon.com/codecommit/latest/userguide/setting-up-credentials-ssh.html">Set up AWS CodeCommit for SSH Connections</a> in the <i>AWS CodeCommit User Guide</i>.</p>'
      responses:
        '200':
          description: Success
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/UploadSSHPublicKeyResponse'
        '480':
          description: LimitExceededException
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/LimitExceededException'
        '481':
          description: NoSuchEntityException
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/NoSuchEntityException'
        '482':
          description: InvalidPublicKeyException
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/InvalidPublicKeyException'
        '483':
          description: DuplicateSSHPublicKeyException
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/DuplicateSSHPublicKeyException'
        '484':
          description: UnrecognizedPublicKeyEncodingException
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/UnrecognizedPublicKeyEncodingException'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UploadSSHPublicKeyRequest'
        required: true
    parameters:
      - $ref: '#/components/parameters/Action'
      - $ref: '#/components/parameters/Version'
      - $ref: '#/components/parameters/X-Amz-Content-Sha256'
      - $ref: '#/components/parameters/X-Amz-Date'
      - $ref: '#/components/parameters/X-Amz-Algorithm'
      - $ref: '#/components/parameters/X-Amz-Credential'
      - $ref: '#/components/parameters/X-Amz-Security-Token'
      - $ref: '#/components/parameters/X-Amz-Signature'
      - $ref: '#/components/parameters/X-Amz-SignedHeaders'
  '/#UploadServerCertificate':
    post:
      operationId: UploadServerCertificate
      description: '<p>Uploads a server certificate entity for the AWS account. The server certificate entity includes a public key certificate, a private key, and an optional certificate chain, which should all be PEM-encoded.</p> <p>We recommend that you use <a href="https://aws.amazon.com/certificate-manager/">AWS Certificate Manager</a> to provision, manage, and deploy your server certificates. With ACM you can request a certificate, deploy it to AWS resources, and let ACM handle certificate renewals for you. Certificates provided by ACM are free. For more information about using ACM, see the <a href="http://docs.aws.amazon.com/acm/latest/userguide/">AWS Certificate Manager User Guide</a>.</p> <p>For more information about working with server certificates, including a list of AWS services that can use the server certificates that you manage with IAM, go to <a href="http://docs.aws.amazon.com/IAM/latest/UserGuide/id_credentials_server-certs.html">Working with Server Certificates</a> in the <i>IAM User Guide</i>.</p> <p>For information about the number of server certificates you can upload, see <a href="http://docs.aws.amazon.com/IAM/latest/UserGuide/reference_iam-limits.html">Limitations on IAM Entities and Objects</a> in the <i>IAM User Guide</i>.</p> <note> <p>Because the body of the public key certificate, private key, and the certificate chain can be large, you should use POST rather than GET when calling <code>UploadServerCertificate</code>. For information about setting up signatures and authorization through the API, go to <a href="http://docs.aws.amazon.com/general/latest/gr/signing_aws_api_requests.html">Signing AWS API Requests</a> in the <i>AWS General Reference</i>. For general information about using the Query API with IAM, go to <a href="http://docs.aws.amazon.com/IAM/latest/UserGuide/programming.html">Calling the API by Making HTTP Query Requests</a> in the <i>IAM User Guide</i>.</p> </note>'
      responses:
        '200':
          description: Success
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/UploadServerCertificateResponse'
        '480':
          description: LimitExceededException
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/LimitExceededException'
        '481':
          description: EntityAlreadyExistsException
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/EntityAlreadyExistsException'
        '482':
          description: MalformedCertificateException
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/MalformedCertificateException'
        '483':
          description: KeyPairMismatchException
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/KeyPairMismatchException'
        '484':
          description: ServiceFailureException
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ServiceFailureException'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UploadServerCertificateRequest'
        required: true
    parameters:
      - $ref: '#/components/parameters/Action'
      - $ref: '#/components/parameters/Version'
      - $ref: '#/components/parameters/X-Amz-Content-Sha256'
      - $ref: '#/components/parameters/X-Amz-Date'
      - $ref: '#/components/parameters/X-Amz-Algorithm'
      - $ref: '#/components/parameters/X-Amz-Credential'
      - $ref: '#/components/parameters/X-Amz-Security-Token'
      - $ref: '#/components/parameters/X-Amz-Signature'
      - $ref: '#/components/parameters/X-Amz-SignedHeaders'
  '/#UploadSigningCertificate':
    post:
      operationId: UploadSigningCertificate
      description: '<p>Uploads an X.509 signing certificate and associates it with the specified IAM user. Some AWS services use X.509 signing certificates to validate requests that are signed with a corresponding private key. When you upload the certificate, its default status is <code>Active</code>.</p> <p>If the <code>UserName</code> field is not specified, the IAM user name is determined implicitly based on the AWS access key ID used to sign the request. Because this action works for access keys under the AWS account, you can use this action to manage root credentials even if the AWS account has no associated users.</p> <note> <p>Because the body of a X.509 certificate can be large, you should use POST rather than GET when calling <code>UploadSigningCertificate</code>. For information about setting up signatures and authorization through the API, go to <a href="http://docs.aws.amazon.com/general/latest/gr/signing_aws_api_requests.html">Signing AWS API Requests</a> in the <i>AWS General Reference</i>. For general information about using the Query API with IAM, go to <a href="http://docs.aws.amazon.com/IAM/latest/UserGuide/IAM_UsingQueryAPI.html">Making Query Requests</a> in the <i>IAM User Guide</i>.</p> </note>'
      responses:
        '200':
          description: Success
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/UploadSigningCertificateResponse'
        '480':
          description: LimitExceededException
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/LimitExceededException'
        '481':
          description: EntityAlreadyExistsException
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/EntityAlreadyExistsException'
        '482':
          description: MalformedCertificateException
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/MalformedCertificateException'
        '483':
          description: InvalidCertificateException
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/InvalidCertificateException'
        '484':
          description: DuplicateCertificateException
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/DuplicateCertificateException'
        '485':
          description: NoSuchEntityException
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/NoSuchEntityException'
        '486':
          description: ServiceFailureException
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ServiceFailureException'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UploadSigningCertificateRequest'
        required: true
    parameters:
      - $ref: '#/components/parameters/Action'
      - $ref: '#/components/parameters/Version'
      - $ref: '#/components/parameters/X-Amz-Content-Sha256'
      - $ref: '#/components/parameters/X-Amz-Date'
      - $ref: '#/components/parameters/X-Amz-Algorithm'
      - $ref: '#/components/parameters/X-Amz-Credential'
      - $ref: '#/components/parameters/X-Amz-Security-Token'
      - $ref: '#/components/parameters/X-Amz-Signature'
      - $ref: '#/components/parameters/X-Amz-SignedHeaders'
components:
  schemas:
    AccessKey:
      type: object
      required:
        - UserName
        - AccessKeyId
        - Status
        - SecretAccessKey
      properties:
        UserName:
          $ref: '#/components/schemas/userNameType'
        AccessKeyId:
          $ref: '#/components/schemas/accessKeyIdType'
        Status:
          $ref: '#/components/schemas/statusType'
        SecretAccessKey:
          $ref: '#/components/schemas/accessKeySecretType'
        CreateDate:
          $ref: '#/components/schemas/dateType'
      description: '<p>Contains information about an AWS access key.</p> <p> This data type is used as a response element in the <a>CreateAccessKey</a> and <a>ListAccessKeys</a> actions. </p> <note> <p>The <code>SecretAccessKey</code> value is returned only in response to <a>CreateAccessKey</a>. You can get a secret access key only when you first create an access key; you cannot recover the secret access key later. If you lose a secret access key, you must create a new access key.</p> </note>'
    AccessKeyLastUsed:
      type: object
      required:
        - LastUsedDate
        - ServiceName
        - Region
      properties:
        LastUsedDate:
          $ref: '#/components/schemas/dateType'
        ServiceName:
          $ref: '#/components/schemas/stringType'
        Region:
          $ref: '#/components/schemas/stringType'
      description: <p>Contains information about the last time an AWS access key was used.</p> <p>This data type is used as a response element in the <a>GetAccessKeyLastUsed</a> action.</p>
    AccessKeyMetadata:
      type: object
      properties:
        UserName:
          $ref: '#/components/schemas/userNameType'
        AccessKeyId:
          $ref: '#/components/schemas/accessKeyIdType'
        Status:
          $ref: '#/components/schemas/statusType'
        CreateDate:
          $ref: '#/components/schemas/dateType'
      description: '<p>Contains information about an AWS access key, without its secret key.</p> <p>This data type is used as a response element in the <a>ListAccessKeys</a> action.</p>'
    ActionNameListType:
      type: array
      items:
        $ref: '#/components/schemas/ActionNameType'
    ActionNameType:
      type: string
      minLength: 3
      maxLength: 128
    AddClientIDToOpenIDConnectProviderRequest:
      type: object
      required:
        - OpenIDConnectProviderArn
        - ClientID
      example:
        ClientID: my-application-ID
        OpenIDConnectProviderArn: 'arn:aws:iam::123456789012:oidc-provider/server.example.com'
      properties:
        OpenIDConnectProviderArn:
          $ref: '#/components/schemas/arnType'
        ClientID:
          $ref: '#/components/schemas/clientIDType'
    AddRoleToInstanceProfileRequest:
      type: object
      required:
        - InstanceProfileName
        - RoleName
      example:
        InstanceProfileName: Webserver
        RoleName: S3Access
      properties:
        InstanceProfileName:
          $ref: '#/components/schemas/instanceProfileNameType'
        RoleName:
          $ref: '#/components/schemas/roleNameType'
    AddUserToGroupRequest:
      type: object
      required:
        - GroupName
        - UserName
      example:
        GroupName: Admins
        UserName: Bob
      properties:
        GroupName:
          $ref: '#/components/schemas/groupNameType'
        UserName:
          $ref: '#/components/schemas/existingUserNameType'
    AttachGroupPolicyRequest:
      type: object
      required:
        - GroupName
        - PolicyArn
      example:
        GroupName: Finance
        PolicyArn: 'arn:aws:iam::aws:policy/ReadOnlyAccess'
      properties:
        GroupName:
          $ref: '#/components/schemas/groupNameType'
        PolicyArn:
          $ref: '#/components/schemas/arnType'
    AttachRolePolicyRequest:
      type: object
      required:
        - RoleName
        - PolicyArn
      example:
        PolicyArn: 'arn:aws:iam::aws:policy/ReadOnlyAccess'
        RoleName: ReadOnlyRole
      properties:
        RoleName:
          $ref: '#/components/schemas/roleNameType'
        PolicyArn:
          $ref: '#/components/schemas/arnType'
    AttachUserPolicyRequest:
      type: object
      required:
        - UserName
        - PolicyArn
      example:
        PolicyArn: 'arn:aws:iam::aws:policy/AdministratorAccess'
        UserName: Alice
      properties:
        UserName:
          $ref: '#/components/schemas/userNameType'
        PolicyArn:
          $ref: '#/components/schemas/arnType'
    AttachedPolicy:
      type: object
      properties:
        PolicyName:
          $ref: '#/components/schemas/policyNameType'
        PolicyArn:
          $ref: '#/components/schemas/arnType'
      description: '<p>Contains information about an attached policy.</p> <p>An attached policy is a managed policy that has been attached to a user, group, or role. This data type is used as a response element in the <a>ListAttachedGroupPolicies</a>, <a>ListAttachedRolePolicies</a>, <a>ListAttachedUserPolicies</a>, and <a>GetAccountAuthorizationDetails</a> actions. </p> <p>For more information about managed policies, refer to <a href="http://docs.aws.amazon.com/IAM/latest/UserGuide/policies-managed-vs-inline.html">Managed Policies and Inline Policies</a> in the <i>Using IAM</i> guide. </p>'
    BootstrapDatum:
      type: string
      format: password
    ChangePasswordRequest:
      type: object
      required:
        - OldPassword
        - NewPassword
      example:
        NewPassword: ']35d/{pB9Fo9wJ'
        OldPassword: 3s0K_;xh4~8XXI
      properties:
        OldPassword:
          $ref: '#/components/schemas/passwordType'
        NewPassword:
          $ref: '#/components/schemas/passwordType'
    ColumnNumber:
      type: integer
    ContextEntry:
      type: object
      properties:
        ContextKeyName:
          $ref: '#/components/schemas/ContextKeyNameType'
        ContextKeyValues:
          $ref: '#/components/schemas/ContextKeyValueListType'
        ContextKeyType:
          $ref: '#/components/schemas/ContextKeyTypeEnum'
      description: '<p>Contains information about a condition context key. It includes the name of the key and specifies the value (or values, if the context key supports multiple values) to use in the simulation. This information is used when evaluating the <code>Condition</code> elements of the input policies.</p> <p>This data type is used as an input parameter to <code> <a>SimulateCustomPolicy</a> </code> and <code> <a>SimulateCustomPolicy</a> </code>.</p>'
    ContextEntryListType:
      type: array
      items:
        $ref: '#/components/schemas/ContextEntry'
    ContextKeyNameType:
      type: string
      minLength: 5
      maxLength: 256
    ContextKeyNamesResultListType:
      type: array
      items:
        $ref: '#/components/schemas/ContextKeyNameType'
    ContextKeyTypeEnum:
      type: string
      enum:
        - string
        - stringList
        - numeric
        - numericList
        - boolean
        - booleanList
        - ip
        - ipList
        - binary
        - binaryList
        - date
        - dateList
    ContextKeyValueListType:
      type: array
      items:
        $ref: '#/components/schemas/ContextKeyValueType'
    ContextKeyValueType:
      type: string
    CreateAccessKeyRequest:
      type: object
      example:
        UserName: Bob
      properties:
        UserName:
          $ref: '#/components/schemas/existingUserNameType'
    CreateAccessKeyResponse:
      type: object
      required:
        - AccessKey
      example:
        AccessKey:
          AccessKeyId: AKIAIOSFODNN7EXAMPLE
          CreateDate: '2015-03-09T18:39:23.411Z'
          SecretAccessKey: wJalrXUtnFEMI/K7MDENG/bPxRfiCYzEXAMPLEKEY
          Status: Active
          UserName: Bob
      properties:
        AccessKey:
          $ref: '#/components/schemas/AccessKey'
      description: 'Contains the response to a successful <a>CreateAccessKey</a> request. '
    CreateAccountAliasRequest:
      type: object
      required:
        - AccountAlias
      example:
        AccountAlias: examplecorp
      properties:
        AccountAlias:
          $ref: '#/components/schemas/accountAliasType'
    CreateGroupRequest:
      type: object
      required:
        - GroupName
      example:
        GroupName: Admins
      properties:
        Path:
          $ref: '#/components/schemas/pathType'
        GroupName:
          $ref: '#/components/schemas/groupNameType'
    CreateGroupResponse:
      type: object
      required:
        - Group
      example:
        Group:
          Arn: 'arn:aws:iam::123456789012:group/Admins'
          CreateDate: '2015-03-09T20:30:24.940Z'
          GroupId: AIDGPMS9RO4H3FEXAMPLE
          GroupName: Admins
          Path: /
      properties:
        Group:
          $ref: '#/components/schemas/Group'
      description: 'Contains the response to a successful <a>CreateGroup</a> request. '
    CreateInstanceProfileRequest:
      type: object
      required:
        - InstanceProfileName
      example:
        InstanceProfileName: Webserver
      properties:
        InstanceProfileName:
          $ref: '#/components/schemas/instanceProfileNameType'
        Path:
          $ref: '#/components/schemas/pathType'
    CreateInstanceProfileResponse:
      type: object
      required:
        - InstanceProfile
      example:
        InstanceProfile:
          Arn: 'arn:aws:iam::123456789012:instance-profile/Webserver'
          CreateDate: '2015-03-09T20:33:19.626Z'
          InstanceProfileId: AIPAJMBYC7DLSPEXAMPLE
          InstanceProfileName: Webserver
          Path: /
          Roles: []
      properties:
        InstanceProfile:
          $ref: '#/components/schemas/InstanceProfile'
      description: 'Contains the response to a successful <a>CreateInstanceProfile</a> request. '
    CreateLoginProfileRequest:
      type: object
      required:
        - UserName
        - Password
      example:
        Password: 'h]6EszR}vJ*m'
        PasswordResetRequired: true
        UserName: Bob
      properties:
        UserName:
          $ref: '#/components/schemas/userNameType'
        Password:
          $ref: '#/components/schemas/passwordType'
        PasswordResetRequired:
          $ref: '#/components/schemas/booleanType'
    CreateLoginProfileResponse:
      type: object
      required:
        - LoginProfile
      example:
        LoginProfile:
          CreateDate: '2015-03-10T20:55:40.274Z'
          PasswordResetRequired: true
          UserName: Bob
      properties:
        LoginProfile:
          $ref: '#/components/schemas/LoginProfile'
      description: 'Contains the response to a successful <a>CreateLoginProfile</a> request. '
    CreateOpenIDConnectProviderRequest:
      type: object
      required:
        - Url
        - ThumbprintList
      example:
        ClientIDList:
          - my-application-id
        ThumbprintList:
          - 3768084dfb3d2b68b7897bf5f565da8efEXAMPLE
        Url: 'https://server.example.com'
      properties:
        Url:
          $ref: '#/components/schemas/OpenIDConnectProviderUrlType'
        ClientIDList:
          $ref: '#/components/schemas/clientIDListType'
        ThumbprintList:
          $ref: '#/components/schemas/thumbprintListType'
    CreateOpenIDConnectProviderResponse:
      type: object
      example:
        OpenIDConnectProviderArn: 'arn:aws:iam::123456789012:oidc-provider/server.example.com'
      properties:
        OpenIDConnectProviderArn:
          $ref: '#/components/schemas/arnType'
      description: 'Contains the response to a successful <a>CreateOpenIDConnectProvider</a> request. '
    CreatePolicyRequest:
      type: object
      required:
        - PolicyName
        - PolicyDocument
      properties:
        PolicyName:
          $ref: '#/components/schemas/policyNameType'
        Path:
          $ref: '#/components/schemas/policyPathType'
        PolicyDocument:
          $ref: '#/components/schemas/policyDocumentType'
        Description:
          $ref: '#/components/schemas/policyDescriptionType'
    CreatePolicyResponse:
      type: object
      properties:
        Policy:
          $ref: '#/components/schemas/Policy'
      description: 'Contains the response to a successful <a>CreatePolicy</a> request. '
    CreatePolicyVersionRequest:
      type: object
      required:
        - PolicyArn
        - PolicyDocument
      properties:
        PolicyArn:
          $ref: '#/components/schemas/arnType'
        PolicyDocument:
          $ref: '#/components/schemas/policyDocumentType'
        SetAsDefault:
          $ref: '#/components/schemas/booleanType'
    CreatePolicyVersionResponse:
      type: object
      properties:
        PolicyVersion:
          $ref: '#/components/schemas/PolicyVersion'
      description: 'Contains the response to a successful <a>CreatePolicyVersion</a> request. '
    CreateRoleRequest:
      type: object
      required:
        - RoleName
        - AssumeRolePolicyDocument
      example:
        AssumeRolePolicyDocument: <URL-encoded-JSON>
        Path: /
        RoleName: Test-Role
      properties:
        Path:
          $ref: '#/components/schemas/pathType'
        RoleName:
          $ref: '#/components/schemas/roleNameType'
        AssumeRolePolicyDocument:
          $ref: '#/components/schemas/policyDocumentType'
        Description:
          $ref: '#/components/schemas/roleDescriptionType'
    CreateRoleResponse:
      type: object
      required:
        - Role
      example:
        Role:
          Arn: 'arn:aws:iam::123456789012:role/Test-Role'
          AssumeRolePolicyDocument: <URL-encoded-JSON>
          CreateDate: '2013-06-07T20:43:32.821Z'
          Path: /
          RoleId: AKIAIOSFODNN7EXAMPLE
          RoleName: Test-Role
      properties:
        Role:
          $ref: '#/components/schemas/Role'
      description: 'Contains the response to a successful <a>CreateRole</a> request. '
    CreateSAMLProviderRequest:
      type: object
      required:
        - SAMLMetadataDocument
        - Name
      properties:
        SAMLMetadataDocument:
          $ref: '#/components/schemas/SAMLMetadataDocumentType'
        Name:
          $ref: '#/components/schemas/SAMLProviderNameType'
    CreateSAMLProviderResponse:
      type: object
      properties:
        SAMLProviderArn:
          $ref: '#/components/schemas/arnType'
      description: 'Contains the response to a successful <a>CreateSAMLProvider</a> request. '
    CreateServiceLinkedRoleRequest:
      type: object
      required:
        - AWSServiceName
      properties:
        AWSServiceName:
          $ref: '#/components/schemas/groupNameType'
        Description:
          $ref: '#/components/schemas/roleDescriptionType'
        CustomSuffix:
          $ref: '#/components/schemas/customSuffixType'
    CreateServiceLinkedRoleResponse:
      type: object
      properties:
        Role:
          $ref: '#/components/schemas/Role'
    CreateServiceSpecificCredentialRequest:
      type: object
      required:
        - UserName
        - ServiceName
      properties:
        UserName:
          $ref: '#/components/schemas/userNameType'
        ServiceName:
          $ref: '#/components/schemas/serviceName'
    CreateServiceSpecificCredentialResponse:
      type: object
      properties:
        ServiceSpecificCredential:
          $ref: '#/components/schemas/ServiceSpecificCredential'
    CreateUserRequest:
      type: object
      required:
        - UserName
      example:
        UserName: Bob
      properties:
        Path:
          $ref: '#/components/schemas/pathType'
        UserName:
          $ref: '#/components/schemas/userNameType'
    CreateUserResponse:
      type: object
      example:
        User:
          Arn: 'arn:aws:iam::123456789012:user/Bob'
          CreateDate: '2013-06-08T03:20:41.270Z'
          Path: /
          UserId: AKIAIOSFODNN7EXAMPLE
          UserName: Bob
      properties:
        User:
          $ref: '#/components/schemas/User'
      description: 'Contains the response to a successful <a>CreateUser</a> request. '
    CreateVirtualMFADeviceRequest:
      type: object
      required:
        - VirtualMFADeviceName
      properties:
        Path:
          $ref: '#/components/schemas/pathType'
        VirtualMFADeviceName:
          $ref: '#/components/schemas/virtualMFADeviceName'
    CreateVirtualMFADeviceResponse:
      type: object
      required:
        - VirtualMFADevice
      properties:
        VirtualMFADevice:
          $ref: '#/components/schemas/VirtualMFADevice'
      description: 'Contains the response to a successful <a>CreateVirtualMFADevice</a> request. '
    CredentialReportExpiredException:
      type: object
      properties:
        message:
          $ref: '#/components/schemas/credentialReportExpiredExceptionMessage'
      description: 'The request was rejected because the most recent credential report has expired. To generate a new credential report, use <a>GenerateCredentialReport</a>. For more information about credential report expiration, see <a href="http://docs.aws.amazon.com/IAM/latest/UserGuide/credential-reports.html">Getting Credential Reports</a> in the <i>IAM User Guide</i>.'
    CredentialReportNotPresentException:
      type: object
      properties:
        message:
          $ref: '#/components/schemas/credentialReportNotPresentExceptionMessage'
      description: 'The request was rejected because the credential report does not exist. To generate a credential report, use <a>GenerateCredentialReport</a>.'
    CredentialReportNotReadyException:
      type: object
      properties:
        message:
          $ref: '#/components/schemas/credentialReportNotReadyExceptionMessage'
      description: The request was rejected because the credential report is still being generated.
    DeactivateMFADeviceRequest:
      type: object
      required:
        - UserName
        - SerialNumber
      properties:
        UserName:
          $ref: '#/components/schemas/existingUserNameType'
        SerialNumber:
          $ref: '#/components/schemas/serialNumberType'
    DeleteAccessKeyRequest:
      type: object
      required:
        - AccessKeyId
      example:
        AccessKeyId: AKIDPMS9RO4H3FEXAMPLE
        UserName: Bob
      properties:
        UserName:
          $ref: '#/components/schemas/existingUserNameType'
        AccessKeyId:
          $ref: '#/components/schemas/accessKeyIdType'
    DeleteAccountAliasRequest:
      type: object
      required:
        - AccountAlias
      example:
        AccountAlias: mycompany
      properties:
        AccountAlias:
          $ref: '#/components/schemas/accountAliasType'
    DeleteConflictException:
      type: object
      properties:
        message:
          $ref: '#/components/schemas/deleteConflictMessage'
      description: The request was rejected because it attempted to delete a resource that has attached subordinate entities. The error message describes these entities.
    DeleteGroupPolicyRequest:
      type: object
      required:
        - GroupName
        - PolicyName
      example:
        GroupName: Admins
        PolicyName: ExamplePolicy
      properties:
        GroupName:
          $ref: '#/components/schemas/groupNameType'
        PolicyName:
          $ref: '#/components/schemas/policyNameType'
    DeleteGroupRequest:
      type: object
      required:
        - GroupName
      properties:
        GroupName:
          $ref: '#/components/schemas/groupNameType'
    DeleteInstanceProfileRequest:
      type: object
      required:
        - InstanceProfileName
      example:
        InstanceProfileName: ExampleInstanceProfile
      properties:
        InstanceProfileName:
          $ref: '#/components/schemas/instanceProfileNameType'
    DeleteLoginProfileRequest:
      type: object
      required:
        - UserName
      example:
        UserName: Bob
      properties:
        UserName:
          $ref: '#/components/schemas/userNameType'
    DeleteOpenIDConnectProviderRequest:
      type: object
      required:
        - OpenIDConnectProviderArn
      properties:
        OpenIDConnectProviderArn:
          $ref: '#/components/schemas/arnType'
    DeletePolicyRequest:
      type: object
      required:
        - PolicyArn
      properties:
        PolicyArn:
          $ref: '#/components/schemas/arnType'
    DeletePolicyVersionRequest:
      type: object
      required:
        - PolicyArn
        - VersionId
      properties:
        PolicyArn:
          $ref: '#/components/schemas/arnType'
        VersionId:
          $ref: '#/components/schemas/policyVersionIdType'
    DeleteRolePolicyRequest:
      type: object
      required:
        - RoleName
        - PolicyName
      example:
        PolicyName: ExamplePolicy
        RoleName: Test-Role
      properties:
        RoleName:
          $ref: '#/components/schemas/roleNameType'
        PolicyName:
          $ref: '#/components/schemas/policyNameType'
    DeleteRoleRequest:
      type: object
      required:
        - RoleName
      example:
        RoleName: Test-Role
      properties:
        RoleName:
          $ref: '#/components/schemas/roleNameType'
    DeleteSAMLProviderRequest:
      type: object
      required:
        - SAMLProviderArn
      properties:
        SAMLProviderArn:
          $ref: '#/components/schemas/arnType'
    DeleteSSHPublicKeyRequest:
      type: object
      required:
        - UserName
        - SSHPublicKeyId
      properties:
        UserName:
          $ref: '#/components/schemas/userNameType'
        SSHPublicKeyId:
          $ref: '#/components/schemas/publicKeyIdType'
    DeleteServerCertificateRequest:
      type: object
      required:
        - ServerCertificateName
      properties:
        ServerCertificateName:
          $ref: '#/components/schemas/serverCertificateNameType'
    DeleteServiceSpecificCredentialRequest:
      type: object
      required:
        - ServiceSpecificCredentialId
      properties:
        UserName:
          $ref: '#/components/schemas/userNameType'
        ServiceSpecificCredentialId:
          $ref: '#/components/schemas/serviceSpecificCredentialId'
    DeleteSigningCertificateRequest:
      type: object
      required:
        - CertificateId
      example:
        CertificateId: TA7SMP42TDN5Z26OBPJE7EXAMPLE
        UserName: Anika
      properties:
        UserName:
          $ref: '#/components/schemas/existingUserNameType'
        CertificateId:
          $ref: '#/components/schemas/certificateIdType'
    DeleteUserPolicyRequest:
      type: object
      required:
        - UserName
        - PolicyName
      example:
        PolicyName: ExamplePolicy
        UserName: Juan
      properties:
        UserName:
          $ref: '#/components/schemas/existingUserNameType'
        PolicyName:
          $ref: '#/components/schemas/policyNameType'
    DeleteUserRequest:
      type: object
      required:
        - UserName
      example:
        UserName: Bob
      properties:
        UserName:
          $ref: '#/components/schemas/existingUserNameType'
    DeleteVirtualMFADeviceRequest:
      type: object
      required:
        - SerialNumber
      example:
        SerialNumber: 'arn:aws:iam::123456789012:mfa/ExampleName'
      properties:
        SerialNumber:
          $ref: '#/components/schemas/serialNumberType'
    DetachGroupPolicyRequest:
      type: object
      required:
        - GroupName
        - PolicyArn
      properties:
        GroupName:
          $ref: '#/components/schemas/groupNameType'
        PolicyArn:
          $ref: '#/components/schemas/arnType'
    DetachRolePolicyRequest:
      type: object
      required:
        - RoleName
        - PolicyArn
      properties:
        RoleName:
          $ref: '#/components/schemas/roleNameType'
        PolicyArn:
          $ref: '#/components/schemas/arnType'
    DetachUserPolicyRequest:
      type: object
      required:
        - UserName
        - PolicyArn
      properties:
        UserName:
          $ref: '#/components/schemas/userNameType'
        PolicyArn:
          $ref: '#/components/schemas/arnType'
    DuplicateCertificateException:
      type: object
      properties:
        message:
          $ref: '#/components/schemas/duplicateCertificateMessage'
      description: The request was rejected because the same certificate is associated with an IAM user in the account.
    DuplicateSSHPublicKeyException:
      type: object
      properties:
        message:
          $ref: '#/components/schemas/duplicateSSHPublicKeyMessage'
      description: The request was rejected because the SSH public key is already associated with the specified IAM user.
    EnableMFADeviceRequest:
      type: object
      required:
        - UserName
        - SerialNumber
        - AuthenticationCode1
        - AuthenticationCode2
      properties:
        UserName:
          $ref: '#/components/schemas/existingUserNameType'
        SerialNumber:
          $ref: '#/components/schemas/serialNumberType'
        AuthenticationCode1:
          $ref: '#/components/schemas/authenticationCodeType'
        AuthenticationCode2:
          $ref: '#/components/schemas/authenticationCodeType'
    EntityAlreadyExistsException:
      type: object
      properties:
        message:
          $ref: '#/components/schemas/entityAlreadyExistsMessage'
      description: The request was rejected because it attempted to create a resource that already exists.
    EntityTemporarilyUnmodifiableException:
      type: object
      properties:
        message:
          $ref: '#/components/schemas/entityTemporarilyUnmodifiableMessage'
      description: 'The request was rejected because it referenced an entity that is temporarily unmodifiable, such as a user name that was deleted and then recreated. The error indicates that the request is likely to succeed if you try again after waiting several minutes. The error message describes the entity.'
    EntityType:
      type: string
      enum:
        - User
        - Role
        - Group
        - LocalManagedPolicy
        - AWSManagedPolicy
    EvalDecisionDetailsType:
      type: array
      items:
        type: object
        properties:
          key:
            $ref: '#/components/schemas/EvalDecisionSourceType'
          value:
            $ref: '#/components/schemas/PolicyEvaluationDecisionType'
    EvalDecisionSourceType:
      type: string
      minLength: 3
      maxLength: 256
    EvaluationResult:
      type: object
      required:
        - EvalActionName
        - EvalDecision
      properties:
        EvalActionName:
          $ref: '#/components/schemas/ActionNameType'
        EvalResourceName:
          $ref: '#/components/schemas/ResourceNameType'
        EvalDecision:
          $ref: '#/components/schemas/PolicyEvaluationDecisionType'
        MatchedStatements:
          $ref: '#/components/schemas/StatementListType'
        MissingContextValues:
          $ref: '#/components/schemas/ContextKeyNamesResultListType'
        OrganizationsDecisionDetail:
          $ref: '#/components/schemas/OrganizationsDecisionDetail'
        EvalDecisionDetails:
          $ref: '#/components/schemas/EvalDecisionDetailsType'
        ResourceSpecificResults:
          $ref: '#/components/schemas/ResourceSpecificResultListType'
      description: <p>Contains the results of a simulation.</p> <p>This data type is used by the return parameter of <code> <a>SimulateCustomPolicy</a> </code> and <code> <a>SimulatePrincipalPolicy</a> </code>.</p>
    EvaluationResultsListType:
      type: array
      items:
        $ref: '#/components/schemas/EvaluationResult'
    GenerateCredentialReportResponse:
      type: object
      properties:
        State:
          $ref: '#/components/schemas/ReportStateType'
        Description:
          $ref: '#/components/schemas/ReportStateDescriptionType'
      description: 'Contains the response to a successful <a>GenerateCredentialReport</a> request. '
    GetAccessKeyLastUsedRequest:
      type: object
      required:
        - AccessKeyId
      properties:
        AccessKeyId:
          $ref: '#/components/schemas/accessKeyIdType'
    GetAccessKeyLastUsedResponse:
      type: object
      properties:
        UserName:
          $ref: '#/components/schemas/existingUserNameType'
        AccessKeyLastUsed:
          $ref: '#/components/schemas/AccessKeyLastUsed'
      description: Contains the response to a successful <a>GetAccessKeyLastUsed</a> request. It is also returned as a member of the <a>AccessKeyMetaData</a> structure returned by the <a>ListAccessKeys</a> action.
    GetAccountAuthorizationDetailsRequest:
      type: object
      properties:
        Filter:
          $ref: '#/components/schemas/entityListType'
        MaxItems:
          $ref: '#/components/schemas/maxItemsType'
        Marker:
          $ref: '#/components/schemas/markerType'
    GetAccountAuthorizationDetailsResponse:
      type: object
      properties:
        UserDetailList:
          $ref: '#/components/schemas/userDetailListType'
        GroupDetailList:
          $ref: '#/components/schemas/groupDetailListType'
        RoleDetailList:
          $ref: '#/components/schemas/roleDetailListType'
        Policies:
          $ref: '#/components/schemas/ManagedPolicyDetailListType'
        IsTruncated:
          $ref: '#/components/schemas/booleanType'
        Marker:
          $ref: '#/components/schemas/markerType'
      description: 'Contains the response to a successful <a>GetAccountAuthorizationDetails</a> request. '
    GetAccountPasswordPolicyResponse:
      type: object
      required:
        - PasswordPolicy
      example:
        PasswordPolicy:
          AllowUsersToChangePassword: false
          ExpirePasswords: false
          HardExpiry: false
          MaxPasswordAge: 90
          MinimumPasswordLength: 8
          PasswordReusePrevention: 12
          RequireLowercaseCharacters: false
          RequireNumbers: true
          RequireSymbols: true
          RequireUppercaseCharacters: false
      properties:
        PasswordPolicy:
          $ref: '#/components/schemas/PasswordPolicy'
      description: 'Contains the response to a successful <a>GetAccountPasswordPolicy</a> request. '
    GetAccountSummaryResponse:
      type: object
      example:
        SummaryMap:
          AccessKeysPerUserQuota: 2
          AccountAccessKeysPresent: 1
          AccountMFAEnabled: 0
          AccountSigningCertificatesPresent: 0
          AttachedPoliciesPerGroupQuota: 10
          AttachedPoliciesPerRoleQuota: 10
          AttachedPoliciesPerUserQuota: 10
          GroupPolicySizeQuota: 5120
          Groups: 15
          GroupsPerUserQuota: 10
          GroupsQuota: 100
          MFADevices: 6
          MFADevicesInUse: 3
          Policies: 8
          PoliciesQuota: 1000
          PolicySizeQuota: 5120
          PolicyVersionsInUse: 22
          PolicyVersionsInUseQuota: 10000
          ServerCertificates: 1
          ServerCertificatesQuota: 20
          SigningCertificatesPerUserQuota: 2
          UserPolicySizeQuota: 2048
          Users: 27
          UsersQuota: 5000
          VersionsPerPolicyQuota: 5
      properties:
        SummaryMap:
          $ref: '#/components/schemas/summaryMapType'
      description: 'Contains the response to a successful <a>GetAccountSummary</a> request. '
    GetContextKeysForCustomPolicyRequest:
      type: object
      required:
        - PolicyInputList
      properties:
        PolicyInputList:
          $ref: '#/components/schemas/SimulationPolicyListType'
    GetContextKeysForPolicyResponse:
      type: object
      properties:
        ContextKeyNames:
          $ref: '#/components/schemas/ContextKeyNamesResultListType'
      description: 'Contains the response to a successful <a>GetContextKeysForPrincipalPolicy</a> or <a>GetContextKeysForCustomPolicy</a> request. '
    GetContextKeysForPrincipalPolicyRequest:
      type: object
      required:
        - PolicySourceArn
      properties:
        PolicySourceArn:
          $ref: '#/components/schemas/arnType'
        PolicyInputList:
          $ref: '#/components/schemas/SimulationPolicyListType'
    GetCredentialReportResponse:
      type: object
      properties:
        Content:
          $ref: '#/components/schemas/ReportContentType'
        ReportFormat:
          $ref: '#/components/schemas/ReportFormatType'
        GeneratedTime:
          $ref: '#/components/schemas/dateType'
      description: 'Contains the response to a successful <a>GetCredentialReport</a> request. '
    GetGroupPolicyRequest:
      type: object
      required:
        - GroupName
        - PolicyName
      properties:
        GroupName:
          $ref: '#/components/schemas/groupNameType'
        PolicyName:
          $ref: '#/components/schemas/policyNameType'
    GetGroupPolicyResponse:
      type: object
      required:
        - GroupName
        - PolicyName
        - PolicyDocument
      properties:
        GroupName:
          $ref: '#/components/schemas/groupNameType'
        PolicyName:
          $ref: '#/components/schemas/policyNameType'
        PolicyDocument:
          $ref: '#/components/schemas/policyDocumentType'
      description: 'Contains the response to a successful <a>GetGroupPolicy</a> request. '
    GetGroupRequest:
      type: object
      required:
        - GroupName
      properties:
        GroupName:
          $ref: '#/components/schemas/groupNameType'
        Marker:
          $ref: '#/components/schemas/markerType'
        MaxItems:
          $ref: '#/components/schemas/maxItemsType'
    GetGroupResponse:
      type: object
      required:
        - Group
        - Users
      properties:
        Group:
          $ref: '#/components/schemas/Group'
        Users:
          $ref: '#/components/schemas/userListType'
        IsTruncated:
          $ref: '#/components/schemas/booleanType'
        Marker:
          $ref: '#/components/schemas/markerType'
      description: 'Contains the response to a successful <a>GetGroup</a> request. '
    GetInstanceProfileRequest:
      type: object
      required:
        - InstanceProfileName
      example:
        InstanceProfileName: ExampleInstanceProfile
      properties:
        InstanceProfileName:
          $ref: '#/components/schemas/instanceProfileNameType'
    GetInstanceProfileResponse:
      type: object
      required:
        - InstanceProfile
      example:
        InstanceProfile:
          Arn: 'arn:aws:iam::336924118301:instance-profile/ExampleInstanceProfile'
          CreateDate: '2013-06-12T23:52:02Z'
          InstanceProfileId: AID2MAB8DPLSRHEXAMPLE
          InstanceProfileName: ExampleInstanceProfile
          Path: /
          Roles:
            - Arn: 'arn:aws:iam::336924118301:role/Test-Role'
              AssumeRolePolicyDocument: <URL-encoded-JSON>
              CreateDate: '2013-01-09T06:33:26Z'
              Path: /
              RoleId: AIDGPMS9RO4H3FEXAMPLE
              RoleName: Test-Role
      properties:
        InstanceProfile:
          $ref: '#/components/schemas/InstanceProfile'
      description: 'Contains the response to a successful <a>GetInstanceProfile</a> request. '
    GetLoginProfileRequest:
      type: object
      required:
        - UserName
      example:
        UserName: Anika
      properties:
        UserName:
          $ref: '#/components/schemas/userNameType'
    GetLoginProfileResponse:
      type: object
      required:
        - LoginProfile
      example:
        LoginProfile:
          CreateDate: '2012-09-21T23:03:39Z'
          UserName: Anika
      properties:
        LoginProfile:
          $ref: '#/components/schemas/LoginProfile'
      description: 'Contains the response to a successful <a>GetLoginProfile</a> request. '
    GetOpenIDConnectProviderRequest:
      type: object
      required:
        - OpenIDConnectProviderArn
      properties:
        OpenIDConnectProviderArn:
          $ref: '#/components/schemas/arnType'
    GetOpenIDConnectProviderResponse:
      type: object
      properties:
        Url:
          $ref: '#/components/schemas/OpenIDConnectProviderUrlType'
        ClientIDList:
          $ref: '#/components/schemas/clientIDListType'
        ThumbprintList:
          $ref: '#/components/schemas/thumbprintListType'
        CreateDate:
          $ref: '#/components/schemas/dateType'
      description: 'Contains the response to a successful <a>GetOpenIDConnectProvider</a> request. '
    GetPolicyRequest:
      type: object
      required:
        - PolicyArn
      properties:
        PolicyArn:
          $ref: '#/components/schemas/arnType'
    GetPolicyResponse:
      type: object
      properties:
        Policy:
          $ref: '#/components/schemas/Policy'
      description: 'Contains the response to a successful <a>GetPolicy</a> request. '
    GetPolicyVersionRequest:
      type: object
      required:
        - PolicyArn
        - VersionId
      properties:
        PolicyArn:
          $ref: '#/components/schemas/arnType'
        VersionId:
          $ref: '#/components/schemas/policyVersionIdType'
    GetPolicyVersionResponse:
      type: object
      properties:
        PolicyVersion:
          $ref: '#/components/schemas/PolicyVersion'
      description: 'Contains the response to a successful <a>GetPolicyVersion</a> request. '
    GetRolePolicyRequest:
      type: object
      required:
        - RoleName
        - PolicyName
      properties:
        RoleName:
          $ref: '#/components/schemas/roleNameType'
        PolicyName:
          $ref: '#/components/schemas/policyNameType'
    GetRolePolicyResponse:
      type: object
      required:
        - RoleName
        - PolicyName
        - PolicyDocument
      properties:
        RoleName:
          $ref: '#/components/schemas/roleNameType'
        PolicyName:
          $ref: '#/components/schemas/policyNameType'
        PolicyDocument:
          $ref: '#/components/schemas/policyDocumentType'
      description: 'Contains the response to a successful <a>GetRolePolicy</a> request. '
    GetRoleRequest:
      type: object
      required:
        - RoleName
      example:
        RoleName: Test-Role
      properties:
        RoleName:
          $ref: '#/components/schemas/roleNameType'
    GetRoleResponse:
      type: object
      required:
        - Role
      example:
        Role:
          Arn: 'arn:aws:iam::123456789012:role/Test-Role'
          AssumeRolePolicyDocument: <URL-encoded-JSON>
          CreateDate: '2013-04-18T05:01:58Z'
          Path: /
          RoleId: AIDIODR4TAW7CSEXAMPLE
          RoleName: Test-Role
      properties:
        Role:
          $ref: '#/components/schemas/Role'
      description: 'Contains the response to a successful <a>GetRole</a> request. '
    GetSAMLProviderRequest:
      type: object
      required:
        - SAMLProviderArn
      properties:
        SAMLProviderArn:
          $ref: '#/components/schemas/arnType'
    GetSAMLProviderResponse:
      type: object
      properties:
        SAMLMetadataDocument:
          $ref: '#/components/schemas/SAMLMetadataDocumentType'
        CreateDate:
          $ref: '#/components/schemas/dateType'
        ValidUntil:
          $ref: '#/components/schemas/dateType'
      description: 'Contains the response to a successful <a>GetSAMLProvider</a> request. '
    GetSSHPublicKeyRequest:
      type: object
      required:
        - UserName
        - SSHPublicKeyId
        - Encoding
      properties:
        UserName:
          $ref: '#/components/schemas/userNameType'
        SSHPublicKeyId:
          $ref: '#/components/schemas/publicKeyIdType'
        Encoding:
          $ref: '#/components/schemas/encodingType'
    GetSSHPublicKeyResponse:
      type: object
      properties:
        SSHPublicKey:
          $ref: '#/components/schemas/SSHPublicKey'
      description: Contains the response to a successful <a>GetSSHPublicKey</a> request.
    GetServerCertificateRequest:
      type: object
      required:
        - ServerCertificateName
      properties:
        ServerCertificateName:
          $ref: '#/components/schemas/serverCertificateNameType'
    GetServerCertificateResponse:
      type: object
      required:
        - ServerCertificate
      properties:
        ServerCertificate:
          $ref: '#/components/schemas/ServerCertificate'
      description: 'Contains the response to a successful <a>GetServerCertificate</a> request. '
    GetUserPolicyRequest:
      type: object
      required:
        - UserName
        - PolicyName
      properties:
        UserName:
          $ref: '#/components/schemas/existingUserNameType'
        PolicyName:
          $ref: '#/components/schemas/policyNameType'
    GetUserPolicyResponse:
      type: object
      required:
        - UserName
        - PolicyName
        - PolicyDocument
      properties:
        UserName:
          $ref: '#/components/schemas/existingUserNameType'
        PolicyName:
          $ref: '#/components/schemas/policyNameType'
        PolicyDocument:
          $ref: '#/components/schemas/policyDocumentType'
      description: 'Contains the response to a successful <a>GetUserPolicy</a> request. '
    GetUserRequest:
      type: object
      example:
        UserName: Bob
      properties:
        UserName:
          $ref: '#/components/schemas/existingUserNameType'
    GetUserResponse:
      type: object
      required:
        - User
      example:
        User:
          Arn: 'arn:aws:iam::123456789012:user/Bob'
          CreateDate: '2012-09-21T23:03:13Z'
          Path: /
          UserId: AKIAIOSFODNN7EXAMPLE
          UserName: Bob
      properties:
        User:
          $ref: '#/components/schemas/User'
      description: 'Contains the response to a successful <a>GetUser</a> request. '
    Group:
      type: object
      required:
        - Path
        - GroupName
        - GroupId
        - Arn
        - CreateDate
      properties:
        Path:
          $ref: '#/components/schemas/pathType'
        GroupName:
          $ref: '#/components/schemas/groupNameType'
        GroupId:
          $ref: '#/components/schemas/idType'
        Arn:
          $ref: '#/components/schemas/arnType'
        CreateDate:
          $ref: '#/components/schemas/dateType'
      description: '<p>Contains information about an IAM group entity.</p> <p>This data type is used as a response element in the following actions:</p> <ul> <li> <p> <a>CreateGroup</a> </p> </li> <li> <p> <a>GetGroup</a> </p> </li> <li> <p> <a>ListGroups</a> </p> </li> </ul>'
    GroupDetail:
      type: object
      properties:
        Path:
          $ref: '#/components/schemas/pathType'
        GroupName:
          $ref: '#/components/schemas/groupNameType'
        GroupId:
          $ref: '#/components/schemas/idType'
        Arn:
          $ref: '#/components/schemas/arnType'
        CreateDate:
          $ref: '#/components/schemas/dateType'
        GroupPolicyList:
          $ref: '#/components/schemas/policyDetailListType'
        AttachedManagedPolicies:
          $ref: '#/components/schemas/attachedPoliciesListType'
      description: '<p>Contains information about an IAM group, including all of the group''s policies.</p> <p>This data type is used as a response element in the <a>GetAccountAuthorizationDetails</a> action.</p>'
    InstanceProfile:
      type: object
      required:
        - Path
        - InstanceProfileName
        - InstanceProfileId
        - Arn
        - CreateDate
        - Roles
      properties:
        Path:
          $ref: '#/components/schemas/pathType'
        InstanceProfileName:
          $ref: '#/components/schemas/instanceProfileNameType'
        InstanceProfileId:
          $ref: '#/components/schemas/idType'
        Arn:
          $ref: '#/components/schemas/arnType'
        CreateDate:
          $ref: '#/components/schemas/dateType'
        Roles:
          $ref: '#/components/schemas/roleListType'
      description: '<p>Contains information about an instance profile.</p> <p>This data type is used as a response element in the following actions:</p> <ul> <li> <p> <a>CreateInstanceProfile</a> </p> </li> <li> <p> <a>GetInstanceProfile</a> </p> </li> <li> <p> <a>ListInstanceProfiles</a> </p> </li> <li> <p> <a>ListInstanceProfilesForRole</a> </p> </li> </ul>'
    InvalidAuthenticationCodeException:
      type: object
      properties:
        message:
          $ref: '#/components/schemas/invalidAuthenticationCodeMessage'
      description: The request was rejected because the authentication code was not recognized. The error message describes the specific error.
    InvalidCertificateException:
      type: object
      properties:
        message:
          $ref: '#/components/schemas/invalidCertificateMessage'
      description: The request was rejected because the certificate is invalid.
    InvalidInputException:
      type: object
      properties:
        message:
          $ref: '#/components/schemas/invalidInputMessage'
      description: The request was rejected because an invalid or out-of-range value was supplied for an input parameter.
    InvalidPublicKeyException:
      type: object
      properties:
        message:
          $ref: '#/components/schemas/invalidPublicKeyMessage'
      description: The request was rejected because the public key is malformed or otherwise invalid.
    InvalidUserTypeException:
      type: object
      properties:
        message:
          $ref: '#/components/schemas/invalidUserTypeMessage'
      description: The request was rejected because the type of user for the transaction was incorrect.
    KeyPairMismatchException:
      type: object
      properties:
        message:
          $ref: '#/components/schemas/keyPairMismatchMessage'
      description: The request was rejected because the public key certificate and the private key do not match.
    LimitExceededException:
      type: object
      properties:
        message:
          $ref: '#/components/schemas/limitExceededMessage'
      description: The request was rejected because it attempted to create resources beyond the current AWS account limits. The error message describes the limit exceeded.
    LineNumber:
      type: integer
    ListAccessKeysRequest:
      type: object
      example:
        UserName: Alice
      properties:
        UserName:
          $ref: '#/components/schemas/existingUserNameType'
        Marker:
          $ref: '#/components/schemas/markerType'
        MaxItems:
          $ref: '#/components/schemas/maxItemsType'
    ListAccessKeysResponse:
      type: object
      required:
        - AccessKeyMetadata
      example:
        AccessKeyMetadata:
          - AccessKeyId: AKIA111111111EXAMPLE
            CreateDate: '2016-12-01T22:19:58Z'
            Status: Active
            UserName: Alice
          - AccessKeyId: AKIA222222222EXAMPLE
            CreateDate: '2016-12-01T22:20:01Z'
            Status: Active
            UserName: Alice
      properties:
        AccessKeyMetadata:
          $ref: '#/components/schemas/accessKeyMetadataListType'
        IsTruncated:
          $ref: '#/components/schemas/booleanType'
        Marker:
          $ref: '#/components/schemas/markerType'
      description: 'Contains the response to a successful <a>ListAccessKeys</a> request. '
    ListAccountAliasesRequest:
      type: object
      example: {}
      properties:
        Marker:
          $ref: '#/components/schemas/markerType'
        MaxItems:
          $ref: '#/components/schemas/maxItemsType'
    ListAccountAliasesResponse:
      type: object
      required:
        - AccountAliases
      example:
        AccountAliases:
          - exmaple-corporation
      properties:
        AccountAliases:
          $ref: '#/components/schemas/accountAliasListType'
        IsTruncated:
          $ref: '#/components/schemas/booleanType'
        Marker:
          $ref: '#/components/schemas/markerType'
      description: 'Contains the response to a successful <a>ListAccountAliases</a> request. '
    ListAttachedGroupPoliciesRequest:
      type: object
      required:
        - GroupName
      properties:
        GroupName:
          $ref: '#/components/schemas/groupNameType'
        PathPrefix:
          $ref: '#/components/schemas/policyPathType'
        Marker:
          $ref: '#/components/schemas/markerType'
        MaxItems:
          $ref: '#/components/schemas/maxItemsType'
    ListAttachedGroupPoliciesResponse:
      type: object
      properties:
        AttachedPolicies:
          $ref: '#/components/schemas/attachedPoliciesListType'
        IsTruncated:
          $ref: '#/components/schemas/booleanType'
        Marker:
          $ref: '#/components/schemas/markerType'
      description: 'Contains the response to a successful <a>ListAttachedGroupPolicies</a> request. '
    ListAttachedRolePoliciesRequest:
      type: object
      required:
        - RoleName
      properties:
        RoleName:
          $ref: '#/components/schemas/roleNameType'
        PathPrefix:
          $ref: '#/components/schemas/policyPathType'
        Marker:
          $ref: '#/components/schemas/markerType'
        MaxItems:
          $ref: '#/components/schemas/maxItemsType'
    ListAttachedRolePoliciesResponse:
      type: object
      properties:
        AttachedPolicies:
          $ref: '#/components/schemas/attachedPoliciesListType'
        IsTruncated:
          $ref: '#/components/schemas/booleanType'
        Marker:
          $ref: '#/components/schemas/markerType'
      description: 'Contains the response to a successful <a>ListAttachedRolePolicies</a> request. '
    ListAttachedUserPoliciesRequest:
      type: object
      required:
        - UserName
      properties:
        UserName:
          $ref: '#/components/schemas/userNameType'
        PathPrefix:
          $ref: '#/components/schemas/policyPathType'
        Marker:
          $ref: '#/components/schemas/markerType'
        MaxItems:
          $ref: '#/components/schemas/maxItemsType'
    ListAttachedUserPoliciesResponse:
      type: object
      properties:
        AttachedPolicies:
          $ref: '#/components/schemas/attachedPoliciesListType'
        IsTruncated:
          $ref: '#/components/schemas/booleanType'
        Marker:
          $ref: '#/components/schemas/markerType'
      description: 'Contains the response to a successful <a>ListAttachedUserPolicies</a> request. '
    ListEntitiesForPolicyRequest:
      type: object
      required:
        - PolicyArn
      properties:
        PolicyArn:
          $ref: '#/components/schemas/arnType'
        EntityFilter:
          $ref: '#/components/schemas/EntityType'
        PathPrefix:
          $ref: '#/components/schemas/pathType'
        Marker:
          $ref: '#/components/schemas/markerType'
        MaxItems:
          $ref: '#/components/schemas/maxItemsType'
    ListEntitiesForPolicyResponse:
      type: object
      properties:
        PolicyGroups:
          $ref: '#/components/schemas/PolicyGroupListType'
        PolicyUsers:
          $ref: '#/components/schemas/PolicyUserListType'
        PolicyRoles:
          $ref: '#/components/schemas/PolicyRoleListType'
        IsTruncated:
          $ref: '#/components/schemas/booleanType'
        Marker:
          $ref: '#/components/schemas/markerType'
      description: 'Contains the response to a successful <a>ListEntitiesForPolicy</a> request. '
    ListGroupPoliciesRequest:
      type: object
      required:
        - GroupName
      example:
        GroupName: Admins
      properties:
        GroupName:
          $ref: '#/components/schemas/groupNameType'
        Marker:
          $ref: '#/components/schemas/markerType'
        MaxItems:
          $ref: '#/components/schemas/maxItemsType'
    ListGroupPoliciesResponse:
      type: object
      required:
        - PolicyNames
      example:
        PolicyNames:
          - AdminRoot
          - KeyPolicy
      properties:
        PolicyNames:
          $ref: '#/components/schemas/policyNameListType'
        IsTruncated:
          $ref: '#/components/schemas/booleanType'
        Marker:
          $ref: '#/components/schemas/markerType'
      description: 'Contains the response to a successful <a>ListGroupPolicies</a> request. '
    ListGroupsForUserRequest:
      type: object
      required:
        - UserName
      example:
        UserName: Bob
      properties:
        UserName:
          $ref: '#/components/schemas/existingUserNameType'
        Marker:
          $ref: '#/components/schemas/markerType'
        MaxItems:
          $ref: '#/components/schemas/maxItemsType'
    ListGroupsForUserResponse:
      type: object
      required:
        - Groups
      example:
        Groups:
          - Arn: 'arn:aws:iam::123456789012:group/division_abc/subdivision_xyz/product_1234/engineering/Test'
            CreateDate: '2016-11-30T14:10:01.156Z'
            GroupId: AGP2111111111EXAMPLE
            GroupName: Test
            Path: /division_abc/subdivision_xyz/product_1234/engineering/
          - Arn: 'arn:aws:iam::123456789012:group/division_abc/subdivision_xyz/product_1234/Managers'
            CreateDate: '2016-06-12T20:14:52.032Z'
            GroupId: AGPI222222222SEXAMPLE
            GroupName: Managers
            Path: /division_abc/subdivision_xyz/product_1234/
      properties:
        Groups:
          $ref: '#/components/schemas/groupListType'
        IsTruncated:
          $ref: '#/components/schemas/booleanType'
        Marker:
          $ref: '#/components/schemas/markerType'
      description: 'Contains the response to a successful <a>ListGroupsForUser</a> request. '
    ListGroupsRequest:
      type: object
      example: {}
      properties:
        PathPrefix:
          $ref: '#/components/schemas/pathPrefixType'
        Marker:
          $ref: '#/components/schemas/markerType'
        MaxItems:
          $ref: '#/components/schemas/maxItemsType'
    ListGroupsResponse:
      type: object
      required:
        - Groups
      example:
        Groups:
          - Arn: 'arn:aws:iam::123456789012:group/Admins'
            CreateDate: '2016-12-15T21:40:08.121Z'
            GroupId: AGPA1111111111EXAMPLE
            GroupName: Admins
            Path: /division_abc/subdivision_xyz/
          - Arn: 'arn:aws:iam::123456789012:group/division_abc/subdivision_xyz/product_1234/engineering/Test'
            CreateDate: '2016-11-30T14:10:01.156Z'
            GroupId: AGP22222222222EXAMPLE
            GroupName: Test
            Path: /division_abc/subdivision_xyz/product_1234/engineering/
          - Arn: 'arn:aws:iam::123456789012:group/division_abc/subdivision_xyz/product_1234/Managers'
            CreateDate: '2016-06-12T20:14:52.032Z'
            GroupId: AGPI3333333333EXAMPLE
            GroupName: Managers
            Path: /division_abc/subdivision_xyz/product_1234/
      properties:
        Groups:
          $ref: '#/components/schemas/groupListType'
        IsTruncated:
          $ref: '#/components/schemas/booleanType'
        Marker:
          $ref: '#/components/schemas/markerType'
      description: 'Contains the response to a successful <a>ListGroups</a> request. '
    ListInstanceProfilesForRoleRequest:
      type: object
      required:
        - RoleName
      properties:
        RoleName:
          $ref: '#/components/schemas/roleNameType'
        Marker:
          $ref: '#/components/schemas/markerType'
        MaxItems:
          $ref: '#/components/schemas/maxItemsType'
    ListInstanceProfilesForRoleResponse:
      type: object
      required:
        - InstanceProfiles
      properties:
        InstanceProfiles:
          $ref: '#/components/schemas/instanceProfileListType'
        IsTruncated:
          $ref: '#/components/schemas/booleanType'
        Marker:
          $ref: '#/components/schemas/markerType'
      description: 'Contains the response to a successful <a>ListInstanceProfilesForRole</a> request. '
    ListInstanceProfilesRequest:
      type: object
      properties:
        PathPrefix:
          $ref: '#/components/schemas/pathPrefixType'
        Marker:
          $ref: '#/components/schemas/markerType'
        MaxItems:
          $ref: '#/components/schemas/maxItemsType'
    ListInstanceProfilesResponse:
      type: object
      required:
        - InstanceProfiles
      properties:
        InstanceProfiles:
          $ref: '#/components/schemas/instanceProfileListType'
        IsTruncated:
          $ref: '#/components/schemas/booleanType'
        Marker:
          $ref: '#/components/schemas/markerType'
      description: 'Contains the response to a successful <a>ListInstanceProfiles</a> request. '
    ListMFADevicesRequest:
      type: object
      properties:
        UserName:
          $ref: '#/components/schemas/existingUserNameType'
        Marker:
          $ref: '#/components/schemas/markerType'
        MaxItems:
          $ref: '#/components/schemas/maxItemsType'
    ListMFADevicesResponse:
      type: object
      required:
        - MFADevices
      properties:
        MFADevices:
          $ref: '#/components/schemas/mfaDeviceListType'
        IsTruncated:
          $ref: '#/components/schemas/booleanType'
        Marker:
          $ref: '#/components/schemas/markerType'
      description: 'Contains the response to a successful <a>ListMFADevices</a> request. '
    ListOpenIDConnectProvidersRequest:
      type: object
      properties: {}
    ListOpenIDConnectProvidersResponse:
      type: object
      properties:
        OpenIDConnectProviderList:
          $ref: '#/components/schemas/OpenIDConnectProviderListType'
      description: 'Contains the response to a successful <a>ListOpenIDConnectProviders</a> request. '
    ListPoliciesRequest:
      type: object
      properties:
        Scope:
          $ref: '#/components/schemas/policyScopeType'
        OnlyAttached:
          $ref: '#/components/schemas/booleanType'
        PathPrefix:
          $ref: '#/components/schemas/policyPathType'
        Marker:
          $ref: '#/components/schemas/markerType'
        MaxItems:
          $ref: '#/components/schemas/maxItemsType'
    ListPoliciesResponse:
      type: object
      properties:
        Policies:
          $ref: '#/components/schemas/policyListType'
        IsTruncated:
          $ref: '#/components/schemas/booleanType'
        Marker:
          $ref: '#/components/schemas/markerType'
      description: 'Contains the response to a successful <a>ListPolicies</a> request. '
    ListPolicyVersionsRequest:
      type: object
      required:
        - PolicyArn
      properties:
        PolicyArn:
          $ref: '#/components/schemas/arnType'
        Marker:
          $ref: '#/components/schemas/markerType'
        MaxItems:
          $ref: '#/components/schemas/maxItemsType'
    ListPolicyVersionsResponse:
      type: object
      properties:
        Versions:
          $ref: '#/components/schemas/policyDocumentVersionListType'
        IsTruncated:
          $ref: '#/components/schemas/booleanType'
        Marker:
          $ref: '#/components/schemas/markerType'
      description: 'Contains the response to a successful <a>ListPolicyVersions</a> request. '
    ListRolePoliciesRequest:
      type: object
      required:
        - RoleName
      properties:
        RoleName:
          $ref: '#/components/schemas/roleNameType'
        Marker:
          $ref: '#/components/schemas/markerType'
        MaxItems:
          $ref: '#/components/schemas/maxItemsType'
    ListRolePoliciesResponse:
      type: object
      required:
        - PolicyNames
      properties:
        PolicyNames:
          $ref: '#/components/schemas/policyNameListType'
        IsTruncated:
          $ref: '#/components/schemas/booleanType'
        Marker:
          $ref: '#/components/schemas/markerType'
      description: 'Contains the response to a successful <a>ListRolePolicies</a> request. '
    ListRolesRequest:
      type: object
      properties:
        PathPrefix:
          $ref: '#/components/schemas/pathPrefixType'
        Marker:
          $ref: '#/components/schemas/markerType'
        MaxItems:
          $ref: '#/components/schemas/maxItemsType'
    ListRolesResponse:
      type: object
      required:
        - Roles
      properties:
        Roles:
          $ref: '#/components/schemas/roleListType'
        IsTruncated:
          $ref: '#/components/schemas/booleanType'
        Marker:
          $ref: '#/components/schemas/markerType'
      description: 'Contains the response to a successful <a>ListRoles</a> request. '
    ListSAMLProvidersRequest:
      type: object
      properties: {}
    ListSAMLProvidersResponse:
      type: object
      properties:
        SAMLProviderList:
          $ref: '#/components/schemas/SAMLProviderListType'
      description: 'Contains the response to a successful <a>ListSAMLProviders</a> request. '
    ListSSHPublicKeysRequest:
      type: object
      properties:
        UserName:
          $ref: '#/components/schemas/userNameType'
        Marker:
          $ref: '#/components/schemas/markerType'
        MaxItems:
          $ref: '#/components/schemas/maxItemsType'
    ListSSHPublicKeysResponse:
      type: object
      properties:
        SSHPublicKeys:
          $ref: '#/components/schemas/SSHPublicKeyListType'
        IsTruncated:
          $ref: '#/components/schemas/booleanType'
        Marker:
          $ref: '#/components/schemas/markerType'
      description: Contains the response to a successful <a>ListSSHPublicKeys</a> request.
    ListServerCertificatesRequest:
      type: object
      properties:
        PathPrefix:
          $ref: '#/components/schemas/pathPrefixType'
        Marker:
          $ref: '#/components/schemas/markerType'
        MaxItems:
          $ref: '#/components/schemas/maxItemsType'
    ListServerCertificatesResponse:
      type: object
      required:
        - ServerCertificateMetadataList
      properties:
        ServerCertificateMetadataList:
          $ref: '#/components/schemas/serverCertificateMetadataListType'
        IsTruncated:
          $ref: '#/components/schemas/booleanType'
        Marker:
          $ref: '#/components/schemas/markerType'
      description: 'Contains the response to a successful <a>ListServerCertificates</a> request. '
    ListServiceSpecificCredentialsRequest:
      type: object
      properties:
        UserName:
          $ref: '#/components/schemas/userNameType'
        ServiceName:
          $ref: '#/components/schemas/serviceName'
    ListServiceSpecificCredentialsResponse:
      type: object
      properties:
        ServiceSpecificCredentials:
          $ref: '#/components/schemas/ServiceSpecificCredentialsListType'
    ListSigningCertificatesRequest:
      type: object
      example:
        UserName: Bob
      properties:
        UserName:
          $ref: '#/components/schemas/existingUserNameType'
        Marker:
          $ref: '#/components/schemas/markerType'
        MaxItems:
          $ref: '#/components/schemas/maxItemsType'
    ListSigningCertificatesResponse:
      type: object
      required:
        - Certificates
      example:
        Certificates:
          - CertificateBody: '-----BEGIN CERTIFICATE-----<certificate-body>-----END CERTIFICATE-----'
            CertificateId: TA7SMP42TDN5Z26OBPJE7EXAMPLE
            Status: Active
            UploadDate: '2013-06-06T21:40:08Z'
            UserName: Bob
      properties:
        Certificates:
          $ref: '#/components/schemas/certificateListType'
        IsTruncated:
          $ref: '#/components/schemas/booleanType'
        Marker:
          $ref: '#/components/schemas/markerType'
      description: 'Contains the response to a successful <a>ListSigningCertificates</a> request. '
    ListUserPoliciesRequest:
      type: object
      required:
        - UserName
      properties:
        UserName:
          $ref: '#/components/schemas/existingUserNameType'
        Marker:
          $ref: '#/components/schemas/markerType'
        MaxItems:
          $ref: '#/components/schemas/maxItemsType'
    ListUserPoliciesResponse:
      type: object
      required:
        - PolicyNames
      properties:
        PolicyNames:
          $ref: '#/components/schemas/policyNameListType'
        IsTruncated:
          $ref: '#/components/schemas/booleanType'
        Marker:
          $ref: '#/components/schemas/markerType'
      description: 'Contains the response to a successful <a>ListUserPolicies</a> request. '
    ListUsersRequest:
      type: object
      example: {}
      properties:
        PathPrefix:
          $ref: '#/components/schemas/pathPrefixType'
        Marker:
          $ref: '#/components/schemas/markerType'
        MaxItems:
          $ref: '#/components/schemas/maxItemsType'
    ListUsersResponse:
      type: object
      required:
        - Users
      example:
        Users:
          - Arn: 'arn:aws:iam::123456789012:user/division_abc/subdivision_xyz/engineering/Juan'
            CreateDate: '2012-09-05T19:38:48Z'
            PasswordLastUsed: '2016-09-08T21:47:36Z'
            Path: /division_abc/subdivision_xyz/engineering/
            UserId: AID2MAB8DPLSRHEXAMPLE
            UserName: Juan
          - Arn: 'arn:aws:iam::123456789012:user/division_abc/subdivision_xyz/engineering/Anika'
            CreateDate: '2014-04-09T15:43:45Z'
            PasswordLastUsed: '2016-09-24T16:18:07Z'
            Path: /division_abc/subdivision_xyz/engineering/
            UserId: AIDIODR4TAW7CSEXAMPLE
            UserName: Anika
      properties:
        Users:
          $ref: '#/components/schemas/userListType'
        IsTruncated:
          $ref: '#/components/schemas/booleanType'
        Marker:
          $ref: '#/components/schemas/markerType'
      description: 'Contains the response to a successful <a>ListUsers</a> request. '
    ListVirtualMFADevicesRequest:
      type: object
      example: {}
      properties:
        AssignmentStatus:
          $ref: '#/components/schemas/assignmentStatusType'
        Marker:
          $ref: '#/components/schemas/markerType'
        MaxItems:
          $ref: '#/components/schemas/maxItemsType'
    ListVirtualMFADevicesResponse:
      type: object
      required:
        - VirtualMFADevices
      example:
        VirtualMFADevices:
          - SerialNumber: 'arn:aws:iam::123456789012:mfa/ExampleMFADevice'
          - SerialNumber: 'arn:aws:iam::123456789012:mfa/Juan'
      properties:
        VirtualMFADevices:
          $ref: '#/components/schemas/virtualMFADeviceListType'
        IsTruncated:
          $ref: '#/components/schemas/booleanType'
        Marker:
          $ref: '#/components/schemas/markerType'
      description: 'Contains the response to a successful <a>ListVirtualMFADevices</a> request. '
    LoginProfile:
      type: object
      required:
        - UserName
        - CreateDate
      properties:
        UserName:
          $ref: '#/components/schemas/userNameType'
        CreateDate:
          $ref: '#/components/schemas/dateType'
        PasswordResetRequired:
          $ref: '#/components/schemas/booleanType'
      description: <p>Contains the user name and password create date for a user.</p> <p> This data type is used as a response element in the <a>CreateLoginProfile</a> and <a>GetLoginProfile</a> actions. </p>
    MFADevice:
      type: object
      required:
        - UserName
        - SerialNumber
        - EnableDate
      properties:
        UserName:
          $ref: '#/components/schemas/userNameType'
        SerialNumber:
          $ref: '#/components/schemas/serialNumberType'
        EnableDate:
          $ref: '#/components/schemas/dateType'
      description: <p>Contains information about an MFA device.</p> <p>This data type is used as a response element in the <a>ListMFADevices</a> action.</p>
    MalformedCertificateException:
      type: object
      properties:
        message:
          $ref: '#/components/schemas/malformedCertificateMessage'
      description: The request was rejected because the certificate was malformed or expired. The error message describes the specific error.
    MalformedPolicyDocumentException:
      type: object
      properties:
        message:
          $ref: '#/components/schemas/malformedPolicyDocumentMessage'
      description: The request was rejected because the policy document was malformed. The error message describes the specific error.
    ManagedPolicyDetail:
      type: object
      properties:
        PolicyName:
          $ref: '#/components/schemas/policyNameType'
        PolicyId:
          $ref: '#/components/schemas/idType'
        Arn:
          $ref: '#/components/schemas/arnType'
        Path:
          $ref: '#/components/schemas/policyPathType'
        DefaultVersionId:
          $ref: '#/components/schemas/policyVersionIdType'
        AttachmentCount:
          $ref: '#/components/schemas/attachmentCountType'
        IsAttachable:
          $ref: '#/components/schemas/booleanType'
        Description:
          $ref: '#/components/schemas/policyDescriptionType'
        CreateDate:
          $ref: '#/components/schemas/dateType'
        UpdateDate:
          $ref: '#/components/schemas/dateType'
        PolicyVersionList:
          $ref: '#/components/schemas/policyDocumentVersionListType'
      description: '<p>Contains information about a managed policy, including the policy''s ARN, versions, and the number of principal entities (users, groups, and roles) that the policy is attached to.</p> <p>This data type is used as a response element in the <a>GetAccountAuthorizationDetails</a> action.</p> <p>For more information about managed policies, see <a href="http://docs.aws.amazon.com/IAM/latest/UserGuide/policies-managed-vs-inline.html">Managed Policies and Inline Policies</a> in the <i>Using IAM</i> guide. </p>'
    ManagedPolicyDetailListType:
      type: array
      items:
        $ref: '#/components/schemas/ManagedPolicyDetail'
    NoSuchEntityException:
      type: object
      properties:
        message:
          $ref: '#/components/schemas/noSuchEntityMessage'
      description: The request was rejected because it referenced an entity that does not exist. The error message describes the entity.
    OpenIDConnectProviderListEntry:
      type: object
      properties:
        Arn:
          $ref: '#/components/schemas/arnType'
      description: Contains the Amazon Resource Name (ARN) for an IAM OpenID Connect provider.
    OpenIDConnectProviderListType:
      type: array
      description: Contains a list of IAM OpenID Connect providers.
      items:
        $ref: '#/components/schemas/OpenIDConnectProviderListEntry'
    OpenIDConnectProviderUrlType:
      type: string
      description: Contains a URL that specifies the endpoint for an OpenID Connect provider.
      minLength: 1
      maxLength: 255
    OrganizationsDecisionDetail:
      type: object
      properties:
        AllowedByOrganizations:
          $ref: '#/components/schemas/booleanType'
      description: Contains information about AWS Organizations's affect on a policy simulation.
    PasswordPolicy:
      type: object
      properties:
        MinimumPasswordLength:
          $ref: '#/components/schemas/minimumPasswordLengthType'
        RequireSymbols:
          $ref: '#/components/schemas/booleanType'
        RequireNumbers:
          $ref: '#/components/schemas/booleanType'
        RequireUppercaseCharacters:
          $ref: '#/components/schemas/booleanType'
        RequireLowercaseCharacters:
          $ref: '#/components/schemas/booleanType'
        AllowUsersToChangePassword:
          $ref: '#/components/schemas/booleanType'
        ExpirePasswords:
          $ref: '#/components/schemas/booleanType'
        MaxPasswordAge:
          $ref: '#/components/schemas/maxPasswordAgeType'
        PasswordReusePrevention:
          $ref: '#/components/schemas/passwordReusePreventionType'
        HardExpiry:
          $ref: '#/components/schemas/booleanObjectType'
      description: <p>Contains information about the account password policy.</p> <p> This data type is used as a response element in the <a>GetAccountPasswordPolicy</a> action. </p>
    PasswordPolicyViolationException:
      type: object
      properties:
        message:
          $ref: '#/components/schemas/passwordPolicyViolationMessage'
      description: The request was rejected because the provided password did not meet the requirements imposed by the account password policy.
    Policy:
      type: object
      properties:
        PolicyName:
          $ref: '#/components/schemas/policyNameType'
        PolicyId:
          $ref: '#/components/schemas/idType'
        Arn:
          $ref: '#/components/schemas/arnType'
        Path:
          $ref: '#/components/schemas/policyPathType'
        DefaultVersionId:
          $ref: '#/components/schemas/policyVersionIdType'
        AttachmentCount:
          $ref: '#/components/schemas/attachmentCountType'
        IsAttachable:
          $ref: '#/components/schemas/booleanType'
        Description:
          $ref: '#/components/schemas/policyDescriptionType'
        CreateDate:
          $ref: '#/components/schemas/dateType'
        UpdateDate:
          $ref: '#/components/schemas/dateType'
      description: '<p>Contains information about a managed policy.</p> <p>This data type is used as a response element in the <a>CreatePolicy</a>, <a>GetPolicy</a>, and <a>ListPolicies</a> actions. </p> <p>For more information about managed policies, refer to <a href="http://docs.aws.amazon.com/IAM/latest/UserGuide/policies-managed-vs-inline.html">Managed Policies and Inline Policies</a> in the <i>Using IAM</i> guide. </p>'
    PolicyDetail:
      type: object
      properties:
        PolicyName:
          $ref: '#/components/schemas/policyNameType'
        PolicyDocument:
          $ref: '#/components/schemas/policyDocumentType'
      description: '<p>Contains information about an IAM policy, including the policy document.</p> <p>This data type is used as a response element in the <a>GetAccountAuthorizationDetails</a> action.</p>'
    PolicyEvaluationDecisionType:
      type: string
      enum:
        - allowed
        - explicitDeny
        - implicitDeny
    PolicyEvaluationException:
      type: object
      properties:
        message:
          $ref: '#/components/schemas/policyEvaluationErrorMessage'
      description: The request failed because a provided policy could not be successfully evaluated. An additional detail message indicates the source of the failure.
    PolicyGroup:
      type: object
      properties:
        GroupName:
          $ref: '#/components/schemas/groupNameType'
        GroupId:
          $ref: '#/components/schemas/idType'
      description: '<p>Contains information about a group that a managed policy is attached to.</p> <p>This data type is used as a response element in the <a>ListEntitiesForPolicy</a> action. </p> <p>For more information about managed policies, refer to <a href="http://docs.aws.amazon.com/IAM/latest/UserGuide/policies-managed-vs-inline.html">Managed Policies and Inline Policies</a> in the <i>Using IAM</i> guide. </p>'
    PolicyGroupListType:
      type: array
      items:
        $ref: '#/components/schemas/PolicyGroup'
    PolicyIdentifierType:
      type: string
    PolicyRole:
      type: object
      properties:
        RoleName:
          $ref: '#/components/schemas/roleNameType'
        RoleId:
          $ref: '#/components/schemas/idType'
      description: '<p>Contains information about a role that a managed policy is attached to.</p> <p>This data type is used as a response element in the <a>ListEntitiesForPolicy</a> action. </p> <p>For more information about managed policies, refer to <a href="http://docs.aws.amazon.com/IAM/latest/UserGuide/policies-managed-vs-inline.html">Managed Policies and Inline Policies</a> in the <i>Using IAM</i> guide. </p>'
    PolicyRoleListType:
      type: array
      items:
        $ref: '#/components/schemas/PolicyRole'
    PolicySourceType:
      type: string
      enum:
        - user
        - group
        - role
        - aws-managed
        - user-managed
        - resource
        - none
    PolicyUser:
      type: object
      properties:
        UserName:
          $ref: '#/components/schemas/userNameType'
        UserId:
          $ref: '#/components/schemas/idType'
      description: '<p>Contains information about a user that a managed policy is attached to.</p> <p>This data type is used as a response element in the <a>ListEntitiesForPolicy</a> action. </p> <p>For more information about managed policies, refer to <a href="http://docs.aws.amazon.com/IAM/latest/UserGuide/policies-managed-vs-inline.html">Managed Policies and Inline Policies</a> in the <i>Using IAM</i> guide. </p>'
    PolicyUserListType:
      type: array
      items:
        $ref: '#/components/schemas/PolicyUser'
    PolicyVersion:
      type: object
      properties:
        Document:
          $ref: '#/components/schemas/policyDocumentType'
        VersionId:
          $ref: '#/components/schemas/policyVersionIdType'
        IsDefaultVersion:
          $ref: '#/components/schemas/booleanType'
        CreateDate:
          $ref: '#/components/schemas/dateType'
      description: '<p>Contains information about a version of a managed policy.</p> <p>This data type is used as a response element in the <a>CreatePolicyVersion</a>, <a>GetPolicyVersion</a>, <a>ListPolicyVersions</a>, and <a>GetAccountAuthorizationDetails</a> actions. </p> <p>For more information about managed policies, refer to <a href="http://docs.aws.amazon.com/IAM/latest/UserGuide/policies-managed-vs-inline.html">Managed Policies and Inline Policies</a> in the <i>Using IAM</i> guide. </p>'
    Position:
      type: object
      properties:
        Line:
          $ref: '#/components/schemas/LineNumber'
        Column:
          $ref: '#/components/schemas/ColumnNumber'
      description: <p>Contains the row and column of a location of a <code>Statement</code> element in a policy document.</p> <p>This data type is used as a member of the <code> <a>Statement</a> </code> type.</p>
    PutGroupPolicyRequest:
      type: object
      required:
        - GroupName
        - PolicyName
        - PolicyDocument
      example:
        GroupName: Admins
        PolicyDocument: '{"Version":"2012-10-17","Statement":{"Effect":"Allow","Action":"*","Resource":"*"}}'
        PolicyName: AllPerms
      properties:
        GroupName:
          $ref: '#/components/schemas/groupNameType'
        PolicyName:
          $ref: '#/components/schemas/policyNameType'
        PolicyDocument:
          $ref: '#/components/schemas/policyDocumentType'
    PutRolePolicyRequest:
      type: object
      required:
        - RoleName
        - PolicyName
        - PolicyDocument
      example:
        PolicyDocument: '{"Version":"2012-10-17","Statement":{"Effect":"Allow","Action":"s3:*","Resource":"*"}}'
        PolicyName: S3AccessPolicy
        RoleName: S3Access
      properties:
        RoleName:
          $ref: '#/components/schemas/roleNameType'
        PolicyName:
          $ref: '#/components/schemas/policyNameType'
        PolicyDocument:
          $ref: '#/components/schemas/policyDocumentType'
    PutUserPolicyRequest:
      type: object
      required:
        - UserName
        - PolicyName
        - PolicyDocument
      example:
        PolicyDocument: '{"Version":"2012-10-17","Statement":{"Effect":"Allow","Action":"*","Resource":"*"}}'
        PolicyName: AllAccessPolicy
        UserName: Bob
      properties:
        UserName:
          $ref: '#/components/schemas/existingUserNameType'
        PolicyName:
          $ref: '#/components/schemas/policyNameType'
        PolicyDocument:
          $ref: '#/components/schemas/policyDocumentType'
    RemoveClientIDFromOpenIDConnectProviderRequest:
      type: object
      required:
        - OpenIDConnectProviderArn
        - ClientID
      properties:
        OpenIDConnectProviderArn:
          $ref: '#/components/schemas/arnType'
        ClientID:
          $ref: '#/components/schemas/clientIDType'
    RemoveRoleFromInstanceProfileRequest:
      type: object
      required:
        - InstanceProfileName
        - RoleName
      example:
        InstanceProfileName: ExampleInstanceProfile
        RoleName: Test-Role
      properties:
        InstanceProfileName:
          $ref: '#/components/schemas/instanceProfileNameType'
        RoleName:
          $ref: '#/components/schemas/roleNameType'
    RemoveUserFromGroupRequest:
      type: object
      required:
        - GroupName
        - UserName
      example:
        GroupName: Admins
        UserName: Bob
      properties:
        GroupName:
          $ref: '#/components/schemas/groupNameType'
        UserName:
          $ref: '#/components/schemas/existingUserNameType'
    ReportContentType:
      type: string
    ReportFormatType:
      type: string
      enum:
        - text/csv
    ReportStateDescriptionType:
      type: string
    ReportStateType:
      type: string
      enum:
        - STARTED
        - INPROGRESS
        - COMPLETE
    ResetServiceSpecificCredentialRequest:
      type: object
      required:
        - ServiceSpecificCredentialId
      properties:
        UserName:
          $ref: '#/components/schemas/userNameType'
        ServiceSpecificCredentialId:
          $ref: '#/components/schemas/serviceSpecificCredentialId'
    ResetServiceSpecificCredentialResponse:
      type: object
      properties:
        ServiceSpecificCredential:
          $ref: '#/components/schemas/ServiceSpecificCredential'
    ResourceHandlingOptionType:
      type: string
      minLength: 1
      maxLength: 64
    ResourceNameListType:
      type: array
      items:
        $ref: '#/components/schemas/ResourceNameType'
    ResourceNameType:
      type: string
      minLength: 1
      maxLength: 2048
    ResourceSpecificResult:
      type: object
      required:
        - EvalResourceName
        - EvalResourceDecision
      properties:
        EvalResourceName:
          $ref: '#/components/schemas/ResourceNameType'
        EvalResourceDecision:
          $ref: '#/components/schemas/PolicyEvaluationDecisionType'
        MatchedStatements:
          $ref: '#/components/schemas/StatementListType'
        MissingContextValues:
          $ref: '#/components/schemas/ContextKeyNamesResultListType'
        EvalDecisionDetails:
          $ref: '#/components/schemas/EvalDecisionDetailsType'
      description: <p>Contains the result of the simulation of a single API action call on a single resource.</p> <p>This data type is used by a member of the <a>EvaluationResult</a> data type.</p>
    ResourceSpecificResultListType:
      type: array
      items:
        $ref: '#/components/schemas/ResourceSpecificResult'
    ResyncMFADeviceRequest:
      type: object
      required:
        - UserName
        - SerialNumber
        - AuthenticationCode1
        - AuthenticationCode2
      properties:
        UserName:
          $ref: '#/components/schemas/existingUserNameType'
        SerialNumber:
          $ref: '#/components/schemas/serialNumberType'
        AuthenticationCode1:
          $ref: '#/components/schemas/authenticationCodeType'
        AuthenticationCode2:
          $ref: '#/components/schemas/authenticationCodeType'
    Role:
      type: object
      required:
        - Path
        - RoleName
        - RoleId
        - Arn
        - CreateDate
      properties:
        Path:
          $ref: '#/components/schemas/pathType'
        RoleName:
          $ref: '#/components/schemas/roleNameType'
        RoleId:
          $ref: '#/components/schemas/idType'
        Arn:
          $ref: '#/components/schemas/arnType'
        CreateDate:
          $ref: '#/components/schemas/dateType'
        AssumeRolePolicyDocument:
          $ref: '#/components/schemas/policyDocumentType'
        Description:
          $ref: '#/components/schemas/roleDescriptionType'
      description: Contains information about an IAM role. This structure is returned as a response element in several APIs that interact with roles.
    RoleDetail:
      type: object
      properties:
        Path:
          $ref: '#/components/schemas/pathType'
        RoleName:
          $ref: '#/components/schemas/roleNameType'
        RoleId:
          $ref: '#/components/schemas/idType'
        Arn:
          $ref: '#/components/schemas/arnType'
        CreateDate:
          $ref: '#/components/schemas/dateType'
        AssumeRolePolicyDocument:
          $ref: '#/components/schemas/policyDocumentType'
        InstanceProfileList:
          $ref: '#/components/schemas/instanceProfileListType'
        RolePolicyList:
          $ref: '#/components/schemas/policyDetailListType'
        AttachedManagedPolicies:
          $ref: '#/components/schemas/attachedPoliciesListType'
      description: '<p>Contains information about an IAM role, including all of the role''s policies.</p> <p>This data type is used as a response element in the <a>GetAccountAuthorizationDetails</a> action.</p>'
    SAMLMetadataDocumentType:
      type: string
      minLength: 1000
      maxLength: 10000000
    SAMLProviderListEntry:
      type: object
      properties:
        Arn:
          $ref: '#/components/schemas/arnType'
        ValidUntil:
          $ref: '#/components/schemas/dateType'
        CreateDate:
          $ref: '#/components/schemas/dateType'
      description: Contains the list of SAML providers for this account.
    SAMLProviderListType:
      type: array
      items:
        $ref: '#/components/schemas/SAMLProviderListEntry'
    SAMLProviderNameType:
      type: string
      pattern: '[\w._-]+'
      minLength: 1
      maxLength: 128
    SSHPublicKey:
      type: object
      required:
        - UserName
        - SSHPublicKeyId
        - Fingerprint
        - SSHPublicKeyBody
        - Status
      properties:
        UserName:
          $ref: '#/components/schemas/userNameType'
        SSHPublicKeyId:
          $ref: '#/components/schemas/publicKeyIdType'
        Fingerprint:
          $ref: '#/components/schemas/publicKeyFingerprintType'
        SSHPublicKeyBody:
          $ref: '#/components/schemas/publicKeyMaterialType'
        Status:
          $ref: '#/components/schemas/statusType'
        UploadDate:
          $ref: '#/components/schemas/dateType'
      description: <p>Contains information about an SSH public key.</p> <p>This data type is used as a response element in the <a>GetSSHPublicKey</a> and <a>UploadSSHPublicKey</a> actions. </p>
    SSHPublicKeyListType:
      type: array
      items:
        $ref: '#/components/schemas/SSHPublicKeyMetadata'
    SSHPublicKeyMetadata:
      type: object
      required:
        - UserName
        - SSHPublicKeyId
        - Status
        - UploadDate
      properties:
        UserName:
          $ref: '#/components/schemas/userNameType'
        SSHPublicKeyId:
          $ref: '#/components/schemas/publicKeyIdType'
        Status:
          $ref: '#/components/schemas/statusType'
        UploadDate:
          $ref: '#/components/schemas/dateType'
      description: '<p>Contains information about an SSH public key, without the key''s body or fingerprint.</p> <p>This data type is used as a response element in the <a>ListSSHPublicKeys</a> action.</p>'
    ServerCertificate:
      type: object
      required:
        - ServerCertificateMetadata
        - CertificateBody
      properties:
        ServerCertificateMetadata:
          $ref: '#/components/schemas/ServerCertificateMetadata'
        CertificateBody:
          $ref: '#/components/schemas/certificateBodyType'
        CertificateChain:
          $ref: '#/components/schemas/certificateChainType'
      description: <p>Contains information about a server certificate.</p> <p> This data type is used as a response element in the <a>GetServerCertificate</a> action. </p>
    ServerCertificateMetadata:
      type: object
      required:
        - Path
        - ServerCertificateName
        - ServerCertificateId
        - Arn
      properties:
        Path:
          $ref: '#/components/schemas/pathType'
        ServerCertificateName:
          $ref: '#/components/schemas/serverCertificateNameType'
        ServerCertificateId:
          $ref: '#/components/schemas/idType'
        Arn:
          $ref: '#/components/schemas/arnType'
        UploadDate:
          $ref: '#/components/schemas/dateType'
        Expiration:
          $ref: '#/components/schemas/dateType'
      description: '<p>Contains information about a server certificate without its certificate body, certificate chain, and private key.</p> <p> This data type is used as a response element in the <a>UploadServerCertificate</a> and <a>ListServerCertificates</a> actions. </p>'
    ServiceFailureException:
      type: object
      properties:
        message:
          $ref: '#/components/schemas/serviceFailureExceptionMessage'
      description: 'The request processing has failed because of an unknown error, exception or failure.'
    ServiceNotSupportedException:
      type: object
      properties:
        message:
          $ref: '#/components/schemas/serviceNotSupportedMessage'
      description: The specified service does not support service-specific credentials.
    ServiceSpecificCredential:
      type: object
      required:
        - CreateDate
        - ServiceName
        - ServiceUserName
        - ServicePassword
        - ServiceSpecificCredentialId
        - UserName
        - Status
      properties:
        CreateDate:
          $ref: '#/components/schemas/dateType'
        ServiceName:
          $ref: '#/components/schemas/serviceName'
        ServiceUserName:
          $ref: '#/components/schemas/serviceUserName'
        ServicePassword:
          $ref: '#/components/schemas/servicePassword'
        ServiceSpecificCredentialId:
          $ref: '#/components/schemas/serviceSpecificCredentialId'
        UserName:
          $ref: '#/components/schemas/userNameType'
        Status:
          $ref: '#/components/schemas/statusType'
      description: Contains the details of a service specific credential.
    ServiceSpecificCredentialMetadata:
      type: object
      required:
        - UserName
        - Status
        - ServiceUserName
        - CreateDate
        - ServiceSpecificCredentialId
        - ServiceName
      properties:
        UserName:
          $ref: '#/components/schemas/userNameType'
        Status:
          $ref: '#/components/schemas/statusType'
        ServiceUserName:
          $ref: '#/components/schemas/serviceUserName'
        CreateDate:
          $ref: '#/components/schemas/dateType'
        ServiceSpecificCredentialId:
          $ref: '#/components/schemas/serviceSpecificCredentialId'
        ServiceName:
          $ref: '#/components/schemas/serviceName'
      description: Contains additional details about a service-specific credential.
    ServiceSpecificCredentialsListType:
      type: array
      items:
        $ref: '#/components/schemas/ServiceSpecificCredentialMetadata'
    SetDefaultPolicyVersionRequest:
      type: object
      required:
        - PolicyArn
        - VersionId
      properties:
        PolicyArn:
          $ref: '#/components/schemas/arnType'
        VersionId:
          $ref: '#/components/schemas/policyVersionIdType'
    SigningCertificate:
      type: object
      required:
        - UserName
        - CertificateId
        - CertificateBody
        - Status
      properties:
        UserName:
          $ref: '#/components/schemas/userNameType'
        CertificateId:
          $ref: '#/components/schemas/certificateIdType'
        CertificateBody:
          $ref: '#/components/schemas/certificateBodyType'
        Status:
          $ref: '#/components/schemas/statusType'
        UploadDate:
          $ref: '#/components/schemas/dateType'
      description: <p>Contains information about an X.509 signing certificate.</p> <p>This data type is used as a response element in the <a>UploadSigningCertificate</a> and <a>ListSigningCertificates</a> actions. </p>
    SimulateCustomPolicyRequest:
      type: object
      required:
        - PolicyInputList
        - ActionNames
      properties:
        PolicyInputList:
          $ref: '#/components/schemas/SimulationPolicyListType'
        ActionNames:
          $ref: '#/components/schemas/ActionNameListType'
        ResourceArns:
          $ref: '#/components/schemas/ResourceNameListType'
        ResourcePolicy:
          $ref: '#/components/schemas/policyDocumentType'
        ResourceOwner:
          $ref: '#/components/schemas/ResourceNameType'
        CallerArn:
          $ref: '#/components/schemas/ResourceNameType'
        ContextEntries:
          $ref: '#/components/schemas/ContextEntryListType'
        ResourceHandlingOption:
          $ref: '#/components/schemas/ResourceHandlingOptionType'
        MaxItems:
          $ref: '#/components/schemas/maxItemsType'
        Marker:
          $ref: '#/components/schemas/markerType'
    SimulatePolicyResponse:
      type: object
      properties:
        EvaluationResults:
          $ref: '#/components/schemas/EvaluationResultsListType'
        IsTruncated:
          $ref: '#/components/schemas/booleanType'
        Marker:
          $ref: '#/components/schemas/markerType'
      description: Contains the response to a successful <a>SimulatePrincipalPolicy</a> or <a>SimulateCustomPolicy</a> request.
    SimulatePrincipalPolicyRequest:
      type: object
      required:
        - PolicySourceArn
        - ActionNames
      properties:
        PolicySourceArn:
          $ref: '#/components/schemas/arnType'
        PolicyInputList:
          $ref: '#/components/schemas/SimulationPolicyListType'
        ActionNames:
          $ref: '#/components/schemas/ActionNameListType'
        ResourceArns:
          $ref: '#/components/schemas/ResourceNameListType'
        ResourcePolicy:
          $ref: '#/components/schemas/policyDocumentType'
        ResourceOwner:
          $ref: '#/components/schemas/ResourceNameType'
        CallerArn:
          $ref: '#/components/schemas/ResourceNameType'
        ContextEntries:
          $ref: '#/components/schemas/ContextEntryListType'
        ResourceHandlingOption:
          $ref: '#/components/schemas/ResourceHandlingOptionType'
        MaxItems:
          $ref: '#/components/schemas/maxItemsType'
        Marker:
          $ref: '#/components/schemas/markerType'
    SimulationPolicyListType:
      type: array
      items:
        $ref: '#/components/schemas/policyDocumentType'
    Statement:
      type: object
      properties:
        SourcePolicyId:
          $ref: '#/components/schemas/PolicyIdentifierType'
        SourcePolicyType:
          $ref: '#/components/schemas/PolicySourceType'
        StartPosition:
          $ref: '#/components/schemas/Position'
        EndPosition:
          $ref: '#/components/schemas/Position'
      description: <p>Contains a reference to a <code>Statement</code> element in a policy document that determines the result of the simulation.</p> <p>This data type is used by the <code>MatchedStatements</code> member of the <code> <a>EvaluationResult</a> </code> type.</p>
    StatementListType:
      type: array
      items:
        $ref: '#/components/schemas/Statement'
    UnmodifiableEntityException:
      type: object
      properties:
        message:
          $ref: '#/components/schemas/unmodifiableEntityMessage'
      description: The request was rejected because only the service that depends on the service-linked role can modify or delete the role on your behalf. The error message includes the name of the service that depends on this service-linked role. You must request the change through that service.
    UnrecognizedPublicKeyEncodingException:
      type: object
      properties:
        message:
          $ref: '#/components/schemas/unrecognizedPublicKeyEncodingMessage'
      description: The request was rejected because the public key encoding format is unsupported or unrecognized.
    UpdateAccessKeyRequest:
      type: object
      required:
        - AccessKeyId
        - Status
      example:
        AccessKeyId: AKIAIOSFODNN7EXAMPLE
        Status: Inactive
        UserName: Bob
      properties:
        UserName:
          $ref: '#/components/schemas/existingUserNameType'
        AccessKeyId:
          $ref: '#/components/schemas/accessKeyIdType'
        Status:
          $ref: '#/components/schemas/statusType'
    UpdateAccountPasswordPolicyRequest:
      type: object
      example:
        MinimumPasswordLength: 8
        RequireNumbers: true
      properties:
        MinimumPasswordLength:
          $ref: '#/components/schemas/minimumPasswordLengthType'
        RequireSymbols:
          $ref: '#/components/schemas/booleanType'
        RequireNumbers:
          $ref: '#/components/schemas/booleanType'
        RequireUppercaseCharacters:
          $ref: '#/components/schemas/booleanType'
        RequireLowercaseCharacters:
          $ref: '#/components/schemas/booleanType'
        AllowUsersToChangePassword:
          $ref: '#/components/schemas/booleanType'
        MaxPasswordAge:
          $ref: '#/components/schemas/maxPasswordAgeType'
        PasswordReusePrevention:
          $ref: '#/components/schemas/passwordReusePreventionType'
        HardExpiry:
          $ref: '#/components/schemas/booleanObjectType'
    UpdateAssumeRolePolicyRequest:
      type: object
      required:
        - RoleName
        - PolicyDocument
      example:
        PolicyDocument: '{"Version":"2012-10-17","Statement":[{"Effect":"Allow","Principal":{"Service":["ec2.amazonaws.com"]},"Action":["sts:AssumeRole"]}]}'
        RoleName: S3AccessForEC2Instances
      properties:
        RoleName:
          $ref: '#/components/schemas/roleNameType'
        PolicyDocument:
          $ref: '#/components/schemas/policyDocumentType'
    UpdateGroupRequest:
      type: object
      required:
        - GroupName
      example:
        GroupName: Test
        NewGroupName: Test-1
      properties:
        GroupName:
          $ref: '#/components/schemas/groupNameType'
        NewPath:
          $ref: '#/components/schemas/pathType'
        NewGroupName:
          $ref: '#/components/schemas/groupNameType'
    UpdateLoginProfileRequest:
      type: object
      required:
        - UserName
      example:
        Password: 'SomeKindOfPassword123!@#'
        UserName: Bob
      properties:
        UserName:
          $ref: '#/components/schemas/userNameType'
        Password:
          $ref: '#/components/schemas/passwordType'
        PasswordResetRequired:
          $ref: '#/components/schemas/booleanObjectType'
    UpdateOpenIDConnectProviderThumbprintRequest:
      type: object
      required:
        - OpenIDConnectProviderArn
        - ThumbprintList
      properties:
        OpenIDConnectProviderArn:
          $ref: '#/components/schemas/arnType'
        ThumbprintList:
          $ref: '#/components/schemas/thumbprintListType'
    UpdateRoleDescriptionRequest:
      type: object
      required:
        - RoleName
        - Description
      properties:
        RoleName:
          $ref: '#/components/schemas/roleNameType'
        Description:
          $ref: '#/components/schemas/roleDescriptionType'
    UpdateRoleDescriptionResponse:
      type: object
      properties:
        Role:
          $ref: '#/components/schemas/Role'
    UpdateSAMLProviderRequest:
      type: object
      required:
        - SAMLMetadataDocument
        - SAMLProviderArn
      properties:
        SAMLMetadataDocument:
          $ref: '#/components/schemas/SAMLMetadataDocumentType'
        SAMLProviderArn:
          $ref: '#/components/schemas/arnType'
    UpdateSAMLProviderResponse:
      type: object
      properties:
        SAMLProviderArn:
          $ref: '#/components/schemas/arnType'
      description: 'Contains the response to a successful <a>UpdateSAMLProvider</a> request. '
    UpdateSSHPublicKeyRequest:
      type: object
      required:
        - UserName
        - SSHPublicKeyId
        - Status
      properties:
        UserName:
          $ref: '#/components/schemas/userNameType'
        SSHPublicKeyId:
          $ref: '#/components/schemas/publicKeyIdType'
        Status:
          $ref: '#/components/schemas/statusType'
    UpdateServerCertificateRequest:
      type: object
      required:
        - ServerCertificateName
      properties:
        ServerCertificateName:
          $ref: '#/components/schemas/serverCertificateNameType'
        NewPath:
          $ref: '#/components/schemas/pathType'
        NewServerCertificateName:
          $ref: '#/components/schemas/serverCertificateNameType'
    UpdateServiceSpecificCredentialRequest:
      type: object
      required:
        - ServiceSpecificCredentialId
        - Status
      properties:
        UserName:
          $ref: '#/components/schemas/userNameType'
        ServiceSpecificCredentialId:
          $ref: '#/components/schemas/serviceSpecificCredentialId'
        Status:
          $ref: '#/components/schemas/statusType'
    UpdateSigningCertificateRequest:
      type: object
      required:
        - CertificateId
        - Status
      example:
        CertificateId: TA7SMP42TDN5Z26OBPJE7EXAMPLE
        Status: Inactive
        UserName: Bob
      properties:
        UserName:
          $ref: '#/components/schemas/existingUserNameType'
        CertificateId:
          $ref: '#/components/schemas/certificateIdType'
        Status:
          $ref: '#/components/schemas/statusType'
    UpdateUserRequest:
      type: object
      required:
        - UserName
      example:
        NewUserName: Robert
        UserName: Bob
      properties:
        UserName:
          $ref: '#/components/schemas/existingUserNameType'
        NewPath:
          $ref: '#/components/schemas/pathType'
        NewUserName:
          $ref: '#/components/schemas/userNameType'
    UploadSSHPublicKeyRequest:
      type: object
      required:
        - UserName
        - SSHPublicKeyBody
      properties:
        UserName:
          $ref: '#/components/schemas/userNameType'
        SSHPublicKeyBody:
          $ref: '#/components/schemas/publicKeyMaterialType'
    UploadSSHPublicKeyResponse:
      type: object
      properties:
        SSHPublicKey:
          $ref: '#/components/schemas/SSHPublicKey'
      description: Contains the response to a successful <a>UploadSSHPublicKey</a> request.
    UploadServerCertificateRequest:
      type: object
      required:
        - ServerCertificateName
        - CertificateBody
        - PrivateKey
      example:
        CertificateBody: '-----BEGIN CERTIFICATE-----<a very long certificate text string>-----END CERTIFICATE-----'
        Path: /company/servercerts/
        PrivateKey: '-----BEGIN DSA PRIVATE KEY-----<a very long private key string>-----END DSA PRIVATE KEY-----'
        ServerCertificateName: ProdServerCert
      properties:
        Path:
          $ref: '#/components/schemas/pathType'
        ServerCertificateName:
          $ref: '#/components/schemas/serverCertificateNameType'
        CertificateBody:
          $ref: '#/components/schemas/certificateBodyType'
        PrivateKey:
          $ref: '#/components/schemas/privateKeyType'
        CertificateChain:
          $ref: '#/components/schemas/certificateChainType'
    UploadServerCertificateResponse:
      type: object
      example:
        ServerCertificateMetadata:
          Arn: 'arn:aws:iam::123456789012:server-certificate/company/servercerts/ProdServerCert'
          Expiration: '2012-05-08T01:02:03.004Z'
          Path: /company/servercerts/
          ServerCertificateId: ASCA1111111111EXAMPLE
          ServerCertificateName: ProdServerCert
          UploadDate: '2010-05-08T01:02:03.004Z'
      properties:
        ServerCertificateMetadata:
          $ref: '#/components/schemas/ServerCertificateMetadata'
      description: 'Contains the response to a successful <a>UploadServerCertificate</a> request. '
    UploadSigningCertificateRequest:
      type: object
      required:
        - CertificateBody
      example:
        CertificateBody: '-----BEGIN CERTIFICATE-----<certificate-body>-----END CERTIFICATE-----'
        UserName: Bob
      properties:
        UserName:
          $ref: '#/components/schemas/existingUserNameType'
        CertificateBody:
          $ref: '#/components/schemas/certificateBodyType'
    UploadSigningCertificateResponse:
      type: object
      required:
        - Certificate
      example:
        Certificate:
          CertificateBody: '-----BEGIN CERTIFICATE-----<certificate-body>-----END CERTIFICATE-----'
          CertificateId: ID123456789012345EXAMPLE
          Status: Active
          UploadDate: '2015-06-06T21:40:08.121Z'
          UserName: Bob
      properties:
        Certificate:
          $ref: '#/components/schemas/SigningCertificate'
      description: 'Contains the response to a successful <a>UploadSigningCertificate</a> request. '
    User:
      type: object
      required:
        - Path
        - UserName
        - UserId
        - Arn
        - CreateDate
      properties:
        Path:
          $ref: '#/components/schemas/pathType'
        UserName:
          $ref: '#/components/schemas/userNameType'
        UserId:
          $ref: '#/components/schemas/idType'
        Arn:
          $ref: '#/components/schemas/arnType'
        CreateDate:
          $ref: '#/components/schemas/dateType'
        PasswordLastUsed:
          $ref: '#/components/schemas/dateType'
      description: '<p>Contains information about an IAM user entity.</p> <p>This data type is used as a response element in the following actions:</p> <ul> <li> <p> <a>CreateUser</a> </p> </li> <li> <p> <a>GetUser</a> </p> </li> <li> <p> <a>ListUsers</a> </p> </li> </ul>'
    UserDetail:
      type: object
      properties:
        Path:
          $ref: '#/components/schemas/pathType'
        UserName:
          $ref: '#/components/schemas/userNameType'
        UserId:
          $ref: '#/components/schemas/idType'
        Arn:
          $ref: '#/components/schemas/arnType'
        CreateDate:
          $ref: '#/components/schemas/dateType'
        UserPolicyList:
          $ref: '#/components/schemas/policyDetailListType'
        GroupList:
          $ref: '#/components/schemas/groupNameListType'
        AttachedManagedPolicies:
          $ref: '#/components/schemas/attachedPoliciesListType'
      description: '<p>Contains information about an IAM user, including all the user''s policies and all the IAM groups the user is in.</p> <p>This data type is used as a response element in the <a>GetAccountAuthorizationDetails</a> action.</p>'
    VirtualMFADevice:
      type: object
      required:
        - SerialNumber
      properties:
        SerialNumber:
          $ref: '#/components/schemas/serialNumberType'
        Base32StringSeed:
          $ref: '#/components/schemas/BootstrapDatum'
        QRCodePNG:
          $ref: '#/components/schemas/BootstrapDatum'
        User:
          $ref: '#/components/schemas/User'
        EnableDate:
          $ref: '#/components/schemas/dateType'
      description: Contains information about a virtual MFA device.
    accessKeyIdType:
      type: string
      pattern: '[\w]+'
      minLength: 16
      maxLength: 128
    accessKeyMetadataListType:
      type: array
      description: <p>Contains a list of access key metadata.</p> <p>This data type is used as a response element in the <a>ListAccessKeys</a> action.</p>
      items:
        $ref: '#/components/schemas/AccessKeyMetadata'
    accessKeySecretType:
      type: string
      format: password
    accountAliasListType:
      type: array
      items:
        $ref: '#/components/schemas/accountAliasType'
    accountAliasType:
      type: string
      pattern: '^[a-z0-9](([a-z0-9]|-(?!-))*[a-z0-9])?$'
      minLength: 3
      maxLength: 63
    arnType:
      type: string
      description: '<p>The Amazon Resource Name (ARN). ARNs are unique identifiers for AWS resources.</p> <p>For more information about ARNs, go to <a href="http://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html">Amazon Resource Names (ARNs) and AWS Service Namespaces</a> in the <i>AWS General Reference</i>. </p>'
      minLength: 20
      maxLength: 2048
    assignmentStatusType:
      type: string
      enum:
        - Assigned
        - Unassigned
        - Any
    attachedPoliciesListType:
      type: array
      items:
        $ref: '#/components/schemas/AttachedPolicy'
    attachmentCountType:
      type: integer
    authenticationCodeType:
      type: string
      pattern: '[\d]+'
      minLength: 6
      maxLength: 6
    booleanObjectType:
      type: boolean
    booleanType:
      type: boolean
    certificateBodyType:
      type: string
      pattern: '[\u0009\u000A\u000D\u0020-\u00FF]+'
      minLength: 1
      maxLength: 16384
    certificateChainType:
      type: string
      pattern: '[\u0009\u000A\u000D\u0020-\u00FF]+'
      minLength: 1
      maxLength: 2097152
    certificateIdType:
      type: string
      pattern: '[\w]+'
      minLength: 24
      maxLength: 128
    certificateListType:
      type: array
      description: <p>Contains a list of signing certificates.</p> <p>This data type is used as a response element in the <a>ListSigningCertificates</a> action.</p>
      items:
        $ref: '#/components/schemas/SigningCertificate'
    clientIDListType:
      type: array
      items:
        $ref: '#/components/schemas/clientIDType'
    clientIDType:
      type: string
      minLength: 1
      maxLength: 255
    credentialReportExpiredExceptionMessage:
      type: string
    credentialReportNotPresentExceptionMessage:
      type: string
    credentialReportNotReadyExceptionMessage:
      type: string
    customSuffixType:
      type: string
      pattern: '[\w+=,.@-]+'
      minLength: 1
      maxLength: 64
    dateType:
      type: string
      format: date-time
    deleteConflictMessage:
      type: string
    duplicateCertificateMessage:
      type: string
    duplicateSSHPublicKeyMessage:
      type: string
    encodingType:
      type: string
      enum:
        - SSH
        - PEM
    entityAlreadyExistsMessage:
      type: string
    entityListType:
      type: array
      items:
        $ref: '#/components/schemas/EntityType'
    entityTemporarilyUnmodifiableMessage:
      type: string
    existingUserNameType:
      type: string
      pattern: '[\w+=,.@-]+'
      minLength: 1
      maxLength: 128
    groupDetailListType:
      type: array
      items:
        $ref: '#/components/schemas/GroupDetail'
    groupListType:
      type: array
      description: <p>Contains a list of IAM groups.</p> <p>This data type is used as a response element in the <a>ListGroups</a> action.</p>
      items:
        $ref: '#/components/schemas/Group'
    groupNameListType:
      type: array
      items:
        $ref: '#/components/schemas/groupNameType'
    groupNameType:
      type: string
      pattern: '[\w+=,.@-]+'
      minLength: 1
      maxLength: 128
    idType:
      type: string
      pattern: '[\w]+'
      minLength: 16
      maxLength: 128
    instanceProfileListType:
      type: array
      description: Contains a list of instance profiles.
      items:
        $ref: '#/components/schemas/InstanceProfile'
    instanceProfileNameType:
      type: string
      pattern: '[\w+=,.@-]+'
      minLength: 1
      maxLength: 128
    invalidAuthenticationCodeMessage:
      type: string
    invalidCertificateMessage:
      type: string
    invalidInputMessage:
      type: string
    invalidPublicKeyMessage:
      type: string
    invalidUserTypeMessage:
      type: string
    keyPairMismatchMessage:
      type: string
    limitExceededMessage:
      type: string
    malformedCertificateMessage:
      type: string
    malformedPolicyDocumentMessage:
      type: string
    markerType:
      type: string
      pattern: '[\u0020-\u00FF]+'
      minLength: 1
      maxLength: 320
    maxItemsType:
      type: integer
      minimum: 1
      maximum: 1000
    maxPasswordAgeType:
      type: integer
      minimum: 1
      maximum: 1095
    mfaDeviceListType:
      type: array
      description: <p>Contains a list of MFA devices.</p> <p>This data type is used as a response element in the <a>ListMFADevices</a> and <a>ListVirtualMFADevices</a> actions. </p>
      items:
        $ref: '#/components/schemas/MFADevice'
    minimumPasswordLengthType:
      type: integer
      minimum: 6
      maximum: 128
    noSuchEntityMessage:
      type: string
    passwordPolicyViolationMessage:
      type: string
    passwordReusePreventionType:
      type: integer
      minimum: 1
      maximum: 24
    passwordType:
      type: string
      pattern: '[\u0009\u000A\u000D\u0020-\u00FF]+'
      minLength: 1
      maxLength: 128
      format: password
    pathPrefixType:
      type: string
      pattern: '\u002F[\u0021-\u007F]*'
      minLength: 1
      maxLength: 512
    pathType:
      type: string
      pattern: '(\u002F)|(\u002F[\u0021-\u007F]+\u002F)'
      minLength: 1
      maxLength: 512
    policyDescriptionType:
      type: string
      maxLength: 1000
    policyDetailListType:
      type: array
      items:
        $ref: '#/components/schemas/PolicyDetail'
    policyDocumentType:
      type: string
      pattern: '[\u0009\u000A\u000D\u0020-\u00FF]+'
      minLength: 1
      maxLength: 131072
    policyDocumentVersionListType:
      type: array
      items:
        $ref: '#/components/schemas/PolicyVersion'
    policyEvaluationErrorMessage:
      type: string
    policyListType:
      type: array
      items:
        $ref: '#/components/schemas/Policy'
    policyNameListType:
      type: array
      description: <p>Contains a list of policy names.</p> <p>This data type is used as a response element in the <a>ListPolicies</a> action.</p>
      items:
        $ref: '#/components/schemas/policyNameType'
    policyNameType:
      type: string
      pattern: '[\w+=,.@-]+'
      minLength: 1
      maxLength: 128
    policyPathType:
      type: string
      pattern: '((/[A-Za-z0-9\.,\+@=_-]+)*)/'
    policyScopeType:
      type: string
      enum:
        - All
        - AWS
        - Local
    policyVersionIdType:
      type: string
      pattern: 'v[1-9][0-9]*(\.[A-Za-z0-9-]*)?'
    privateKeyType:
      type: string
      pattern: '[\u0009\u000A\u000D\u0020-\u00FF]+'
      minLength: 1
      maxLength: 16384
      format: password
    publicKeyFingerprintType:
      type: string
      pattern: '[:\w]+'
      minLength: 48
      maxLength: 48
    publicKeyIdType:
      type: string
      pattern: '[\w]+'
      minLength: 20
      maxLength: 128
    publicKeyMaterialType:
      type: string
      pattern: '[\u0009\u000A\u000D\u0020-\u00FF]+'
      minLength: 1
      maxLength: 16384
    roleDescriptionType:
      type: string
      pattern: '[\p{L}\p{M}\p{Z}\p{S}\p{N}\p{P}]*'
      maxLength: 1000
    roleDetailListType:
      type: array
      items:
        $ref: '#/components/schemas/RoleDetail'
    roleListType:
      type: array
      description: <p>Contains a list of IAM roles.</p> <p>This data type is used as a response element in the <a>ListRoles</a> action.</p>
      items:
        $ref: '#/components/schemas/Role'
    roleNameType:
      type: string
      pattern: '[\w+=,.@-]+'
      minLength: 1
      maxLength: 64
    serialNumberType:
      type: string
      pattern: '[\w+=/:,.@-]+'
      minLength: 9
      maxLength: 256
    serverCertificateMetadataListType:
      type: array
      items:
        $ref: '#/components/schemas/ServerCertificateMetadata'
    serverCertificateNameType:
      type: string
      pattern: '[\w+=,.@-]+'
      minLength: 1
      maxLength: 128
    serviceFailureExceptionMessage:
      type: string
    serviceName:
      type: string
    serviceNotSupportedMessage:
      type: string
    servicePassword:
      type: string
      format: password
    serviceSpecificCredentialId:
      type: string
      pattern: '[\w]+'
      minLength: 20
      maxLength: 128
    serviceUserName:
      type: string
      pattern: '[\w+=,.@-]+'
      minLength: 17
      maxLength: 200
    statusType:
      type: string
      enum:
        - Active
        - Inactive
    stringType:
      type: string
    summaryKeyType:
      type: string
      enum:
        - Users
        - UsersQuota
        - Groups
        - GroupsQuota
        - ServerCertificates
        - ServerCertificatesQuota
        - UserPolicySizeQuota
        - GroupPolicySizeQuota
        - GroupsPerUserQuota
        - SigningCertificatesPerUserQuota
        - AccessKeysPerUserQuota
        - MFADevices
        - MFADevicesInUse
        - AccountMFAEnabled
        - AccountAccessKeysPresent
        - AccountSigningCertificatesPresent
        - AttachedPoliciesPerGroupQuota
        - AttachedPoliciesPerRoleQuota
        - AttachedPoliciesPerUserQuota
        - Policies
        - PoliciesQuota
        - PolicySizeQuota
        - PolicyVersionsInUse
        - PolicyVersionsInUseQuota
        - VersionsPerPolicyQuota
    summaryMapType:
      type: array
      items:
        type: object
        properties:
          key:
            $ref: '#/components/schemas/summaryKeyType'
          value:
            $ref: '#/components/schemas/summaryValueType'
    summaryValueType:
      type: integer
    thumbprintListType:
      type: array
      description: Contains a list of thumbprints of identity provider server certificates.
      items:
        $ref: '#/components/schemas/thumbprintType'
    thumbprintType:
      type: string
      description: <p>Contains a thumbprint for an identity provider's server certificate.</p> <p>The identity provider's server certificate thumbprint is the hex-encoded SHA-1 hash value of the self-signed X.509 certificate used by the domain where the OpenID Connect provider makes its keys available. It is always a 40-character string.</p>
      minLength: 40
      maxLength: 40
    unmodifiableEntityMessage:
      type: string
    unrecognizedPublicKeyEncodingMessage:
      type: string
    userDetailListType:
      type: array
      items:
        $ref: '#/components/schemas/UserDetail'
    userListType:
      type: array
      description: <p>Contains a list of users.</p> <p>This data type is used as a response element in the <a>GetGroup</a> and <a>ListUsers</a> actions. </p>
      items:
        $ref: '#/components/schemas/User'
    userNameType:
      type: string
      pattern: '[\w+=,.@-]+'
      minLength: 1
      maxLength: 64
    virtualMFADeviceListType:
      type: array
      items:
        $ref: '#/components/schemas/VirtualMFADevice'
    virtualMFADeviceName:
      type: string
      pattern: '[\w+=,.@-]+'
      minLength: 1
  parameters:
    Action:
      name: Action
      in: header
      required: true
      schema:
        type: string
    Version:
      name: Version
      in: header
      required: true
      schema:
        type: string
    X-Amz-Content-Sha256:
      name: X-Amz-Content-Sha256
      in: header
      required: false
      schema:
        type: string
    X-Amz-Date:
      name: X-Amz-Date
      in: header
      required: false
      schema:
        type: string
    X-Amz-Algorithm:
      name: X-Amz-Algorithm
      in: header
      required: false
      schema:
        type: string
    X-Amz-Credential:
      name: X-Amz-Credential
      in: header
      required: false
      schema:
        type: string
    X-Amz-Security-Token:
      name: X-Amz-Security-Token
      in: header
      required: false
      schema:
        type: string
    X-Amz-Signature:
      name: X-Amz-Signature
      in: header
      required: false
      schema:
        type: string
    X-Amz-SignedHeaders:
      name: X-Amz-SignedHeaders
      in: header
      required: false
      schema:
        type: string
  securitySchemes:
    hmac:
      type: apiKey
      name: Authorization
      in: header
      description: Amazon Signature authorization v4
      x-amazon-apigateway-authtype: awsSigv4
