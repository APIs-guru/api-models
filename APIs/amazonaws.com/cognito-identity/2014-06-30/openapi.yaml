openapi: 3.0.0
servers:
  - url: 'http://cognito-identity.amazonaws.com/'
info:
  version: '2014-06-30'
  x-release: v4
  title: Amazon Cognito Identity
  description: '<fullname>Amazon Cognito</fullname> <p>Amazon Cognito is a web service that delivers scoped temporary credentials to mobile devices and other untrusted environments. Amazon Cognito uniquely identifies a device and supplies the user with a consistent identity over the lifetime of an application.</p> <p>Using Amazon Cognito, you can enable authentication with one or more third-party identity providers (Facebook, Google, or Login with Amazon), and you can also choose to support unauthenticated access from your app. Cognito delivers a unique identifier for each user and acts as an OpenID token provider trusted by AWS Security Token Service (STS) to access temporary, limited-privilege AWS credentials.</p> <p>To provide end-user credentials, first make an unsigned call to <a>GetId</a>. If the end user is authenticated with one of the supported identity providers, set the <code>Logins</code> map with the identity provider token. <code>GetId</code> returns a unique identifier for the user.</p> <p>Next, make an unsigned call to <a>GetCredentialsForIdentity</a>. This call expects the same <code>Logins</code> map as the <code>GetId</code> call, as well as the <code>IdentityID</code> originally returned by <code>GetId</code>. Assuming your identity pool has been configured via the <a>SetIdentityPoolRoles</a> operation, <code>GetCredentialsForIdentity</code> will return AWS credentials for your use. If your pool has not been configured with <code>SetIdentityPoolRoles</code>, or if you want to follow legacy flow, make an unsigned call to <a>GetOpenIdToken</a>, which returns the OpenID token necessary to call STS and retrieve AWS credentials. This call expects the same <code>Logins</code> map as the <code>GetId</code> call, as well as the <code>IdentityID</code> originally returned by <code>GetId</code>. The token returned by <code>GetOpenIdToken</code> can be passed to the STS operation <a href="http://docs.aws.amazon.com/STS/latest/APIReference/API_AssumeRoleWithWebIdentity.html">AssumeRoleWithWebIdentity</a> to retrieve AWS credentials.</p> <p>If you want to use Amazon Cognito in an Android, iOS, or Unity application, you will probably want to make API calls via the AWS Mobile SDK. To learn more, see the <a href="http://docs.aws.amazon.com/mobile/index.html">AWS Mobile SDK Developer Guide</a>.</p>'
  x-logo:
    url: 'https://media.amazonwebservices.com/blog/2007/big_pbaws_logo_300px.jpg'
    backgroundColor: '#FFFFFF'
  termsOfService: 'https://aws.amazon.com/service-terms/'
  contact:
    name: Mike Ralphson
    email: mike.ralphson@gmail.com
    url: 'https://github.com/mermade/aws2openapi'
  license:
    name: Apache 2.0 License
    url: 'http://www.apache.org/licenses/'
  x-providerName: amazonaws.com
  x-serviceName: cognito-identity
  x-origin:
    - contentType: application/json
      url: 'https://raw.githubusercontent.com/aws/aws-sdk-js/master/apis/cognito-identity-2014-06-30.normal.json'
      converter:
        url: 'https://github.com/mermade/aws2openapi'
        version: 1.0.0
      x-apisguru-direct: true
  x-apiClientRegistration:
    url: 'https://portal.aws.amazon.com/gp/aws/developer/registration/index.html?nc2=h_ct'
  x-apisguru-categories:
    - cloud
  x-preferred: true
externalDocs:
  description: Amazon Web Services documentation
  url: 'https://aws.amazon.com/cognito-identity/'
x-hasEquivalentPaths: true
security:
  - hmac: []
paths:
  /:
    post:
      operationId: CreateIdentityPool
      description: '<p>Creates a new identity pool. The identity pool is a store of user identity information that is specific to your AWS account. The limit on identity pools is 60 per account. The keys for <code>SupportedLoginProviders</code> are as follows:</p> <ul> <li> <p>Facebook: <code>graph.facebook.com</code> </p> </li> <li> <p>Google: <code>accounts.google.com</code> </p> </li> <li> <p>Amazon: <code>www.amazon.com</code> </p> </li> <li> <p>Twitter: <code>api.twitter.com</code> </p> </li> <li> <p>Digits: <code>www.digits.com</code> </p> </li> </ul> <p>You must use AWS Developer credentials to call this API.</p>'
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/IdentityPool'
        '480':
          description: InvalidParameterException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidParameterException'
        '481':
          description: NotAuthorizedException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotAuthorizedException'
        '482':
          description: ResourceConflictException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceConflictException'
        '483':
          description: TooManyRequestsException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TooManyRequestsException'
        '484':
          description: InternalErrorException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalErrorException'
        '485':
          description: LimitExceededException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LimitExceededException'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateIdentityPoolInput'
        required: true
    parameters:
      - $ref: '#/components/parameters/Action'
      - $ref: '#/components/parameters/Version'
      - $ref: '#/components/parameters/X-Amz-Content-Sha256'
      - $ref: '#/components/parameters/X-Amz-Date'
      - $ref: '#/components/parameters/X-Amz-Algorithm'
      - $ref: '#/components/parameters/X-Amz-Credential'
      - $ref: '#/components/parameters/X-Amz-Security-Token'
      - $ref: '#/components/parameters/X-Amz-Signature'
      - $ref: '#/components/parameters/X-Amz-SignedHeaders'
  '/#DeleteIdentities':
    post:
      operationId: DeleteIdentities
      description: <p>Deletes identities from an identity pool. You can specify a list of 1-60 identities that you want to delete.</p> <p>You must use AWS Developer credentials to call this API.</p>
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DeleteIdentitiesResponse'
        '480':
          description: InvalidParameterException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidParameterException'
        '481':
          description: TooManyRequestsException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TooManyRequestsException'
        '482':
          description: InternalErrorException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalErrorException'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/DeleteIdentitiesInput'
        required: true
    parameters:
      - $ref: '#/components/parameters/Action'
      - $ref: '#/components/parameters/Version'
      - $ref: '#/components/parameters/X-Amz-Content-Sha256'
      - $ref: '#/components/parameters/X-Amz-Date'
      - $ref: '#/components/parameters/X-Amz-Algorithm'
      - $ref: '#/components/parameters/X-Amz-Credential'
      - $ref: '#/components/parameters/X-Amz-Security-Token'
      - $ref: '#/components/parameters/X-Amz-Signature'
      - $ref: '#/components/parameters/X-Amz-SignedHeaders'
  '/#DeleteIdentityPool':
    post:
      operationId: DeleteIdentityPool
      description: '<p>Deletes a user pool. Once a pool is deleted, users will not be able to authenticate with the pool.</p> <p>You must use AWS Developer credentials to call this API.</p>'
      responses:
        '200':
          description: Success
        '480':
          description: InvalidParameterException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidParameterException'
        '481':
          description: ResourceNotFoundException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceNotFoundException'
        '482':
          description: NotAuthorizedException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotAuthorizedException'
        '483':
          description: TooManyRequestsException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TooManyRequestsException'
        '484':
          description: InternalErrorException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalErrorException'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/DeleteIdentityPoolInput'
        required: true
    parameters:
      - $ref: '#/components/parameters/Action'
      - $ref: '#/components/parameters/Version'
      - $ref: '#/components/parameters/X-Amz-Content-Sha256'
      - $ref: '#/components/parameters/X-Amz-Date'
      - $ref: '#/components/parameters/X-Amz-Algorithm'
      - $ref: '#/components/parameters/X-Amz-Credential'
      - $ref: '#/components/parameters/X-Amz-Security-Token'
      - $ref: '#/components/parameters/X-Amz-Signature'
      - $ref: '#/components/parameters/X-Amz-SignedHeaders'
  '/#DescribeIdentity':
    post:
      operationId: DescribeIdentity
      description: '<p>Returns metadata related to the given identity, including when the identity was created and any associated linked logins.</p> <p>You must use AWS Developer credentials to call this API.</p>'
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/IdentityDescription'
        '480':
          description: InvalidParameterException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidParameterException'
        '481':
          description: ResourceNotFoundException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceNotFoundException'
        '482':
          description: NotAuthorizedException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotAuthorizedException'
        '483':
          description: TooManyRequestsException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TooManyRequestsException'
        '484':
          description: InternalErrorException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalErrorException'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/DescribeIdentityInput'
        required: true
    parameters:
      - $ref: '#/components/parameters/Action'
      - $ref: '#/components/parameters/Version'
      - $ref: '#/components/parameters/X-Amz-Content-Sha256'
      - $ref: '#/components/parameters/X-Amz-Date'
      - $ref: '#/components/parameters/X-Amz-Algorithm'
      - $ref: '#/components/parameters/X-Amz-Credential'
      - $ref: '#/components/parameters/X-Amz-Security-Token'
      - $ref: '#/components/parameters/X-Amz-Signature'
      - $ref: '#/components/parameters/X-Amz-SignedHeaders'
  '/#DescribeIdentityPool':
    post:
      operationId: DescribeIdentityPool
      description: '<p>Gets details about a particular identity pool, including the pool name, ID description, creation date, and current number of users.</p> <p>You must use AWS Developer credentials to call this API.</p>'
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/IdentityPool'
        '480':
          description: InvalidParameterException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidParameterException'
        '481':
          description: ResourceNotFoundException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceNotFoundException'
        '482':
          description: NotAuthorizedException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotAuthorizedException'
        '483':
          description: TooManyRequestsException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TooManyRequestsException'
        '484':
          description: InternalErrorException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalErrorException'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/DescribeIdentityPoolInput'
        required: true
    parameters:
      - $ref: '#/components/parameters/Action'
      - $ref: '#/components/parameters/Version'
      - $ref: '#/components/parameters/X-Amz-Content-Sha256'
      - $ref: '#/components/parameters/X-Amz-Date'
      - $ref: '#/components/parameters/X-Amz-Algorithm'
      - $ref: '#/components/parameters/X-Amz-Credential'
      - $ref: '#/components/parameters/X-Amz-Security-Token'
      - $ref: '#/components/parameters/X-Amz-Signature'
      - $ref: '#/components/parameters/X-Amz-SignedHeaders'
  '/#GetCredentialsForIdentity':
    post:
      operationId: GetCredentialsForIdentity
      description: '<p>Returns credentials for the provided identity ID. Any provided logins will be validated against supported login providers. If the token is for cognito-identity.amazonaws.com, it will be passed through to AWS Security Token Service with the appropriate role for the token.</p> <p>This is a public API. You do not need any credentials to call this API.</p>'
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetCredentialsForIdentityResponse'
        '480':
          description: InvalidParameterException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidParameterException'
        '481':
          description: ResourceNotFoundException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceNotFoundException'
        '482':
          description: NotAuthorizedException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotAuthorizedException'
        '483':
          description: ResourceConflictException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceConflictException'
        '484':
          description: TooManyRequestsException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TooManyRequestsException'
        '485':
          description: InvalidIdentityPoolConfigurationException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidIdentityPoolConfigurationException'
        '486':
          description: InternalErrorException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalErrorException'
        '487':
          description: ExternalServiceException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ExternalServiceException'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/GetCredentialsForIdentityInput'
        required: true
    parameters:
      - $ref: '#/components/parameters/Action'
      - $ref: '#/components/parameters/Version'
      - $ref: '#/components/parameters/X-Amz-Content-Sha256'
      - $ref: '#/components/parameters/X-Amz-Date'
      - $ref: '#/components/parameters/X-Amz-Algorithm'
      - $ref: '#/components/parameters/X-Amz-Credential'
      - $ref: '#/components/parameters/X-Amz-Security-Token'
      - $ref: '#/components/parameters/X-Amz-Signature'
      - $ref: '#/components/parameters/X-Amz-SignedHeaders'
  '/#GetId':
    post:
      operationId: GetId
      description: <p>Generates (or retrieves) a Cognito ID. Supplying multiple logins will create an implicit linked account.</p> <p>This is a public API. You do not need any credentials to call this API.</p>
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetIdResponse'
        '480':
          description: InvalidParameterException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidParameterException'
        '481':
          description: ResourceNotFoundException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceNotFoundException'
        '482':
          description: NotAuthorizedException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotAuthorizedException'
        '483':
          description: ResourceConflictException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceConflictException'
        '484':
          description: TooManyRequestsException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TooManyRequestsException'
        '485':
          description: InternalErrorException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalErrorException'
        '486':
          description: LimitExceededException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LimitExceededException'
        '487':
          description: ExternalServiceException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ExternalServiceException'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/GetIdInput'
        required: true
    parameters:
      - $ref: '#/components/parameters/Action'
      - $ref: '#/components/parameters/Version'
      - $ref: '#/components/parameters/X-Amz-Content-Sha256'
      - $ref: '#/components/parameters/X-Amz-Date'
      - $ref: '#/components/parameters/X-Amz-Algorithm'
      - $ref: '#/components/parameters/X-Amz-Credential'
      - $ref: '#/components/parameters/X-Amz-Security-Token'
      - $ref: '#/components/parameters/X-Amz-Signature'
      - $ref: '#/components/parameters/X-Amz-SignedHeaders'
  '/#GetIdentityPoolRoles':
    post:
      operationId: GetIdentityPoolRoles
      description: <p>Gets the roles for an identity pool.</p> <p>You must use AWS Developer credentials to call this API.</p>
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetIdentityPoolRolesResponse'
        '480':
          description: InvalidParameterException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidParameterException'
        '481':
          description: ResourceNotFoundException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceNotFoundException'
        '482':
          description: NotAuthorizedException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotAuthorizedException'
        '483':
          description: ResourceConflictException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceConflictException'
        '484':
          description: TooManyRequestsException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TooManyRequestsException'
        '485':
          description: InternalErrorException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalErrorException'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/GetIdentityPoolRolesInput'
        required: true
    parameters:
      - $ref: '#/components/parameters/Action'
      - $ref: '#/components/parameters/Version'
      - $ref: '#/components/parameters/X-Amz-Content-Sha256'
      - $ref: '#/components/parameters/X-Amz-Date'
      - $ref: '#/components/parameters/X-Amz-Algorithm'
      - $ref: '#/components/parameters/X-Amz-Credential'
      - $ref: '#/components/parameters/X-Amz-Security-Token'
      - $ref: '#/components/parameters/X-Amz-Signature'
      - $ref: '#/components/parameters/X-Amz-SignedHeaders'
  '/#GetOpenIdToken':
    post:
      operationId: GetOpenIdToken
      description: '<p>Gets an OpenID token, using a known Cognito ID. This known Cognito ID is returned by <a>GetId</a>. You can optionally add additional logins for the identity. Supplying multiple logins creates an implicit link.</p> <p>The OpenId token is valid for 15 minutes.</p> <p>This is a public API. You do not need any credentials to call this API.</p>'
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetOpenIdTokenResponse'
        '480':
          description: InvalidParameterException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidParameterException'
        '481':
          description: ResourceNotFoundException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceNotFoundException'
        '482':
          description: NotAuthorizedException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotAuthorizedException'
        '483':
          description: ResourceConflictException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceConflictException'
        '484':
          description: TooManyRequestsException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TooManyRequestsException'
        '485':
          description: InternalErrorException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalErrorException'
        '486':
          description: ExternalServiceException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ExternalServiceException'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/GetOpenIdTokenInput'
        required: true
    parameters:
      - $ref: '#/components/parameters/Action'
      - $ref: '#/components/parameters/Version'
      - $ref: '#/components/parameters/X-Amz-Content-Sha256'
      - $ref: '#/components/parameters/X-Amz-Date'
      - $ref: '#/components/parameters/X-Amz-Algorithm'
      - $ref: '#/components/parameters/X-Amz-Credential'
      - $ref: '#/components/parameters/X-Amz-Security-Token'
      - $ref: '#/components/parameters/X-Amz-Signature'
      - $ref: '#/components/parameters/X-Amz-SignedHeaders'
  '/#GetOpenIdTokenForDeveloperIdentity':
    post:
      operationId: GetOpenIdTokenForDeveloperIdentity
      description: '<p>Registers (or retrieves) a Cognito <code>IdentityId</code> and an OpenID Connect token for a user authenticated by your backend authentication process. Supplying multiple logins will create an implicit linked account. You can only specify one developer provider as part of the <code>Logins</code> map, which is linked to the identity pool. The developer provider is the "domain" by which Cognito will refer to your users.</p> <p>You can use <code>GetOpenIdTokenForDeveloperIdentity</code> to create a new identity and to link new logins (that is, user credentials issued by a public provider or developer provider) to an existing identity. When you want to create a new identity, the <code>IdentityId</code> should be null. When you want to associate a new login with an existing authenticated/unauthenticated identity, you can do so by providing the existing <code>IdentityId</code>. This API will create the identity in the specified <code>IdentityPoolId</code>.</p> <p>You must use AWS Developer credentials to call this API.</p>'
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetOpenIdTokenForDeveloperIdentityResponse'
        '480':
          description: InvalidParameterException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidParameterException'
        '481':
          description: ResourceNotFoundException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceNotFoundException'
        '482':
          description: NotAuthorizedException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotAuthorizedException'
        '483':
          description: ResourceConflictException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceConflictException'
        '484':
          description: TooManyRequestsException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TooManyRequestsException'
        '485':
          description: InternalErrorException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalErrorException'
        '486':
          description: DeveloperUserAlreadyRegisteredException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DeveloperUserAlreadyRegisteredException'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/GetOpenIdTokenForDeveloperIdentityInput'
        required: true
    parameters:
      - $ref: '#/components/parameters/Action'
      - $ref: '#/components/parameters/Version'
      - $ref: '#/components/parameters/X-Amz-Content-Sha256'
      - $ref: '#/components/parameters/X-Amz-Date'
      - $ref: '#/components/parameters/X-Amz-Algorithm'
      - $ref: '#/components/parameters/X-Amz-Credential'
      - $ref: '#/components/parameters/X-Amz-Security-Token'
      - $ref: '#/components/parameters/X-Amz-Signature'
      - $ref: '#/components/parameters/X-Amz-SignedHeaders'
  '/#ListIdentities':
    post:
      operationId: ListIdentities
      description: <p>Lists the identities in a pool.</p> <p>You must use AWS Developer credentials to call this API.</p>
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ListIdentitiesResponse'
        '480':
          description: InvalidParameterException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidParameterException'
        '481':
          description: ResourceNotFoundException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceNotFoundException'
        '482':
          description: NotAuthorizedException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotAuthorizedException'
        '483':
          description: TooManyRequestsException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TooManyRequestsException'
        '484':
          description: InternalErrorException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalErrorException'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ListIdentitiesInput'
        required: true
    parameters:
      - $ref: '#/components/parameters/Action'
      - $ref: '#/components/parameters/Version'
      - $ref: '#/components/parameters/X-Amz-Content-Sha256'
      - $ref: '#/components/parameters/X-Amz-Date'
      - $ref: '#/components/parameters/X-Amz-Algorithm'
      - $ref: '#/components/parameters/X-Amz-Credential'
      - $ref: '#/components/parameters/X-Amz-Security-Token'
      - $ref: '#/components/parameters/X-Amz-Signature'
      - $ref: '#/components/parameters/X-Amz-SignedHeaders'
  '/#ListIdentityPools':
    post:
      operationId: ListIdentityPools
      description: <p>Lists all of the Cognito identity pools registered for your account.</p> <p>You must use AWS Developer credentials to call this API.</p>
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ListIdentityPoolsResponse'
        '480':
          description: InvalidParameterException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidParameterException'
        '481':
          description: NotAuthorizedException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotAuthorizedException'
        '482':
          description: TooManyRequestsException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TooManyRequestsException'
        '483':
          description: InternalErrorException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalErrorException'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ListIdentityPoolsInput'
        required: true
    parameters:
      - $ref: '#/components/parameters/Action'
      - $ref: '#/components/parameters/Version'
      - $ref: '#/components/parameters/X-Amz-Content-Sha256'
      - $ref: '#/components/parameters/X-Amz-Date'
      - $ref: '#/components/parameters/X-Amz-Algorithm'
      - $ref: '#/components/parameters/X-Amz-Credential'
      - $ref: '#/components/parameters/X-Amz-Security-Token'
      - $ref: '#/components/parameters/X-Amz-Signature'
      - $ref: '#/components/parameters/X-Amz-SignedHeaders'
  '/#LookupDeveloperIdentity':
    post:
      operationId: LookupDeveloperIdentity
      description: '<p>Retrieves the <code>IdentityID</code> associated with a <code>DeveloperUserIdentifier</code> or the list of <code>DeveloperUserIdentifier</code>s associated with an <code>IdentityId</code> for an existing identity. Either <code>IdentityID</code> or <code>DeveloperUserIdentifier</code> must not be null. If you supply only one of these values, the other value will be searched in the database and returned as a part of the response. If you supply both, <code>DeveloperUserIdentifier</code> will be matched against <code>IdentityID</code>. If the values are verified against the database, the response returns both values and is the same as the request. Otherwise a <code>ResourceConflictException</code> is thrown.</p> <p>You must use AWS Developer credentials to call this API.</p>'
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LookupDeveloperIdentityResponse'
        '480':
          description: InvalidParameterException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidParameterException'
        '481':
          description: ResourceNotFoundException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceNotFoundException'
        '482':
          description: NotAuthorizedException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotAuthorizedException'
        '483':
          description: ResourceConflictException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceConflictException'
        '484':
          description: TooManyRequestsException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TooManyRequestsException'
        '485':
          description: InternalErrorException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalErrorException'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/LookupDeveloperIdentityInput'
        required: true
    parameters:
      - $ref: '#/components/parameters/Action'
      - $ref: '#/components/parameters/Version'
      - $ref: '#/components/parameters/X-Amz-Content-Sha256'
      - $ref: '#/components/parameters/X-Amz-Date'
      - $ref: '#/components/parameters/X-Amz-Algorithm'
      - $ref: '#/components/parameters/X-Amz-Credential'
      - $ref: '#/components/parameters/X-Amz-Security-Token'
      - $ref: '#/components/parameters/X-Amz-Signature'
      - $ref: '#/components/parameters/X-Amz-SignedHeaders'
  '/#MergeDeveloperIdentities':
    post:
      operationId: MergeDeveloperIdentities
      description: '<p>Merges two users having different <code>IdentityId</code>s, existing in the same identity pool, and identified by the same developer provider. You can use this action to request that discrete users be merged and identified as a single user in the Cognito environment. Cognito associates the given source user (<code>SourceUserIdentifier</code>) with the <code>IdentityId</code> of the <code>DestinationUserIdentifier</code>. Only developer-authenticated users can be merged. If the users to be merged are associated with the same public provider, but as two different users, an exception will be thrown.</p> <p>You must use AWS Developer credentials to call this API.</p>'
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MergeDeveloperIdentitiesResponse'
        '480':
          description: InvalidParameterException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidParameterException'
        '481':
          description: ResourceNotFoundException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceNotFoundException'
        '482':
          description: NotAuthorizedException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotAuthorizedException'
        '483':
          description: ResourceConflictException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceConflictException'
        '484':
          description: TooManyRequestsException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TooManyRequestsException'
        '485':
          description: InternalErrorException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalErrorException'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/MergeDeveloperIdentitiesInput'
        required: true
    parameters:
      - $ref: '#/components/parameters/Action'
      - $ref: '#/components/parameters/Version'
      - $ref: '#/components/parameters/X-Amz-Content-Sha256'
      - $ref: '#/components/parameters/X-Amz-Date'
      - $ref: '#/components/parameters/X-Amz-Algorithm'
      - $ref: '#/components/parameters/X-Amz-Credential'
      - $ref: '#/components/parameters/X-Amz-Security-Token'
      - $ref: '#/components/parameters/X-Amz-Signature'
      - $ref: '#/components/parameters/X-Amz-SignedHeaders'
  '/#SetIdentityPoolRoles':
    post:
      operationId: SetIdentityPoolRoles
      description: <p>Sets the roles for an identity pool. These roles are used when making calls to <a>GetCredentialsForIdentity</a> action.</p> <p>You must use AWS Developer credentials to call this API.</p>
      responses:
        '200':
          description: Success
        '480':
          description: InvalidParameterException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidParameterException'
        '481':
          description: ResourceNotFoundException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceNotFoundException'
        '482':
          description: NotAuthorizedException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotAuthorizedException'
        '483':
          description: ResourceConflictException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceConflictException'
        '484':
          description: TooManyRequestsException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TooManyRequestsException'
        '485':
          description: InternalErrorException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalErrorException'
        '486':
          description: ConcurrentModificationException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ConcurrentModificationException'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SetIdentityPoolRolesInput'
        required: true
    parameters:
      - $ref: '#/components/parameters/Action'
      - $ref: '#/components/parameters/Version'
      - $ref: '#/components/parameters/X-Amz-Content-Sha256'
      - $ref: '#/components/parameters/X-Amz-Date'
      - $ref: '#/components/parameters/X-Amz-Algorithm'
      - $ref: '#/components/parameters/X-Amz-Credential'
      - $ref: '#/components/parameters/X-Amz-Security-Token'
      - $ref: '#/components/parameters/X-Amz-Signature'
      - $ref: '#/components/parameters/X-Amz-SignedHeaders'
  '/#UnlinkDeveloperIdentity':
    post:
      operationId: UnlinkDeveloperIdentity
      description: '<p>Unlinks a <code>DeveloperUserIdentifier</code> from an existing identity. Unlinked developer users will be considered new identities next time they are seen. If, for a given Cognito identity, you remove all federated identities as well as the developer user identifier, the Cognito identity becomes inaccessible.</p> <p>You must use AWS Developer credentials to call this API.</p>'
      responses:
        '200':
          description: Success
        '480':
          description: InvalidParameterException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidParameterException'
        '481':
          description: ResourceNotFoundException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceNotFoundException'
        '482':
          description: NotAuthorizedException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotAuthorizedException'
        '483':
          description: ResourceConflictException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceConflictException'
        '484':
          description: TooManyRequestsException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TooManyRequestsException'
        '485':
          description: InternalErrorException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalErrorException'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UnlinkDeveloperIdentityInput'
        required: true
    parameters:
      - $ref: '#/components/parameters/Action'
      - $ref: '#/components/parameters/Version'
      - $ref: '#/components/parameters/X-Amz-Content-Sha256'
      - $ref: '#/components/parameters/X-Amz-Date'
      - $ref: '#/components/parameters/X-Amz-Algorithm'
      - $ref: '#/components/parameters/X-Amz-Credential'
      - $ref: '#/components/parameters/X-Amz-Security-Token'
      - $ref: '#/components/parameters/X-Amz-Signature'
      - $ref: '#/components/parameters/X-Amz-SignedHeaders'
  '/#UnlinkIdentity':
    post:
      operationId: UnlinkIdentity
      description: <p>Unlinks a federated identity from an existing account. Unlinked logins will be considered new identities next time they are seen. Removing the last linked login will make this identity inaccessible.</p> <p>This is a public API. You do not need any credentials to call this API.</p>
      responses:
        '200':
          description: Success
        '480':
          description: InvalidParameterException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidParameterException'
        '481':
          description: ResourceNotFoundException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceNotFoundException'
        '482':
          description: NotAuthorizedException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotAuthorizedException'
        '483':
          description: ResourceConflictException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceConflictException'
        '484':
          description: TooManyRequestsException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TooManyRequestsException'
        '485':
          description: InternalErrorException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalErrorException'
        '486':
          description: ExternalServiceException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ExternalServiceException'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UnlinkIdentityInput'
        required: true
    parameters:
      - $ref: '#/components/parameters/Action'
      - $ref: '#/components/parameters/Version'
      - $ref: '#/components/parameters/X-Amz-Content-Sha256'
      - $ref: '#/components/parameters/X-Amz-Date'
      - $ref: '#/components/parameters/X-Amz-Algorithm'
      - $ref: '#/components/parameters/X-Amz-Credential'
      - $ref: '#/components/parameters/X-Amz-Security-Token'
      - $ref: '#/components/parameters/X-Amz-Signature'
      - $ref: '#/components/parameters/X-Amz-SignedHeaders'
  '/#UpdateIdentityPool':
    post:
      operationId: UpdateIdentityPool
      description: <p>Updates a user pool.</p> <p>You must use AWS Developer credentials to call this API.</p>
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/IdentityPool'
        '480':
          description: InvalidParameterException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidParameterException'
        '481':
          description: ResourceNotFoundException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceNotFoundException'
        '482':
          description: NotAuthorizedException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotAuthorizedException'
        '483':
          description: ResourceConflictException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceConflictException'
        '484':
          description: TooManyRequestsException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TooManyRequestsException'
        '485':
          description: InternalErrorException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalErrorException'
        '486':
          description: ConcurrentModificationException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ConcurrentModificationException'
        '487':
          description: LimitExceededException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LimitExceededException'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/IdentityPool'
        required: true
    parameters:
      - $ref: '#/components/parameters/Action'
      - $ref: '#/components/parameters/Version'
      - $ref: '#/components/parameters/X-Amz-Content-Sha256'
      - $ref: '#/components/parameters/X-Amz-Date'
      - $ref: '#/components/parameters/X-Amz-Algorithm'
      - $ref: '#/components/parameters/X-Amz-Credential'
      - $ref: '#/components/parameters/X-Amz-Security-Token'
      - $ref: '#/components/parameters/X-Amz-Signature'
      - $ref: '#/components/parameters/X-Amz-SignedHeaders'
components:
  schemas:
    ARNString:
      type: string
      minLength: 20
      maxLength: 2048
    AccessKeyString:
      type: string
    AccountId:
      type: string
      pattern: \d+
      minLength: 1
      maxLength: 15
    AmbiguousRoleResolutionType:
      type: string
      enum:
        - AuthenticatedRole
        - Deny
    ClaimName:
      type: string
      pattern: '[\p{L}\p{M}\p{S}\p{N}\p{P}]+'
      minLength: 1
      maxLength: 64
    ClaimValue:
      type: string
      minLength: 1
      maxLength: 128
    CognitoIdentityProvider:
      type: object
      properties:
        ProviderName:
          $ref: '#/components/schemas/CognitoIdentityProviderName'
        ClientId:
          $ref: '#/components/schemas/CognitoIdentityProviderClientId'
        ServerSideTokenCheck:
          $ref: '#/components/schemas/CognitoIdentityProviderTokenCheck'
      description: A provider representing an Amazon Cognito Identity User Pool and its client ID.
    CognitoIdentityProviderClientId:
      type: string
      pattern: '[\w_]+'
      minLength: 1
      maxLength: 128
    CognitoIdentityProviderList:
      type: array
      items:
        $ref: '#/components/schemas/CognitoIdentityProvider'
    CognitoIdentityProviderName:
      type: string
      pattern: '[\w._:/-]+'
      minLength: 1
      maxLength: 128
    CognitoIdentityProviderTokenCheck:
      type: boolean
    ConcurrentModificationException:
      type: object
      properties:
        message:
          $ref: '#/components/schemas/String'
      description: Thrown if there are parallel requests to modify a resource.
    CreateIdentityPoolInput:
      type: object
      required:
        - IdentityPoolName
        - AllowUnauthenticatedIdentities
      properties:
        IdentityPoolName:
          $ref: '#/components/schemas/IdentityPoolName'
        AllowUnauthenticatedIdentities:
          $ref: '#/components/schemas/IdentityPoolUnauthenticated'
        SupportedLoginProviders:
          $ref: '#/components/schemas/IdentityProviders'
        DeveloperProviderName:
          $ref: '#/components/schemas/DeveloperProviderName'
        OpenIdConnectProviderARNs:
          $ref: '#/components/schemas/OIDCProviderList'
        CognitoIdentityProviders:
          $ref: '#/components/schemas/CognitoIdentityProviderList'
        SamlProviderARNs:
          $ref: '#/components/schemas/SAMLProviderList'
      description: Input to the CreateIdentityPool action.
    Credentials:
      type: object
      properties:
        AccessKeyId:
          $ref: '#/components/schemas/AccessKeyString'
        SecretKey:
          $ref: '#/components/schemas/SecretKeyString'
        SessionToken:
          $ref: '#/components/schemas/SessionTokenString'
        Expiration:
          $ref: '#/components/schemas/DateType'
      description: Credentials for the provided identity ID.
    DateType:
      type: string
      format: date-time
    DeleteIdentitiesInput:
      type: object
      required:
        - IdentityIdsToDelete
      properties:
        IdentityIdsToDelete:
          $ref: '#/components/schemas/IdentityIdList'
      description: Input to the <code>DeleteIdentities</code> action.
    DeleteIdentitiesResponse:
      type: object
      properties:
        UnprocessedIdentityIds:
          $ref: '#/components/schemas/UnprocessedIdentityIdList'
      description: Returned in response to a successful <code>DeleteIdentities</code> operation.
    DeleteIdentityPoolInput:
      type: object
      required:
        - IdentityPoolId
      properties:
        IdentityPoolId:
          $ref: '#/components/schemas/IdentityPoolId'
      description: Input to the DeleteIdentityPool action.
    DescribeIdentityInput:
      type: object
      required:
        - IdentityId
      properties:
        IdentityId:
          $ref: '#/components/schemas/IdentityId'
      description: Input to the <code>DescribeIdentity</code> action.
    DescribeIdentityPoolInput:
      type: object
      required:
        - IdentityPoolId
      properties:
        IdentityPoolId:
          $ref: '#/components/schemas/IdentityPoolId'
      description: Input to the DescribeIdentityPool action.
    DeveloperProviderName:
      type: string
      pattern: '[\w._-]+'
      minLength: 1
      maxLength: 128
    DeveloperUserAlreadyRegisteredException:
      type: object
      properties:
        message:
          $ref: '#/components/schemas/String'
      description: The provided developer user identifier is already registered with Cognito under a different identity ID.
    DeveloperUserIdentifier:
      type: string
      minLength: 1
      maxLength: 1024
    DeveloperUserIdentifierList:
      type: array
      items:
        $ref: '#/components/schemas/DeveloperUserIdentifier'
    ErrorCode:
      type: string
      enum:
        - AccessDenied
        - InternalServerError
    ExternalServiceException:
      type: object
      properties:
        message:
          $ref: '#/components/schemas/String'
      description: An exception thrown when a dependent service such as Facebook or Twitter is not responding
    GetCredentialsForIdentityInput:
      type: object
      required:
        - IdentityId
      properties:
        IdentityId:
          $ref: '#/components/schemas/IdentityId'
        Logins:
          $ref: '#/components/schemas/LoginsMap'
        CustomRoleArn:
          $ref: '#/components/schemas/ARNString'
      description: Input to the <code>GetCredentialsForIdentity</code> action.
    GetCredentialsForIdentityResponse:
      type: object
      properties:
        IdentityId:
          $ref: '#/components/schemas/IdentityId'
        Credentials:
          $ref: '#/components/schemas/Credentials'
      description: Returned in response to a successful <code>GetCredentialsForIdentity</code> operation.
    GetIdInput:
      type: object
      required:
        - IdentityPoolId
      properties:
        AccountId:
          $ref: '#/components/schemas/AccountId'
        IdentityPoolId:
          $ref: '#/components/schemas/IdentityPoolId'
        Logins:
          $ref: '#/components/schemas/LoginsMap'
      description: Input to the GetId action.
    GetIdResponse:
      type: object
      properties:
        IdentityId:
          $ref: '#/components/schemas/IdentityId'
      description: Returned in response to a GetId request.
    GetIdentityPoolRolesInput:
      type: object
      required:
        - IdentityPoolId
      properties:
        IdentityPoolId:
          $ref: '#/components/schemas/IdentityPoolId'
      description: Input to the <code>GetIdentityPoolRoles</code> action.
    GetIdentityPoolRolesResponse:
      type: object
      properties:
        IdentityPoolId:
          $ref: '#/components/schemas/IdentityPoolId'
        Roles:
          $ref: '#/components/schemas/RolesMap'
        RoleMappings:
          $ref: '#/components/schemas/RoleMappingMap'
      description: Returned in response to a successful <code>GetIdentityPoolRoles</code> operation.
    GetOpenIdTokenForDeveloperIdentityInput:
      type: object
      required:
        - IdentityPoolId
        - Logins
      properties:
        IdentityPoolId:
          $ref: '#/components/schemas/IdentityPoolId'
        IdentityId:
          $ref: '#/components/schemas/IdentityId'
        Logins:
          $ref: '#/components/schemas/LoginsMap'
        TokenDuration:
          $ref: '#/components/schemas/TokenDuration'
      description: Input to the <code>GetOpenIdTokenForDeveloperIdentity</code> action.
    GetOpenIdTokenForDeveloperIdentityResponse:
      type: object
      properties:
        IdentityId:
          $ref: '#/components/schemas/IdentityId'
        Token:
          $ref: '#/components/schemas/OIDCToken'
      description: Returned in response to a successful <code>GetOpenIdTokenForDeveloperIdentity</code> request.
    GetOpenIdTokenInput:
      type: object
      required:
        - IdentityId
      properties:
        IdentityId:
          $ref: '#/components/schemas/IdentityId'
        Logins:
          $ref: '#/components/schemas/LoginsMap'
      description: Input to the GetOpenIdToken action.
    GetOpenIdTokenResponse:
      type: object
      properties:
        IdentityId:
          $ref: '#/components/schemas/IdentityId'
        Token:
          $ref: '#/components/schemas/OIDCToken'
      description: Returned in response to a successful GetOpenIdToken request.
    HideDisabled:
      type: boolean
    IdentitiesList:
      type: array
      items:
        $ref: '#/components/schemas/IdentityDescription'
    IdentityDescription:
      type: object
      properties:
        IdentityId:
          $ref: '#/components/schemas/IdentityId'
        Logins:
          $ref: '#/components/schemas/LoginsList'
        CreationDate:
          $ref: '#/components/schemas/DateType'
        LastModifiedDate:
          $ref: '#/components/schemas/DateType'
      description: A description of the identity.
    IdentityId:
      type: string
      pattern: '[\w-]+:[0-9a-f-]+'
      minLength: 1
      maxLength: 55
    IdentityIdList:
      type: array
      items:
        $ref: '#/components/schemas/IdentityId'
      minItems: 1
      maxItems: 60
    IdentityPool:
      type: object
      required:
        - IdentityPoolId
        - IdentityPoolName
        - AllowUnauthenticatedIdentities
      properties:
        IdentityPoolId:
          $ref: '#/components/schemas/IdentityPoolId'
        IdentityPoolName:
          $ref: '#/components/schemas/IdentityPoolName'
        AllowUnauthenticatedIdentities:
          $ref: '#/components/schemas/IdentityPoolUnauthenticated'
        SupportedLoginProviders:
          $ref: '#/components/schemas/IdentityProviders'
        DeveloperProviderName:
          $ref: '#/components/schemas/DeveloperProviderName'
        OpenIdConnectProviderARNs:
          $ref: '#/components/schemas/OIDCProviderList'
        CognitoIdentityProviders:
          $ref: '#/components/schemas/CognitoIdentityProviderList'
        SamlProviderARNs:
          $ref: '#/components/schemas/SAMLProviderList'
      description: An object representing an Amazon Cognito identity pool.
    IdentityPoolId:
      type: string
      pattern: '[\w-]+:[0-9a-f-]+'
      minLength: 1
      maxLength: 55
    IdentityPoolName:
      type: string
      pattern: '[\w ]+'
      minLength: 1
      maxLength: 128
    IdentityPoolShortDescription:
      type: object
      properties:
        IdentityPoolId:
          $ref: '#/components/schemas/IdentityPoolId'
        IdentityPoolName:
          $ref: '#/components/schemas/IdentityPoolName'
      description: A description of the identity pool.
    IdentityPoolUnauthenticated:
      type: boolean
    IdentityPoolsList:
      type: array
      items:
        $ref: '#/components/schemas/IdentityPoolShortDescription'
    IdentityProviderId:
      type: string
      pattern: '[\w.;_/-]+'
      minLength: 1
      maxLength: 128
    IdentityProviderName:
      type: string
      minLength: 1
      maxLength: 128
    IdentityProviderToken:
      type: string
      minLength: 1
      maxLength: 50000
    IdentityProviders:
      type: array
      maxItems: 10
      items:
        type: object
        properties:
          key:
            $ref: '#/components/schemas/IdentityProviderName'
          value:
            $ref: '#/components/schemas/IdentityProviderId'
    InternalErrorException:
      type: object
      properties:
        message:
          $ref: '#/components/schemas/String'
      description: Thrown when the service encounters an error during processing the request.
    InvalidIdentityPoolConfigurationException:
      type: object
      properties:
        message:
          $ref: '#/components/schemas/String'
      description: Thrown if the identity pool has no role associated for the given auth type (auth/unauth) or if the AssumeRole fails.
    InvalidParameterException:
      type: object
      properties:
        message:
          $ref: '#/components/schemas/String'
      description: Thrown for missing or bad input parameter(s).
    LimitExceededException:
      type: object
      properties:
        message:
          $ref: '#/components/schemas/String'
      description: Thrown when the total number of user pools has exceeded a preset limit.
    ListIdentitiesInput:
      type: object
      required:
        - IdentityPoolId
        - MaxResults
      properties:
        IdentityPoolId:
          $ref: '#/components/schemas/IdentityPoolId'
        MaxResults:
          $ref: '#/components/schemas/QueryLimit'
        NextToken:
          $ref: '#/components/schemas/PaginationKey'
        HideDisabled:
          $ref: '#/components/schemas/HideDisabled'
      description: Input to the ListIdentities action.
    ListIdentitiesResponse:
      type: object
      properties:
        IdentityPoolId:
          $ref: '#/components/schemas/IdentityPoolId'
        Identities:
          $ref: '#/components/schemas/IdentitiesList'
        NextToken:
          $ref: '#/components/schemas/PaginationKey'
      description: The response to a ListIdentities request.
    ListIdentityPoolsInput:
      type: object
      required:
        - MaxResults
      properties:
        MaxResults:
          $ref: '#/components/schemas/QueryLimit'
        NextToken:
          $ref: '#/components/schemas/PaginationKey'
      description: Input to the ListIdentityPools action.
    ListIdentityPoolsResponse:
      type: object
      properties:
        IdentityPools:
          $ref: '#/components/schemas/IdentityPoolsList'
        NextToken:
          $ref: '#/components/schemas/PaginationKey'
      description: The result of a successful ListIdentityPools action.
    LoginsList:
      type: array
      items:
        $ref: '#/components/schemas/IdentityProviderName'
    LoginsMap:
      type: array
      maxItems: 10
      items:
        type: object
        properties:
          key:
            $ref: '#/components/schemas/IdentityProviderName'
          value:
            $ref: '#/components/schemas/IdentityProviderToken'
    LookupDeveloperIdentityInput:
      type: object
      required:
        - IdentityPoolId
      properties:
        IdentityPoolId:
          $ref: '#/components/schemas/IdentityPoolId'
        IdentityId:
          $ref: '#/components/schemas/IdentityId'
        DeveloperUserIdentifier:
          $ref: '#/components/schemas/DeveloperUserIdentifier'
        MaxResults:
          $ref: '#/components/schemas/QueryLimit'
        NextToken:
          $ref: '#/components/schemas/PaginationKey'
      description: Input to the <code>LookupDeveloperIdentityInput</code> action.
    LookupDeveloperIdentityResponse:
      type: object
      properties:
        IdentityId:
          $ref: '#/components/schemas/IdentityId'
        DeveloperUserIdentifierList:
          $ref: '#/components/schemas/DeveloperUserIdentifierList'
        NextToken:
          $ref: '#/components/schemas/PaginationKey'
      description: Returned in response to a successful <code>LookupDeveloperIdentity</code> action.
    MappingRule:
      type: object
      required:
        - Claim
        - MatchType
        - Value
        - RoleARN
      properties:
        Claim:
          $ref: '#/components/schemas/ClaimName'
        MatchType:
          $ref: '#/components/schemas/MappingRuleMatchType'
        Value:
          $ref: '#/components/schemas/ClaimValue'
        RoleARN:
          $ref: '#/components/schemas/ARNString'
      description: 'A rule that maps a claim name, a claim value, and a match type to a role ARN.'
    MappingRuleMatchType:
      type: string
      enum:
        - Equals
        - Contains
        - StartsWith
        - NotEqual
    MappingRulesList:
      type: array
      items:
        $ref: '#/components/schemas/MappingRule'
      minItems: 1
      maxItems: 25
    MergeDeveloperIdentitiesInput:
      type: object
      required:
        - SourceUserIdentifier
        - DestinationUserIdentifier
        - DeveloperProviderName
        - IdentityPoolId
      properties:
        SourceUserIdentifier:
          $ref: '#/components/schemas/DeveloperUserIdentifier'
        DestinationUserIdentifier:
          $ref: '#/components/schemas/DeveloperUserIdentifier'
        DeveloperProviderName:
          $ref: '#/components/schemas/DeveloperProviderName'
        IdentityPoolId:
          $ref: '#/components/schemas/IdentityPoolId'
      description: Input to the <code>MergeDeveloperIdentities</code> action.
    MergeDeveloperIdentitiesResponse:
      type: object
      properties:
        IdentityId:
          $ref: '#/components/schemas/IdentityId'
      description: Returned in response to a successful <code>MergeDeveloperIdentities</code> action.
    NotAuthorizedException:
      type: object
      properties:
        message:
          $ref: '#/components/schemas/String'
      description: Thrown when a user is not authorized to access the requested resource.
    OIDCProviderList:
      type: array
      items:
        $ref: '#/components/schemas/ARNString'
    OIDCToken:
      type: string
    PaginationKey:
      type: string
      pattern: '[\S]+'
      minLength: 1
    QueryLimit:
      type: integer
      minimum: 1
      maximum: 60
    ResourceConflictException:
      type: object
      properties:
        message:
          $ref: '#/components/schemas/String'
      description: Thrown when a user tries to use a login which is already linked to another account.
    ResourceNotFoundException:
      type: object
      properties:
        message:
          $ref: '#/components/schemas/String'
      description: 'Thrown when the requested resource (for example, a dataset or record) does not exist.'
    RoleMapping:
      type: object
      required:
        - Type
      properties:
        Type:
          $ref: '#/components/schemas/RoleMappingType'
        AmbiguousRoleResolution:
          $ref: '#/components/schemas/AmbiguousRoleResolutionType'
        RulesConfiguration:
          $ref: '#/components/schemas/RulesConfigurationType'
      description: A role mapping.
    RoleMappingMap:
      type: array
      maxItems: 10
      items:
        type: object
        properties:
          key:
            $ref: '#/components/schemas/IdentityProviderName'
          value:
            $ref: '#/components/schemas/RoleMapping'
    RoleMappingType:
      type: string
      enum:
        - Token
        - Rules
    RoleType:
      type: string
      pattern: (un)?authenticated
    RolesMap:
      type: array
      maxItems: 2
      items:
        type: object
        properties:
          key:
            $ref: '#/components/schemas/RoleType'
          value:
            $ref: '#/components/schemas/ARNString'
    RulesConfigurationType:
      type: object
      required:
        - Rules
      properties:
        Rules:
          $ref: '#/components/schemas/MappingRulesList'
      description: A container for rules.
    SAMLProviderList:
      type: array
      items:
        $ref: '#/components/schemas/ARNString'
    SecretKeyString:
      type: string
    SessionTokenString:
      type: string
    SetIdentityPoolRolesInput:
      type: object
      required:
        - IdentityPoolId
        - Roles
      properties:
        IdentityPoolId:
          $ref: '#/components/schemas/IdentityPoolId'
        Roles:
          $ref: '#/components/schemas/RolesMap'
        RoleMappings:
          $ref: '#/components/schemas/RoleMappingMap'
      description: Input to the <code>SetIdentityPoolRoles</code> action.
    String:
      type: string
    TokenDuration:
      type: integer
      minimum: 1
      maximum: 86400
    TooManyRequestsException:
      type: object
      properties:
        message:
          $ref: '#/components/schemas/String'
      description: Thrown when a request is throttled.
    UnlinkDeveloperIdentityInput:
      type: object
      required:
        - IdentityId
        - IdentityPoolId
        - DeveloperProviderName
        - DeveloperUserIdentifier
      properties:
        IdentityId:
          $ref: '#/components/schemas/IdentityId'
        IdentityPoolId:
          $ref: '#/components/schemas/IdentityPoolId'
        DeveloperProviderName:
          $ref: '#/components/schemas/DeveloperProviderName'
        DeveloperUserIdentifier:
          $ref: '#/components/schemas/DeveloperUserIdentifier'
      description: Input to the <code>UnlinkDeveloperIdentity</code> action.
    UnlinkIdentityInput:
      type: object
      required:
        - IdentityId
        - Logins
        - LoginsToRemove
      properties:
        IdentityId:
          $ref: '#/components/schemas/IdentityId'
        Logins:
          $ref: '#/components/schemas/LoginsMap'
        LoginsToRemove:
          $ref: '#/components/schemas/LoginsList'
      description: Input to the UnlinkIdentity action.
    UnprocessedIdentityId:
      type: object
      properties:
        IdentityId:
          $ref: '#/components/schemas/IdentityId'
        ErrorCode:
          $ref: '#/components/schemas/ErrorCode'
      description: 'An array of UnprocessedIdentityId objects, each of which contains an ErrorCode and IdentityId.'
    UnprocessedIdentityIdList:
      type: array
      items:
        $ref: '#/components/schemas/UnprocessedIdentityId'
      maxItems: 60
  parameters:
    Action:
      name: Action
      in: header
      required: true
      schema:
        type: string
    Version:
      name: Version
      in: header
      required: true
      schema:
        type: string
    X-Amz-Content-Sha256:
      name: X-Amz-Content-Sha256
      in: header
      required: false
      schema:
        type: string
    X-Amz-Date:
      name: X-Amz-Date
      in: header
      required: false
      schema:
        type: string
    X-Amz-Algorithm:
      name: X-Amz-Algorithm
      in: header
      required: false
      schema:
        type: string
    X-Amz-Credential:
      name: X-Amz-Credential
      in: header
      required: false
      schema:
        type: string
    X-Amz-Security-Token:
      name: X-Amz-Security-Token
      in: header
      required: false
      schema:
        type: string
    X-Amz-Signature:
      name: X-Amz-Signature
      in: header
      required: false
      schema:
        type: string
    X-Amz-SignedHeaders:
      name: X-Amz-SignedHeaders
      in: header
      required: false
      schema:
        type: string
  securitySchemes:
    hmac:
      type: apiKey
      name: Authorization
      in: header
      description: Amazon Signature authorization v4
      x-amazon-apigateway-authtype: awsSigv4
