openapi: 3.0.0
servers:
  - url: 'https://sheets.googleapis.com/'
info:
  contact:
    name: Google
    url: 'https://google.com'
  description: Reads and writes Google Sheets.
  license:
    name: Creative Commons Attribution 3.0
    url: 'http://creativecommons.org/licenses/by/3.0/'
  termsOfService: 'https://developers.google.com/terms/'
  title: Google Sheets
  version: v4
  x-apiClientRegistration:
    url: 'https://console.developers.google.com'
  x-logo:
    url: 'https://www.google.com/images/branding/googlelogo/2x/googlelogo_color_272x92dp.png'
  x-origin:
    - converter:
        url: 'https://github.com/lucybot/api-spec-converter'
        version: 2.0.1
      format: google
      url: 'https://sheets.googleapis.com/$discovery/rest?version=v4'
      version: v1
  x-preferred: true
  x-providerName: googleapis.com
  x-serviceName: sheets
externalDocs:
  url: 'https://developers.google.com/sheets/'
tags:
  - name: spreadsheets
paths:
  /v4/spreadsheets:
    parameters:
      - $ref: '#/components/parameters/prettyPrint'
      - $ref: '#/components/parameters/uploadType'
      - $ref: '#/components/parameters/fields'
      - $ref: '#/components/parameters/_.xgafv'
      - $ref: '#/components/parameters/callback'
      - $ref: '#/components/parameters/alt'
      - $ref: '#/components/parameters/access_token'
      - $ref: '#/components/parameters/key'
      - $ref: '#/components/parameters/quotaUser'
      - $ref: '#/components/parameters/pp'
      - $ref: '#/components/parameters/oauth_token'
      - $ref: '#/components/parameters/bearer_token'
      - $ref: '#/components/parameters/upload_protocol'
    post:
      description: 'Creates a spreadsheet, returning the newly created spreadsheet.'
      operationId: sheets.spreadsheets.create
      responses:
        '200':
          description: Successful response
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/Spreadsheet'
      security:
        - Oauth2:
            - 'https://www.googleapis.com/auth/drive'
          Oauth2c:
            - 'https://www.googleapis.com/auth/drive'
        - Oauth2:
            - 'https://www.googleapis.com/auth/drive.file'
          Oauth2c:
            - 'https://www.googleapis.com/auth/drive.file'
        - Oauth2:
            - 'https://www.googleapis.com/auth/spreadsheets'
          Oauth2c:
            - 'https://www.googleapis.com/auth/spreadsheets'
      tags:
        - spreadsheets
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Spreadsheet'
  '/v4/spreadsheets/{spreadsheetId}':
    get:
      description: |-
        Returns the spreadsheet at the given ID.
        The caller must specify the spreadsheet ID.

        By default, data within grids will not be returned.
        You can include grid data one of two ways:

        * Specify a field mask listing your desired fields using the `fields` URL
        parameter in HTTP

        * Set the includeGridData
        URL parameter to true.  If a field mask is set, the `includeGridData`
        parameter is ignored

        For large spreadsheets, it is recommended to retrieve only the specific
        fields of the spreadsheet that you want.

        To retrieve only subsets of the spreadsheet, use the
        ranges URL parameter.
        Multiple ranges can be specified.  Limiting the range will
        return only the portions of the spreadsheet that intersect the requested
        ranges. Ranges are specified using A1 notation.
      operationId: sheets.spreadsheets.get
      parameters:
        - description: The spreadsheet to request.
          in: path
          name: spreadsheetId
          required: true
          schema:
            type: string
        - description: The ranges to retrieve from the spreadsheet.
          in: query
          name: ranges
          explode: true
          schema:
            type: array
            items:
              type: string
        - description: |-
            True if grid data should be returned.
            This parameter is ignored if a field mask was set in the request.
          in: query
          name: includeGridData
          schema:
            type: boolean
      responses:
        '200':
          description: Successful response
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/Spreadsheet'
      security:
        - Oauth2:
            - 'https://www.googleapis.com/auth/drive'
          Oauth2c:
            - 'https://www.googleapis.com/auth/drive'
        - Oauth2:
            - 'https://www.googleapis.com/auth/drive.file'
          Oauth2c:
            - 'https://www.googleapis.com/auth/drive.file'
        - Oauth2:
            - 'https://www.googleapis.com/auth/drive.readonly'
          Oauth2c:
            - 'https://www.googleapis.com/auth/drive.readonly'
        - Oauth2:
            - 'https://www.googleapis.com/auth/spreadsheets'
          Oauth2c:
            - 'https://www.googleapis.com/auth/spreadsheets'
        - Oauth2:
            - 'https://www.googleapis.com/auth/spreadsheets.readonly'
          Oauth2c:
            - 'https://www.googleapis.com/auth/spreadsheets.readonly'
      tags:
        - spreadsheets
    parameters:
      - $ref: '#/components/parameters/prettyPrint'
      - $ref: '#/components/parameters/uploadType'
      - $ref: '#/components/parameters/fields'
      - $ref: '#/components/parameters/_.xgafv'
      - $ref: '#/components/parameters/callback'
      - $ref: '#/components/parameters/alt'
      - $ref: '#/components/parameters/access_token'
      - $ref: '#/components/parameters/key'
      - $ref: '#/components/parameters/quotaUser'
      - $ref: '#/components/parameters/pp'
      - $ref: '#/components/parameters/oauth_token'
      - $ref: '#/components/parameters/bearer_token'
      - $ref: '#/components/parameters/upload_protocol'
  '/v4/spreadsheets/{spreadsheetId}/sheets/{sheetId}:copyTo':
    parameters:
      - $ref: '#/components/parameters/prettyPrint'
      - $ref: '#/components/parameters/uploadType'
      - $ref: '#/components/parameters/fields'
      - $ref: '#/components/parameters/_.xgafv'
      - $ref: '#/components/parameters/callback'
      - $ref: '#/components/parameters/alt'
      - $ref: '#/components/parameters/access_token'
      - $ref: '#/components/parameters/key'
      - $ref: '#/components/parameters/quotaUser'
      - $ref: '#/components/parameters/pp'
      - $ref: '#/components/parameters/oauth_token'
      - $ref: '#/components/parameters/bearer_token'
      - $ref: '#/components/parameters/upload_protocol'
    post:
      description: |-
        Copies a single sheet from a spreadsheet to another spreadsheet.
        Returns the properties of the newly created sheet.
      operationId: sheets.spreadsheets.sheets.copyTo
      parameters:
        - description: The ID of the spreadsheet containing the sheet to copy.
          in: path
          name: spreadsheetId
          required: true
          schema:
            type: string
        - description: The ID of the sheet to copy.
          in: path
          name: sheetId
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: Successful response
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/SheetProperties'
      security:
        - Oauth2:
            - 'https://www.googleapis.com/auth/drive'
          Oauth2c:
            - 'https://www.googleapis.com/auth/drive'
        - Oauth2:
            - 'https://www.googleapis.com/auth/drive.file'
          Oauth2c:
            - 'https://www.googleapis.com/auth/drive.file'
        - Oauth2:
            - 'https://www.googleapis.com/auth/spreadsheets'
          Oauth2c:
            - 'https://www.googleapis.com/auth/spreadsheets'
      tags:
        - spreadsheets
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CopySheetToAnotherSpreadsheetRequest'
  '/v4/spreadsheets/{spreadsheetId}/values/{range}':
    get:
      description: |-
        Returns a range of values from a spreadsheet.
        The caller must specify the spreadsheet ID and a range.
      operationId: sheets.spreadsheets.values.get
      parameters:
        - description: The ID of the spreadsheet to retrieve data from.
          in: path
          name: spreadsheetId
          required: true
          schema:
            type: string
        - description: The A1 notation of the values to retrieve.
          in: path
          name: range
          required: true
          schema:
            type: string
        - description: |-
            The major dimension that results should use.

            For example, if the spreadsheet data is: `A1=1,B1=2,A2=3,B2=4`,
            then requesting `range=A1:B2,majorDimension=ROWS` will return
            `[[1,2],[3,4]]`,
            whereas requesting `range=A1:B2,majorDimension=COLUMNS` will return
            `[[1,3],[2,4]]`.
          in: query
          name: majorDimension
          schema:
            type: string
            enum:
              - DIMENSION_UNSPECIFIED
              - ROWS
              - COLUMNS
        - description: |-
            How values should be represented in the output.
            The default render option is ValueRenderOption.FORMATTED_VALUE.
          in: query
          name: valueRenderOption
          schema:
            type: string
            enum:
              - FORMATTED_VALUE
              - UNFORMATTED_VALUE
              - FORMULA
        - description: |-
            How dates, times, and durations should be represented in the output.
            This is ignored if value_render_option is
            FORMATTED_VALUE.
            The default dateTime render option is [DateTimeRenderOption.SERIAL_NUMBER].
          in: query
          name: dateTimeRenderOption
          schema:
            type: string
            enum:
              - SERIAL_NUMBER
              - FORMATTED_STRING
      responses:
        '200':
          description: Successful response
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ValueRange'
      security:
        - Oauth2:
            - 'https://www.googleapis.com/auth/drive'
          Oauth2c:
            - 'https://www.googleapis.com/auth/drive'
        - Oauth2:
            - 'https://www.googleapis.com/auth/drive.file'
          Oauth2c:
            - 'https://www.googleapis.com/auth/drive.file'
        - Oauth2:
            - 'https://www.googleapis.com/auth/drive.readonly'
          Oauth2c:
            - 'https://www.googleapis.com/auth/drive.readonly'
        - Oauth2:
            - 'https://www.googleapis.com/auth/spreadsheets'
          Oauth2c:
            - 'https://www.googleapis.com/auth/spreadsheets'
        - Oauth2:
            - 'https://www.googleapis.com/auth/spreadsheets.readonly'
          Oauth2c:
            - 'https://www.googleapis.com/auth/spreadsheets.readonly'
      tags:
        - spreadsheets
    parameters:
      - $ref: '#/components/parameters/prettyPrint'
      - $ref: '#/components/parameters/uploadType'
      - $ref: '#/components/parameters/fields'
      - $ref: '#/components/parameters/_.xgafv'
      - $ref: '#/components/parameters/callback'
      - $ref: '#/components/parameters/alt'
      - $ref: '#/components/parameters/access_token'
      - $ref: '#/components/parameters/key'
      - $ref: '#/components/parameters/quotaUser'
      - $ref: '#/components/parameters/pp'
      - $ref: '#/components/parameters/oauth_token'
      - $ref: '#/components/parameters/bearer_token'
      - $ref: '#/components/parameters/upload_protocol'
    put:
      description: |-
        Sets values in a range of a spreadsheet.
        The caller must specify the spreadsheet ID, range, and
        a valueInputOption.
      operationId: sheets.spreadsheets.values.update
      parameters:
        - description: The ID of the spreadsheet to update.
          in: path
          name: spreadsheetId
          required: true
          schema:
            type: string
        - description: The A1 notation of the values to update.
          in: path
          name: range
          required: true
          schema:
            type: string
        - description: |-
            Determines how values in the response should be rendered.
            The default render option is ValueRenderOption.FORMATTED_VALUE.
          in: query
          name: responseValueRenderOption
          schema:
            type: string
            enum:
              - FORMATTED_VALUE
              - UNFORMATTED_VALUE
              - FORMULA
        - description: How the input data should be interpreted.
          in: query
          name: valueInputOption
          schema:
            type: string
            enum:
              - INPUT_VALUE_OPTION_UNSPECIFIED
              - RAW
              - USER_ENTERED
        - description: |-
            Determines how dates, times, and durations in the response should be
            rendered. This is ignored if response_value_render_option is
            FORMATTED_VALUE.
            The default dateTime render option is [DateTimeRenderOption.SERIAL_NUMBER].
          in: query
          name: responseDateTimeRenderOption
          schema:
            type: string
            enum:
              - SERIAL_NUMBER
              - FORMATTED_STRING
        - description: |-
            Determines if the update response should include the values
            of the cells that were updated. By default, responses
            do not include the updated values.
            If the range to write was larger than than the range actually written,
            the response will include all values in the requested range (excluding
            trailing empty rows and columns).
          in: query
          name: includeValuesInResponse
          schema:
            type: boolean
      responses:
        '200':
          description: Successful response
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/UpdateValuesResponse'
      security:
        - Oauth2:
            - 'https://www.googleapis.com/auth/drive'
          Oauth2c:
            - 'https://www.googleapis.com/auth/drive'
        - Oauth2:
            - 'https://www.googleapis.com/auth/drive.file'
          Oauth2c:
            - 'https://www.googleapis.com/auth/drive.file'
        - Oauth2:
            - 'https://www.googleapis.com/auth/spreadsheets'
          Oauth2c:
            - 'https://www.googleapis.com/auth/spreadsheets'
      tags:
        - spreadsheets
      requestBody:
        $ref: '#/components/requestBodies/ValueRange'
  '/v4/spreadsheets/{spreadsheetId}/values/{range}:append':
    parameters:
      - $ref: '#/components/parameters/prettyPrint'
      - $ref: '#/components/parameters/uploadType'
      - $ref: '#/components/parameters/fields'
      - $ref: '#/components/parameters/_.xgafv'
      - $ref: '#/components/parameters/callback'
      - $ref: '#/components/parameters/alt'
      - $ref: '#/components/parameters/access_token'
      - $ref: '#/components/parameters/key'
      - $ref: '#/components/parameters/quotaUser'
      - $ref: '#/components/parameters/pp'
      - $ref: '#/components/parameters/oauth_token'
      - $ref: '#/components/parameters/bearer_token'
      - $ref: '#/components/parameters/upload_protocol'
    post:
      description: |-
        Appends values to a spreadsheet. The input range is used to search for
        existing data and find a "table" within that range. Values will be
        appended to the next row of the table, starting with the first column of
        the table. See the
        [guide](/sheets/api/guides/values#appending_values)
        and
        [sample code](/sheets/api/samples/writing#append_values)
        for specific details of how tables are detected and data is appended.

        The caller must specify the spreadsheet ID, range, and
        a valueInputOption.  The `valueInputOption` only
        controls how the input data will be added to the sheet (column-wise or
        row-wise), it does not influence what cell the data starts being written
        to.
      operationId: sheets.spreadsheets.values.append
      parameters:
        - description: The ID of the spreadsheet to update.
          in: path
          name: spreadsheetId
          required: true
          schema:
            type: string
        - description: |-
            The A1 notation of a range to search for a logical table of data.
            Values will be appended after the last row of the table.
          in: path
          name: range
          required: true
          schema:
            type: string
        - description: |-
            Determines if the update response should include the values
            of the cells that were appended. By default, responses
            do not include the updated values.
          in: query
          name: includeValuesInResponse
          schema:
            type: boolean
        - description: |-
            Determines how values in the response should be rendered.
            The default render option is ValueRenderOption.FORMATTED_VALUE.
          in: query
          name: responseValueRenderOption
          schema:
            type: string
            enum:
              - FORMATTED_VALUE
              - UNFORMATTED_VALUE
              - FORMULA
        - description: How the input data should be inserted.
          in: query
          name: insertDataOption
          schema:
            type: string
            enum:
              - OVERWRITE
              - INSERT_ROWS
        - description: How the input data should be interpreted.
          in: query
          name: valueInputOption
          schema:
            type: string
            enum:
              - INPUT_VALUE_OPTION_UNSPECIFIED
              - RAW
              - USER_ENTERED
        - description: |-
            Determines how dates, times, and durations in the response should be
            rendered. This is ignored if response_value_render_option is
            FORMATTED_VALUE.
            The default dateTime render option is [DateTimeRenderOption.SERIAL_NUMBER].
          in: query
          name: responseDateTimeRenderOption
          schema:
            type: string
            enum:
              - SERIAL_NUMBER
              - FORMATTED_STRING
      responses:
        '200':
          description: Successful response
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/AppendValuesResponse'
      security:
        - Oauth2:
            - 'https://www.googleapis.com/auth/drive'
          Oauth2c:
            - 'https://www.googleapis.com/auth/drive'
        - Oauth2:
            - 'https://www.googleapis.com/auth/drive.file'
          Oauth2c:
            - 'https://www.googleapis.com/auth/drive.file'
        - Oauth2:
            - 'https://www.googleapis.com/auth/spreadsheets'
          Oauth2c:
            - 'https://www.googleapis.com/auth/spreadsheets'
      tags:
        - spreadsheets
      requestBody:
        $ref: '#/components/requestBodies/ValueRange'
  '/v4/spreadsheets/{spreadsheetId}/values/{range}:clear':
    parameters:
      - $ref: '#/components/parameters/prettyPrint'
      - $ref: '#/components/parameters/uploadType'
      - $ref: '#/components/parameters/fields'
      - $ref: '#/components/parameters/_.xgafv'
      - $ref: '#/components/parameters/callback'
      - $ref: '#/components/parameters/alt'
      - $ref: '#/components/parameters/access_token'
      - $ref: '#/components/parameters/key'
      - $ref: '#/components/parameters/quotaUser'
      - $ref: '#/components/parameters/pp'
      - $ref: '#/components/parameters/oauth_token'
      - $ref: '#/components/parameters/bearer_token'
      - $ref: '#/components/parameters/upload_protocol'
    post:
      description: |-
        Clears values from a spreadsheet.
        The caller must specify the spreadsheet ID and range.
        Only values are cleared -- all other properties of the cell (such as
        formatting, data validation, etc..) are kept.
      operationId: sheets.spreadsheets.values.clear
      parameters:
        - description: The ID of the spreadsheet to update.
          in: path
          name: spreadsheetId
          required: true
          schema:
            type: string
        - description: The A1 notation of the values to clear.
          in: path
          name: range
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Successful response
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ClearValuesResponse'
      security:
        - Oauth2:
            - 'https://www.googleapis.com/auth/drive'
          Oauth2c:
            - 'https://www.googleapis.com/auth/drive'
        - Oauth2:
            - 'https://www.googleapis.com/auth/drive.file'
          Oauth2c:
            - 'https://www.googleapis.com/auth/drive.file'
        - Oauth2:
            - 'https://www.googleapis.com/auth/spreadsheets'
          Oauth2c:
            - 'https://www.googleapis.com/auth/spreadsheets'
      tags:
        - spreadsheets
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ClearValuesRequest'
  '/v4/spreadsheets/{spreadsheetId}/values:batchClear':
    parameters:
      - $ref: '#/components/parameters/prettyPrint'
      - $ref: '#/components/parameters/uploadType'
      - $ref: '#/components/parameters/fields'
      - $ref: '#/components/parameters/_.xgafv'
      - $ref: '#/components/parameters/callback'
      - $ref: '#/components/parameters/alt'
      - $ref: '#/components/parameters/access_token'
      - $ref: '#/components/parameters/key'
      - $ref: '#/components/parameters/quotaUser'
      - $ref: '#/components/parameters/pp'
      - $ref: '#/components/parameters/oauth_token'
      - $ref: '#/components/parameters/bearer_token'
      - $ref: '#/components/parameters/upload_protocol'
    post:
      description: |-
        Clears one or more ranges of values from a spreadsheet.
        The caller must specify the spreadsheet ID and one or more ranges.
        Only values are cleared -- all other properties of the cell (such as
        formatting, data validation, etc..) are kept.
      operationId: sheets.spreadsheets.values.batchClear
      parameters:
        - description: The ID of the spreadsheet to update.
          in: path
          name: spreadsheetId
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Successful response
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/BatchClearValuesResponse'
      security:
        - Oauth2:
            - 'https://www.googleapis.com/auth/drive'
          Oauth2c:
            - 'https://www.googleapis.com/auth/drive'
        - Oauth2:
            - 'https://www.googleapis.com/auth/drive.file'
          Oauth2c:
            - 'https://www.googleapis.com/auth/drive.file'
        - Oauth2:
            - 'https://www.googleapis.com/auth/spreadsheets'
          Oauth2c:
            - 'https://www.googleapis.com/auth/spreadsheets'
      tags:
        - spreadsheets
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/BatchClearValuesRequest'
  '/v4/spreadsheets/{spreadsheetId}/values:batchGet':
    get:
      description: |-
        Returns one or more ranges of values from a spreadsheet.
        The caller must specify the spreadsheet ID and one or more ranges.
      operationId: sheets.spreadsheets.values.batchGet
      parameters:
        - description: The ID of the spreadsheet to retrieve data from.
          in: path
          name: spreadsheetId
          required: true
          schema:
            type: string
        - description: |-
            How values should be represented in the output.
            The default render option is ValueRenderOption.FORMATTED_VALUE.
          in: query
          name: valueRenderOption
          schema:
            type: string
            enum:
              - FORMATTED_VALUE
              - UNFORMATTED_VALUE
              - FORMULA
        - description: |-
            How dates, times, and durations should be represented in the output.
            This is ignored if value_render_option is
            FORMATTED_VALUE.
            The default dateTime render option is [DateTimeRenderOption.SERIAL_NUMBER].
          in: query
          name: dateTimeRenderOption
          schema:
            type: string
            enum:
              - SERIAL_NUMBER
              - FORMATTED_STRING
        - description: The A1 notation of the values to retrieve.
          in: query
          name: ranges
          explode: true
          schema:
            type: array
            items:
              type: string
        - description: |-
            The major dimension that results should use.

            For example, if the spreadsheet data is: `A1=1,B1=2,A2=3,B2=4`,
            then requesting `range=A1:B2,majorDimension=ROWS` will return
            `[[1,2],[3,4]]`,
            whereas requesting `range=A1:B2,majorDimension=COLUMNS` will return
            `[[1,3],[2,4]]`.
          in: query
          name: majorDimension
          schema:
            type: string
            enum:
              - DIMENSION_UNSPECIFIED
              - ROWS
              - COLUMNS
      responses:
        '200':
          description: Successful response
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/BatchGetValuesResponse'
      security:
        - Oauth2:
            - 'https://www.googleapis.com/auth/drive'
          Oauth2c:
            - 'https://www.googleapis.com/auth/drive'
        - Oauth2:
            - 'https://www.googleapis.com/auth/drive.file'
          Oauth2c:
            - 'https://www.googleapis.com/auth/drive.file'
        - Oauth2:
            - 'https://www.googleapis.com/auth/drive.readonly'
          Oauth2c:
            - 'https://www.googleapis.com/auth/drive.readonly'
        - Oauth2:
            - 'https://www.googleapis.com/auth/spreadsheets'
          Oauth2c:
            - 'https://www.googleapis.com/auth/spreadsheets'
        - Oauth2:
            - 'https://www.googleapis.com/auth/spreadsheets.readonly'
          Oauth2c:
            - 'https://www.googleapis.com/auth/spreadsheets.readonly'
      tags:
        - spreadsheets
    parameters:
      - $ref: '#/components/parameters/prettyPrint'
      - $ref: '#/components/parameters/uploadType'
      - $ref: '#/components/parameters/fields'
      - $ref: '#/components/parameters/_.xgafv'
      - $ref: '#/components/parameters/callback'
      - $ref: '#/components/parameters/alt'
      - $ref: '#/components/parameters/access_token'
      - $ref: '#/components/parameters/key'
      - $ref: '#/components/parameters/quotaUser'
      - $ref: '#/components/parameters/pp'
      - $ref: '#/components/parameters/oauth_token'
      - $ref: '#/components/parameters/bearer_token'
      - $ref: '#/components/parameters/upload_protocol'
  '/v4/spreadsheets/{spreadsheetId}/values:batchUpdate':
    parameters:
      - $ref: '#/components/parameters/prettyPrint'
      - $ref: '#/components/parameters/uploadType'
      - $ref: '#/components/parameters/fields'
      - $ref: '#/components/parameters/_.xgafv'
      - $ref: '#/components/parameters/callback'
      - $ref: '#/components/parameters/alt'
      - $ref: '#/components/parameters/access_token'
      - $ref: '#/components/parameters/key'
      - $ref: '#/components/parameters/quotaUser'
      - $ref: '#/components/parameters/pp'
      - $ref: '#/components/parameters/oauth_token'
      - $ref: '#/components/parameters/bearer_token'
      - $ref: '#/components/parameters/upload_protocol'
    post:
      description: |-
        Sets values in one or more ranges of a spreadsheet.
        The caller must specify the spreadsheet ID,
        a valueInputOption, and one or more
        ValueRanges.
      operationId: sheets.spreadsheets.values.batchUpdate
      parameters:
        - description: The ID of the spreadsheet to update.
          in: path
          name: spreadsheetId
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Successful response
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/BatchUpdateValuesResponse'
      security:
        - Oauth2:
            - 'https://www.googleapis.com/auth/drive'
          Oauth2c:
            - 'https://www.googleapis.com/auth/drive'
        - Oauth2:
            - 'https://www.googleapis.com/auth/drive.file'
          Oauth2c:
            - 'https://www.googleapis.com/auth/drive.file'
        - Oauth2:
            - 'https://www.googleapis.com/auth/spreadsheets'
          Oauth2c:
            - 'https://www.googleapis.com/auth/spreadsheets'
      tags:
        - spreadsheets
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/BatchUpdateValuesRequest'
  '/v4/spreadsheets/{spreadsheetId}:batchUpdate':
    parameters:
      - $ref: '#/components/parameters/prettyPrint'
      - $ref: '#/components/parameters/uploadType'
      - $ref: '#/components/parameters/fields'
      - $ref: '#/components/parameters/_.xgafv'
      - $ref: '#/components/parameters/callback'
      - $ref: '#/components/parameters/alt'
      - $ref: '#/components/parameters/access_token'
      - $ref: '#/components/parameters/key'
      - $ref: '#/components/parameters/quotaUser'
      - $ref: '#/components/parameters/pp'
      - $ref: '#/components/parameters/oauth_token'
      - $ref: '#/components/parameters/bearer_token'
      - $ref: '#/components/parameters/upload_protocol'
    post:
      description: |-
        Applies one or more updates to the spreadsheet.

        Each request is validated before
        being applied. If any request is not valid then the entire request will
        fail and nothing will be applied.

        Some requests have replies to
        give you some information about how
        they are applied. The replies will mirror the requests.  For example,
        if you applied 4 updates and the 3rd one had a reply, then the
        response will have 2 empty replies, the actual reply, and another empty
        reply, in that order.

        Due to the collaborative nature of spreadsheets, it is not guaranteed that
        the spreadsheet will reflect exactly your changes after this completes,
        however it is guaranteed that the updates in the request will be
        applied together atomically. Your changes may be altered with respect to
        collaborator changes. If there are no collaborators, the spreadsheet
        should reflect your changes.
      operationId: sheets.spreadsheets.batchUpdate
      parameters:
        - description: The spreadsheet to apply the updates to.
          in: path
          name: spreadsheetId
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Successful response
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/BatchUpdateSpreadsheetResponse'
      security:
        - Oauth2:
            - 'https://www.googleapis.com/auth/drive'
          Oauth2c:
            - 'https://www.googleapis.com/auth/drive'
        - Oauth2:
            - 'https://www.googleapis.com/auth/drive.file'
          Oauth2c:
            - 'https://www.googleapis.com/auth/drive.file'
        - Oauth2:
            - 'https://www.googleapis.com/auth/spreadsheets'
          Oauth2c:
            - 'https://www.googleapis.com/auth/spreadsheets'
      tags:
        - spreadsheets
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/BatchUpdateSpreadsheetRequest'
components:
  schemas:
    AddBandingRequest:
      description: Adds a new banded range to the spreadsheet.
      properties:
        bandedRange:
          $ref: '#/components/schemas/BandedRange'
      type: object
    AddBandingResponse:
      description: The result of adding a banded range.
      properties:
        bandedRange:
          $ref: '#/components/schemas/BandedRange'
      type: object
    AddChartRequest:
      description: Adds a chart to a sheet in the spreadsheet.
      properties:
        chart:
          $ref: '#/components/schemas/EmbeddedChart'
      type: object
    AddChartResponse:
      description: The result of adding a chart to a spreadsheet.
      properties:
        chart:
          $ref: '#/components/schemas/EmbeddedChart'
      type: object
    AddConditionalFormatRuleRequest:
      description: |-
        Adds a new conditional format rule at the given index.
        All subsequent rules' indexes are incremented.
      properties:
        index:
          description: The zero-based index where the rule should be inserted.
          format: int32
          type: integer
        rule:
          $ref: '#/components/schemas/ConditionalFormatRule'
      type: object
    AddFilterViewRequest:
      description: Adds a filter view.
      properties:
        filter:
          $ref: '#/components/schemas/FilterView'
      type: object
    AddFilterViewResponse:
      description: The result of adding a filter view.
      properties:
        filter:
          $ref: '#/components/schemas/FilterView'
      type: object
    AddNamedRangeRequest:
      description: Adds a named range to the spreadsheet.
      properties:
        namedRange:
          $ref: '#/components/schemas/NamedRange'
      type: object
    AddNamedRangeResponse:
      description: The result of adding a named range.
      properties:
        namedRange:
          $ref: '#/components/schemas/NamedRange'
      type: object
    AddProtectedRangeRequest:
      description: Adds a new protected range.
      properties:
        protectedRange:
          $ref: '#/components/schemas/ProtectedRange'
      type: object
    AddProtectedRangeResponse:
      description: The result of adding a new protected range.
      properties:
        protectedRange:
          $ref: '#/components/schemas/ProtectedRange'
      type: object
    AddSheetRequest:
      description: |-
        Adds a new sheet.
        When a sheet is added at a given index,
        all subsequent sheets' indexes are incremented.
        To add an object sheet, use AddChartRequest instead and specify
        EmbeddedObjectPosition.sheetId or
        EmbeddedObjectPosition.newSheet.
      properties:
        properties:
          $ref: '#/components/schemas/SheetProperties'
      type: object
    AddSheetResponse:
      description: The result of adding a sheet.
      properties:
        properties:
          $ref: '#/components/schemas/SheetProperties'
      type: object
    AppendCellsRequest:
      description: |-
        Adds new cells after the last row with data in a sheet,
        inserting new rows into the sheet if necessary.
      properties:
        fields:
          description: |-
            The fields of CellData that should be updated.
            At least one field must be specified.
            The root is the CellData; 'row.values.' should not be specified.
            A single `"*"` can be used as short-hand for listing every field.
          format: google-fieldmask
          type: string
        rows:
          description: The data to append.
          items:
            $ref: '#/components/schemas/RowData'
          type: array
        sheetId:
          description: The sheet ID to append the data to.
          format: int32
          type: integer
      type: object
    AppendDimensionRequest:
      description: Appends rows or columns to the end of a sheet.
      properties:
        dimension:
          description: Whether rows or columns should be appended.
          enum:
            - DIMENSION_UNSPECIFIED
            - ROWS
            - COLUMNS
          type: string
        length:
          description: The number of rows or columns to append.
          format: int32
          type: integer
        sheetId:
          description: The sheet to append rows or columns to.
          format: int32
          type: integer
      type: object
    AppendValuesResponse:
      description: The response when updating a range of values in a spreadsheet.
      properties:
        spreadsheetId:
          description: The spreadsheet the updates were applied to.
          type: string
        tableRange:
          description: |-
            The range (in A1 notation) of the table that values are being appended to
            (before the values were appended).
            Empty if no table was found.
          type: string
        updates:
          $ref: '#/components/schemas/UpdateValuesResponse'
      type: object
    AutoFillRequest:
      description: Fills in more data based on existing data.
      properties:
        range:
          $ref: '#/components/schemas/GridRange'
        sourceAndDestination:
          $ref: '#/components/schemas/SourceAndDestination'
        useAlternateSeries:
          description: |-
            True if we should generate data with the "alternate" series.
            This differs based on the type and amount of source data.
          type: boolean
      type: object
    AutoResizeDimensionsRequest:
      description: |-
        Automatically resizes one or more dimensions based on the contents
        of the cells in that dimension.
      properties:
        dimensions:
          $ref: '#/components/schemas/DimensionRange'
      type: object
    BandedRange:
      description: A banded (alternating colors) range in a sheet.
      properties:
        bandedRangeId:
          description: The id of the banded range.
          format: int32
          type: integer
        columnProperties:
          $ref: '#/components/schemas/BandingProperties'
        range:
          $ref: '#/components/schemas/GridRange'
        rowProperties:
          $ref: '#/components/schemas/BandingProperties'
      type: object
    BandingProperties:
      description: |-
        Properties referring a single dimension (either row or column). If both
        BandedRange.row_properties and BandedRange.column_properties are
        set, the fill colors are applied to cells according to the following rules:

        * header_color and footer_color take priority over band colors.
        * first_band_color takes priority over second_band_color.
        * row_properties takes priority over column_properties.

        For example, the first row color takes priority over the first column
        color, but the first column color takes priority over the second row color.
        Similarly, the row header takes priority over the column header in the
        top left cell, but the column header takes priority over the first row
        color if the row header is not set.
      properties:
        firstBandColor:
          $ref: '#/components/schemas/Color'
        footerColor:
          $ref: '#/components/schemas/Color'
        headerColor:
          $ref: '#/components/schemas/Color'
        secondBandColor:
          $ref: '#/components/schemas/Color'
      type: object
    BasicChartAxis:
      description: |-
        An axis of the chart.
        A chart may not have more than one axis per
        axis position.
      properties:
        format:
          $ref: '#/components/schemas/TextFormat'
        position:
          description: The position of this axis.
          enum:
            - BASIC_CHART_AXIS_POSITION_UNSPECIFIED
            - BOTTOM_AXIS
            - LEFT_AXIS
            - RIGHT_AXIS
          type: string
        title:
          description: |-
            The title of this axis. If set, this overrides any title inferred
            from headers of the data.
          type: string
      type: object
    BasicChartDomain:
      description: |-
        The domain of a chart.
        For example, if charting stock prices over time, this would be the date.
      properties:
        domain:
          $ref: '#/components/schemas/ChartData'
        reversed:
          description: |-
            True to reverse the order of the domain values (horizontal axis).
            Not applicable to Gauge, Geo, Histogram, Org, Pie, Radar, and Treemap
            charts.
          type: boolean
      type: object
    BasicChartSeries:
      description: |-
        A single series of data in a chart.
        For example, if charting stock prices over time, multiple series may exist,
        one for the "Open Price", "High Price", "Low Price" and "Close Price".
      properties:
        series:
          $ref: '#/components/schemas/ChartData'
        targetAxis:
          description: |-
            The minor axis that will specify the range of values for this series.
            For example, if charting stocks over time, the "Volume" series
            may want to be pinned to the right with the prices pinned to the left,
            because the scale of trading volume is different than the scale of
            prices.
            It is an error to specify an axis that isn't a valid minor axis
            for the chart's type.
          enum:
            - BASIC_CHART_AXIS_POSITION_UNSPECIFIED
            - BOTTOM_AXIS
            - LEFT_AXIS
            - RIGHT_AXIS
          type: string
        type:
          description: |-
            The type of this series. Valid only if the
            chartType is
            COMBO.
            Different types will change the way the series is visualized.
            Only LINE, AREA,
            and COLUMN are supported.
          enum:
            - BASIC_CHART_TYPE_UNSPECIFIED
            - BAR
            - LINE
            - AREA
            - COLUMN
            - SCATTER
            - COMBO
            - STEPPED_AREA
          type: string
      type: object
    BasicChartSpec:
      description: |-
        The specification for a basic chart.  See BasicChartType for the list
        of charts this supports.
      properties:
        axis:
          description: The axis on the chart.
          items:
            $ref: '#/components/schemas/BasicChartAxis'
          type: array
        chartType:
          description: The type of the chart.
          enum:
            - BASIC_CHART_TYPE_UNSPECIFIED
            - BAR
            - LINE
            - AREA
            - COLUMN
            - SCATTER
            - COMBO
            - STEPPED_AREA
          type: string
        domains:
          description: |-
            The domain of data this is charting.
            Only a single domain is supported.
          items:
            $ref: '#/components/schemas/BasicChartDomain'
          type: array
        headerCount:
          description: |-
            The number of rows or columns in the data that are "headers".
            If not set, Google Sheets will guess how many rows are headers based
            on the data.

            (Note that BasicChartAxis.title may override the axis title
             inferred from the header values.)
          format: int32
          type: integer
        interpolateNulls:
          description: |-
            If some values in a series are missing, gaps may appear in the chart (e.g,
            segments of lines in a line chart will be missing).  To eliminate these
            gaps set this to true.
            Applies to Line, Area, and Combo charts.
          type: boolean
        legendPosition:
          description: The position of the chart legend.
          enum:
            - BASIC_CHART_LEGEND_POSITION_UNSPECIFIED
            - BOTTOM_LEGEND
            - LEFT_LEGEND
            - RIGHT_LEGEND
            - TOP_LEGEND
            - NO_LEGEND
          type: string
        lineSmoothing:
          description: |-
            Gets whether all lines should be rendered smooth or straight by default.
            Applies to Line charts.
          type: boolean
        series:
          description: The data this chart is visualizing.
          items:
            $ref: '#/components/schemas/BasicChartSeries'
          type: array
        stackedType:
          description: |-
            The stacked type for charts that support vertical stacking.
            Applies to Area, Bar, Column, and Stepped Area charts.
          enum:
            - BASIC_CHART_STACKED_TYPE_UNSPECIFIED
            - NOT_STACKED
            - STACKED
            - PERCENT_STACKED
          type: string
        threeDimensional:
          description: |-
            True to make the chart 3D.
            Applies to Bar and Column charts.
          type: boolean
      type: object
    BasicFilter:
      description: The default filter associated with a sheet.
      properties:
        criteria:
          additionalProperties:
            $ref: '#/components/schemas/FilterCriteria'
          description: |-
            The criteria for showing/hiding values per column.
            The map's key is the column index, and the value is the criteria for
            that column.
          type: object
        range:
          $ref: '#/components/schemas/GridRange'
        sortSpecs:
          description: |-
            The sort order per column. Later specifications are used when values
            are equal in the earlier specifications.
          items:
            $ref: '#/components/schemas/SortSpec'
          type: array
      type: object
    BatchClearValuesRequest:
      description: The request for clearing more than one range of values in a spreadsheet.
      properties:
        ranges:
          description: 'The ranges to clear, in A1 notation.'
          items:
            type: string
          type: array
      type: object
    BatchClearValuesResponse:
      description: The response when clearing a range of values in a spreadsheet.
      properties:
        clearedRanges:
          description: |-
            The ranges that were cleared, in A1 notation.
            (If the requests were for an unbounded range or a ranger larger
             than the bounds of the sheet, this will be the actual ranges
             that were cleared, bounded to the sheet's limits.)
          items:
            type: string
          type: array
        spreadsheetId:
          description: The spreadsheet the updates were applied to.
          type: string
      type: object
    BatchGetValuesResponse:
      description: The response when retrieving more than one range of values in a spreadsheet.
      properties:
        spreadsheetId:
          description: The ID of the spreadsheet the data was retrieved from.
          type: string
        valueRanges:
          description: |-
            The requested values. The order of the ValueRanges is the same as the
            order of the requested ranges.
          items:
            $ref: '#/components/schemas/ValueRange'
          type: array
      type: object
    BatchUpdateSpreadsheetRequest:
      description: The request for updating any aspect of a spreadsheet.
      properties:
        includeSpreadsheetInResponse:
          description: |-
            Determines if the update response should include the spreadsheet
            resource.
          type: boolean
        requests:
          description: |-
            A list of updates to apply to the spreadsheet.
            Requests will be applied in the order they are specified.
            If any request is not valid, no requests will be applied.
          items:
            $ref: '#/components/schemas/Request'
          type: array
        responseIncludeGridData:
          description: |-
            True if grid data should be returned. Meaningful only if
            if include_spreadsheet_response is 'true'.
            This parameter is ignored if a field mask was set in the request.
          type: boolean
        responseRanges:
          description: |-
            Limits the ranges included in the response spreadsheet.
            Meaningful only if include_spreadsheet_response is 'true'.
          items:
            type: string
          type: array
      type: object
    BatchUpdateSpreadsheetResponse:
      description: The reply for batch updating a spreadsheet.
      properties:
        replies:
          description: |-
            The reply of the updates.  This maps 1:1 with the updates, although
            replies to some requests may be empty.
          items:
            $ref: '#/components/schemas/Response'
          type: array
        spreadsheetId:
          description: The spreadsheet the updates were applied to.
          type: string
        updatedSpreadsheet:
          $ref: '#/components/schemas/Spreadsheet'
      type: object
    BatchUpdateValuesRequest:
      description: The request for updating more than one range of values in a spreadsheet.
      properties:
        data:
          description: The new values to apply to the spreadsheet.
          items:
            $ref: '#/components/schemas/ValueRange'
          type: array
        includeValuesInResponse:
          description: |-
            Determines if the update response should include the values
            of the cells that were updated. By default, responses
            do not include the updated values. The `updatedData` field within
            each of the BatchUpdateValuesResponse.responses will contain
            the updated values. If the range to write was larger than than the range
            actually written, the response will include all values in the requested
            range (excluding trailing empty rows and columns).
          type: boolean
        responseDateTimeRenderOption:
          description: |-
            Determines how dates, times, and durations in the response should be
            rendered. This is ignored if response_value_render_option is
            FORMATTED_VALUE.
            The default dateTime render option is
            DateTimeRenderOption.SERIAL_NUMBER.
          enum:
            - SERIAL_NUMBER
            - FORMATTED_STRING
          type: string
        responseValueRenderOption:
          description: |-
            Determines how values in the response should be rendered.
            The default render option is ValueRenderOption.FORMATTED_VALUE.
          enum:
            - FORMATTED_VALUE
            - UNFORMATTED_VALUE
            - FORMULA
          type: string
        valueInputOption:
          description: How the input data should be interpreted.
          enum:
            - INPUT_VALUE_OPTION_UNSPECIFIED
            - RAW
            - USER_ENTERED
          type: string
      type: object
    BatchUpdateValuesResponse:
      description: The response when updating a range of values in a spreadsheet.
      properties:
        responses:
          description: |-
            One UpdateValuesResponse per requested range, in the same order as
            the requests appeared.
          items:
            $ref: '#/components/schemas/UpdateValuesResponse'
          type: array
        spreadsheetId:
          description: The spreadsheet the updates were applied to.
          type: string
        totalUpdatedCells:
          description: The total number of cells updated.
          format: int32
          type: integer
        totalUpdatedColumns:
          description: |-
            The total number of columns where at least one cell in the column was
            updated.
          format: int32
          type: integer
        totalUpdatedRows:
          description: The total number of rows where at least one cell in the row was updated.
          format: int32
          type: integer
        totalUpdatedSheets:
          description: |-
            The total number of sheets where at least one cell in the sheet was
            updated.
          format: int32
          type: integer
      type: object
    BooleanCondition:
      description: |-
        A condition that can evaluate to true or false.
        BooleanConditions are used by conditional formatting,
        data validation, and the criteria in filters.
      properties:
        type:
          description: The type of condition.
          enum:
            - CONDITION_TYPE_UNSPECIFIED
            - NUMBER_GREATER
            - NUMBER_GREATER_THAN_EQ
            - NUMBER_LESS
            - NUMBER_LESS_THAN_EQ
            - NUMBER_EQ
            - NUMBER_NOT_EQ
            - NUMBER_BETWEEN
            - NUMBER_NOT_BETWEEN
            - TEXT_CONTAINS
            - TEXT_NOT_CONTAINS
            - TEXT_STARTS_WITH
            - TEXT_ENDS_WITH
            - TEXT_EQ
            - TEXT_IS_EMAIL
            - TEXT_IS_URL
            - DATE_EQ
            - DATE_BEFORE
            - DATE_AFTER
            - DATE_ON_OR_BEFORE
            - DATE_ON_OR_AFTER
            - DATE_BETWEEN
            - DATE_NOT_BETWEEN
            - DATE_IS_VALID
            - ONE_OF_RANGE
            - ONE_OF_LIST
            - BLANK
            - NOT_BLANK
            - CUSTOM_FORMULA
          type: string
        values:
          description: |-
            The values of the condition. The number of supported values depends
            on the condition type.  Some support zero values,
            others one or two values,
            and ConditionType.ONE_OF_LIST supports an arbitrary number of values.
          items:
            $ref: '#/components/schemas/ConditionValue'
          type: array
      type: object
    BooleanRule:
      description: 'A rule that may or may not match, depending on the condition.'
      properties:
        condition:
          $ref: '#/components/schemas/BooleanCondition'
        format:
          $ref: '#/components/schemas/CellFormat'
      type: object
    Border:
      description: A border along a cell.
      properties:
        color:
          $ref: '#/components/schemas/Color'
        style:
          description: The style of the border.
          enum:
            - STYLE_UNSPECIFIED
            - DOTTED
            - DASHED
            - SOLID
            - SOLID_MEDIUM
            - SOLID_THICK
            - NONE
            - DOUBLE
          type: string
        width:
          description: |-
            The width of the border, in pixels.
            Deprecated; the width is determined by the "style" field.
          format: int32
          type: integer
      type: object
    Borders:
      description: The borders of the cell.
      properties:
        bottom:
          $ref: '#/components/schemas/Border'
        left:
          $ref: '#/components/schemas/Border'
        right:
          $ref: '#/components/schemas/Border'
        top:
          $ref: '#/components/schemas/Border'
      type: object
    BubbleChartSpec:
      description: A <a href="/chart/interactive/docs/gallery/bubblechart">bubble chart</a>.
      properties:
        bubbleBorderColor:
          $ref: '#/components/schemas/Color'
        bubbleLabels:
          $ref: '#/components/schemas/ChartData'
        bubbleMaxRadiusSize:
          description: |-
            The max radius size of the bubbles, in pixels.
            If specified, the field must be a positive value.
          format: int32
          type: integer
        bubbleMinRadiusSize:
          description: |-
            The minimum radius size of the bubbles, in pixels.
            If specific, the field must be a positive value.
          format: int32
          type: integer
        bubbleOpacity:
          description: |-
            The opacity of the bubbles between 0 and 1.0.
            0 is fully transparent and 1 is fully opaque.
          format: float
          type: number
        bubbleSizes:
          $ref: '#/components/schemas/ChartData'
        bubbleTextStyle:
          $ref: '#/components/schemas/TextFormat'
        domain:
          $ref: '#/components/schemas/ChartData'
        groupIds:
          $ref: '#/components/schemas/ChartData'
        legendPosition:
          description: Where the legend of the chart should be drawn.
          enum:
            - BUBBLE_CHART_LEGEND_POSITION_UNSPECIFIED
            - BOTTOM_LEGEND
            - LEFT_LEGEND
            - RIGHT_LEGEND
            - TOP_LEGEND
            - NO_LEGEND
            - INSIDE_LEGEND
          type: string
        series:
          $ref: '#/components/schemas/ChartData'
      type: object
    CandlestickChartSpec:
      description: A <a href="/chart/interactive/docs/gallery/candlestickchart">candlestick chart</a>.
      properties:
        data:
          description: |-
            The Candlestick chart data.
            Only one CandlestickData is supported.
          items:
            $ref: '#/components/schemas/CandlestickData'
          type: array
        domain:
          $ref: '#/components/schemas/CandlestickDomain'
      type: object
    CandlestickData:
      description: |-
        The Candlestick chart data, each containing the low, open, close, and high
        values for a series.
      properties:
        closeSeries:
          $ref: '#/components/schemas/CandlestickSeries'
        highSeries:
          $ref: '#/components/schemas/CandlestickSeries'
        lowSeries:
          $ref: '#/components/schemas/CandlestickSeries'
        openSeries:
          $ref: '#/components/schemas/CandlestickSeries'
      type: object
    CandlestickDomain:
      description: The domain of a CandlestickChart.
      properties:
        data:
          $ref: '#/components/schemas/ChartData'
      type: object
    CandlestickSeries:
      description: The series of a CandlestickData.
      properties:
        data:
          $ref: '#/components/schemas/ChartData'
      type: object
    CellData:
      description: Data about a specific cell.
      properties:
        dataValidation:
          $ref: '#/components/schemas/DataValidationRule'
        effectiveFormat:
          $ref: '#/components/schemas/CellFormat'
        effectiveValue:
          $ref: '#/components/schemas/ExtendedValue'
        formattedValue:
          description: |-
            The formatted value of the cell.
            This is the value as it's shown to the user.
            This field is read-only.
          type: string
        hyperlink:
          description: |-
            A hyperlink this cell points to, if any.
            This field is read-only.  (To set it, use a `=HYPERLINK` formula
            in the userEnteredValue.formulaValue
            field.)
          type: string
        note:
          description: Any note on the cell.
          type: string
        pivotTable:
          $ref: '#/components/schemas/PivotTable'
        textFormatRuns:
          description: |-
            Runs of rich text applied to subsections of the cell.  Runs are only valid
            on user entered strings, not formulas, bools, or numbers.
            Runs start at specific indexes in the text and continue until the next
            run. Properties of a run will continue unless explicitly changed
            in a subsequent run (and properties of the first run will continue
            the properties of the cell unless explicitly changed).

            When writing, the new runs will overwrite any prior runs.  When writing a
            new user_entered_value, previous runs will be erased.
          items:
            $ref: '#/components/schemas/TextFormatRun'
          type: array
        userEnteredFormat:
          $ref: '#/components/schemas/CellFormat'
        userEnteredValue:
          $ref: '#/components/schemas/ExtendedValue'
      type: object
    CellFormat:
      description: The format of a cell.
      properties:
        backgroundColor:
          $ref: '#/components/schemas/Color'
        borders:
          $ref: '#/components/schemas/Borders'
        horizontalAlignment:
          description: The horizontal alignment of the value in the cell.
          enum:
            - HORIZONTAL_ALIGN_UNSPECIFIED
            - LEFT
            - CENTER
            - RIGHT
          type: string
        hyperlinkDisplayType:
          description: 'How a hyperlink, if it exists, should be displayed in the cell.'
          enum:
            - HYPERLINK_DISPLAY_TYPE_UNSPECIFIED
            - LINKED
            - PLAIN_TEXT
          type: string
        numberFormat:
          $ref: '#/components/schemas/NumberFormat'
        padding:
          $ref: '#/components/schemas/Padding'
        textDirection:
          description: The direction of the text in the cell.
          enum:
            - TEXT_DIRECTION_UNSPECIFIED
            - LEFT_TO_RIGHT
            - RIGHT_TO_LEFT
          type: string
        textFormat:
          $ref: '#/components/schemas/TextFormat'
        textRotation:
          $ref: '#/components/schemas/TextRotation'
        verticalAlignment:
          description: The vertical alignment of the value in the cell.
          enum:
            - VERTICAL_ALIGN_UNSPECIFIED
            - TOP
            - MIDDLE
            - BOTTOM
          type: string
        wrapStrategy:
          description: The wrap strategy for the value in the cell.
          enum:
            - WRAP_STRATEGY_UNSPECIFIED
            - OVERFLOW_CELL
            - LEGACY_WRAP
            - CLIP
            - WRAP
          type: string
      type: object
    ChartData:
      description: The data included in a domain or series.
      properties:
        sourceRange:
          $ref: '#/components/schemas/ChartSourceRange'
      type: object
    ChartSourceRange:
      description: Source ranges for a chart.
      properties:
        sources:
          description: |-
            The ranges of data for a series or domain.
            Exactly one dimension must have a length of 1,
            and all sources in the list must have the same dimension
            with length 1.
            The domain (if it exists) & all series must have the same number
            of source ranges. If using more than one source range, then the source
            range at a given offset must be contiguous across the domain and series.

            For example, these are valid configurations:

                domain sources: A1:A5
                series1 sources: B1:B5
                series2 sources: D6:D10

                domain sources: A1:A5, C10:C12
                series1 sources: B1:B5, D10:D12
                series2 sources: C1:C5, E10:E12
          items:
            $ref: '#/components/schemas/GridRange'
          type: array
      type: object
    ChartSpec:
      description: The specifications of a chart.
      properties:
        backgroundColor:
          $ref: '#/components/schemas/Color'
        basicChart:
          $ref: '#/components/schemas/BasicChartSpec'
        bubbleChart:
          $ref: '#/components/schemas/BubbleChartSpec'
        candlestickChart:
          $ref: '#/components/schemas/CandlestickChartSpec'
        fontName:
          description: |-
            The name of the font to use by default for all chart text (e.g. title,
            axis labels, legend).  If a font is specified for a specific part of the
            chart it will override this font name.
          type: string
        hiddenDimensionStrategy:
          description: Determines how the charts will use hidden rows or columns.
          enum:
            - CHART_HIDDEN_DIMENSION_STRATEGY_UNSPECIFIED
            - SKIP_HIDDEN_ROWS_AND_COLUMNS
            - SKIP_HIDDEN_ROWS
            - SKIP_HIDDEN_COLUMNS
            - SHOW_ALL
          type: string
        histogramChart:
          $ref: '#/components/schemas/HistogramChartSpec'
        maximized:
          description: |-
            True to make a chart fill the entire space in which it's rendered with
            minimum padding.  False to use the default padding.
            (Not applicable to Geo and Org charts.)
          type: boolean
        orgChart:
          $ref: '#/components/schemas/OrgChartSpec'
        pieChart:
          $ref: '#/components/schemas/PieChartSpec'
        title:
          description: The title of the chart.
          type: string
        titleTextFormat:
          $ref: '#/components/schemas/TextFormat'
      type: object
    ClearBasicFilterRequest:
      description: 'Clears the basic filter, if any exists on the sheet.'
      properties:
        sheetId:
          description: The sheet ID on which the basic filter should be cleared.
          format: int32
          type: integer
      type: object
    ClearValuesRequest:
      description: The request for clearing a range of values in a spreadsheet.
      properties: {}
      type: object
    ClearValuesResponse:
      description: The response when clearing a range of values in a spreadsheet.
      properties:
        clearedRange:
          description: |-
            The range (in A1 notation) that was cleared.
            (If the request was for an unbounded range or a ranger larger
             than the bounds of the sheet, this will be the actual range
             that was cleared, bounded to the sheet's limits.)
          type: string
        spreadsheetId:
          description: The spreadsheet the updates were applied to.
          type: string
      type: object
    Color:
      description: |-
        Represents a color in the RGBA color space. This representation is designed
        for simplicity of conversion to/from color representations in various
        languages over compactness; for example, the fields of this representation
        can be trivially provided to the constructor of "java.awt.Color" in Java; it
        can also be trivially provided to UIColor's "+colorWithRed:green:blue:alpha"
        method in iOS; and, with just a little work, it can be easily formatted into
        a CSS "rgba()" string in JavaScript, as well. Here are some examples:

        Example (Java):

             import com.google.type.Color;

             // ...
             public static java.awt.Color fromProto(Color protocolor) {
               float alpha = protocolor.hasAlpha()
                   ? protocolor.getAlpha().getValue()
                   : 1.0;

               return new java.awt.Color(
                   protocolor.getRed(),
                   protocolor.getGreen(),
                   protocolor.getBlue(),
                   alpha);
             }

             public static Color toProto(java.awt.Color color) {
               float red = (float) color.getRed();
               float green = (float) color.getGreen();
               float blue = (float) color.getBlue();
               float denominator = 255.0;
               Color.Builder resultBuilder =
                   Color
                       .newBuilder()
                       .setRed(red / denominator)
                       .setGreen(green / denominator)
                       .setBlue(blue / denominator);
               int alpha = color.getAlpha();
               if (alpha != 255) {
                 result.setAlpha(
                     FloatValue
                         .newBuilder()
                         .setValue(((float) alpha) / denominator)
                         .build());
               }
               return resultBuilder.build();
             }
             // ...

        Example (iOS / Obj-C):

             // ...
             static UIColor* fromProto(Color* protocolor) {
                float red = [protocolor red];
                float green = [protocolor green];
                float blue = [protocolor blue];
                FloatValue* alpha_wrapper = [protocolor alpha];
                float alpha = 1.0;
                if (alpha_wrapper != nil) {
                  alpha = [alpha_wrapper value];
                }
                return [UIColor colorWithRed:red green:green blue:blue alpha:alpha];
             }

             static Color* toProto(UIColor* color) {
                 CGFloat red, green, blue, alpha;
                 if (![color getRed:&red green:&green blue:&blue alpha:&alpha]) {
                   return nil;
                 }
                 Color* result = [Color alloc] init];
                 [result setRed:red];
                 [result setGreen:green];
                 [result setBlue:blue];
                 if (alpha <= 0.9999) {
                   [result setAlpha:floatWrapperWithValue(alpha)];
                 }
                 [result autorelease];
                 return result;
            }
            // ...

         Example (JavaScript):

            // ...

            var protoToCssColor = function(rgb_color) {
               var redFrac = rgb_color.red || 0.0;
               var greenFrac = rgb_color.green || 0.0;
               var blueFrac = rgb_color.blue || 0.0;
               var red = Math.floor(redFrac * 255);
               var green = Math.floor(greenFrac * 255);
               var blue = Math.floor(blueFrac * 255);

               if (!('alpha' in rgb_color)) {
                  return rgbToCssColor_(red, green, blue);
               }

               var alphaFrac = rgb_color.alpha.value || 0.0;
               var rgbParams = [red, green, blue].join(',');
               return ['rgba(', rgbParams, ',', alphaFrac, ')'].join('');
            };

            var rgbToCssColor_ = function(red, green, blue) {
              var rgbNumber = new Number((red << 16) | (green << 8) | blue);
              var hexString = rgbNumber.toString(16);
              var missingZeros = 6 - hexString.length;
              var resultBuilder = ['#'];
              for (var i = 0; i < missingZeros; i++) {
                 resultBuilder.push('0');
              }
              resultBuilder.push(hexString);
              return resultBuilder.join('');
            };

            // ...
      properties:
        alpha:
          description: |-
            The fraction of this color that should be applied to the pixel. That is,
            the final pixel color is defined by the equation:

              pixel color = alpha * (this color) + (1.0 - alpha) * (background color)

            This means that a value of 1.0 corresponds to a solid color, whereas
            a value of 0.0 corresponds to a completely transparent color. This
            uses a wrapper message rather than a simple float scalar so that it is
            possible to distinguish between a default value and the value being unset.
            If omitted, this color object is to be rendered as a solid color
            (as if the alpha value had been explicitly given with a value of 1.0).
          format: float
          type: number
        blue:
          description: 'The amount of blue in the color as a value in the interval [0, 1].'
          format: float
          type: number
        green:
          description: 'The amount of green in the color as a value in the interval [0, 1].'
          format: float
          type: number
        red:
          description: 'The amount of red in the color as a value in the interval [0, 1].'
          format: float
          type: number
      type: object
    ConditionValue:
      description: The value of the condition.
      properties:
        relativeDate:
          description: |-
            A relative date (based on the current date).
            Valid only if the type is
            DATE_BEFORE,
            DATE_AFTER,
            DATE_ON_OR_BEFORE or
            DATE_ON_OR_AFTER.

            Relative dates are not supported in data validation.
            They are supported only in conditional formatting and
            conditional filters.
          enum:
            - RELATIVE_DATE_UNSPECIFIED
            - PAST_YEAR
            - PAST_MONTH
            - PAST_WEEK
            - YESTERDAY
            - TODAY
            - TOMORROW
          type: string
        userEnteredValue:
          description: |-
            A value the condition is based on.
            The value will be parsed as if the user typed into a cell.
            Formulas are supported (and must begin with an `=`).
          type: string
      type: object
    ConditionalFormatRule:
      description: A rule describing a conditional format.
      properties:
        booleanRule:
          $ref: '#/components/schemas/BooleanRule'
        gradientRule:
          $ref: '#/components/schemas/GradientRule'
        ranges:
          description: |-
            The ranges that will be formatted if the condition is true.
            All the ranges must be on the same grid.
          items:
            $ref: '#/components/schemas/GridRange'
          type: array
      type: object
    CopyPasteRequest:
      description: Copies data from the source to the destination.
      properties:
        destination:
          $ref: '#/components/schemas/GridRange'
        pasteOrientation:
          description: How that data should be oriented when pasting.
          enum:
            - NORMAL
            - TRANSPOSE
          type: string
        pasteType:
          description: What kind of data to paste.
          enum:
            - PASTE_NORMAL
            - PASTE_VALUES
            - PASTE_FORMAT
            - PASTE_NO_BORDERS
            - PASTE_FORMULA
            - PASTE_DATA_VALIDATION
            - PASTE_CONDITIONAL_FORMATTING
          type: string
        source:
          $ref: '#/components/schemas/GridRange'
      type: object
    CopySheetToAnotherSpreadsheetRequest:
      description: The request to copy a sheet across spreadsheets.
      properties:
        destinationSpreadsheetId:
          description: The ID of the spreadsheet to copy the sheet to.
          type: string
      type: object
    CutPasteRequest:
      description: Moves data from the source to the destination.
      properties:
        destination:
          $ref: '#/components/schemas/GridCoordinate'
        pasteType:
          description: |-
            What kind of data to paste.  All the source data will be cut, regardless
            of what is pasted.
          enum:
            - PASTE_NORMAL
            - PASTE_VALUES
            - PASTE_FORMAT
            - PASTE_NO_BORDERS
            - PASTE_FORMULA
            - PASTE_DATA_VALIDATION
            - PASTE_CONDITIONAL_FORMATTING
          type: string
        source:
          $ref: '#/components/schemas/GridRange'
      type: object
    DataValidationRule:
      description: A data validation rule.
      properties:
        condition:
          $ref: '#/components/schemas/BooleanCondition'
        inputMessage:
          description: A message to show the user when adding data to the cell.
          type: string
        showCustomUi:
          description: |-
            True if the UI should be customized based on the kind of condition.
            If true, "List" conditions will show a dropdown.
          type: boolean
        strict:
          description: True if invalid data should be rejected.
          type: boolean
      type: object
    DeleteBandingRequest:
      description: Removes the banded range with the given ID from the spreadsheet.
      properties:
        bandedRangeId:
          description: The ID of the banded range to delete.
          format: int32
          type: integer
      type: object
    DeleteConditionalFormatRuleRequest:
      description: |-
        Deletes a conditional format rule at the given index.
        All subsequent rules' indexes are decremented.
      properties:
        index:
          description: The zero-based index of the rule to be deleted.
          format: int32
          type: integer
        sheetId:
          description: The sheet the rule is being deleted from.
          format: int32
          type: integer
      type: object
    DeleteConditionalFormatRuleResponse:
      description: The result of deleting a conditional format rule.
      properties:
        rule:
          $ref: '#/components/schemas/ConditionalFormatRule'
      type: object
    DeleteDimensionRequest:
      description: Deletes the dimensions from the sheet.
      properties:
        range:
          $ref: '#/components/schemas/DimensionRange'
      type: object
    DeleteEmbeddedObjectRequest:
      description: Deletes the embedded object with the given ID.
      properties:
        objectId:
          description: The ID of the embedded object to delete.
          format: int32
          type: integer
      type: object
    DeleteFilterViewRequest:
      description: Deletes a particular filter view.
      properties:
        filterId:
          description: The ID of the filter to delete.
          format: int32
          type: integer
      type: object
    DeleteNamedRangeRequest:
      description: Removes the named range with the given ID from the spreadsheet.
      properties:
        namedRangeId:
          description: The ID of the named range to delete.
          type: string
      type: object
    DeleteProtectedRangeRequest:
      description: Deletes the protected range with the given ID.
      properties:
        protectedRangeId:
          description: The ID of the protected range to delete.
          format: int32
          type: integer
      type: object
    DeleteRangeRequest:
      description: 'Deletes a range of cells, shifting other cells into the deleted area.'
      properties:
        range:
          $ref: '#/components/schemas/GridRange'
        shiftDimension:
          description: |-
            The dimension from which deleted cells will be replaced with.
            If ROWS, existing cells will be shifted upward to
            replace the deleted cells. If COLUMNS, existing cells
            will be shifted left to replace the deleted cells.
          enum:
            - DIMENSION_UNSPECIFIED
            - ROWS
            - COLUMNS
          type: string
      type: object
    DeleteSheetRequest:
      description: Deletes the requested sheet.
      properties:
        sheetId:
          description: The ID of the sheet to delete.
          format: int32
          type: integer
      type: object
    DimensionProperties:
      description: Properties about a dimension.
      properties:
        hiddenByFilter:
          description: |-
            True if this dimension is being filtered.
            This field is read-only.
          type: boolean
        hiddenByUser:
          description: True if this dimension is explicitly hidden.
          type: boolean
        pixelSize:
          description: The height (if a row) or width (if a column) of the dimension in pixels.
          format: int32
          type: integer
      type: object
    DimensionRange:
      description: |-
        A range along a single dimension on a sheet.
        All indexes are zero-based.
        Indexes are half open: the start index is inclusive
        and the end index is exclusive.
        Missing indexes indicate the range is unbounded on that side.
      properties:
        dimension:
          description: The dimension of the span.
          enum:
            - DIMENSION_UNSPECIFIED
            - ROWS
            - COLUMNS
          type: string
        endIndex:
          description: 'The end (exclusive) of the span, or not set if unbounded.'
          format: int32
          type: integer
        sheetId:
          description: The sheet this span is on.
          format: int32
          type: integer
        startIndex:
          description: 'The start (inclusive) of the span, or not set if unbounded.'
          format: int32
          type: integer
      type: object
    DuplicateFilterViewRequest:
      description: Duplicates a particular filter view.
      properties:
        filterId:
          description: The ID of the filter being duplicated.
          format: int32
          type: integer
      type: object
    DuplicateFilterViewResponse:
      description: The result of a filter view being duplicated.
      properties:
        filter:
          $ref: '#/components/schemas/FilterView'
      type: object
    DuplicateSheetRequest:
      description: Duplicates the contents of a sheet.
      properties:
        insertSheetIndex:
          description: |-
            The zero-based index where the new sheet should be inserted.
            The index of all sheets after this are incremented.
          format: int32
          type: integer
        newSheetId:
          description: |-
            If set, the ID of the new sheet. If not set, an ID is chosen.
            If set, the ID must not conflict with any existing sheet ID.
            If set, it must be non-negative.
          format: int32
          type: integer
        newSheetName:
          description: 'The name of the new sheet.  If empty, a new name is chosen for you.'
          type: string
        sourceSheetId:
          description: The sheet to duplicate.
          format: int32
          type: integer
      type: object
    DuplicateSheetResponse:
      description: The result of duplicating a sheet.
      properties:
        properties:
          $ref: '#/components/schemas/SheetProperties'
      type: object
    Editors:
      description: The editors of a protected range.
      properties:
        domainUsersCanEdit:
          description: |-
            True if anyone in the document's domain has edit access to the protected
            range.  Domain protection is only supported on documents within a domain.
          type: boolean
        groups:
          description: The email addresses of groups with edit access to the protected range.
          items:
            type: string
          type: array
        users:
          description: The email addresses of users with edit access to the protected range.
          items:
            type: string
          type: array
      type: object
    EmbeddedChart:
      description: A chart embedded in a sheet.
      properties:
        chartId:
          description: The ID of the chart.
          format: int32
          type: integer
        position:
          $ref: '#/components/schemas/EmbeddedObjectPosition'
        spec:
          $ref: '#/components/schemas/ChartSpec'
      type: object
    EmbeddedObjectPosition:
      description: The position of an embedded object such as a chart.
      properties:
        newSheet:
          description: |-
            If true, the embedded object will be put on a new sheet whose ID
            is chosen for you. Used only when writing.
          type: boolean
        overlayPosition:
          $ref: '#/components/schemas/OverlayPosition'
        sheetId:
          description: |-
            The sheet this is on. Set only if the embedded object
            is on its own sheet. Must be non-negative.
          format: int32
          type: integer
      type: object
    ErrorValue:
      description: An error in a cell.
      properties:
        message:
          description: |-
            A message with more information about the error
            (in the spreadsheet's locale).
          type: string
        type:
          description: The type of error.
          enum:
            - ERROR_TYPE_UNSPECIFIED
            - ERROR
            - NULL_VALUE
            - DIVIDE_BY_ZERO
            - VALUE
            - REF
            - NAME
            - NUM
            - N_A
            - LOADING
          type: string
      type: object
    ExtendedValue:
      description: The kinds of value that a cell in a spreadsheet can have.
      properties:
        boolValue:
          description: Represents a boolean value.
          type: boolean
        errorValue:
          $ref: '#/components/schemas/ErrorValue'
        formulaValue:
          description: Represents a formula.
          type: string
        numberValue:
          description: |-
            Represents a double value.
            Note: Dates, Times and DateTimes are represented as doubles in
            "serial number" format.
          format: double
          type: number
        stringValue:
          description: |-
            Represents a string value.
            Leading single quotes are not included. For example, if the user typed
            `'123` into the UI, this would be represented as a `stringValue` of
            `"123"`.
          type: string
      type: object
    FilterCriteria:
      description: Criteria for showing/hiding rows in a filter or filter view.
      properties:
        condition:
          $ref: '#/components/schemas/BooleanCondition'
        hiddenValues:
          description: Values that should be hidden.
          items:
            type: string
          type: array
      type: object
    FilterView:
      description: A filter view.
      properties:
        criteria:
          additionalProperties:
            $ref: '#/components/schemas/FilterCriteria'
          description: |-
            The criteria for showing/hiding values per column.
            The map's key is the column index, and the value is the criteria for
            that column.
          type: object
        filterViewId:
          description: The ID of the filter view.
          format: int32
          type: integer
        namedRangeId:
          description: |-
            The named range this filter view is backed by, if any.

            When writing, only one of range or named_range_id
            may be set.
          type: string
        range:
          $ref: '#/components/schemas/GridRange'
        sortSpecs:
          description: |-
            The sort order per column. Later specifications are used when values
            are equal in the earlier specifications.
          items:
            $ref: '#/components/schemas/SortSpec'
          type: array
        title:
          description: The name of the filter view.
          type: string
      type: object
    FindReplaceRequest:
      description: 'Finds and replaces data in cells over a range, sheet, or all sheets.'
      properties:
        allSheets:
          description: True to find/replace over all sheets.
          type: boolean
        find:
          description: The value to search.
          type: string
        includeFormulas:
          description: |-
            True if the search should include cells with formulas.
            False to skip cells with formulas.
          type: boolean
        matchCase:
          description: True if the search is case sensitive.
          type: boolean
        matchEntireCell:
          description: True if the find value should match the entire cell.
          type: boolean
        range:
          $ref: '#/components/schemas/GridRange'
        replacement:
          description: The value to use as the replacement.
          type: string
        searchByRegex:
          description: |-
            True if the find value is a regex.
            The regular expression and replacement should follow Java regex rules
            at https://docs.oracle.com/javase/8/docs/api/java/util/regex/Pattern.html.
            The replacement string is allowed to refer to capturing groups.
            For example, if one cell has the contents `"Google Sheets"` and another
            has `"Google Docs"`, then searching for `"o.* (.*)"` with a replacement of
            `"$1 Rocks"` would change the contents of the cells to
            `"GSheets Rocks"` and `"GDocs Rocks"` respectively.
          type: boolean
        sheetId:
          description: The sheet to find/replace over.
          format: int32
          type: integer
      type: object
    FindReplaceResponse:
      description: The result of the find/replace.
      properties:
        formulasChanged:
          description: The number of formula cells changed.
          format: int32
          type: integer
        occurrencesChanged:
          description: |-
            The number of occurrences (possibly multiple within a cell) changed.
            For example, if replacing `"e"` with `"o"` in `"Google Sheets"`, this would
            be `"3"` because `"Google Sheets"` -> `"Googlo Shoots"`.
          format: int32
          type: integer
        rowsChanged:
          description: The number of rows changed.
          format: int32
          type: integer
        sheetsChanged:
          description: The number of sheets changed.
          format: int32
          type: integer
        valuesChanged:
          description: The number of non-formula cells changed.
          format: int32
          type: integer
      type: object
    GradientRule:
      description: |-
        A rule that applies a gradient color scale format, based on
        the interpolation points listed. The format of a cell will vary
        based on its contents as compared to the values of the interpolation
        points.
      properties:
        maxpoint:
          $ref: '#/components/schemas/InterpolationPoint'
        midpoint:
          $ref: '#/components/schemas/InterpolationPoint'
        minpoint:
          $ref: '#/components/schemas/InterpolationPoint'
      type: object
    GridCoordinate:
      description: |-
        A coordinate in a sheet.
        All indexes are zero-based.
      properties:
        columnIndex:
          description: The column index of the coordinate.
          format: int32
          type: integer
        rowIndex:
          description: The row index of the coordinate.
          format: int32
          type: integer
        sheetId:
          description: The sheet this coordinate is on.
          format: int32
          type: integer
      type: object
    GridData:
      description: 'Data in the grid, as well as metadata about the dimensions.'
      properties:
        columnMetadata:
          description: |-
            Metadata about the requested columns in the grid, starting with the column
            in start_column.
          items:
            $ref: '#/components/schemas/DimensionProperties'
          type: array
        rowData:
          description: |-
            The data in the grid, one entry per row,
            starting with the row in startRow.
            The values in RowData will correspond to columns starting
            at start_column.
          items:
            $ref: '#/components/schemas/RowData'
          type: array
        rowMetadata:
          description: |-
            Metadata about the requested rows in the grid, starting with the row
            in start_row.
          items:
            $ref: '#/components/schemas/DimensionProperties'
          type: array
        startColumn:
          description: 'The first column this GridData refers to, zero-based.'
          format: int32
          type: integer
        startRow:
          description: 'The first row this GridData refers to, zero-based.'
          format: int32
          type: integer
      type: object
    GridProperties:
      description: Properties of a grid.
      properties:
        columnCount:
          description: The number of columns in the grid.
          format: int32
          type: integer
        frozenColumnCount:
          description: The number of columns that are frozen in the grid.
          format: int32
          type: integer
        frozenRowCount:
          description: The number of rows that are frozen in the grid.
          format: int32
          type: integer
        hideGridlines:
          description: True if the grid isn't showing gridlines in the UI.
          type: boolean
        rowCount:
          description: The number of rows in the grid.
          format: int32
          type: integer
      type: object
    GridRange:
      description: |-
        A range on a sheet.
        All indexes are zero-based.
        Indexes are half open, e.g the start index is inclusive
        and the end index is exclusive -- [start_index, end_index).
        Missing indexes indicate the range is unbounded on that side.

        For example, if `"Sheet1"` is sheet ID 0, then:

          `Sheet1!A1:A1 == sheet_id: 0,
                          start_row_index: 0, end_row_index: 1,
                          start_column_index: 0, end_column_index: 1`

          `Sheet1!A3:B4 == sheet_id: 0,
                          start_row_index: 2, end_row_index: 4,
                          start_column_index: 0, end_column_index: 2`

          `Sheet1!A:B == sheet_id: 0,
                        start_column_index: 0, end_column_index: 2`

          `Sheet1!A5:B == sheet_id: 0,
                         start_row_index: 4,
                         start_column_index: 0, end_column_index: 2`

          `Sheet1 == sheet_id:0`

        The start index must always be less than or equal to the end index.
        If the start index equals the end index, then the range is empty.
        Empty ranges are typically not meaningful and are usually rendered in the
        UI as `#REF!`.
      properties:
        endColumnIndex:
          description: 'The end column (exclusive) of the range, or not set if unbounded.'
          format: int32
          type: integer
        endRowIndex:
          description: 'The end row (exclusive) of the range, or not set if unbounded.'
          format: int32
          type: integer
        sheetId:
          description: The sheet this range is on.
          format: int32
          type: integer
        startColumnIndex:
          description: 'The start column (inclusive) of the range, or not set if unbounded.'
          format: int32
          type: integer
        startRowIndex:
          description: 'The start row (inclusive) of the range, or not set if unbounded.'
          format: int32
          type: integer
      type: object
    HistogramChartSpec:
      description: |-
        A <a href="/chart/interactive/docs/gallery/histogram">histogram chart</a>.
        A histogram chart groups data items into bins, displaying each bin as a
        column of stacked items.  Histograms are used to display the distribution
        of a dataset.  Each column of items represents a range into which those
        items fall.  The number of bins can be chosen automatically or specified
        explicitly.
      properties:
        bucketSize:
          description: |-
            By default the bucket size (the range of values stacked in a single
            column) is chosen automatically, but it may be overridden here.
            E.g., A bucket size of 1.5 results in buckets from 0 - 1.5, 1.5 - 3.0, etc.
            Cannot be negative.
            This field is optional.
          format: double
          type: number
        legendPosition:
          description: The position of the chart legend.
          enum:
            - HISTOGRAM_CHART_LEGEND_POSITION_UNSPECIFIED
            - BOTTOM_LEGEND
            - LEFT_LEGEND
            - RIGHT_LEGEND
            - TOP_LEGEND
            - NO_LEGEND
            - INSIDE_LEGEND
          type: string
        outlierPercentile:
          description: |-
            The outlier percentile is used to ensure that outliers do not adversely
            affect the calculation of bucket sizes.  For example, setting an outlier
            percentile of 0.05 indicates that the top and bottom 5% of values when
            calculating buckets.  The values are still included in the chart, they will
            be added to the first or last buckets instead of their own buckets.
            Must be between 0.0 and 0.5.
          format: double
          type: number
        series:
          description: |-
            The series for a histogram may be either a single series of values to be
            bucketed or multiple series, each of the same length, containing the name
            of the series followed by the values to be bucketed for that series.
          items:
            $ref: '#/components/schemas/HistogramSeries'
          type: array
        showItemDividers:
          description: |-
            Whether horizontal divider lines should be displayed between items in each
            column.
          type: boolean
      type: object
    HistogramSeries:
      description: A histogram series containing the series color and data.
      properties:
        barColor:
          $ref: '#/components/schemas/Color'
        data:
          $ref: '#/components/schemas/ChartData'
      type: object
    InsertDimensionRequest:
      description: Inserts rows or columns in a sheet at a particular index.
      properties:
        inheritFromBefore:
          description: |-
            Whether dimension properties should be extended from the dimensions
            before or after the newly inserted dimensions.
            True to inherit from the dimensions before (in which case the start
            index must be greater than 0), and false to inherit from the dimensions
            after.

            For example, if row index 0 has red background and row index 1
            has a green background, then inserting 2 rows at index 1 can inherit
            either the green or red background.  If `inheritFromBefore` is true,
            the two new rows will be red (because the row before the insertion point
            was red), whereas if `inheritFromBefore` is false, the two new rows will
            be green (because the row after the insertion point was green).
          type: boolean
        range:
          $ref: '#/components/schemas/DimensionRange'
      type: object
    InsertRangeRequest:
      description: 'Inserts cells into a range, shifting the existing cells over or down.'
      properties:
        range:
          $ref: '#/components/schemas/GridRange'
        shiftDimension:
          description: |-
            The dimension which will be shifted when inserting cells.
            If ROWS, existing cells will be shifted down.
            If COLUMNS, existing cells will be shifted right.
          enum:
            - DIMENSION_UNSPECIFIED
            - ROWS
            - COLUMNS
          type: string
      type: object
    InterpolationPoint:
      description: |-
        A single interpolation point on a gradient conditional format.
        These pin the gradient color scale according to the color,
        type and value chosen.
      properties:
        color:
          $ref: '#/components/schemas/Color'
        type:
          description: How the value should be interpreted.
          enum:
            - INTERPOLATION_POINT_TYPE_UNSPECIFIED
            - MIN
            - MAX
            - NUMBER
            - PERCENT
            - PERCENTILE
          type: string
        value:
          description: |-
            The value this interpolation point uses.  May be a formula.
            Unused if type is MIN or
            MAX.
          type: string
      type: object
    IterativeCalculationSettings:
      description: |-
        Settings to control how circular dependencies are resolved with iterative
        calculation.
      properties:
        convergenceThreshold:
          description: |-
            When iterative calculation is enabled and successive results differ by
            less than this threshold value, the calculation rounds stop.
          format: double
          type: number
        maxIterations:
          description: |-
            When iterative calculation is enabled, the maximum number of calculation
            rounds to perform.
          format: int32
          type: integer
      type: object
    MergeCellsRequest:
      description: Merges all cells in the range.
      properties:
        mergeType:
          description: How the cells should be merged.
          enum:
            - MERGE_ALL
            - MERGE_COLUMNS
            - MERGE_ROWS
          type: string
        range:
          $ref: '#/components/schemas/GridRange'
      type: object
    MoveDimensionRequest:
      description: Moves one or more rows or columns.
      properties:
        destinationIndex:
          description: |-
            The zero-based start index of where to move the source data to,
            based on the coordinates *before* the source data is removed
            from the grid.  Existing data will be shifted down or right
            (depending on the dimension) to make room for the moved dimensions.
            The source dimensions are removed from the grid, so the
            the data may end up in a different index than specified.

            For example, given `A1..A5` of `0, 1, 2, 3, 4` and wanting to move
            `"1"` and `"2"` to between `"3"` and `"4"`, the source would be
            `ROWS [1..3)`,and the destination index would be `"4"`
            (the zero-based index of row 5).
            The end result would be `A1..A5` of `0, 3, 1, 2, 4`.
          format: int32
          type: integer
        source:
          $ref: '#/components/schemas/DimensionRange'
      type: object
    NamedRange:
      description: A named range.
      properties:
        name:
          description: The name of the named range.
          type: string
        namedRangeId:
          description: The ID of the named range.
          type: string
        range:
          $ref: '#/components/schemas/GridRange'
      type: object
    NumberFormat:
      description: The number format of a cell.
      properties:
        pattern:
          description: |-
            Pattern string used for formatting.  If not set, a default pattern based on
            the user's locale will be used if necessary for the given type.
            See the [Date and Number Formats guide](/sheets/api/guides/formats) for more
            information about the supported patterns.
          type: string
        type:
          description: |-
            The type of the number format.
            When writing, this field must be set.
          enum:
            - NUMBER_FORMAT_TYPE_UNSPECIFIED
            - TEXT
            - NUMBER
            - PERCENT
            - CURRENCY
            - DATE
            - TIME
            - DATE_TIME
            - SCIENTIFIC
          type: string
      type: object
    OrgChartSpec:
      description: |-
        An <a href="/chart/interactive/docs/gallery/orgchart">org chart</a>.
        Org charts require a unique set of labels in labels and may
        optionally include parent_labels and tooltips.
        parent_labels contain, for each node, the label identifying the parent
        node.  tooltips contain, for each node, an optional tooltip.

        For example, to describe an OrgChart with Alice as the CEO, Bob as the
        President (reporting to Alice) and Cathy as VP of Sales (also reporting to
        Alice), have labels contain "Alice", "Bob", "Cathy",
        parent_labels contain "", "Alice", "Alice" and tooltips contain
        "CEO", "President", "VP Sales".
      properties:
        labels:
          $ref: '#/components/schemas/ChartData'
        nodeColor:
          $ref: '#/components/schemas/Color'
        nodeSize:
          description: The size of the org chart nodes.
          enum:
            - ORG_CHART_LABEL_SIZE_UNSPECIFIED
            - SMALL
            - MEDIUM
            - LARGE
          type: string
        parentLabels:
          $ref: '#/components/schemas/ChartData'
        selectedNodeColor:
          $ref: '#/components/schemas/Color'
        tooltips:
          $ref: '#/components/schemas/ChartData'
      type: object
    OverlayPosition:
      description: The location an object is overlaid on top of a grid.
      properties:
        anchorCell:
          $ref: '#/components/schemas/GridCoordinate'
        heightPixels:
          description: 'The height of the object, in pixels. Defaults to 371.'
          format: int32
          type: integer
        offsetXPixels:
          description: |-
            The horizontal offset, in pixels, that the object is offset
            from the anchor cell.
          format: int32
          type: integer
        offsetYPixels:
          description: |-
            The vertical offset, in pixels, that the object is offset
            from the anchor cell.
          format: int32
          type: integer
        widthPixels:
          description: 'The width of the object, in pixels. Defaults to 600.'
          format: int32
          type: integer
      type: object
    Padding:
      description: |-
        The amount of padding around the cell, in pixels.
        When updating padding, every field must be specified.
      properties:
        bottom:
          description: The bottom padding of the cell.
          format: int32
          type: integer
        left:
          description: The left padding of the cell.
          format: int32
          type: integer
        right:
          description: The right padding of the cell.
          format: int32
          type: integer
        top:
          description: The top padding of the cell.
          format: int32
          type: integer
      type: object
    PasteDataRequest:
      description: Inserts data into the spreadsheet starting at the specified coordinate.
      properties:
        coordinate:
          $ref: '#/components/schemas/GridCoordinate'
        data:
          description: The data to insert.
          type: string
        delimiter:
          description: The delimiter in the data.
          type: string
        html:
          description: True if the data is HTML.
          type: boolean
        type:
          description: How the data should be pasted.
          enum:
            - PASTE_NORMAL
            - PASTE_VALUES
            - PASTE_FORMAT
            - PASTE_NO_BORDERS
            - PASTE_FORMULA
            - PASTE_DATA_VALIDATION
            - PASTE_CONDITIONAL_FORMATTING
          type: string
      type: object
    PieChartSpec:
      description: A <a href="/chart/interactive/docs/gallery/piechart">pie chart</a>.
      properties:
        domain:
          $ref: '#/components/schemas/ChartData'
        legendPosition:
          description: Where the legend of the pie chart should be drawn.
          enum:
            - PIE_CHART_LEGEND_POSITION_UNSPECIFIED
            - BOTTOM_LEGEND
            - LEFT_LEGEND
            - RIGHT_LEGEND
            - TOP_LEGEND
            - NO_LEGEND
            - LABELED_LEGEND
          type: string
        pieHole:
          description: The size of the hole in the pie chart.
          format: double
          type: number
        series:
          $ref: '#/components/schemas/ChartData'
        threeDimensional:
          description: True if the pie is three dimensional.
          type: boolean
      type: object
    PivotFilterCriteria:
      description: Criteria for showing/hiding rows in a pivot table.
      properties:
        visibleValues:
          description: Values that should be included.  Values not listed here are excluded.
          items:
            type: string
          type: array
      type: object
    PivotGroup:
      description: A single grouping (either row or column) in a pivot table.
      properties:
        showTotals:
          description: True if the pivot table should include the totals for this grouping.
          type: boolean
        sortOrder:
          description: The order the values in this group should be sorted.
          enum:
            - SORT_ORDER_UNSPECIFIED
            - ASCENDING
            - DESCENDING
          type: string
        sourceColumnOffset:
          description: |-
            The column offset of the source range that this grouping is based on.

            For example, if the source was `C10:E15`, a `sourceColumnOffset` of `0`
            means this group refers to column `C`, whereas the offset `1` would refer
            to column `D`.
          format: int32
          type: integer
        valueBucket:
          $ref: '#/components/schemas/PivotGroupSortValueBucket'
        valueMetadata:
          description: Metadata about values in the grouping.
          items:
            $ref: '#/components/schemas/PivotGroupValueMetadata'
          type: array
      type: object
    PivotGroupSortValueBucket:
      description: Information about which values in a pivot group should be used for sorting.
      properties:
        buckets:
          description: |-
            Determines the bucket from which values are chosen to sort.

            For example, in a pivot table with one row group & two column groups,
            the row group can list up to two values. The first value corresponds
            to a value within the first column group, and the second value
            corresponds to a value in the second column group.  If no values
            are listed, this would indicate that the row should be sorted according
            to the "Grand Total" over the column groups. If a single value is listed,
            this would correspond to using the "Total" of that bucket.
          items:
            $ref: '#/components/schemas/ExtendedValue'
          type: array
        valuesIndex:
          description: |-
            The offset in the PivotTable.values list which the values in this
            grouping should be sorted by.
          format: int32
          type: integer
      type: object
    PivotGroupValueMetadata:
      description: Metadata about a value in a pivot grouping.
      properties:
        collapsed:
          description: True if the data corresponding to the value is collapsed.
          type: boolean
        value:
          $ref: '#/components/schemas/ExtendedValue'
      type: object
    PivotTable:
      description: A pivot table.
      properties:
        columns:
          description: Each column grouping in the pivot table.
          items:
            $ref: '#/components/schemas/PivotGroup'
          type: array
        criteria:
          additionalProperties:
            $ref: '#/components/schemas/PivotFilterCriteria'
          description: |-
            An optional mapping of filters per source column offset.

            The filters will be applied before aggregating data into the pivot table.
            The map's key is the column offset of the source range that you want to
            filter, and the value is the criteria for that column.

            For example, if the source was `C10:E15`, a key of `0` will have the filter
            for column `C`, whereas the key `1` is for column `D`.
          type: object
        rows:
          description: Each row grouping in the pivot table.
          items:
            $ref: '#/components/schemas/PivotGroup'
          type: array
        source:
          $ref: '#/components/schemas/GridRange'
        valueLayout:
          description: |-
            Whether values should be listed horizontally (as columns)
            or vertically (as rows).
          enum:
            - HORIZONTAL
            - VERTICAL
          type: string
        values:
          description: A list of values to include in the pivot table.
          items:
            $ref: '#/components/schemas/PivotValue'
          type: array
      type: object
    PivotValue:
      description: The definition of how a value in a pivot table should be calculated.
      properties:
        formula:
          description: |-
            A custom formula to calculate the value.  The formula must start
            with an `=` character.
          type: string
        name:
          description: |-
            A name to use for the value. This is only used if formula was set.
            Otherwise, the column name is used.
          type: string
        sourceColumnOffset:
          description: |-
            The column offset of the source range that this value reads from.

            For example, if the source was `C10:E15`, a `sourceColumnOffset` of `0`
            means this value refers to column `C`, whereas the offset `1` would
            refer to column `D`.
          format: int32
          type: integer
        summarizeFunction:
          description: |-
            A function to summarize the value.
            If formula is set, the only supported values are
            SUM and
            CUSTOM.
            If sourceColumnOffset is set, then `CUSTOM`
            is not supported.
          enum:
            - PIVOT_STANDARD_VALUE_FUNCTION_UNSPECIFIED
            - SUM
            - COUNTA
            - COUNT
            - COUNTUNIQUE
            - AVERAGE
            - MAX
            - MIN
            - MEDIAN
            - PRODUCT
            - STDEV
            - STDEVP
            - VAR
            - VARP
            - CUSTOM
          type: string
      type: object
    ProtectedRange:
      description: A protected range.
      properties:
        description:
          description: The description of this protected range.
          type: string
        editors:
          $ref: '#/components/schemas/Editors'
        namedRangeId:
          description: |-
            The named range this protected range is backed by, if any.

            When writing, only one of range or named_range_id
            may be set.
          type: string
        protectedRangeId:
          description: |-
            The ID of the protected range.
            This field is read-only.
          format: int32
          type: integer
        range:
          $ref: '#/components/schemas/GridRange'
        requestingUserCanEdit:
          description: |-
            True if the user who requested this protected range can edit the
            protected area.
            This field is read-only.
          type: boolean
        unprotectedRanges:
          description: |-
            The list of unprotected ranges within a protected sheet.
            Unprotected ranges are only supported on protected sheets.
          items:
            $ref: '#/components/schemas/GridRange'
          type: array
        warningOnly:
          description: |-
            True if this protected range will show a warning when editing.
            Warning-based protection means that every user can edit data in the
            protected range, except editing will prompt a warning asking the user
            to confirm the edit.

            When writing: if this field is true, then editors is ignored.
            Additionally, if this field is changed from true to false and the
            `editors` field is not set (nor included in the field mask), then
            the editors will be set to all the editors in the document.
          type: boolean
      type: object
    RandomizeRangeRequest:
      description: Randomizes the order of the rows in a range.
      properties:
        range:
          $ref: '#/components/schemas/GridRange'
      type: object
    RepeatCellRequest:
      description: |-
        Updates all cells in the range to the values in the given Cell object.
        Only the fields listed in the fields field are updated; others are
        unchanged.

        If writing a cell with a formula, the formula's ranges will automatically
        increment for each field in the range.
        For example, if writing a cell with formula `=A1` into range B2:C4,
        B2 would be `=A1`, B3 would be `=A2`, B4 would be `=A3`,
        C2 would be `=B1`, C3 would be `=B2`, C4 would be `=B3`.

        To keep the formula's ranges static, use the `$` indicator.
        For example, use the formula `=$A$1` to prevent both the row and the
        column from incrementing.
      properties:
        cell:
          $ref: '#/components/schemas/CellData'
        fields:
          description: |-
            The fields that should be updated.  At least one field must be specified.
            The root `cell` is implied and should not be specified.
            A single `"*"` can be used as short-hand for listing every field.
          format: google-fieldmask
          type: string
        range:
          $ref: '#/components/schemas/GridRange'
      type: object
    Request:
      description: A single kind of update to apply to a spreadsheet.
      properties:
        addBanding:
          $ref: '#/components/schemas/AddBandingRequest'
        addChart:
          $ref: '#/components/schemas/AddChartRequest'
        addConditionalFormatRule:
          $ref: '#/components/schemas/AddConditionalFormatRuleRequest'
        addFilterView:
          $ref: '#/components/schemas/AddFilterViewRequest'
        addNamedRange:
          $ref: '#/components/schemas/AddNamedRangeRequest'
        addProtectedRange:
          $ref: '#/components/schemas/AddProtectedRangeRequest'
        addSheet:
          $ref: '#/components/schemas/AddSheetRequest'
        appendCells:
          $ref: '#/components/schemas/AppendCellsRequest'
        appendDimension:
          $ref: '#/components/schemas/AppendDimensionRequest'
        autoFill:
          $ref: '#/components/schemas/AutoFillRequest'
        autoResizeDimensions:
          $ref: '#/components/schemas/AutoResizeDimensionsRequest'
        clearBasicFilter:
          $ref: '#/components/schemas/ClearBasicFilterRequest'
        copyPaste:
          $ref: '#/components/schemas/CopyPasteRequest'
        cutPaste:
          $ref: '#/components/schemas/CutPasteRequest'
        deleteBanding:
          $ref: '#/components/schemas/DeleteBandingRequest'
        deleteConditionalFormatRule:
          $ref: '#/components/schemas/DeleteConditionalFormatRuleRequest'
        deleteDimension:
          $ref: '#/components/schemas/DeleteDimensionRequest'
        deleteEmbeddedObject:
          $ref: '#/components/schemas/DeleteEmbeddedObjectRequest'
        deleteFilterView:
          $ref: '#/components/schemas/DeleteFilterViewRequest'
        deleteNamedRange:
          $ref: '#/components/schemas/DeleteNamedRangeRequest'
        deleteProtectedRange:
          $ref: '#/components/schemas/DeleteProtectedRangeRequest'
        deleteRange:
          $ref: '#/components/schemas/DeleteRangeRequest'
        deleteSheet:
          $ref: '#/components/schemas/DeleteSheetRequest'
        duplicateFilterView:
          $ref: '#/components/schemas/DuplicateFilterViewRequest'
        duplicateSheet:
          $ref: '#/components/schemas/DuplicateSheetRequest'
        findReplace:
          $ref: '#/components/schemas/FindReplaceRequest'
        insertDimension:
          $ref: '#/components/schemas/InsertDimensionRequest'
        insertRange:
          $ref: '#/components/schemas/InsertRangeRequest'
        mergeCells:
          $ref: '#/components/schemas/MergeCellsRequest'
        moveDimension:
          $ref: '#/components/schemas/MoveDimensionRequest'
        pasteData:
          $ref: '#/components/schemas/PasteDataRequest'
        randomizeRange:
          $ref: '#/components/schemas/RandomizeRangeRequest'
        repeatCell:
          $ref: '#/components/schemas/RepeatCellRequest'
        setBasicFilter:
          $ref: '#/components/schemas/SetBasicFilterRequest'
        setDataValidation:
          $ref: '#/components/schemas/SetDataValidationRequest'
        sortRange:
          $ref: '#/components/schemas/SortRangeRequest'
        textToColumns:
          $ref: '#/components/schemas/TextToColumnsRequest'
        unmergeCells:
          $ref: '#/components/schemas/UnmergeCellsRequest'
        updateBanding:
          $ref: '#/components/schemas/UpdateBandingRequest'
        updateBorders:
          $ref: '#/components/schemas/UpdateBordersRequest'
        updateCells:
          $ref: '#/components/schemas/UpdateCellsRequest'
        updateChartSpec:
          $ref: '#/components/schemas/UpdateChartSpecRequest'
        updateConditionalFormatRule:
          $ref: '#/components/schemas/UpdateConditionalFormatRuleRequest'
        updateDimensionProperties:
          $ref: '#/components/schemas/UpdateDimensionPropertiesRequest'
        updateEmbeddedObjectPosition:
          $ref: '#/components/schemas/UpdateEmbeddedObjectPositionRequest'
        updateFilterView:
          $ref: '#/components/schemas/UpdateFilterViewRequest'
        updateNamedRange:
          $ref: '#/components/schemas/UpdateNamedRangeRequest'
        updateProtectedRange:
          $ref: '#/components/schemas/UpdateProtectedRangeRequest'
        updateSheetProperties:
          $ref: '#/components/schemas/UpdateSheetPropertiesRequest'
        updateSpreadsheetProperties:
          $ref: '#/components/schemas/UpdateSpreadsheetPropertiesRequest'
      type: object
    Response:
      description: A single response from an update.
      properties:
        addBanding:
          $ref: '#/components/schemas/AddBandingResponse'
        addChart:
          $ref: '#/components/schemas/AddChartResponse'
        addFilterView:
          $ref: '#/components/schemas/AddFilterViewResponse'
        addNamedRange:
          $ref: '#/components/schemas/AddNamedRangeResponse'
        addProtectedRange:
          $ref: '#/components/schemas/AddProtectedRangeResponse'
        addSheet:
          $ref: '#/components/schemas/AddSheetResponse'
        deleteConditionalFormatRule:
          $ref: '#/components/schemas/DeleteConditionalFormatRuleResponse'
        duplicateFilterView:
          $ref: '#/components/schemas/DuplicateFilterViewResponse'
        duplicateSheet:
          $ref: '#/components/schemas/DuplicateSheetResponse'
        findReplace:
          $ref: '#/components/schemas/FindReplaceResponse'
        updateConditionalFormatRule:
          $ref: '#/components/schemas/UpdateConditionalFormatRuleResponse'
        updateEmbeddedObjectPosition:
          $ref: '#/components/schemas/UpdateEmbeddedObjectPositionResponse'
      type: object
    RowData:
      description: Data about each cell in a row.
      properties:
        values:
          description: 'The values in the row, one per column.'
          items:
            $ref: '#/components/schemas/CellData'
          type: array
      type: object
    SetBasicFilterRequest:
      description: Sets the basic filter associated with a sheet.
      properties:
        filter:
          $ref: '#/components/schemas/BasicFilter'
      type: object
    SetDataValidationRequest:
      description: |-
        Sets a data validation rule to every cell in the range.
        To clear validation in a range, call this with no rule specified.
      properties:
        range:
          $ref: '#/components/schemas/GridRange'
        rule:
          $ref: '#/components/schemas/DataValidationRule'
      type: object
    Sheet:
      description: A sheet in a spreadsheet.
      properties:
        bandedRanges:
          description: The banded (i.e. alternating colors) ranges on this sheet.
          items:
            $ref: '#/components/schemas/BandedRange'
          type: array
        basicFilter:
          $ref: '#/components/schemas/BasicFilter'
        charts:
          description: The specifications of every chart on this sheet.
          items:
            $ref: '#/components/schemas/EmbeddedChart'
          type: array
        conditionalFormats:
          description: The conditional format rules in this sheet.
          items:
            $ref: '#/components/schemas/ConditionalFormatRule'
          type: array
        data:
          description: |-
            Data in the grid, if this is a grid sheet.
            The number of GridData objects returned is dependent on the number of
            ranges requested on this sheet. For example, if this is representing
            `Sheet1`, and the spreadsheet was requested with ranges
            `Sheet1!A1:C10` and `Sheet1!D15:E20`, then the first GridData will have a
            startRow/startColumn of `0`,
            while the second one will have `startRow 14` (zero-based row 15),
            and `startColumn 3` (zero-based column D).
          items:
            $ref: '#/components/schemas/GridData'
          type: array
        filterViews:
          description: The filter views in this sheet.
          items:
            $ref: '#/components/schemas/FilterView'
          type: array
        merges:
          description: The ranges that are merged together.
          items:
            $ref: '#/components/schemas/GridRange'
          type: array
        properties:
          $ref: '#/components/schemas/SheetProperties'
        protectedRanges:
          description: The protected ranges in this sheet.
          items:
            $ref: '#/components/schemas/ProtectedRange'
          type: array
      type: object
    SheetProperties:
      description: Properties of a sheet.
      properties:
        gridProperties:
          $ref: '#/components/schemas/GridProperties'
        hidden:
          description: 'True if the sheet is hidden in the UI, false if it''s visible.'
          type: boolean
        index:
          description: |-
            The index of the sheet within the spreadsheet.
            When adding or updating sheet properties, if this field
            is excluded then the sheet will be added or moved to the end
            of the sheet list. When updating sheet indices or inserting
            sheets, movement is considered in "before the move" indexes.
            For example, if there were 3 sheets (S1, S2, S3) in order to
            move S1 ahead of S2 the index would have to be set to 2. A sheet
            index update request will be ignored if the requested index is
            identical to the sheets current index or if the requested new
            index is equal to the current sheet index + 1.
          format: int32
          type: integer
        rightToLeft:
          description: True if the sheet is an RTL sheet instead of an LTR sheet.
          type: boolean
        sheetId:
          description: |-
            The ID of the sheet. Must be non-negative.
            This field cannot be changed once set.
          format: int32
          type: integer
        sheetType:
          description: |-
            The type of sheet. Defaults to GRID.
            This field cannot be changed once set.
          enum:
            - SHEET_TYPE_UNSPECIFIED
            - GRID
            - OBJECT
          type: string
        tabColor:
          $ref: '#/components/schemas/Color'
        title:
          description: The name of the sheet.
          type: string
      type: object
    SortRangeRequest:
      description: Sorts data in rows based on a sort order per column.
      properties:
        range:
          $ref: '#/components/schemas/GridRange'
        sortSpecs:
          description: |-
            The sort order per column. Later specifications are used when values
            are equal in the earlier specifications.
          items:
            $ref: '#/components/schemas/SortSpec'
          type: array
      type: object
    SortSpec:
      description: A sort order associated with a specific column or row.
      properties:
        dimensionIndex:
          description: The dimension the sort should be applied to.
          format: int32
          type: integer
        sortOrder:
          description: The order data should be sorted.
          enum:
            - SORT_ORDER_UNSPECIFIED
            - ASCENDING
            - DESCENDING
          type: string
      type: object
    SourceAndDestination:
      description: A combination of a source range and how to extend that source.
      properties:
        dimension:
          description: The dimension that data should be filled into.
          enum:
            - DIMENSION_UNSPECIFIED
            - ROWS
            - COLUMNS
          type: string
        fillLength:
          description: |-
            The number of rows or columns that data should be filled into.
            Positive numbers expand beyond the last row or last column
            of the source.  Negative numbers expand before the first row
            or first column of the source.
          format: int32
          type: integer
        source:
          $ref: '#/components/schemas/GridRange'
      type: object
    Spreadsheet:
      description: Resource that represents a spreadsheet.
      properties:
        namedRanges:
          description: The named ranges defined in a spreadsheet.
          items:
            $ref: '#/components/schemas/NamedRange'
          type: array
        properties:
          $ref: '#/components/schemas/SpreadsheetProperties'
        sheets:
          description: The sheets that are part of a spreadsheet.
          items:
            $ref: '#/components/schemas/Sheet'
          type: array
        spreadsheetId:
          description: |-
            The ID of the spreadsheet.
            This field is read-only.
          type: string
        spreadsheetUrl:
          description: |-
            The url of the spreadsheet.
            This field is read-only.
          type: string
      type: object
    SpreadsheetProperties:
      description: Properties of a spreadsheet.
      properties:
        autoRecalc:
          description: The amount of time to wait before volatile functions are recalculated.
          enum:
            - RECALCULATION_INTERVAL_UNSPECIFIED
            - ON_CHANGE
            - MINUTE
            - HOUR
          type: string
        defaultFormat:
          $ref: '#/components/schemas/CellFormat'
        iterativeCalculationSettings:
          $ref: '#/components/schemas/IterativeCalculationSettings'
        locale:
          description: |-
            The locale of the spreadsheet in one of the following formats:

            * an ISO 639-1 language code such as `en`

            * an ISO 639-2 language code such as `fil`, if no 639-1 code exists

            * a combination of the ISO language code and country code, such as `en_US`

            Note: when updating this field, not all locales/languages are supported.
          type: string
        timeZone:
          description: |-
            The time zone of the spreadsheet, in CLDR format such as
            `America/New_York`. If the time zone isn't recognized, this may
            be a custom time zone such as `GMT-07:00`.
          type: string
        title:
          description: The title of the spreadsheet.
          type: string
      type: object
    TextFormat:
      description: |-
        The format of a run of text in a cell.
        Absent values indicate that the field isn't specified.
      properties:
        bold:
          description: True if the text is bold.
          type: boolean
        fontFamily:
          description: The font family.
          type: string
        fontSize:
          description: The size of the font.
          format: int32
          type: integer
        foregroundColor:
          $ref: '#/components/schemas/Color'
        italic:
          description: True if the text is italicized.
          type: boolean
        strikethrough:
          description: True if the text has a strikethrough.
          type: boolean
        underline:
          description: True if the text is underlined.
          type: boolean
      type: object
    TextFormatRun:
      description: |-
        A run of a text format. The format of this run continues until the start
        index of the next run.
        When updating, all fields must be set.
      properties:
        format:
          $ref: '#/components/schemas/TextFormat'
        startIndex:
          description: The character index where this run starts.
          format: int32
          type: integer
      type: object
    TextRotation:
      description: The rotation applied to text in a cell.
      properties:
        angle:
          description: |-
            The angle between the standard orientation and the desired orientation.
            Measured in degrees. Valid values are between -90 and 90. Positive
            angles are angled upwards, negative are angled downwards.

            Note: For LTR text direction positive angles are in the counterclockwise
            direction, whereas for RTL they are in the clockwise direction
          format: int32
          type: integer
        vertical:
          description: |-
            If true, text reads top to bottom, but the orientation of individual
            characters is unchanged.
            For example:

                | V |
                | e |
                | r |
                | t |
                | i |
                | c |
                | a |
                | l |
          type: boolean
      type: object
    TextToColumnsRequest:
      description: |-
        Splits a column of text into multiple columns,
        based on a delimiter in each cell.
      properties:
        delimiter:
          description: |-
            The delimiter to use. Used only if delimiterType is
            CUSTOM.
          type: string
        delimiterType:
          description: The delimiter type to use.
          enum:
            - DELIMITER_TYPE_UNSPECIFIED
            - COMMA
            - SEMICOLON
            - PERIOD
            - SPACE
            - CUSTOM
          type: string
        source:
          $ref: '#/components/schemas/GridRange'
      type: object
    UnmergeCellsRequest:
      description: Unmerges cells in the given range.
      properties:
        range:
          $ref: '#/components/schemas/GridRange'
      type: object
    UpdateBandingRequest:
      description: Updates properties of the supplied banded range.
      properties:
        bandedRange:
          $ref: '#/components/schemas/BandedRange'
        fields:
          description: |-
            The fields that should be updated.  At least one field must be specified.
            The root `bandedRange` is implied and should not be specified.
            A single `"*"` can be used as short-hand for listing every field.
          format: google-fieldmask
          type: string
      type: object
    UpdateBordersRequest:
      description: |-
        Updates the borders of a range.
        If a field is not set in the request, that means the border remains as-is.
        For example, with two subsequent UpdateBordersRequest:

         1. range: A1:A5 `{ top: RED, bottom: WHITE }`
         2. range: A1:A5 `{ left: BLUE }`

        That would result in A1:A5 having a borders of
        `{ top: RED, bottom: WHITE, left: BLUE }`.
        If you want to clear a border, explicitly set the style to
        NONE.
      properties:
        bottom:
          $ref: '#/components/schemas/Border'
        innerHorizontal:
          $ref: '#/components/schemas/Border'
        innerVertical:
          $ref: '#/components/schemas/Border'
        left:
          $ref: '#/components/schemas/Border'
        range:
          $ref: '#/components/schemas/GridRange'
        right:
          $ref: '#/components/schemas/Border'
        top:
          $ref: '#/components/schemas/Border'
      type: object
    UpdateCellsRequest:
      description: Updates all cells in a range with new data.
      properties:
        fields:
          description: |-
            The fields of CellData that should be updated.
            At least one field must be specified.
            The root is the CellData; 'row.values.' should not be specified.
            A single `"*"` can be used as short-hand for listing every field.
          format: google-fieldmask
          type: string
        range:
          $ref: '#/components/schemas/GridRange'
        rows:
          description: The data to write.
          items:
            $ref: '#/components/schemas/RowData'
          type: array
        start:
          $ref: '#/components/schemas/GridCoordinate'
      type: object
    UpdateChartSpecRequest:
      description: |-
        Updates a chart's specifications.
        (This does not move or resize a chart. To move or resize a chart, use
         UpdateEmbeddedObjectPositionRequest.)
      properties:
        chartId:
          description: The ID of the chart to update.
          format: int32
          type: integer
        spec:
          $ref: '#/components/schemas/ChartSpec'
      type: object
    UpdateConditionalFormatRuleRequest:
      description: |-
        Updates a conditional format rule at the given index,
        or moves a conditional format rule to another index.
      properties:
        index:
          description: The zero-based index of the rule that should be replaced or moved.
          format: int32
          type: integer
        newIndex:
          description: The zero-based new index the rule should end up at.
          format: int32
          type: integer
        rule:
          $ref: '#/components/schemas/ConditionalFormatRule'
        sheetId:
          description: |-
            The sheet of the rule to move.  Required if new_index is set,
            unused otherwise.
          format: int32
          type: integer
      type: object
    UpdateConditionalFormatRuleResponse:
      description: The result of updating a conditional format rule.
      properties:
        newIndex:
          description: The index of the new rule.
          format: int32
          type: integer
        newRule:
          $ref: '#/components/schemas/ConditionalFormatRule'
        oldIndex:
          description: |-
            The old index of the rule. Not set if a rule was replaced
            (because it is the same as new_index).
          format: int32
          type: integer
        oldRule:
          $ref: '#/components/schemas/ConditionalFormatRule'
      type: object
    UpdateDimensionPropertiesRequest:
      description: Updates properties of dimensions within the specified range.
      properties:
        fields:
          description: |-
            The fields that should be updated.  At least one field must be specified.
            The root `properties` is implied and should not be specified.
            A single `"*"` can be used as short-hand for listing every field.
          format: google-fieldmask
          type: string
        properties:
          $ref: '#/components/schemas/DimensionProperties'
        range:
          $ref: '#/components/schemas/DimensionRange'
      type: object
    UpdateEmbeddedObjectPositionRequest:
      description: |-
        Update an embedded object's position (such as a moving or resizing a
        chart or image).
      properties:
        fields:
          description: |-
            The fields of OverlayPosition
            that should be updated when setting a new position. Used only if
            newPosition.overlayPosition
            is set, in which case at least one field must
            be specified.  The root `newPosition.overlayPosition` is implied and
            should not be specified.
            A single `"*"` can be used as short-hand for listing every field.
          format: google-fieldmask
          type: string
        newPosition:
          $ref: '#/components/schemas/EmbeddedObjectPosition'
        objectId:
          description: The ID of the object to moved.
          format: int32
          type: integer
      type: object
    UpdateEmbeddedObjectPositionResponse:
      description: The result of updating an embedded object's position.
      properties:
        position:
          $ref: '#/components/schemas/EmbeddedObjectPosition'
      type: object
    UpdateFilterViewRequest:
      description: Updates properties of the filter view.
      properties:
        fields:
          description: |-
            The fields that should be updated.  At least one field must be specified.
            The root `filter` is implied and should not be specified.
            A single `"*"` can be used as short-hand for listing every field.
          format: google-fieldmask
          type: string
        filter:
          $ref: '#/components/schemas/FilterView'
      type: object
    UpdateNamedRangeRequest:
      description: |-
        Updates properties of the named range with the specified
        namedRangeId.
      properties:
        fields:
          description: |-
            The fields that should be updated.  At least one field must be specified.
            The root `namedRange` is implied and should not be specified.
            A single `"*"` can be used as short-hand for listing every field.
          format: google-fieldmask
          type: string
        namedRange:
          $ref: '#/components/schemas/NamedRange'
      type: object
    UpdateProtectedRangeRequest:
      description: |-
        Updates an existing protected range with the specified
        protectedRangeId.
      properties:
        fields:
          description: |-
            The fields that should be updated.  At least one field must be specified.
            The root `protectedRange` is implied and should not be specified.
            A single `"*"` can be used as short-hand for listing every field.
          format: google-fieldmask
          type: string
        protectedRange:
          $ref: '#/components/schemas/ProtectedRange'
      type: object
    UpdateSheetPropertiesRequest:
      description: |-
        Updates properties of the sheet with the specified
        sheetId.
      properties:
        fields:
          description: |-
            The fields that should be updated.  At least one field must be specified.
            The root `properties` is implied and should not be specified.
            A single `"*"` can be used as short-hand for listing every field.
          format: google-fieldmask
          type: string
        properties:
          $ref: '#/components/schemas/SheetProperties'
      type: object
    UpdateSpreadsheetPropertiesRequest:
      description: Updates properties of a spreadsheet.
      properties:
        fields:
          description: |-
            The fields that should be updated.  At least one field must be specified.
            The root 'properties' is implied and should not be specified.
            A single `"*"` can be used as short-hand for listing every field.
          format: google-fieldmask
          type: string
        properties:
          $ref: '#/components/schemas/SpreadsheetProperties'
      type: object
    UpdateValuesResponse:
      description: The response when updating a range of values in a spreadsheet.
      properties:
        spreadsheetId:
          description: The spreadsheet the updates were applied to.
          type: string
        updatedCells:
          description: The number of cells updated.
          format: int32
          type: integer
        updatedColumns:
          description: The number of columns where at least one cell in the column was updated.
          format: int32
          type: integer
        updatedData:
          $ref: '#/components/schemas/ValueRange'
        updatedRange:
          description: The range (in A1 notation) that updates were applied to.
          type: string
        updatedRows:
          description: The number of rows where at least one cell in the row was updated.
          format: int32
          type: integer
      type: object
    ValueRange:
      description: Data within a range of the spreadsheet.
      properties:
        majorDimension:
          description: |-
            The major dimension of the values.

            For output, if the spreadsheet data is: `A1=1,B1=2,A2=3,B2=4`,
            then requesting `range=A1:B2,majorDimension=ROWS` will return
            `[[1,2],[3,4]]`,
            whereas requesting `range=A1:B2,majorDimension=COLUMNS` will return
            `[[1,3],[2,4]]`.

            For input, with `range=A1:B2,majorDimension=ROWS` then `[[1,2],[3,4]]`
            will set `A1=1,B1=2,A2=3,B2=4`. With `range=A1:B2,majorDimension=COLUMNS`
            then `[[1,2],[3,4]]` will set `A1=1,B1=3,A2=2,B2=4`.

            When writing, if this field is not set, it defaults to ROWS.
          enum:
            - DIMENSION_UNSPECIFIED
            - ROWS
            - COLUMNS
          type: string
        range:
          description: |-
            The range the values cover, in A1 notation.
            For output, this range indicates the entire requested range,
            even though the values will exclude trailing rows and columns.
            When appending values, this field represents the range to search for a
            table, after which values will be appended.
          type: string
        values:
          description: |-
            The data that was read or to be written.  This is an array of arrays,
            the outer array representing all the data and each inner array
            representing a major dimension. Each item in the inner array
            corresponds with one cell.

            For output, empty trailing rows and columns will not be included.

            For input, supported value types are: bool, string, and double.
            Null values will be skipped.
            To set a cell to an empty value, set the string value to an empty string.
          items:
            items: {}
            type: array
          type: array
      type: object
  parameters:
    access_token:
      description: OAuth access token.
      in: query
      name: access_token
      schema:
        type: string
    alt:
      description: Data format for response.
      in: query
      name: alt
      schema:
        type: string
        enum:
          - json
          - media
          - proto
        default: json
    bearer_token:
      description: OAuth bearer token.
      in: query
      name: bearer_token
      schema:
        type: string
    callback:
      description: JSONP
      in: query
      name: callback
      schema:
        type: string
    fields:
      description: Selector specifying which fields to include in a partial response.
      in: query
      name: fields
      schema:
        type: string
    key:
      description: 'API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.'
      in: query
      name: key
      schema:
        type: string
    oauth_token:
      description: OAuth 2.0 token for the current user.
      in: query
      name: oauth_token
      schema:
        type: string
    pp:
      description: Pretty-print response.
      in: query
      name: pp
      schema:
        type: boolean
        default: true
    prettyPrint:
      description: Returns response with indentations and line breaks.
      in: query
      name: prettyPrint
      schema:
        type: boolean
        default: true
    quotaUser:
      description: 'Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters.'
      in: query
      name: quotaUser
      schema:
        type: string
    uploadType:
      description: 'Legacy upload protocol for media (e.g. "media", "multipart").'
      in: query
      name: uploadType
      schema:
        type: string
    upload_protocol:
      description: 'Upload protocol for media (e.g. "raw", "multipart").'
      in: query
      name: upload_protocol
      schema:
        type: string
    _.xgafv:
      description: V1 error format.
      in: query
      name: $.xgafv
      schema:
        type: string
        enum:
          - '1'
          - '2'
  requestBodies:
    ValueRange:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ValueRange'
  securitySchemes:
    Oauth2:
      description: Oauth 2.0 implicit authentication
      type: oauth2
      flows:
        implicit:
          authorizationUrl: 'https://accounts.google.com/o/oauth2/auth'
          scopes:
            'https://www.googleapis.com/auth/drive': View and manage the files in your Google Drive
            'https://www.googleapis.com/auth/drive.file': View and manage Google Drive files and folders that you have opened or created with this app
            'https://www.googleapis.com/auth/drive.readonly': View the files in your Google Drive
            'https://www.googleapis.com/auth/spreadsheets': View and manage your spreadsheets in Google Drive
            'https://www.googleapis.com/auth/spreadsheets.readonly': View your Google Spreadsheets
    Oauth2c:
      description: Oauth 2.0 accessCode authentication
      type: oauth2
      flows:
        authorizationCode:
          authorizationUrl: 'https://accounts.google.com/o/oauth2/auth'
          tokenUrl: 'https://accounts.google.com/o/oauth2/token'
          scopes:
            'https://www.googleapis.com/auth/drive': View and manage the files in your Google Drive
            'https://www.googleapis.com/auth/drive.file': View and manage Google Drive files and folders that you have opened or created with this app
            'https://www.googleapis.com/auth/drive.readonly': View the files in your Google Drive
            'https://www.googleapis.com/auth/spreadsheets': View and manage your spreadsheets in Google Drive
            'https://www.googleapis.com/auth/spreadsheets.readonly': View your Google Spreadsheets
